#!/bin/bash
LOG_DATE=$(date +%F)

source /opt/karoshi/serversetup/variables/distro
source /opt/karoshi/server_network/domain_information/domain_name

#Assign variables
read DATA
DATA=$(echo "$DATA" | tr -cd 'A-Za-z0-9\._:\-')
if [ -z "$DATA" ]
then
	exit 101
fi

REMOTE_USER=$(echo "$DATA" | cut -s -d: -f1)
REMOTE_ADDR=$(echo "$DATA" | cut -s -d: -f2)
SERVER=$(echo "$DATA" | cut -s -d: -f3)
DOMAIN=$(echo "$DATA" | cut -s -d: -f4)

if [ -z "$REMOTE_USER" ]
then
	echo "$(date): mailsslcert - Blank remote user" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi
if [ -z "$REMOTE_ADDR" ]
then
	echo "$(date): mailsslcert - Blank remote tcpip address" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi
if [ -z "$SERVER" ]
then
	echo "$(date): mailsslcert - Blank remote server from $REMOTE_ADDR by $REMOTE_USER" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi
if [ -z "$DOMAIN" ]
then
	echo "$(date): mailsslcert - Blank domain from $REMOTE_ADDR by $REMOTE_USER" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi

echo "$(date): mailsslcert - creating a certificate for $DOMAIN from $REMOTE_ADDR by $REMOTE_USER" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"

source /etc/default/locale
COUNTRY=$(echo "$LANG" | cut -d_ -f2 | cut -d. -f1)
STATE=$(cut -d/ -f1 < /etc/timezone)
CITY=$(cut -d/ -f2 < /etc/timezone)
NAME="$HOSTNAME"
EMAILADDRESS=administrator@"$REALM"

rm -f /etc/ssl/root-ca/index.txt
touch /etc/ssl/root-ca/index.txt

if [ -f /etc/ssl/root-ca/signingpassword.secret ]
then
	SigningPassword=$(sed -n 1,1p /etc/ssl/root-ca/signingpassword.secret)
else
	SigningPassword=$(sed -n 1,1p /etc/ldap.secret)
fi

#Revoke the existing certificate.
[ -d /etc/ssl/mail/dovecot.pem ] && openssl ca -revoke dovecot.pem -passin pass:"$SigningPassword"

#Clear existing keys
[ ! -d /etc/ssl/mail ] && mkdir /etc/ssl/mail
[ -f /etc/ssl/mail/dovecot.key ] && rm -f /etc/ssl/mail/dovecot.key
[ -f /etc/ssl/mail/dovecot.pem ] && rm -f /etc/ssl/mail/dovecot.pem
[ -f /etc/ssl/mail/dovecot.req ] && rm -f /etc/ssl/mail/dovecot.req

cd /etc/ssl/mail

echo -e "$COUNTRY\n$STATE\n$CITY\n$NAME\n$DOMAIN\n$DOMAIN\n$EMAILADDRESS\npostfix\n" | openssl req -newkey rsa:4096 -days 3650 -keyout dovecot.key -nodes -out dovecot.req

chmod 0600 /etc/ssl/mail/dovecot.key
chmod 0600 /etc/ssl/mail/dovecot.req

#Create client pem
openssl ca -passin pass:"$SigningPassword" -days 3650 -batch -out dovecot.pem -infiles dovecot.req 

chmod 0600 /etc/ssl/mail/dovecot.pem

cp -f /etc/ssl/mail/dovecot.key /etc/ssl/mail/postfix.key
cp -f /etc/ssl/mail/dovecot.pem /etc/ssl/mail/postfix.pem

if [[ "$SERVER" != $(hostname-fqdn) ]]
then
	#Make sure /etc/ssl/mail exists on the remote server
	ssh -o PasswordAuthentication=no -o ConnectTimeout=3 "$SERVER" '
	[ ! -d /etc/ssl/mail ] && mkdir -p /etc/ssl/mail
	'
	#Copy certificates to the correct server
	scp /etc/ssl/mail/dovecot.key root@"$SERVER:/etc/ssl/mail/" 2>> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	scp /etc/ssl/mail/dovecot.pem root@"$SERVER:/etc/ssl/mail/" 2>> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	scp /etc/ssl/mail/postfix.key root@"$SERVER:/etc/ssl/mail/" 2>> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	scp /etc/ssl/mail/postfix.pem root@"$SERVER:/etc/ssl/mail/" 2>> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
fi

