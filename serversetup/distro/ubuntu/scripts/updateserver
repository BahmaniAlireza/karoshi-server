#!/bin/bash
#upgradeserver
#Copyright (C) 2012  Paul Sharrad
#This program is free software; you can redistribute it and/or
#modify it under the terms of the GNU General Public License
#as published by the Free Software Foundation; either version 2
#of the License, or (at your option) any later version.
#
#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.
#
#You should have received a copy of the GNU General Public License
#along with this program; if not, write to the Free Software
#Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#
#The Karoshi Team can be contact either at mpsharrad@karoshi.org.uk or jharris@karoshi.org.uk
#
#Website: http://www.linuxschools.com

LOG_DATE=`date +%F`

#Make sure that dkpg doesnt change any config files.
export DEBIAN_FRONTEND=noninteractive

REMOVE_OLD_KERNELS=no
INSTALLTYPE=scheduled

if [ ! -z "$1" ] 
then
	if [ "$1" = "buildserver" ]
	then
		REMOVE_OLD_KERNELS=yes
		INSTALLTYPE=notscheduled
	fi
fi

#Make Log folder
if [ ! -d /opt/karoshi/logs/server_upgrades/ ]
then
	mkdir -p /opt/karoshi/logs/server_upgrades/
	chmod 0700 /opt/karoshi/logs/server_upgrades/
fi

CONFIGFILE_ARRAY=( apache,/etc/apache2/apache2.conf cups,/etc/cups/cupsd.conf dhcp,/etc/dhcp/dhcpd.conf dnsmasq,/etc/dnsmasq.conf dovecot,/etc/dovecot/dovecot.conf e2guardian,/etc/e2guardian/e2guardian.conf fail2ban,/etc/fail2ban/fail2ban.conf mysql,/etc/mysql/my.cnf nslcd,/etc/nslcd.conf ntp,/etc/ntp.conf nssswitch,/etc/nsswitch.conf nut,/etc/nut/nut.conf postfix,/etc/postfix/main.cf postfix,/etc/postfix/master.cf samba,/etc/samba/smb.conf ssh,/etc/ssh/sshd_config sshclient,/etc/ssh/ssh_config squid,/etc/squid/squid.conf )

function backup_config_files {
#Backup service config files
COUNTER=0
ARRAY_COUNT=${#CONFIGFILE_ARRAY[@]}
while [ $COUNTER -lt $ARRAY_COUNT ]
do
	CONFIGFILEDATA=${CONFIGFILE_ARRAY[$COUNTER]}
	CONFIGPATH=`echo "$CONFIGFILEDATA" | cut -d, -f2`

	[ -f "$CONFIGPATH" ] && cp -f "$CONFIGPATH" "$CONFIGPATH.$LOG_DATE.preupdate"

	let COUNTER=$COUNTER+1
done
}

function check_config_files {
#Check that config files have not changed during the update process.
echo -e "$HOSTNAME: `date` - Checking config files have not been altered by the update process.\n" >>/opt/karoshi/logs/server_upgrades/$LOG_DATE
COUNTER=0
ARRAY_COUNT=${#CONFIGFILE_ARRAY[@]}
while [ $COUNTER -lt $ARRAY_COUNT ]
do
	CONFIGFILEDATA=${CONFIGFILE_ARRAY[$COUNTER]}
	CONFIGPATH=`echo "$CONFIGFILEDATA" | cut -d, -f2`
	SERVICENAME=`echo "$CONFIGFILEDATA" | cut -d, -f1`

	if [ -f "$CONFIGPATH" ] && [ -f "$CONFIGPATH.$LOG_DATE.preupdate" ]
	then
		#Get md5sum and check against the backup config file
		if [ `md5sum "$CONFIGPATH" | cut -d" " -f1` != `md5sum "$CONFIGPATH.$LOG_DATE.preupdate" | cut -d" " -f1` ]
		then
			echo -e "$HOSTNAME: `date` - $CONFIGPATH has been altered.\n" >>/opt/karoshi/logs/server_upgrades/$LOG_DATE
			#Copy current config file
			cp -f "$CONFIGPATH" "$CONFIGPATH.$LOG_DATE.postupdate" 2>>/opt/karoshi/logs/server_upgrades/$LOG_DATE

			#Restore backed up config file
			echo -e "$HOSTNAME: `date` - Restoring the original config file.\n" >>/opt/karoshi/logs/server_upgrades/$LOG_DATE
			echo -e "$HOSTNAME: `date` - Inspect $CONFIGPATH.$LOG_DATE.preupdate and $CONFIGPATH.$LOG_DATE.postupdate for changes.\n" >>/opt/karoshi/logs/server_upgrades/$LOG_DATE
			cp -f "$CONFIGPATH.$LOG_DATE.preupdate" "$CONFIGPATH" 2>>/opt/karoshi/logs/server_upgrades/$LOG_DATE
			#Restart the service if it is running as long as it is not nsswitch.
			if [ "$SERVICENAME" != nssswitch ]
			then
				/opt/karoshi/serversetup/distro/ubuntu/scripts/control_services/$SERVICENAME"_"status
				if [ $? = 0 ]
				then
					echo -e "$HOSTNAME: `date` - Restarting $SERVICENAME.\n" >>/opt/karoshi/logs/server_upgrades/$LOG_DATE
					/opt/karoshi/serversetup/distro/ubuntu/scripts/control_services/$SERVICENAME"_"stop
					sleep 1
					/opt/karoshi/serversetup/distro/ubuntu/scripts/control_services/$SERVICENAME"_"start
				fi
			fi
		else
			#Delete the backed up config files
			rm -f "$CONFIGPATH.$LOG_DATE.preupdate"
		fi
	fi
	let COUNTER=$COUNTER+1
done
}
backup_config_files

#Update non apt packages
[ -f /usr/local/sbin/samba ] && /opt/karoshi/serversetup/all/samba4/samba4install

#Check to see if this server should have ssh - need to make sure this is running.

SSHSERVICE=yes
if [ -d /opt/karoshi/web_controls ]
then
	#This server is the main server and may not need ssh so fall back to normal check.
	SSHSERVICE=no
	if [ -f /opt/karoshi/server_network/servers/$HOSTNAME/federated_server ]
	then
		#This server is a federated server and must have ssh.
		SSHSERVICE=yes
	fi
fi

#Make sure we are using sysv scripts before we check which services should still be running after the update.
/opt/karoshi/serversetup/distro/ubuntu/scripts/sysvsupport

#Get the current samba version - needed to trigger a restart if this changes
CURRENT_SAMBA_VER=`samba-tool -V`

######################
#Check to see if a service should be running after the update.
######################
function check_status {
STATUS=off
/opt/karoshi/serversetup/distro/ubuntu/scripts/control_services/$SERVICENAME"_"status
[ $? = 0 ] && STATUS=on

#Make sure status is correct for ssh
if [ $SERVICENAME = ssh ]
then
	if [ $SSHSERVICE = yes ]
	then
		STATUS=on
	fi
fi
STATUS_ARRAY[$COUNTER]=$STATUS
echo -e "$SERVICENAME $STATUS" >> /opt/karoshi/logs/server_upgrades/$LOG_DATE
}

#######################
#Check which services should be running on this server.
#######################
SERVICE_ARRAY=( apache apache_karoshi clamd cron cups dansguardian dovecot dhcp dns glusterfs mailscanner monitorix memcached mon mysql nfs nginx postfix portmap proftpd radius rpcbind samba squid nut ssh tftpd xinetd )
echo -e "$HOSTNAME: `date` - Checking which services are currently set to run on boot.\n" >>/opt/karoshi/logs/server_upgrades/$LOG_DATE
COUNTER=0
ARRAY_COUNT=${#SERVICE_ARRAY[@]}
while [ $COUNTER -lt $ARRAY_COUNT ]
do
	SERVICENAME=${SERVICE_ARRAY[$COUNTER]}
	check_status
	let COUNTER=$COUNTER+1
done
echo -e "_________________________________________________\n" >> /opt/karoshi/logs/server_upgrades/$LOG_DATE


#######################
#Make sure we keep config files
#######################
echo 'Dpkg::Options {' > /etc/apt/apt.conf.d/local
echo '   "--force-confdef";' >> /etc/apt/apt.conf.d/local
echo '   "--force-confold";' >> /etc/apt/apt.conf.d/local
echo '}' >> /etc/apt/apt.conf.d/local
#######################
#Refresh package list
#######################
echo Refreshing Package Lists
echo -e "$HOSTNAME: `date` - Refreshing Package Lists\n" >> /opt/karoshi/logs/server_upgrades/$LOG_DATE
apt-get update | tee -a /opt/karoshi/logs/server_upgrades/$LOG_DATE
echo -e "_________________________________________________\n" >> /opt/karoshi/logs/server_upgrades/$LOG_DATE

#######################
#Stop cron or apache from being upgraded which stops the script from completing the upgrade
#######################
if [ $INSTALLTYPE = scheduled ]
then
	echo Holding Cron from updating
	echo cron hold | dpkg --set-selections
	echo apache2 install | dpkg --set-selections
fi
#######################
#Remove any init.d scripts that would stop an update from taking place!
#######################
[ -f /etc/init.d/cups ] && rm -f /etc/init.d/cups
#######################
#Check if update would be successful
#######################
echo -e "Checking that the upgrade will be successfull.\n" >> /opt/karoshi/logs/server_upgrades/$LOG_DATE
apt-get -s dist-upgrade >> /opt/karoshi/logs/server_upgrades/$LOG_DATE
if [ $? != 0 ]
then
	echo -e "Apt-get is reporting an upgrade problem. Upgrade NOT carried out.\n" >> /opt/karoshi/logs/server_upgrades/$LOG_DATE
	/opt/karoshi/serversetup/distro/ubuntu/scripts/sysvsupport
	exit
fi
echo -e "_________________________________________________\n" >> /opt/karoshi/logs/server_upgrades/$LOG_DATE
#######################
#Make sure that update-notifier-common is installed
#######################
UPDATEINSTALLCHECK=`dpkg -l | grep ^ii | grep -c update-notifier-common`

[ $UPDATEINSTALLCHECK = 0 ] && apt-get install -y update-notifier-common
#######################
#Do upgrade
#######################
echo Upgrading the server
echo -e "\n$HOSTNAME: `date` - Upgrading the server\n\n" >> /opt/karoshi/logs/server_upgrades/$LOG_DATE
#apt-get -mqy -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" dist-upgrade | tee -a /opt/karoshi/logs/server_upgrades/$LOG_DATE
apt-get -mqy -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" dist-upgrade | tee -a /opt/karoshi/logs/server_upgrades/$LOG_DATE
echo -e "\n$HOSTNAME: `date` - Upgrade completed\n\n" >> /opt/karoshi/logs/server_upgrades/$LOG_DATE
echo -e "_________________________________________________\n" >>/opt/karoshi/logs/server_upgrades/$LOG_DATE

#Check sysv
/opt/karoshi/serversetup/distro/ubuntu/scripts/sysvsupport

#Get the new samba version
NEW_SAMBA_VER=`samba-tool -V`
RESTART_SAMBA=no

#Check if samba restart is required

if [[ $CURRENT_SAMBA_VER != $NEW_SAMBA_VER ]]
then
	RESTART_SAMBA=yes
fi

#######################
#Make sure that only the correct services are running.
#######################
function controlservices {

#Check if the service is running.
/opt/karoshi/serversetup/distro/ubuntu/scripts/control_services/$SERVICENAME"_"status
SERVICESTATUS=$?

#Make sure services are stopped if they were not running before the update.
if [ $STATUS = off ]
then
	[ $SERVICESTATUS = 0 ] && /opt/karoshi/serversetup/distro/ubuntu/scripts/control_services/$SERVICENAME"_"stop
	/opt/karoshi/serversetup/distro/ubuntu/scripts/stoponboot/$SERVICENAME
fi
#Make sure services are started if they were running before the update.
if [ $STATUS = on ]
then
	[ $SERVICESTATUS = 1 ] && /opt/karoshi/serversetup/distro/ubuntu/scripts/control_services/$SERVICENAME"_"start
	/opt/karoshi/serversetup/distro/ubuntu/scripts/startonboot/$SERVICENAME

	#Restart samba if it has been updated
	if [ $RESTART_SAMBA = yes ] && [ $SERVICENAME = samba ]
	then
		echo Restarting samba due to version change >>/opt/karoshi/logs/server_upgrades/$LOG_DATE
		/opt/karoshi/serversetup/distro/ubuntu/scripts/control_services/$SERVICENAME"_"stop
		sleep 1
		/opt/karoshi/serversetup/distro/ubuntu/scripts/control_services/$SERVICENAME"_"start
	fi
fi

#Make sure ssh is running
if [ $SERVICENAME = ssh ]
then
	if [ $SSHSERVICE = yes ]
	then
		if [ `ps -e | grep -c sshd` = 0 ]
		then
			echo starting ssh >>/opt/karoshi/logs/server_upgrades/$LOG_DATE
			/opt/karoshi/serversetup/distro/ubuntu/scripts/control_services/ssh_start
			/opt/karoshi/serversetup/distro/ubuntu/scripts/startonboot/ssh
		fi
	fi
fi
}
############################
#Make sure that services running before the update are still running.
############################
echo -e "$HOSTNAME: `date` - Setting services to run on boot.\n" >>/opt/karoshi/logs/server_upgrades/$LOG_DATE
COUNTER=0
while [ $COUNTER -lt $ARRAY_COUNT ]
do
	STATUS=${STATUS_ARRAY[$COUNTER]}
	SERVICENAME=${SERVICE_ARRAY[$COUNTER]}
	echo Setting $SERVICENAME $STATUS
	echo -e "$SERVICENAME $STATUS" >> /opt/karoshi/logs/server_upgrades/$LOG_DATE
	controlservices
	let COUNTER=$COUNTER+1
done
echo -e "_________________________________________________\n" >>/opt/karoshi/logs/server_upgrades/$LOG_DATE

###########################
#Make sure that config files have not been changed.
###########################
check_config_files

##########################
#Modify mon ping monitor
##########################
#Default is to just ping once - this change will cause the ping check to keep trying up to six times over 3 seconds - the check will report a success at the first successful ping.
sed -i 's/PING="ping -c 1"/PING="ping -i 0.5 -c 1 -w 3"/g' /usr/lib/mon/mon.d/ping.monitor
###########################
#Make sure that apache2_karoshi is running on the main server.
###########################
if [ `ps aux | grep -c apache2_karoshi` -lt 2 ] && [ -d /opt/karoshi/web_controls ]
then
	echo -e "$HOSTNAME: `date` - Starting apache2_karoshi since it was not running." >>/opt/karoshi/logs/server_upgrades/$LOG_DATE
	service apache2_karoshi start
fi

###########################
#Remove old kernels
###########################
[ $REMOVE_OLD_KERNELS = yes ] && apt-get purge $(dpkg -l 'linux-*' | sed '/^ii/!d;/'"$(uname -r | sed "s/\(.*\)-\([^0-9]\+\)/\1/")"'/d;s/^[^ ]* [^ ]* \([^ ]*\).*/\1/;/[0-9]/!d' | head -n -1) --assume-yes

###########################
#Check to see if the server needs a reboot.
###########################
if [ -f /var/run/reboot-required ]
then
	#Let any services restart and stabilise
	sleep 30
	echo "A reboot is required."
	echo -e "$HOSTNAME: `date` - A reboot is required, rebooting now.\nA reboot has not occurred unless there is a reboot entry below this." >>/opt/karoshi/logs/server_upgrades/$LOG_DATE
	#Add in script to record reboot time
	echo '#!/bin/bash' > /etc/rc2.d/S99recordreboot
	echo 'echo -e "$HOSTNAME: `date` - This server has now rebooted.\n" >>/opt/karoshi/logs/server_upgrades/'$LOG_DATE'' >> /etc/rc2.d/S99recordreboot
	echo 'rm -f /etc/rc2.d/S99recordreboot' >> /etc/rc2.d/S99recordreboot
	chmod 0700 /etc/rc2.d/S99recordreboot
	#Check if kexec is installed
	#if [ -e /etc/init.d/kexec ]
	#then
	#Load kernel into memory before rebooting
	#kexec -l /vmlinuz --initrd=/initrd.img --reuse-cmdline
	#fi
	shutdown -r now 1>> /opt/karoshi/logs/server_upgrades/$LOG_DATE 2>> /opt/karoshi/logs/server_upgrades/$LOG_DATE
	exit
fi

exit

