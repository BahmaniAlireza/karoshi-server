#!/bin/bash
#configure_authentication
#Copyright (C) 2012  Paul Sharrad
#This program is free software; you can redistribute it and/or
#modify it under the terms of the GNU General Public License
#as published by the Free Software Foundation; either version 2
#of the License, or (at your option) any later version.
#
#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.
#
#You should have received a copy of the GNU General Public License
#along with this program; if not, write to the Free Software
#Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#

LANGCHOICE=englishuk
########################
#Get variables
########################
LOG_DATE=`date +%F`
[ ! -d /opt/karoshi/logs/karoshi_web_management ] && mkdir -p /opt/karoshi/logs/karoshi_web_management
numArgs=$#
if [ $numArgs != 0 ]
then
	echo `date`: configure_authentication - incorrect number of arguments."<br>"
	exit 101
fi
read -t 3 DATA
DATA=`echo $DATA | tr -cd 'A-Za-z0-9\._:\-/'`

REMOTE_USER=`echo "$DATA" | cut -s -d: -f1`
REMOTE_ADDR=`echo "$DATA" | cut -s -d: -f2`
REMOTE_MD5=`echo "$DATA" | cut -s -d: -f3`
SERVERNAME=`echo "$DATA" | cut -s -d: -f4`
AUTHTYPE=`echo "$DATA" | cut -s -d: -f5`
ZONE=`echo "$DATA" | cut -s -d: -f6`

if [ -z "$REMOTE_USER" ]
then
	echo `date`: configure_authentication - Blank remote user."<br>"
	echo `date`: configure_authentication - Blank remote user from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	sleep 2
	exit 101
fi

if [ -z "$REMOTE_ADDR" ]
then
	echo `date`: configure_authentication - Blank remote tcpip address."<br>"
	echo `date`: configure_authentication - Blank remote tcpip address by $REMOTE_USER >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	sleep 2
	exit 101
fi

if [ -z "$SERVERNAME" ]
then
	echo `date`: configure_authentication - Blank servername."<br>"
	echo `date`: configure_authentication - Blank servername by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	sleep 2
	exit 101
fi

if [ -z "$AUTHTYPE" ]
then
	echo `date`: configure_authentication - Blank authtype."<br>"
	echo `date`: configure_authentication - Blank authtype by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	sleep 2
	exit 101
fi

if [ -z "$ZONE" ]
then
	echo `date`: configure_authentication - Blank zone."<br>"
	echo `date`: configure_authentication - Blank zone by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	sleep 2
	exit 101
fi

function configure_samba4 {
#Set Join type
JOINTYPE=member
SERVERROLE="domain member"
if [ $AUTHTYPE = adc ] || [ $AUTHTYPE = rodc ]
then
	JOINTYPE=DC
	SERVERROLE="active directory domain controller"
fi

#Get samba 4 database password
LDAPPASS=`sed -n 1,1p /etc/ldap.secret`

ssh -x -o PasswordAuthentication=no $SERVERNAME '
source /opt/karoshi/serversetup/variables/distro

#Make sure /run/lock is large enough for samba
if [ `grep -c /run/lock /etc/rc.local` = 0 ]
then
echo mount -t tmpfs tmpfs /run/lock -o remount,size=50M > /etc/rc.local
echo exit 0 >> /etc/rc.local
mount -t tmpfs tmpfs /run/lock -o remount,size=50M
fi

echo "<li><b>'$"Join Domain"'</b></li><pre style=\"font-size: 10pt; font-family:Arial, Times, Georgia, serif\">"

#Join the domain
if [ '$AUTHTYPE' = adc ] || [ '$AUTHTYPE' = rodc ]
then
[ -f /usr/local/sbin/samba_disabled ] && mv /usr/local/sbin/samba_disabled /usr/local/sbin/samba
[ -f /etc/samba/smb.conf ] && rm -f /etc/samba/smb.conf
[ -d /var/lib/samba/private ] && rm -f -R /var/lib/samba/private
samba-tool domain join '$REALM' '$JOINTYPE' --server='$HOSTNAME' --username=Administrator --password='$LDAPPASS' --realm='$SAMBADOMAIN'.'$REALM'
JOINDOMAINSTATUS=`echo $?`
if [ $JOINDOMAINSTATUS != 0 ]
then
echo '$"There was a problem with joining the domain."'"<br><br>"
exit 101
fi
echo "</pre><br><br>"
sleep 2

#Get forwarding dns server
DNSFORWARD=`grep dns-nameservers /etc/network/interfaces | cut -d" " -f2 | sed -n 1,1p`

#Create simple smb.conf
echo -e "# Global parameters
[global]
	workgroup = '$SAMBADOMAIN'
	realm = '$REALM'
	netbios name = $HOSTNAME
	server role = '$SERVERROLE'
	dns forwarder = $DNSFORWARD
	allow dns updates = nonsecure
	idmap_ldb:use rfc2307 = yes
	acl:search=false
	log level = 1
	host msdfs = yes

[dfs]
	path = /var/lib/samba/dfs
	msdfs root = yes
	guest ok = Yes


[netlogon]
	comment = Netlogon Share
	path = /var/lib/samba/netlogon
	invalid users = root,administrator
	create mask = 0664
	guest ok = Yes
	locking = No
	oplocks = No
	level2 oplocks = No

[sysvol]
	comment = sysvol share
	path = /var/lib/samba/sysvol
	read only = No

[applications]
	comment = Data
	path = /home/applications
	invalid users = root
	read only = No
	guest ok = Yes
	browseable = No
	locking = No
	oplocks = No
	level2 oplocks = No

" > /etc/samba/smb.conf

#Point adc and rodc servers at themselves for resolv.conf
echo domain '$REALM' > /etc/resolv.conf
echo nameserver '$SERVERIP' >> /etc/resolv.conf
echo timeout:1 >> /etc/resolv.conf
fi

if [ '$AUTHTYPE' = member ]
then

#Using smbd and nmbd instead of samba

#Create smb.conf
echo -e "#karoshi_member_server

# Global parameters
[global]

	workgroup = '$SAMBADOMAIN'
	security = ADS
	realm = '$REALM'
	encrypt passwords = true

" > /etc/samba/smb.conf

#Join the domain
net ads join -S '$KRBSERVER' -U Administrator%'$LDAPPASS'
JOINDOMAINSTATUS=`echo $?`
if [ $JOINDOMAINSTATUS != 0 ]
then
exit 101
fi
fi

echo "<br>"

#Check firewall rules for adc, rodc and domain member
MODCHECK=`grep -c -w auth_rule /etc/shorewall/rules`
if [ $MODCHECK = 0 ]
then
echo "<li><b>'$"Adding shorewall ports"'</b></li><br><b>tcp</b> '$TCPPORTS'<br><b>udp</b> '$UDPPORTS'<br><br>"
LINENUM=`grep -n "LAST LINE -- ADD YOUR ENTRIES BEFORE THIS ONE -- DO NOT REMOVE" /etc/shorewall/rules | cut -d: -f1`
sed -i $LINENUM"c"\ACCEPT"	"net"	"fw"	"tcp"	"'$TCPPORTS'"	"-"#"auth_rule /etc/shorewall/rules
echo ACCEPT"	"net"	"fw"	"udp"	"'$UDPPORTS'"	"-"#"auth_rule >> /etc/shorewall/rules
echo "#"LAST LINE -- ADD YOUR ENTRIES BEFORE THIS ONE -- DO NOT REMOVE >> /etc/shorewall/rules

#Restart shorewall
echo "<li><b>"$HOSTNAME - '$"Restarting Shorewall"'"</b></li><br>"
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/shorewall_stop 1>/dev/null
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/shorewall_start 1>/dev/null
fi

echo "<li><b>"$HOSTNAME - '$"Restarting Samba"'"</b></li><br>"
#Stop samba
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/samba_stop 1>/dev/null 2>/dev/null
sleep 1
#start samba
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/samba_start 1>/dev/null
#Make sure samba runs on boot
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/startonboot/samba
' 2>> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
#Exit if the server did not join the domain
if [ $? = 101 ]
then
echo $"There was a problem with joining the domain.""<br>"
sleep 4
exit 101
fi

#Add role information
[ ! -d /opt/karoshi/server_network/servers/$SERVERNAME ] && mkdir -p /opt/karoshi/server_network/servers/$SERVERNAME

#Remove any current flag information for domain roles
[ -f /opt/karoshi/server_network/servers/$SERVERNAME/1domainmember ] && rm -f /opt/karoshi/server_network/servers/$SERVERNAME/1domainmember
[ -f /opt/karoshi/server_network/zones/$ZONE/domain_members/$SERVERNAME ] && rm -f /opt/karoshi/server_network/zones/$ZONE/domain_members/$SERVERNAME
[ -f /opt/karoshi/server_network/zones/$ZONE/additional_domain_controllers/$SERVERNAME ] && rm -f /opt/karoshi/server_network/zones/$ZONE/additional_domain_controllers/$SERVERNAME
[ -f /opt/karoshi/server_network/servers/$SERVERNAME/1dc ] && rm -f /opt/karoshi/server_network/servers/$SERVERNAME/1dc


#Authtypes adc rodc member users none
if [ $AUTHTYPE = adc ] || [ $AUTHTYPE = rodc ] 
then
DCROLE="Additional Domain Controller"
[ $AUTHTYPE = rodc ] && DCROLE="Read Only Domain Controller"

echo $DCROLE"<br>" > /opt/karoshi/server_network/servers/$SERVERNAME/1dc
[ ! -d /opt/karoshi/server_network/zones/$ZONE/additional_domain_controllers/ ] && mkdir -p /opt/karoshi/server_network/zones/$ZONE/additional_domain_controllers/
echo $AUTHTYPE > /opt/karoshi/server_network/zones/$ZONE/additional_domain_controllers/$SERVERNAME
else
echo Domain member"<br>" > /opt/karoshi/server_network/servers/$SERVERNAME/1domainmember
[ ! -d /opt/karoshi/server_network/zones/$ZONE/domain_members/ ] && mkdir -p /opt/karoshi/server_network/zones/$ZONE/domain_members
touch /opt/karoshi/server_network/zones/$ZONE/domain_members/$SERVERNAME
fi
}

function configure_nslcd {

if [ $SERVERNAME = `hostname-fqdn` ]
then

source /opt/karoshi/serversetup/variables/distro
cp /opt/karoshi/serversetup/distro/$DISTROCHOICE/pdc/configfiles/nsswitch.conf /etc/

#Create nslcd.conf
echo uid nslcd > /etc/nslcd.conf
echo gid nslcd >> /etc/nslcd.conf
echo uri ldapi://%2fvar%2flib%2fsamba%2fprivate%2fldapi/ >> /etc/nslcd.conf
echo base OU=People,$LDAPBASE >> /etc/nslcd.conf
#Not needed for anonymous bind
#echo binddn cn=nslcd-server,cn=karoshi,cn=other,cn=Users,$LDAPBASE >> /etc/nslcd.conf
#echo bindpw $LDAPPASS >> /etc/nslcd.conf
echo >> /etc/nslcd.conf
echo nss_min_uid 1000 >> /etc/nslcd.conf
echo pam_authz_search \(!\(userAccountControl:1.2.840.113556.1.4.803:=2\)\) >> /etc/nslcd.conf
echo filter passwd \(\&\(objectClass=user\)\(!\(objectClass=computer\)\)\) >> /etc/nslcd.conf
echo map passwd uid sAMAccountName >> /etc/nslcd.conf
echo map passwd uidNumber objectSid:$DOMAINSID >> /etc/nslcd.conf
#echo map passwd gidNumber primaryGroupID >> /etc/nslcd.conf
echo map passwd gecos \"\${displayName:-\${sAMAccountName}},,,\" >> /etc/nslcd.conf
echo map passwd homeDirectory \"\${unixHomeDirectory:-/home/\$sAMAccountName}\" >> /etc/nslcd.conf
echo map passwd loginShell \"\${loginShell:-/bin/bash}\" >> /etc/nslcd.conf
echo filter shadow \(\&\(objectClass=user\)\(!\(objectClass=computer\)\)\) >> /etc/nslcd.conf
echo map shadow uid sAMAccountName >> /etc/nslcd.conf
echo map shadow shadowLastChange pwdLastSet >> /etc/nslcd.conf
echo filter group \(objectClass=group\) >> /etc/nslcd.conf
echo map group cn sAMAccountName >> /etc/nslcd.conf
echo map group gidNumber objectSid:$DOMAINSID >> /etc/nslcd.conf
#echo map group member nogroupmembers >> /etc/nslcd.conf

source /opt/karoshi/serversetup/variables/distro
#Stop nslcd
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/nslcd_stop 1>/dev/null
#Start nslcd
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/nslcd_start 1>/dev/null

#Set nslcd to start on boot
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/startonboot/nslcd
fi

if [ $SERVERNAME != `hostname-fqdn` ]
then
ssh -x -o PasswordAuthentication=no $SERVERNAME '
echo "<li><b>'$"Configure Authentication"'</b></li><br>"

source /opt/karoshi/serversetup/variables/distro

#Create domain_name file
if [ ! -d /opt/karoshi/server_network/domain_information/ ]
then
mkdir -p /opt/karoshi/server_network/domain_information/
fi
echo SAMBADOMAIN=\"'$SAMBADOMAIN'\" > /opt/karoshi/server_network/domain_information/domain_name
echo SAMBADOMAINCAPS=\"'$SAMBADOMAINCAPS'\" >> /opt/karoshi/server_network/domain_information/domain_name
echo WEBADDRESS=\"'$WEBADDRESS'\" >> /opt/karoshi/server_network/domain_information/domain_name
echo REALM=\"'$WEBADDRESS'\" >> /opt/karoshi/server_network/domain_information/domain_name
echo REALMCAPS=\"'$REALMCAPS'\" >> /opt/karoshi/server_network/domain_information/domain_name
echo LDAPBASE=\"'$LDAPBASE'\" >> /opt/karoshi/server_network/domain_information/domain_name
echo DOMAINSID=\"'$DOMAINSID'\" >> /opt/karoshi/server_network/domain_information/domain_name

#Set up krb5
echo "[libdefaults]" > /etc/krb5.conf
echo  "dns_lookup_realm = false" >> /etc/krb5.conf
echo  "dns_lookup_kdc = true" >> /etc/krb5.conf
echo >> /etc/krb5.conf
echo  "default_realm = '$REALMCAPS'" >> /etc/krb5.conf
echo "[realms]" >> /etc/krb5.conf
echo "'$REALMCAPS' = {" >> /etc/krb5.conf
echo "	kdc = '$KRBSERVER'" >> /etc/krb5.conf
echo "}" >> /etc/krb5.conf

#Modify nsswitch 
cp /opt/karoshi/serversetup/distro/$DISTROCHOICE/pdc/configfiles/nsswitch.conf /etc/

#Create nslcd.conf
echo uid nslcd > /etc/nslcd.conf
echo gid nslcd >> /etc/nslcd.conf
if [ '$AUTHTYPE' = rodc ] || [ '$AUTHTYPE' = adc ]
then
echo uri ldapi://%2fvar%2flib%2fsamba%2fprivate%2fldapi/ >> /etc/nslcd.conf
else
if [ '$ZONE' = dmz ]
then
echo uri ldap://'$KRBSERVER' >> /etc/nslcd.conf
else
echo uri DNS >> /etc/nslcd.conf
fi
fi
echo base OU=People,'$LDAPBASE' >> /etc/nslcd.conf
#Not needed for anonymous bind
#echo binddn cn=nslcd-server,OU=karoshi,OU=other,OU=People,'$LDAPBASE' >> /etc/nslcd.conf
#echo bindpw '$LDAPPASS' >> /etc/nslcd.conf
echo >> /etc/nslcd.conf
echo nss_min_uid 1000 >> /etc/nslcd.conf
echo pam_authz_search \(!\(userAccountControl:1.2.840.113556.1.4.803:=2\)\) >> /tmp/nslcd.conf
echo filter passwd \(\&\(objectClass=user\)\(!\(objectClass=computer\)\)\) >> /etc/nslcd.conf
echo map passwd uid sAMAccountName >> /etc/nslcd.conf
echo map passwd uidNumber objectSid:'$DOMAINSID' >> /etc/nslcd.conf
#echo map passwd gidNumber primaryGroupID >> /etc/nslcd.conf
echo map passwd gecos \"\${displayName:-\${sAMAccountName}},,,\" >> /etc/nslcd.conf
echo map passwd homeDirectory \"\${unixHomeDirectory:-/home/\$sAMAccountName}\" >> /etc/nslcd.conf
echo map passwd loginShell \"\${loginShell:-/bin/bash}\" >> /etc/nslcd.conf
echo filter shadow \(\&\(objectClass=user\)\(!\(objectClass=computer\)\)\) >> /etc/nslcd.conf
echo map shadow uid sAMAccountName >> /etc/nslcd.conf
echo map shadow shadowLastChange pwdLastSet >> /etc/nslcd.conf
echo filter group \(objectClass=group\) >> /etc/nslcd.conf
echo map group cn sAMAccountName >> /etc/nslcd.conf
echo map group gidNumber objectSid:'$DOMAINSID' >> /etc/nslcd.conf
echo map group member nogroupmembers >> /etc/nslcd.conf
#Stop nslcd
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/nslcd_stop 1>/dev/null
#Start nslcd
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/nslcd_start 1>/dev/null
#Set nslcd to start on boot
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/startonboot/nslcd
' 2>> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
EXITCHECK=`echo $?`
fi

#Add ldap client flag
[ ! -d /opt/karoshi/server_network/zones/$ZONE/ldap_clients/ ] && mkdir -p /opt/karoshi/server_network/zones/$ZONE/ldap_clients
echo ldap_server=$KRBSERVER > /opt/karoshi/server_network/zones/$ZONE/ldap_clients/$SERVERNAME

[ ! -d /opt/karoshi/server_network/servers/$SERVERNAME ] && mkdir -p /opt/karoshi/server_network/servers/$SERVERNAME
echo $"Users and Groups""<br>" > /opt/karoshi/server_network/servers/$SERVERNAME/2users-groups
}

function choose_krbserver {
#Decide which krb server to use
if [ $SERVERNAME != `hostname-fqdn` ]
then
#Authtypes adc rodc member users none 
[ $AUTHTYPE = adc ] && KRBSERVER=$SERVERNAME
[ $AUTHTYPE = rodc ] && KRBSERVER=$SERVERNAME

if [ $AUTHTYPE = member ] || [ $AUTHTYPE = usersandgroups ] || [ $AUTHTYPE = none ]
then
KRBSERVER=$HOSTNAME.$REALM
if [ $ZONE != internal ]
then
#Check to see if there is an adc in the zone to use
if [ -d /opt/karoshi/server_network/zones/$ZONE/additional_domain_controllers/ ]
then
if [ `ls -1 /opt/karoshi/server_network/zones/$ZONE/additional_domain_controllers/ | wc -l` -gt 0 ]
then
KRBSERVER=`ls -1 /opt/karoshi/server_network/zones/$ZONE/additional_domain_controllers/ | sed -n 1,1p`
fi
fi
fi
fi

KRBSERVERIP=`net lookup $KRBSERVER`

if [ $ZONE = dmz ]
then
if [ $AUTHTYPE = usersandgroups ] || [ $AUTHTYPE = member ]
then
PORTSCANIP=$KRBSERVERIP
fi
fi
fi
}

function configure_hosts {
#Add entries to /etc/hosts
if [ $SERVERNAME != `hostname-fqdn` ]
then
ssh -x -o PasswordAuthentication=no $SERVERNAME '
if [ `grep -c $HOSTNAME /etc/hosts` = 0 ]
then
echo '$SERVERIP'"	"$HOSTNAME.'$REALM'"	"$HOSTNAME >> /etc/hosts
fi
if [ '$AUTHTYPE' = adc ] || [ '$AUTHTYPE' = rodc ] 
then
if [ `grep -c '$HOSTNAME'.'$REALM' /etc/hosts` = 0 ]
then
echo '$PDCIP'"	"'$HOSTNAME'.'$REALM'"	"'$HOSTNAME' >> /etc/hosts
fi
fi
' 2>> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
fi
}

function configure_resolvconf {
if [ $SERVERNAME != `hostname-fqdn` ]
then
ssh -x -o PasswordAuthentication=no $SERVERNAME '
#Write resolve.conf
if [ '$ZONE' = internal ] || [ '$AUTHTYPE' = adc ] || [ '$AUTHTYPE' = rodc ]
then
#Setup resolv.conf
echo domain '$REALM' > /etc/resolv.conf
fi

if [ '$ZONE' = internal ] || [ '$ZONE' = dmz ]
then
	if [ '$AUTHTYPE' != adc ] && [ '$AUTHTYPE' != rodc ]
	then
		echo "domain '$REALM'" > /etc/resolv.conf
		echo "nameserver '$KRBSERVERIP'" >> /etc/resolv.conf
		echo "nameserver 8.8.8.8" >> /etc/resolv.conf
		echo "nameserver 8.8.4.4" >> /etc/resolv.conf
		echo "timeout:1" >> /etc/resolv.conf
	fi
fi

if [ '$AUTHTYPE' = adc ] || [ '$AUTHTYPE' = rodc ] 
then
	echo nameserver '$PDCIP' >> /etc/resolv.conf
fi
' 2>> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
fi
}

function check_ports {
if [ $SERVERNAME != `hostname-fqdn` ]
then
#Set ports to check
PORTCHECK=53,88,389
TCPPORTS=139,445
UDPPORTS=137,138,445
if [ $AUTHTYPE = adc ] || [ $AUTHTYPE = rodc ]
then
PORTCHECK=53,88,135,139,389,445,464,636,1024,3268
TCPPORTS=53,88,123,135,137,138,139,389,445,464,636,1024:1100,3268
UDPPORTS=53,88,123,135,137,138,139,389,445,464,636,1024:1100,3268
fi
ssh -x -o PasswordAuthentication=no $SERVERNAME '
echo "<li><b>"Checking to see that '$PORTSCANIP' can be contacted on ports: '$PORTCHECK'"</b></li><br>"
for PORT in `echo '$PORTCHECK' | sed "s/,/ /g"`
do
echo Checking $PORT on server '$PORTSCANIP'"<br>"
nc -zv -w5 '$PORTSCANIP' $PORT
[ $? != 0 ] && exit $PORT
done
exit 0
' 2>> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
EXITCHECK=$?
if [ $EXITCHECK != 0 ]
then
echo `date`: configure_authentication - Error connecting to $PDCIP on port $EXITCHECK "for" $SERVERNAME by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
echo '<li>'$"Connection error" -  $PDCIP: $EXITCHECK '</li><br>'
sleep 4
exit $EXITCHECK
fi
fi
echo '<br><br>'
}


function configure_ntp {
echo '<li><b>'$"Configuring NTP"'</b></li><br>'
NTPSERVER=$KRBSERVER
if [ $AUTHTYPE = adc ] || [ $AUTHTYPE = rodc ]
then
NTPSERVER=$HOSTNAME.$REALM
fi
ssh -x -o PasswordAuthentication=no $SERVERNAME '
echo server '$NTPSERVER' iburst > /etc/ntp.conf
echo driftfile /etc/ntp/drift >> /etc/ntp.conf
echo broadcastdelay 0.008 >> /etc/ntp.conf
echo server 127.127.1.0 >> /etc/ntp.conf
echo fudge 127.127.1.0 stratum 15 >> /etc/ntp.conf

#Restart ntp server
source /opt/karoshi/serversetup/variables/distro
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/ntp_stop 1>/dev/null
sleep 1
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/ntp_start 1>/dev/null
'
}

echo `date`: configure_authentication authtype $AUTHTYPE - "for" $SERVERNAME by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
#Delete any existing auth flag files
[ ! -d /opt/karoshi/server_network/zones ] && mkdir -p /opt/karoshi/server_network/zones
for SERVERFLAG in `find /opt/karoshi/server_network/zones -name $SERVERNAME`
do
[ -f "$SERVERFLAG" ] && rm -f "$SERVERFLAG"
done

#Set variables
source /opt/karoshi/server_network/domain_information/domain_name
SERVERIP=`net lookup $SERVERNAME`
PDCIP=`net lookup $HOSTNAME.$REALM`
PORTSCANIP=$PDCIP

#####################
#run functions Authtypes adc rodc member users none
#####################

#Choose krb server to use
echo `date`: configure_authentication - choosing  krbserver "for" $SERVERNAME by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
choose_krbserver
#Check ports
echo `date`: configure_authentication - checking ports "for" $SERVERNAME by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
check_ports
#Configure /etc/hosts
echo `date`: configure_authentication - configuring /etc/hosts "for" $SERVERNAME by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
configure_hosts
#Configure /etc/resolv.conf
echo `date`: configure_authentication - configuring /etc/resolv.conf "for" $SERVERNAME by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
configure_resolvconf
#Configure samba4
if [ $AUTHTYPE = adc ] || [ $AUTHTYPE = rodc ] || [ $AUTHTYPE = member ]
then
echo `date`: configure_authentication - configuring samba4 $AUTHTYPE "for" $SERVERNAME by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
configure_samba4
fi
#Configure nslcd
if [ $AUTHTYPE != none ]
then
echo `date`: configure_authentication - configuring nslcd "for" $SERVERNAME by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
configure_nslcd
fi
if [ $SERVERNAME != `hostname-fqdn` ] && [ $ZONE != external ]
then
echo `date`: configure_authentication - configuring ntp "for" $SERVERNAME by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
configure_ntp
fi
echo `date`: configure_authentication - completed "for" $SERVERNAME by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE

#Add server zone info
[ ! -d /opt/karoshi/server_network/zones/$ZONE/servers ] && mkdir -p /opt/karoshi/server_network/zones/$ZONE/servers
touch /opt/karoshi/server_network/zones/$ZONE/servers/$SERVERNAME

exit
