#!/bin/bash
#setupemail
#Copyright (C) 2005 Paul Sharrad
#This program is free software; you can redistribute it and/or
#modify it under the terms of the GNU General Public License
#as published by the Free Software Foundation; either version 2
#of the License, or (at your option) any later version.
#
#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.
#
#You should have received a copy of the GNU General Public License
#along with this program; if not, write to the Free Software
#Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#
#The Karoshi Team can be contacted at: 
#mpsharrad@karoshi.org.uk
#jharris@karoshi.org.uk
#aball@karoshi.org.uk
#
#Website: http://www.karoshi.org.uk

########################
#Get variables
########################
LOG_DATE=`date +%F`
numArgs=$#
if [ $numArgs != 0 ]
then
	echo `date`: setupemail - incorrect number of arguments"<br>"
	echo `date`: setupemail - incorrect number of arguments >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
read -t 3 DATA
DATA=`echo $DATA | tr -cd 'A-Za-z0-9\._:\-/'`

REMOTE_USER=`echo "$DATA" | cut -s -d: -f1`
REMOTE_ADDR=`echo "$DATA" | cut -s -d: -f2`
REMOTE_MD5=`echo "$DATA" | cut -s -d: -f3`
SERVERNAME=`echo "$DATA" | cut -s -d: -f4`
ALIAS=`echo "$DATA" | cut -s -d: -f5`

LOG_DATE=`date +%F`
if [ -z "$REMOTE_USER" ]
then
	echo `date`: setupemail - Blank remote user"<br>"
	echo `date`: setupemail - Blank remote user >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ -z "$REMOTE_ADDR" ]
then
	echo `date`: setupemail - Blank remote tcpip address"<br>"
	echo `date`: setupemail - Blank remote tcpip address >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi

[ -f /opt/karoshi/web_controls/user_prefs/$REMOTE_USER ] && source /opt/karoshi/web_controls/user_prefs/$REMOTE_USER
TEXTDOMAIN=karoshi-server

#Make sure that memcached is installed
which memcached 1>/dev/null
if [ $? != 0 ]
then
	echo "<li>Installing memcached</li></ul>"
	echo '<pre style="font-size: 10pt; font-family:Arial, Times, Georgia, serif">'
	apt-get update
	apt-get install -y memcached
	echo "</pre>"
	echo "<br>"
fi

#Install required packages for dovecot sieve
echo "<ul><li>Installing Dovecot Sieve Support</li></ul>"
apt-get update
apt-get install -y dovecot-managesieved dovecot-sieve pyzor razor

[ ! -d /opt/karoshi/.tempdata ] && mkdir /opt/karoshi/.tempdata
[ ! -d /var/www/html ] && mkdir -p /var/www/html

source /opt/karoshi/serversetup/variables/distro
source /opt/karoshi/serversetup/distro/$DISTROCHOICE/all/software
TEXTDOMAIN=karoshi-server
source /opt/karoshi/server_network/domain_information/domain_name

LDAPSERVER=127.0.0.1
#Get ldap server to use
if [ `grep -c -w "kdc" /etc/krb5.conf` -gt 0 ]
then
	LDAPSERVER=`grep -w "kdc" /etc/krb5.conf | sed "s/ //g" | sed -n 1,1p | cut -d"=" -f2`
fi

#############################
#Ensure that apache, mailscanner, postfix, mysql, clamd and mailscanner are running on boot
#############################
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/startonboot/apache
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/startonboot/postfix
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/startonboot/mailscanner
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/startonboot/clamd
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/startonboot/mysql
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/startonboot/dovecot
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/startonboot/sogo
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/startonboot/memcached

#Merge postfix keytab into mail keytab
echo -e "rkt /etc/keytabs/postfix.keytab\nwkt /etc/keytabs/mail.keytab\nexit" | ktutil 1>/dev/null
rm -f /etc/keytabs/postfix.keytab

function passgen {
PASSCHOICE=( A B C D E F G H I J K L M N O P Q R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u v w x y x 1 2 3 4 5 6 7 8 9 0 )

RANGE=`echo ${#PASSCHOICE[@]}`
let RANGE=$RANGE-1 

COUNTER=1
while [ $COUNTER -le 16 ]
do
	ARRAYCHOICE=$RANDOM
	let "ARRAYCHOICE %= $RANGE"
	PASSWORD[$COUNTER]=`echo ${PASSCHOICE[$ARRAYCHOICE]} `
	let COUNTER=COUNTER+1
done
}

#####################
#Install email
#####################
echo '<ul><li>'$"Configuring Postfix"'</li></ul>'

########################
#Make sure that there is a Mail Scanner whitelist
########################
if [ ! -f /etc/MailScanner/rules/spam.whitelist.rules ]
then
	echo From:'           '127.0.0.1'      'yes > /etc/MailScanner/rules/spam.whitelist.rules
	echo FromOrTo:'       'default'        'no >> /etc/MailScanner/rules/spam.whitelist.rules
fi
########################
#Change postfix path
########################
[ -d /opt/postfix ] && rm -f -R /opt/postfix
[ -d /opt/postfix ] || mkdir /opt/postfix
chmod 0700 /opt/postfix
chown postfix /opt/postfix 1>/dev/null
usermod -d /opt/postfix postfix

#Add clamav to postfix group
usermod -a -G postfix clamav

#Setup maildrop
cp -f /opt/karoshi/serversetup/distro/$DISTROCHOICE/modules/email/maildrop/maildroprc /etc/
chmod +s /usr/bin/maildrop

########################
#Setup postfix
########################
chmod 0644 /opt/karoshi/serversetup/modules/email/postfix/*
cp -f /opt/karoshi/serversetup/distro/$DISTROCHOICE/modules/email/postfix/* /etc/postfix/
cp /opt/karoshi/serversetup/modules/email/postfix/* /etc/postfix/

chmod 0644 /etc/postfix/main.cf
chmod 0644 /etc/postfix/master.cf
chmod 0644 /etc/postfix/ldap.cf

sed -i 's/CHANGETHISDN/'$LDAPBASE'/g' /etc/postfix/ldap.cf
sed -i 's/CHANGETHISLDAPSERVER/'$LDAPSERVER'/g' /etc/postfix/ldap.cf

########################
#Setup dovecot
########################

#Change dovecot limits
if [ `grep -c ^"#default_process_limit = 100" /etc/dovecot/conf.d/10-master.conf` -gt 0 ]
then
	sed -i "s/^#default_process_limit = 100/default_process_limit = 1000/g"  /etc/dovecot/conf.d/10-master.conf
fi

if [ `grep -c ^"#default_client_limit = 1000" /etc/dovecot/conf.d/10-master.conf` -gt 0 ]
then
	sed -i "s/^#default_client_limit = 1000/default_client_limit = 3003/g" /etc/dovecot/conf.d/10-master.conf
fi

if [ `grep -c ^mail_location /etc/dovecot/dovecot.conf` = 0 ]
then
	echo >> /etc/dovecot/dovecot.conf
	echo mail_location = maildir:/home/users/email/"%u"/ >> /etc/dovecot/dovecot.conf
fi
if [ `grep -c ^set_maildir_very_dirty_syncs /etc/dovecot/dovecot.conf` = 0 ]
then
	echo >> /etc/dovecot/dovecot.conf
	echo -e "maildir_very_dirty_syncs = yes\n\n" >> /etc/dovecot/dovecot.conf
fi

if [ `grep -c ^auth_username_format /etc/dovecot/dovecot.conf` = 0 ]
then
	echo >> /etc/dovecot/dovecot.conf
	echo -e "auth_username_format = %Ln\n\n" >> /etc/dovecot/dovecot.conf
fi

#Modify dovecot lda to enable sieve support
sed -i "s/#mail_plugins = \$mail_plugins/mail_plugins = \$mail_plugins sieve/g" /etc/dovecot/conf.d/15-lda.conf
sed -i "s/#lda_mailbox_autocreate = no/lda_mailbox_autocreate = yes/g" /etc/dovecot/conf.d/15-lda.conf
sed -i "s/#lda_mailbox_autosubscribe = no/lda_mailbox_autosubscribe = yes/g" /etc/dovecot/conf.d/15-lda.conf		

#Modify dovecot sieve to use a default sieve rule for mta to send spam to a spam folder
sed -i "s%#sieve_before =%sieve_before = /etc/dovecot/sieve/default.sieve%g" /etc/dovecot/conf.d/90-sieve.conf

#Create default.sieve
[ ! -d /etc/dovecot/sieve ] && mkdir -p /etc/dovecot/sieve
		
echo -e "require [\"fileinto\"];
if header :contains \"X-Karoshi-MailScanner-SpamScore\" \"sssss\" {
  fileinto \"Spam\";
}" > /etc/dovecot/sieve/default.sieve

sievec /etc/dovecot/sieve/default.sieve	

if [ `grep -c ^"#kerberos auth and sasl" /etc/dovecot/dovecot.conf` = 0 ]
then
	echo '#kerberos auth and sasl
auth_mechanisms = plain gssapi

auth_krb5_keytab = /etc/keytabs/mail.keytab

passdb {
  driver = pam
}

userdb {
  driver = passwd
}

service auth {

  unix_listener /var/spool/postfix/private/auth {
    mode = 0660
    # Assuming the default Postfix user and group
    user = postfix
    group = postfix        
  }
}' >> /etc/dovecot/dovecot.conf
fi

#Configure ssl for dovecot
echo 'ssl_cert = </etc/ssl/mail/dovecot.pem' > /etc/dovecot/conf.d/10-ssl.conf
echo 'ssl_key = </etc/ssl/mail/dovecot.key' >> /etc/dovecot/conf.d/10-ssl.conf

#Configure imap password caching
sed -i 's/^!include auth-system\.conf\.ext/#!include auth-system.conf.ext/g' /etc/dovecot/conf.d/10-auth.conf

if [ `grep -c "args = cache_key" /etc/dovecot/dovecot.conf` = 0 ]
then 
	sed -i '/driver = pam/a\
  args = cache_key=%u dovecot' /etc/dovecot/dovecot.conf
fi

if [ `grep -c "#Cache imap passwords" /etc/dovecot/dovecot.conf` = 0 ]
then
	echo "#Cache imap passwords
	auth_cache_size = 10M
	auth_cache_ttl = 3600
	auth_cache_negative_ttl = 600" >> /etc/dovecot/dovecot.conf
fi


#Create folders for existing accounts
[ ! -d /home/users/email ] && mkdir -p /home/users/email
for USERNAME in `getent passwd | grep /home/users | cut -d: -f1`
do
	HOMEPATH=`getent passwd $USERNAME | cut -d: -f6`
	if [ ! -d /home/users/email/$USERNAME ]
	then
		mkdir /home/users/email/$USERNAME
		chmod -R 0600 /home/users/email/$USERNAME
		chmod -R u+X /home/users/email/$USERNAME
		chown -R $USERNAME /home/users/email/$USERNAME
	fi

	if [ ! -z $HOMEPATH ]
	then
		if [ ! -d $HOMEPATH ]
		then
			mkdir -p $HOMEPATH
			chmod -R 0600 $HOMEPATH
			chmod -R u+X $HOMEPATH
			chown -R $USERNAME $HOMEPATH
		fi
	fi
done

#Create folder for karoshi
if [ ! -d /home/users/email/karoshi ]
then
	mkdir /home/users/email/karoshi
	chmod -R 0600 /home/users/email/karoshi
	chmod -R u+X /home/users/email/karoshi
	chown -R karoshi /home/users/email/karoshi
fi

########################
#Modify postfix main.cf
########################

LINENUM=`grep -n myhostname' '= /etc/postfix/main.cf | cut -d: -f1`
sed -i $LINENUM'c'\myhostname' '=' 'mail.$REALM /etc/postfix/main.cf

LINENUM=`grep -n mydomain' '= /etc/postfix/main.cf | cut -d: -f1`
sed -i $LINENUM'c'\mydomain' '=' '$REALM /etc/postfix/main.cf

LINENUM=`grep -n masquerade_domains' '= /etc/postfix/main.cf | cut -d: -f1`
sed -i $LINENUM'c'\masquerade_domains' '=' '$REALM /etc/postfix/main.cf

########################
#Set mailname
########################
echo mail.$REALM > /etc/mailname

########################
#Configure mailscanner
########################

echo '<ul><li>'$"Configuring MailScanner"'</li></ul>'

#Update MailScanner
MAILSCANNERVER=4.85.2-3
if [ $(dpkg -l | grep mailscanner | tr -cd "0-9\-.\n") != $MAILSCANNERVER ]
then
	echo "<li>$EMAILSERVER - updating MailScanner</li>"

	#Install dependencies
	apt-get update
	apt-get install -y libhtml-tokeparser-simple-perl tnef libsys-sigaction-perl

	[ -f /tmp/mailscanner.tar.gz ] && rm -f /tmp/mailscanner.tar.gz
	[ -d /tmp/MailScanner-$MAILSCANNERVER ] && rm -f -R /tmp/MailScanner-$MAILSCANNERVER
	wget https://s3.amazonaws.com/mailscanner/release/v4/deb/MailScanner-$MAILSCANNERVER.deb.tar.gz -O /tmp/mailscanner.tar.gz
	tar -xvzf /tmp/mailscanner.tar.gz -C /tmp
	dpkg -i /tmp/MailScanner-$MAILSCANNERVER/mailscanner-$MAILSCANNERVER-noarch.deb
	#Tidy up
	rm -f /tmp/mailscanner.tar.gz
	rm -f -R /tmp/MailScanner-$MAILSCANNERVER
fi

[ -f /etc/MailScanner/MailScanner.conf ] && mv /etc/MailScanner/MailScanner.conf /etc/MailScanner/MailScannerold.conf
cp -f /opt/karoshi/serversetup/distro/$DISTROCHOICE/modules/mailscanner/MailScanner.conf /etc/MailScanner/
cp -f /opt/karoshi/serversetup/distro/$DISTROCHOICE/modules/mailscanner/mailscanner /etc/cron.hourly/

[ -d /var/spool/MailScanner/spamassassin ] || mkdir -p /var/spool/MailScanner/spamassassin
[ -d /var/spool/MailScanner/incoming ] || mkdir -p /var/spool/MailScanner/incoming
[ -d /var/spool/MailScanner/quarantine ] || mkdir -p /var/spool/MailScanner/quarantine
chown -R postfix.postfix /var/spool/MailScanner/spamassassin 1>/dev/null
chown -R postfix.postfix /var/spool/MailScanner/incoming 1>/dev/null
chown -R postfix.postfix /var/spool/MailScanner/quarantine 1>/dev/null
[ -f /etc/default/mailscanner ] && echo run_mailscanner=1 >> /etc/default/mailscanner

#Create watermark secret
MAILSCANNER_SECRET=$(openssl rand -hex 16)
sed -i "s/MAILSCANNER_SECRET/$MAILSCANNER_SECRET/g" /etc/MailScanner/MailScanner.conf

#Set organisation name
sed -i "s/CHANGETHISNAME/$REALM/g" /etc/MailScanner/MailScanner.conf
sed -i "s/X-YOURDOMAIN-COM/X-$REALM/g" /etc/MailScanner/spam.assassin.prefs.conf

#Link Mailscanner spamassasin
ln -s /etc/MailScanner/spam.assassin.prefs.conf /etc/spamassassin/mailscanner-spamassassin.cf

#Link MailScanner custom functions
ln -s /usr/share/MailScanner/MailScanner/CustomFunctions/ /etc/MailScanner/CustomFunctions

########################
#Ensure htaccess is enabled
########################
/opt/karoshi/serversetup/scripts/apache_htaccess

#######################
#Copy in alias data to /opt/karoshi
#######################
cp -f -R /opt/karoshi/serversetup/modules/email/postfixdata /opt/karoshi
chmod 0644 -R /opt/karoshi/postfixdata
chmod u+X,g+X,o+X -R /opt/karoshi/postfixdata
chown root.root -R /opt/karoshi/postfixdata 1>/dev/null

#Copy in scripts
cp -f /opt/karoshi/serversetup/modules/email/scripts/delete_old_mail /opt/karoshi/"useful scripts"/
cp -f /opt/karoshi/serversetup/modules/email/scripts/postfixstats /opt/karoshi/"useful scripts"/
cp -f /opt/karoshi/serversetup/modules/email/scripts/mailboxcheck /opt/karoshi/"useful scripts"/
#######################
#Create a cron job to run mailbox size checks
#######################
echo 0 1,9,17 '*' '*' '*' /opt/karoshi/'"'useful scripts'"'/mailboxcheck > /opt/karoshi/server_network/cronjobs/`hostname-fqdn`/jobs/mailboxcheck.cron
#Create a cron job to run postfix stats
echo 55 23 '*' '*' '*' /opt/karoshi/'"'useful scripts'"'/postfixstats > /opt/karoshi/server_network/cronjobs/`hostname-fqdn`/jobs/postfixstats.cron
#Create a cron job to delete old Trash and Spam mail
echo 55 23 '*' '*' '*' /opt/karoshi/'"'useful scripts'"'/delete_old_mail > /opt/karoshi/server_network/cronjobs/`hostname-fqdn`/jobs/delete_old_mail.cron
#Create a cronjob to update spamassassin
echo 10 07 '*' '*' '*' sa-update > /opt/karoshi/server_network/cronjobs/`hostname-fqdn`/jobs/update_spam_asassassin_rules.cron

#######################
#Refresh cronjobs
#######################
/opt/karoshi/serversetup/all/"useful scripts"/refreshcronjobs 1>/dev/null
#####################
#Create sogo mysql password for the new database
#####################
echo '<ul><li>'$"Creating the SOGo database in mysql"'</li></ul>'
#Get random password
passgen

SOGOPASS=`echo ${PASSWORD[@]:0} | sed 's/ //g'`

#############################
#Make sure that we know the root mysql password
#############################

/opt/karoshi/serversetup/all/"useful scripts"/mysql_root_pass
#Get root mysql password
MYSQLPASS=`sed -n 1,1p /etc/mysql.secret`

#Create sogo database
mysqladmin -f --password=$MYSQLPASS drop sogo 1>/dev/null 2>/dev/null
sleep 1
mysqladmin --password=$MYSQLPASS create sogo 1>/dev/null
sleep 1
echo GRANT ALL PRIVILEGES ON sogo.\* TO "'"sogo_user"'"@"'"localhost"'" IDENTIFIED BY "'"$SOGOPASS"'"';' > /opt/karoshi/.tempdata/mysqlperms.sql
mysql --password=$MYSQLPASS < /opt/karoshi/.tempdata/mysqlperms.sql
rm -f /opt/karoshi/.tempdata/mysqlperms.sql

#Copy in sogo config files
[ ! -d /etc/sogo/ ] && mkdir /etc/sogo/
cp -f /opt/karoshi/serversetup/modules/email/sogo/sogo.conf /etc/sogo/


SOGoPath=/etc/apache2/conf.d
[ -d /etc/apache2/conf-enabled/ ] && SOGoPath=/etc/apache2/conf-enabled
[ -d /etc/apache2/conf.d ] && cp -f /opt/karoshi/serversetup/modules/email/sogo/apache/SOGo.conf $SOGoPath
[ -d /etc/apache2/conf-enabled ] && cp -f /opt/karoshi/serversetup/modules/email/sogo/apache/SOGo.conf-2.4 $SOGoPath/SOGo.conf

#Set path to the correct version of sogo - /usr/local/lib or /usr/lib

if [ -f /usr/local/sbin/sogod ]
then
	#Assume we are running a compiled version of sogo
	sed -i 's/\/usr\/lib/\/usr\/local\/lib/g' $SOGoPath/SOGo.conf
fi

#Set sogo limits

echo PREFORK=25 > /etc/default/sogo
echo USER=sogo >> /etc/default/sogo  

#Modify /etc/sogo/sogo.conf

#Get timezone
TIMEZONE=`sed -n 1,1p /etc/timezone`

sed -i 's/CHANGETHISREALM/'$REALM'/g' /etc/sogo/sogo.conf
sed -i 's/CHANGETHISBASEDN/'$LDAPBASE'/g' /etc/sogo/sogo.conf
sed -i 's/CHANGETHISLDAPSERVER/'$LDAPSERVER'/g' /etc/sogo/sogo.conf
sed -i 's/CHANGEPASS/'$SOGOPASS'/g' /etc/sogo/sogo.conf
sed -i 's@CHANGETHISTIMEZONE@'$TIMEZONE'@g' /etc/sogo/sogo.conf

#Modify /etc/apache2/conf.d/SOGo.conf
sed -i 's/CHANGETHISWEBDOMAIN/'$ALIAS.$REALM'/g' $SOGoPath/SOGo.conf
sed -i 's/CHANGETHISKRBPATH/'$HOSTNAME.$REALM'/g' $SOGoPath/SOGo.conf
sed -i 's/CHANGETHISSERVERNAME/'$HOSTNAME'/g' $SOGoPath/SOGo.conf

#Enable apache modules
a2enmod proxy 1>/dev/null
a2enmod proxy_http 1>/dev/null
a2enmod headers 1>/dev/null
a2enmod rewrite 1>/dev/null

#Setup z-push for SOGo
/opt/karoshi/serversetup/modules/email/setupzpush $ALIAS

#Setup openchange
#/opt/karoshi/serversetup/modules/email/setupopenchange

#Restart apache
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/apache_stop 1>/dev/null 2>/dev/null
sleep 1
echo '<ul><li>'$"Starting Apache"'</li></ul>'
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/apache_start 1>/dev/null
#Restart sogo
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/sogo_stop 1>/dev/null 2>/dev/null
sleep 1
echo '<ul><li>'$"Starting Memcached"'</li></ul>'
#Start memcached
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/memcached_start 1>/dev/null
sleep 1
echo '<ul><li>'$"Starting SOGo"'</li></ul>'
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/sogo_start 1>/dev/null
###########################
###########################
echo "I accept the risk" > /etc/c-client.cf
echo "set disable-plaintext nil" >> /etc/c-client.cf
echo "set mail-subdirectory Mail" >> /etc/c-client.cf
echo >> /etc/c-client.cf
###########################
#make sure that mysql and apache are running
###########################
MYSQLSTATUS=`ps -e | grep -c -w $MYSQLDVER`
APACHESTATUS=`ps -e | grep -c -w $APACHEVER`
if [ $MYSQLSTATUS = 0 ]
then
	echo '<ul><li>'$"Starting MYSQL"'</li></ul>'
	/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/mysql_start 1>/dev/null
fi
if [ $APACHESTATUS = 0 ]
then
	echo '<ul><li>'$"Starting Apache"'</li></ul>'
	/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/apache_start 1>/dev/null
fi

##########################
#make sure that apache, postfix, mailscanner and imap is running
##########################
APACHESTATUS=`ps -e | grep -c $APACHEVER`
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/postfix_stop 1>/dev/null 2>/dev/null

#Create access file
touch /etc/postfix/access
postmap hash:/etc/postfix/access

cp -f /opt/karoshi/serversetup/distro/$DISTROCHOICE/modules/email/postfix/ldap-mail.cf /etc/postfix/
sed -i 's/CHANGETHISDN/'$LDAPBASE'/g' /etc/postfix/ldap-mail.cf
sed -i 's/CHANGETHISLDAPSERVER/'$LDAPSERVER'/g' /etc/postfix/ldap-mail.cf

echo "@$REALM root" > /etc/postfix/catchall
postmap hash:/etc/postfix/catchall

[ -f /etc/postfix/protected_distribution_lists ] && rm -f /etc/postfix/protected_distribution_lists
[ -f /etc/postfix/distribution_list_users ] && rm -f /etc/postfix/distribution_list_users

#Create user access files
touch /etc/postfix/deny_sending
touch /etc/postfix/deny_receiving
touch /etc/postfix/restricted_accounts
touch /etc/postfix/protected_distribution_lists
touch /etc/postfix/distribution_list_users
echo "$REALM	OK" > /etc/postfix/restricted_domains

#Populate protected_distribution_lists
for group in $(ls -1 /opt/karoshi/server_network/group_information)
do
	echo $group"	"allowed_distribution_users >> /etc/postfix/protected_distribution_lists
done

if [ -d /opt/karoshi/server_network/group_information_dynamic ]
then
	for group in $(ls -1 /opt/karoshi/server_network/group_information_dynamic)
	do
		echo $group"	"allowed_distribution_users >> /etc/postfix/protected_distribution_lists
	done
fi

#Populate distribution_list_users
for networkuser in $(getent passwd | grep /home/users/staff | cut -d: -f1)
do
	echo $networkuser@$REALM OK >> /etc/postfix/distribution_list_users
done

for networkuser in $(getent passwd | grep /home/users/itadminstaff | cut -d: -f1)
do
	echo $networkuser@$REALM OK >> /etc/postfix/distribution_list_users
done

for networkuser in $(getent passwd | grep /home/users/officestaff | cut -d: -f1)
do
	echo $networkuser@$REALM OK >> /etc/postfix/distribution_list_users
done

postmap hash:/etc/postfix/deny_sending
postmap hash:/etc/postfix/deny_receiving
postmap hash:/etc/postfix/restricted_accounts
postmap hash:/etc/postfix/restricted_domains
postmap hash:/etc/postfix/protected_distribution_lists
postmap hash:/etc/postfix/distribution_list_users
#############
#generate aliases.db in /etc/postfix/
#############
touch /etc/postfix/aliases
if [ `grep -c ^root: /etc/postfix/aliases` = 0 ]
then
	echo root:"	""	"sysadmin >> /etc/postfix/aliases
	echo postmaster:"	""	"sysadmin >> /etc/postfix/aliases
fi
newaliases
echo '<ul><li>'$"Starting Postfix"'</li></ul>'
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/postfix_start  1>/dev/null
if [ $APACHESTATUS = 0 ]
then
	echo '<ul><li>'$"Starting Apache"'</li></ul>'
	/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/apache_start 1>/dev/null
fi
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/mailscanner_stop 1>/dev/null 2>/dev/null
sleep 1
echo '<ul><li>'$"Starting ClamD"'</li></ul>'
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/clamd_start 1>/dev/null
echo '<ul><li>'$"Starting MailScanner"'</li></ul>'
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/mailscanner_start 

##########################
#Restart dovecot
##########################
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/dovecot_stop 1>/dev/null 2>/dev/null
sleep 0.5
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/dovecot_start 1>/dev/null

###########################
#Open shorewall ports
###########################
RESTART_SHOREWALL=no
MODCHECK=`grep -c -w \#apache_webserver_rule /etc/shorewall/rules`
if [ $MODCHECK = 0 ]
then
	RESTART_SHOREWALL=yes
	echo ''$"The following extra ports are being allowed" - tcp 80,443'<br><br>'
	LINENUM=`grep -n 'LAST LINE -- ADD YOUR ENTRIES BEFORE THIS ONE -- DO NOT REMOVE' /etc/shorewall/rules | cut -d: -f1`
	sed -i $LINENUM'c'\ACCEPT'	'net'	'fw'	'tcp'	'80,443'	'-'#'apache_webserver_rule /etc/shorewall/rules
	echo '#'LAST LINE -- ADD YOUR ENTRIES BEFORE THIS ONE -- DO NOT REMOVE >> /etc/shorewall/rules
fi

MODCHECK=`grep -c -w \#email_server_rule /etc/shorewall/rules`
if [ $MODCHECK = 0 ]
then
	RESTART_SHOREWALL=yes
	echo ''$"The following extra ports are being allowed" - tcp 25,110,143,993,995 udp 110,143,993,995'<br><br>'
	LINENUM=`grep -n 'LAST LINE -- ADD YOUR ENTRIES BEFORE THIS ONE -- DO NOT REMOVE' /etc/shorewall/rules | cut -d: -f1`
	sed -i $LINENUM'c'\ACCEPT'	'net'	'fw'	'tcp'	'25,110,143,993,995'	'-'#'email_server_rule /etc/shorewall/rules
	echo ACCEPT'	'net'	'fw'	'udp'	'25,110,143,993,995'	'-'#'email_server_rule >> /etc/shorewall/rules
	echo '#'LAST LINE -- ADD YOUR ENTRIES BEFORE THIS ONE -- DO NOT REMOVE >> /etc/shorewall/rules
fi


######################
#Restart shorewall
######################
if [ $RESTART_SHOREWALL = yes ]
then
	echo '<ul><li>'$"Restarting shorewall"'</li></ul>'
	/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/shorewall_stop 1>/dev/null
	sleep 1
	/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/shorewall_start 1>/dev/null
fi

######################
#Configure Fail2ban
######################

[ ! -d /opt/karoshi/server_network/security/fail2ban ] && mkdir -p /opt/karoshi/server_network/security/fail2ban
[ ! -f /opt/karoshi/server_network/security/fail2ban/email ] && cp -f /opt/karoshi/serversetup/all/fail2ban/jails/email /opt/karoshi/server_network/security/fail2ban/
[ ! -f /opt/karoshi/server_network/security/fail2ban/sogo ] && cp -f /opt/karoshi/serversetup/all/fail2ban/jails/sogo /opt/karoshi/server_network/security/fail2ban/
cat /opt/karoshi/server_network/security/fail2ban/* > /etc/fail2ban/jail.local
echo '<ul><li>'$"Starting Fail2ban"'</li></ul>'
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/fail2ban_stop 1>/dev/null
sleep 1
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/fail2ban_start 1>/dev/null
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/startonboot/fail2ban

###########################
#Show completed message
###########################
echo "<br>"$"SOGo has been installed and can be accessed from" - '<a href="https://'$ALIAS.$REALM'/SOGo" target="_blank">https://'$ALIAS.$REALM'/SOGo</a><br>'
exit
