#!/bin/bash
#karoshi_gluster
#Copyright (C) 2014  Paul Sharrad
#This program is free software; you can redistribute it and/or
#modify it under the terms of the GNU General Public License
#as published by the Free Software Foundation; either version 2
#of the License, or (at your option) any later version.
#
#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.
#
#You should have received a copy of the GNU General Public License
#along with this program; if not, write to the Free Software
#Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#
#The Karoshi Team can be contacted at: 
#mpsharrad@karoshi.org.uk
#jharris@karoshi.org.uk
#
#Website: http://www.karoshi.org.uk

LOG_DATE=`date +%F`

TYPE=replica

SERVERLIST=$1
VOLUME=$2
FOLDERPATH=$3
ACTION=$4

function usage {
echo -e "karoshi_gluster usage:\n\nkaroshi_gluster serverlist volume folderpath action\n\nserverlist - comma separated list of servers to create the gluster volume on.\n\nvolume - the name of the volume to create.\n\nfolderpath - the path to the that you want to convert to a glusterfs volume.\n\naction: create/add\n\ncreate: create a new gluster volume\nadd: add a new server to an existing volume.\n\nExample 1: Create a new glusterfs volume\n\nkaroshi_gluster server1.mydomain.com,server2.mydomain.com netlogon /var/lib/samba/netlogon create\n\nExample 2: An an extra server to a glusterfs volume\n\nkaroshi_gluster server3.mydomain.com netlogon /var/lib/samba/netlogon add\n"
}

if [ -z "$SERVERLIST" ]
then
usage
exit 101
fi

if [ -z "$VOLUME" ]
then
usage
exit 101
fi

if [ -z "$FOLDERPATH" ]
then
usage
exit 101
fi

if [ -z "$ACTION" ]
then
usage
exit 101
fi

echo `date`: karoshi_gluster serverlist:$SERVERLIST volume:$VOLUME folderpath:$FOLDERPATH action:$ACTION by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE

source /opt/karoshi/server_network/domain_information/domain_name
PORTS=111,24007:24009,49152:49200,34865:34867

#Make sure glusterfs is running
source /opt/karoshi/serversetup/variables/distro
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/startonboot/glusterfs
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/glusterfs_status
if [ $? != 0 ]
then
echo "<li> $HOSTNAME.$REALM - starting glusterfs</li>"
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/glusterfs_start
fi

############################
#Create a new gluster volume
############################

if [ $ACTION = create ]
then
COUNTER=0
#Check to see if a volume already exists with that name
if [ `gluster volume info $VOLUME 2>/dev/null | grep -c $VOLUME` != 0 ]
then
echo "<li> $SERVER: $VOLUME - a volume with this name already exists</li>"
exit 101
fi

for SERVERS in `echo $SERVERLIST | sed 's/,/ /g'`
do

SERVER=`basename $SERVERS`

GLUSTERCLUSTER=`echo $GLUSTERCLUSTER $SERVER:$FOLDERPATH-gluster`

if [ $SERVER = `hostname-fqdn` ]
then
#Open ports on firewall
if [ `grep -c "#karoshi_gluster" /etc/shorewall/rules` = 0 ]
then
echo "<li>$SERVER - Opening ports for glusterfs</li>"

LINENUM=`grep -n 'LAST LINE -- ADD YOUR ENTRIES BEFORE THIS ONE -- DO NOT REMOVE' /etc/shorewall/rules | cut -d: -f1`
sed -i $LINENUM'c'\ACCEPT'	'net'	'fw'	'tcp'	'$PORTS'	'-'#'karoshi_gluster /etc/shorewall/rules
echo ACCEPT'	'net'	'fw'	'udp'	'$PORTS'	'-'#'karoshi_gluster >> /etc/shorewall/rules
echo '#'LAST LINE -- ADD YOUR ENTRIES BEFORE THIS ONE -- DO NOT REMOVE >> /etc/shorewall/rules

/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/shorewall_stop 1>/dev/null
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/shorewall_start 1>/dev/null

fi

#Delete brick folder if it exists
[ -d $FOLDERPATH-gluster ] && rm -f -R $FOLDERPATH-gluster

else
ssh -o PasswordAuthentication=no -o ConnectTimeout=3 $SERVER '

source /opt/karoshi/serversetup/variables/distro

#Open ports on firewall
if [ `grep -c "#karoshi_gluster" /etc/shorewall/rules` = 0 ]
then
echo "<li>'$SERVER' - Opening ports for glusterfs</li>"

LINENUM=`grep -n "LAST LINE -- ADD YOUR ENTRIES BEFORE THIS ONE -- DO NOT REMOVE" /etc/shorewall/rules | cut -d: -f1`
sed -i $LINENUM"c"\ACCEPT"	"net"	"fw"	"tcp"	"'$PORTS'"	"-"#"karoshi_gluster /etc/shorewall/rules
echo ACCEPT"	"net"	"fw"	"udp"	"'$PORTS'"	"-"#"karoshi_gluster >> /etc/shorewall/rules
echo "#"LAST LINE -- ADD YOUR ENTRIES BEFORE THIS ONE -- DO NOT REMOVE >> /etc/shorewall/rules

/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/shorewall_stop 1>/dev/null
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/shorewall_start 1>/dev/null

fi

#Delete brick folder if it exists
[ -d '$FOLDERPATH'-gluster ] && rm -f -R '$FOLDERPATH'-gluster

#Make sure glusterfs is running
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/startonboot/glusterfs
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/glusterfs_status
if [ $? != 0 ]
then
echo "<li> '$SERVER' - starting glusterfs</li>"
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/glusterfs_start
fi
gluster peer probe '$HOSTNAME.$REALM'
'
gluster peer probe $SERVER
fi

let COUNTER=$COUNTER+1

done

#Create glusterfs volume
echo "<li>Creating GlusterFS volume for $VOLUME</li>"
gluster volume create $VOLUME $TYPE $COUNTER $GLUSTERCLUSTER force
if [ $? != 0 ]
then
echo "<li>There was a problem creating the volume for $VOLUME</li>"
exit 101
fi
#Start Gluster volume
echo "<li>Starting GlusterFS volume for $VOLUME</li>"
gluster volume start $VOLUME
if [ $? != 0 ]
then
echo "<li>There was a problem starting the volume for $VOLUME</li>"
exit 101
fi

for SERVERS in `echo $SERVERLIST | sed 's/,/ /g'`
do

SERVER=`basename $SERVERS`

if [ $SERVER = `hostname-fqdn` ]
then
#Move folder path if it exists
if [ -d $FOLDERPATH ]
then
echo "<li>$SERVER - Backing up $FOLDERPATH</li>"
mv $FOLDERPATH $FOLDERPATH.pregluster.$$
fi

#Create empty folder to mount to 
[ ! -d $FOLDERPATH ] && mkdir -p $FOLDERPATH
#Mount volume
echo "<li>'$SERVER' - Mounting '$FOLDERPATH'</li>"
mount -t glusterfs $SERVER:/$VOLUME $FOLDERPATH

#Add entry to fstab
if [ `grep -c ^#glusterfs-$VOLUME /etc/fstab` = 0 ]
then
echo "#glusterfs-$VOLUME" >> /etc/fstab
echo "$SERVER:/$VOLUME $FOLDERPATH glusterfs defaults,_netdev 0 0" >> /etc/fstab
fi

#Create mount command
echo -e '#!/bin/bash
#Check if glusterfs is needed
if [ `grep -c gluster /etc/fstab` -gt 0 ]
then
#Wait for glusterfs to start
source /opt/karoshi/serversetup/variables/distro
STATUS=1
COUNTER=0
while [ $STATUS = 1 ] && [ $COUNTER != 120 ]
do
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/glusterfs_status
STATUS=$?
sleep 1

if [ $STATUS = 0 ]
then
#Hopefully gluster is now started so mount the gluster shares
mount -a
exit
fi

let COUNTER=$COUNTER+1
done
fi
exit' > /etc/rc2.d/S99mount_gluster_shares
chmod 0755 /etc/rc2.d/S99mount_gluster_shares

else
ssh -o PasswordAuthentication=no -o ConnectTimeout=3 $SERVER '
#Move folder path if it exists
if [ -d '$FOLDERPATH' ]
then
echo "<li>'$SERVER' - Backing up '$FOLDERPATH'</li>"
mv '$FOLDERPATH' '$FOLDERPATH'.pregluster.'$$'
fi

#Create empty folder to mount to 
[ ! -d '$FOLDERPATH' ] && mkdir -p '$FOLDERPATH'

#Mount volume
echo "<li>'$SERVER' - Mounting '$FOLDERPATH'</li>"
mount -t glusterfs '$SERVER':/'$VOLUME' '$FOLDERPATH'

#Add entry to fstab
if [ `grep -c ^#glusterfs-'$VOLUME' /etc/fstab` = 0 ]
then
echo "#glusterfs-'$VOLUME'" >> /etc/fstab
echo "'$SERVER':/'$VOLUME' '$FOLDERPATH' glusterfs defaults,_netdev 0 0" >> /etc/fstab
fi

#Create mount command
echo -e "#!/bin/bash
#Check if glusterfs is needed
if [ \`grep -c gluster /etc/fstab\` -gt 0 ]
then
#Wait for glusterfs to start
source /opt/karoshi/serversetup/variables/distro
STATUS=1
COUNTER=0
while [ \$STATUS = 1 ] && [ \$COUNTER != 120 ]
do
/opt/karoshi/serversetup/distro/\$DISTROCHOICE/scripts/control_services/glusterfs_status
STATUS=$?
sleep 1

if [ \$STATUS = 0 ]
then
#Hopefully gluster is now started so mount the gluster shares
mount -a
exit
fi

let COUNTER=\$COUNTER+1
done
fi
exit" > /etc/rc2.d/S99mount_gluster_shares
chmod 0755 /etc/rc2.d/S99mount_gluster_shares
'
fi
done

#Copy in data to gluster cluster
echo "<li>`hostname-fqdn` - Copying in existing data to '$FOLDERPATH'</li>"
cp -f -R $FOLDERPATH.pregluster.$$/* $FOLDERPATH/ 

fi

###########################
#Add an extra server to an existing gluster volume
###########################

if [ $ACTION = add ]
then
SERVER=$SERVERLIST
echo "<li>$SERVER - Adding server to $VOLUME gluster volume"
#Start gluster on the remote server
ssh -o PasswordAuthentication=no -o ConnectTimeout=3 $SERVER '

source /opt/karoshi/serversetup/variables/distro

#Open ports on firewall
if [ `grep -c "#karoshi_gluster" /etc/shorewall/rules` = 0 ]
then
echo "<li>'$SERVER' - Opening ports for glusterfs</li>"

LINENUM=`grep -n "LAST LINE -- ADD YOUR ENTRIES BEFORE THIS ONE -- DO NOT REMOVE" /etc/shorewall/rules | cut -d: -f1`
sed -i $LINENUM"c"\ACCEPT"	"net"	"fw"	"tcp"	"'$PORTS'"	"-"#"karoshi_gluster /etc/shorewall/rules
echo ACCEPT"	"net"	"fw"	"udp"	"'$PORTS'"	"-"#"karoshi_gluster >> /etc/shorewall/rules
echo "#"LAST LINE -- ADD YOUR ENTRIES BEFORE THIS ONE -- DO NOT REMOVE >> /etc/shorewall/rules

/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/shorewall_stop 1>/dev/null
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/shorewall_start 1>/dev/null

fi

#Delete brick folder if it exists
[ -d '$FOLDERPATH'-gluster ] && rm -f -R '$FOLDERPATH'-gluster

#Make sure glusterfs is running
source /opt/karoshi/serversetup/variables/distro
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/startonboot/glusterfs
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/glusterfs_status
if [ $? != 0 ]
then
echo "<li> '$SERVER' - starting glusterfs</li>"
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/glusterfs_start
fi
echo "<li>$SERVER - probing server - in ssh</li>"
gluster peer probe '$HOSTNAME.$REALM'
echo "<li>$SERVER - probing server completed - in ssh</li>"
'
#Add server to pool
echo "<li>$SERVER - probing server</li>"
gluster peer probe $SERVER
echo boo
echo "<li>$SERVER - getting brick count</li>"
#Get current number of bricks in the volume
BRICKCOUNT=`gluster volume info netlogon | grep "Bricks: " | cut -d"=" -f2 | sed 's/ //g'`
let BRICKCOUNT=$BRICKCOUNT+1

echo "<li> '$SERVER' - adding $FOLDERPATH-gluster to $VOLUME $</li>"

#gluster volume add-brick $VOLUME  replica $$BRICKCOUNT $SERVER:/$FOLDERPATH-gluster
gluster volume add-brick $VOLUME replica $BRICKCOUNT $SERVER:$FOLDERPATH-gluster force


#Mount the drive
ssh -o PasswordAuthentication=no -o ConnectTimeout=3 $SERVER '
source /opt/karoshi/serversetup/variables/distro
#Mount volume
echo "<li>'$SERVER' - Mounting '$FOLDERPATH'</li>"
mount -t glusterfs '$SERVER':/'$VOLUME' '$FOLDERPATH'

#Add entry to fstab
if [ `grep -c ^#glusterfs-'$VOLUME' /etc/fstab` = 0 ]
then
echo "#glusterfs-'$VOLUME'" >> /etc/fstab
echo "'$SERVER':/'$VOLUME' '$FOLDERPATH' glusterfs defaults,_netdev 0 0" >> /etc/fstab
fi

#Create mount command
echo -e "#!/bin/bash
#Check if glusterfs is needed
if [ \`grep -c gluster /etc/fstab\` -gt 0 ]
then
#Wait for glusterfs to start
source /opt/karoshi/serversetup/variables/distro
STATUS=1
COUNTER=0
while [ \$STATUS = 1 ] && [ \$COUNTER != 120 ]
do
/opt/karoshi/serversetup/distro/\$DISTROCHOICE/scripts/control_services/glusterfs_status
STATUS=$?
sleep 1

if [ \$STATUS = 0 ]
then
#Hopefully gluster is now started so mount the gluster shares
mount -a
exit
fi

let COUNTER=\$COUNTER+1
done
fi
exit" > /etc/rc2.d/S99mount_gluster_shares
chmod 0755 /etc/rc2.d/S99mount_gluster_shares


'
fi

exit

