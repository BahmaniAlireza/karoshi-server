#!/bin/bash
#Copyright (C) 2015 Paul Sharrad

#This file is part of Karoshi Server.
#
#Karoshi Server is free software: you can redistribute it and/or modify
#it under the terms of the GNU Affero General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#Karoshi Server is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU Affero General Public License for more details.
#
#You should have received a copy of the GNU Affero General Public License
#along with Karoshi Server.  If not, see <http://www.gnu.org/licenses/>.

#
#The Karoshi Team can be contacted at: 
#mpsharrad@karoshi.org.uk
#jsharrad@karoshi.org.uk

#
#Website: http://www.karoshi.org.uk

LOG_DATE=$(date +%F)

read DATA
DATA=$(echo "$DATA" | tr -cd 'A-Za-z0-9\._:\-')
if [[ -z "$DATA" ]]
then
	echo "$(date): client_create_cert - no data" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi
REMOTE_USER=$(echo "$DATA" | cut -s -d: -f1)
REMOTE_ADDR=$(echo "$DATA" | cut -s -d: -f2)
CLIENTNAME=$(echo "$DATA" | cut -s -d: -f4)

if [[ -z $CLIENTNAME ]]
then
	echo "$(date): client_create_cert - blank client name by $REMOTE_USER from $REMOTE_ADDR" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi

echo "$(date): client_create_cert - creating openvpn client certificates for $CLIENTNAME by $REMOTE_USER from $REMOTE_ADDR" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"

#Set certificate variables
source /opt/karoshi/server_network/domain_information/domain_name

#Fallback incase LANG variable is not set 
if [ -z "$LANG" ]
then
	source /etc/default/locale
fi

COUNTRY=$(echo "$LANG" | cut -d_ -f2 | cut -d. -f1)
STATE=$(cut -d/ -f1 < /etc/timezone)
CITY=$(cut -d/ -f2 < /etc/timezone)
EMAILADDRESS="$CLIENTNAME@$REALM"

#SSH to the openvpn server to create the certificates
VPNSERVER=$(sed -n 1,1p /opt/karoshi/server_network/vpnserver)

ssh -o PasswordAuthentication=no -o ConnectTimeout=3 "$VPNSERVER" '
cd /etc/openvpn/easy-rsa
. ./vars


#Check to see if we already have a certificate for the user since they have to have a separate certifacate for each device they want to connect with at the same time.
CLIENTNAME="'"$CLIENTNAME"'"
COUNTER=1
while [ -f /etc/openvpn/easy-rsa/keys/"$CLIENTNAME".'"$REALM"'.ovpn ]
do
	CLIENTNAME="$(echo "$CLIENTNAME" | cut -d"-" -f1)-$COUNTER"
	((COUNTER += 1))	
done


#Squirt data into cert generators
function pipe_data {
echo -e "'"$COUNTRY"'\n'"$STATE"'\n'"$CITY"'\n'"$REALM"'\n'"$REALM"'\n"$CLIENTNAME".'"$REALM"'\n'"$REALM"'\n'"$EMAILADDRESS"'\n'"$OPENVPNPASS"'\n\n"
sleep 1
echo -e "y\ny\n"
}

pipe_data | ./build-key "$CLIENTNAME".'"$REALM"' 1>/dev/null


#Create a unified certificate for the client to use.

echo "client
dev tun
proto udp
remote '"$REALM"' 1194
resolv-retry infinite
nobind
persist-key
persist-tun
ca ca.crt
cert "$CLIENTNAME".'"$REALM"'.crt
key "$CLIENTNAME".'"$REALM"'.key" > /etc/openvpn/easy-rsa/keys/"$CLIENTNAME".'"$REALM"'.ovpn

#Check if we have openvpn ldap auth
if [ -f /usr/lib/openvpn/openvpn-auth-ldap.so ]
then
	echo "auth-user-pass" >> /etc/openvpn/easy-rsa/keys/"$CLIENTNAME".'"$REALM"'.ovpn
fi
echo "ns-cert-type server
comp-lzo
verb 3
" >> /etc/openvpn/easy-rsa/keys/"$CLIENTNAME".'"$REALM"'.ovpn

echo -e "\n<ca>" >> /etc/openvpn/easy-rsa/keys/"$CLIENTNAME".'"$REALM"'.ovpn
cat /etc/openvpn/easy-rsa/keys/ca.crt >> /etc/openvpn/easy-rsa/keys/"$CLIENTNAME".'"$REALM"'.ovpn
echo -e "</ca>\n<cert>" >> /etc/openvpn/easy-rsa/keys/"$CLIENTNAME".'"$REALM"'.ovpn
cat /etc/openvpn/easy-rsa/keys/"$CLIENTNAME".'"$REALM"'.crt >> /etc/openvpn/easy-rsa/keys/"$CLIENTNAME".'"$REALM"'.ovpn
echo -e "</cert>\n<key>" >> /etc/openvpn/easy-rsa/keys/'"$CLIENTNAME"'.'"$REALM"'.ovpn
cat /etc/openvpn/easy-rsa/keys/"$CLIENTNAME".'"$REALM"'.key >> /etc/openvpn/easy-rsa/keys/"$CLIENTNAME".'"$REALM"'.ovpn
echo -e "</key>" >> /etc/openvpn/easy-rsa/keys/"$CLIENTNAME".'"$REALM"'.ovpn
'
exit
