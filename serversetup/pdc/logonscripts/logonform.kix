;Copyright (C) 2006  Artie Ball
;Copyright (C) 2006  The karoshi Team
;This program is free software; you can redistribute it and/or
;modify it under the terms of the GNU General Public License
;as published by the Free Software Foundation; either version 2
;of the License, or (at your option) any later version.
;
;This program is distributed in the hope that it will be useful,
;but WITHOUT ANY WARRANTY; without even the implied warranty of
;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;GNU General Public License for more details.
;
;You should have received a copy of the GNU General Public License
;along with this program; if not, write to the Free Software
;Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
;
;The Karoshi Team can be contacted at: 
;mpsharrad@karoshi.org.uk
;jharris@karoshi.org.uk
;aball@karoshi.org.uk
;aloughlin@karoshi.org.uk
;
;Website: http://www.karoshi.org.uk 

;****************************************************************************************************
; Created on 27/07/07 by RTB
; Modified on 12/07/2013 for Samba4 support by RTB 
;
;****************************************************************************************************

;DEBUG ON

;****************************************************************************************************
;  Set Break
;****************************************************************************************************
;Break Off
Break On


;****************************************************************************************************
;  Global Variables
;****************************************************************************************************
Global $time
Global $DebugMessages[0]

;****************************************************************************************************
;  Common Variables
;****************************************************************************************************
$TRUE 		= 1
$FALSE 		= 0
$logonspeed="300" ; 100 - quick 300 - medium 600 - slow
$dologging="ON"
$verfile = "c:\kix\sversion.ini"
$scriptver="1.00"
$lserver=LCASE(@LSERVER)
$realm="CHANGETHISREALM"
$pserver="\\franklin" ;programs server
$printserver="ada"

$cmisshare="\\cmis02\Facility$"
$simsshare="\\dgsbsims\SIMS_shared$"

$cmisdrive="e:"
$simsdrive="s:"
$homedrive="g:"

$logginglocation=$lserver + "\logging"
$groupsfile=$lserver + "\netlogon\groups.txt"
$printersfile=$lserver + "\netlogon\printers.txt"
$KixDir="C:\Kix"


;****************************************************************************************************
;Set variables for user
;****************************************************************************************************
$username=LCase(@userid)

;****************************************************************************************************
;Get & Set Workstation Information - Location CMIS and SIMS
;****************************************************************************************************
$location=ReadValue("HKEY_LOCAL_MACHINE\Software\karoshi","location")
If @error<>0
	MessageBox("This workstation is not configured for location specific functionality. Contact the system administrator.","No location Name Present",16)
EndIf

;is this a CMIS workstation?
$iscmisws=ReadValue("HKEY_LOCAL_MACHINE\Software\karoshi","iscmisws")

;is this a SIMS workstation?
$issimsws=ReadValue("HKEY_LOCAL_MACHINE\Software\karoshi","issimsws")


;****************************************************************************************************
;  Default Settings
;****************************************************************************************************
$progressstep=3
$sleeptime=0
$numerrors=0
$tmpdir=ExpandEnvironmentVars("%tmp%")
$systemdrive=ExpandEnvironmentVars("%systemdrive%")
$windir=ExpandEnvironmentVars("%windir%")
$comspec=ExpandEnvironmentVars("%comspec%")
$NumMessages=0
$DebugMessages[$NumMessages]="-BEGIN--------------------------"

;****************************************************************************************************
;  Main Application
;****************************************************************************************************

;Who has logged on?
DBGMessage( "Info", "Logged On User: "+$username)

DrawForms()

DropAllShares()

ConnectDrives()

SetPrintersLSR()



While $ProgressBar.Value < 100
	Progress("Finalizing",20)
Loop

CheckIfLaptop()

;DoWinConfig()


If $dologging = "ON"
	WriteLogFile(1)
Else
	WriteLogFile(0)
EndIf


;Sleep 2

;MessageBox("Data: $pgroup", "KiXtart", 64)

Exit 1

;***********************************************************************
;**
;**  Functions
;**
;***********************************************************************
;**  Draw the Form
;***********************************************************************
Function DrawForms()

; Form
	$System = CreateObject("Kixtart.System")
	$Form = $System.Form()
	$Form.Text = "Karoshi Logon Script"
	$form.FormBorderStyle = $System.FormBorderStyle.None
	$form.StartPosition = $system.formStartPosition.centerScreen
	$Form.BackgroundImage = "bgnd.bmp" 
	$Form.BackColor = #b8dbfc
	$Form.Width = 495
	$Form.Height = 225
	; ClockTimer
	$Timer = $Form.Timer($logonspeed,0,0,15,15)
	$Timer.OnTimer = "UpdateClock()"

; Logo
	$Logo = $Form.Controls.Add("PictureBox")
	$Logo.BorderStyle = "None"
	$Logo.Dock=Top
	$Logo.Width=500
	$Logo.Height=50
	$Logo.Picture="logov513.bmp"


; Info Frame 
	$InfoFrame = $Form.Controls.Add("GroupBox")
	$InfoFrame.Text = "Environment"
	$InfoFrame.Bounds = 6,55,240,140

	$UserIdLbl = $InfoFrame.Controls.Add("Label")
	$UserIdLbl.Text = "User ID:"
	$UserIdLbl.Bounds = 20,15,100,15
	$UserIdBox = $InfoFrame.Controls.Add("Label")
	$UserIdBox.Text = $username
	$UserIdBox.BorderStyle = "None"
	$UserIdBox.Bounds = 120,15,115,15
	$UserIdBox.BackColor = $Form.BackColor	

	$GroupLbl = $InfoFrame.Controls.Add("Label")
	$GroupLbl.Text = "Group ID:"
	$GroupLbl.Bounds = 20,30,100,15
	$GroupBox = $InfoFrame.Controls.Add("Label")
	$GroupBox.Text = $pgroup
	$GroupBox.BorderStyle = "None"
	$GroupBox.Bounds = 120,30,115,15
	$GroupBox.BackColor = $Form.BackColor	
	
	$WorkStnLbl = $InfoFrame.Controls.Add("Label")
	$WorkStnLbl.Text = "Workstation:"
	$WorkStnLbl.Bounds = 20,45,100,15
	$WorkStnBox = $InfoFrame.Controls.Add("Label")
	$WorkStnBox.Text = @WKSTA
	$WorkStnBox.BorderStyle = "None"
	$WorkStnBox.Bounds = 120,45,115,15
	$WorkStnBox.BackColor = $Form.BackColor		
	
	$DomainLbl = $InfoFrame.Controls.Add("Label")
	$DomainLbl.Text = "Domain:"
	$DomainLbl.Bounds = 20,60,100,15
	$DomainBox = $InfoFrame.Controls.Add("Label")
	$DomainBox.Text = @DOMAIN
	$DomainBox.BorderStyle = "None"
	$DomainBox.Bounds = 120,60,115,15
	$DomainBox.BackColor = $Form.BackColor	
	
	$ServerLbl = $InfoFrame.Controls.Add("Label")
	$ServerLbl.Text = "Server:"
	$ServerLbl.Bounds = 20,75,100,15
	$ServerBox = $InfoFrame.Controls.Add("Label")
	$ServerBox.Text = @LSERVER
	$ServerBox.BorderStyle = "None"
	$ServerBox.Bounds = 120,75,115,15
	$ServerBox.BackColor = $Form.BackColor		
	
	$OSLbl = $InfoFrame.Controls.Add("Label")
	$OSLbl.Text = "Product:"
	$OSLbl.Bounds = 20,90,100,15
	$OSBox = $InfoFrame.Controls.Add("Label")
	$OSBox.Text = @PRODUCTTYPE
	$OSBox.BorderStyle = "None"
	$OSBox.Bounds = 120,90,115,15
	$OSBox.BackColor = $Form.BackColor
	
	$ServPackLbl = $InfoFrame.Controls.Add("Label")
	$ServPackLbl.Text = "Service Pack:"
	$ServPackLbl.Bounds = 20,105,100,15
	$ServPackBox = $InfoFrame.Controls.Add("Label")
	$ServPackBox.Text = @CSD
	$ServPackBox.BorderStyle = "None"
	$ServPackBox.Bounds = 120,105,115,15
	$ServPackBox.BackColor = $Form.BackColor
	
	$KixVerLbl = $InfoFrame.Controls.Add("Label")
	$KixVerLbl.Text = "Kix Version:"
	$KixVerLbl.Bounds = 20,120,100,15
	$KixVerBox = $InfoFrame.Controls.Add("Label")
	$KixVerBox.Text = @KIX
	$KixVerBox.BorderStyle = "None"
	$KixVerBox.Bounds = 120,120,115,15
	$KixVerBox.BackColor = $Form.BackColor


; Action Frame
	$ActionFrame = $Form.Controls.Add("GroupBox")
	$ActionFrame.Text = "Actions"
	$ActionFrame.Bounds = 250,55,240,140

	$DropSharesLbl = $ActionFrame.Controls.Add("Label")
	$DropSharesLbl.Text = "Drop All Shares:"
	$DropSharesLbl.Bounds = 20,15,100,15

	$DropSharesResLbl = $ActionFrame.Controls.Add("Label")
	$DropSharesResLbl.Bounds = 120,15,100,15

	
	$ConnectDrivesLbl = $ActionFrame.Controls.Add("Label")
	$ConnectDrivesLbl.Text = "Connect Drives:"
	$ConnectDrivesLbl.Bounds = 20,30,100,15

	$ConnectDrivesResLbl = $ActionFrame.Controls.Add("Label")
	$ConnectDrivesResLbl.Bounds = 120,30,100,15

	
	$PrintersLbl = $ActionFrame.Controls.Add("Label")
	$PrintersLbl.Text = "Connect Printers:"
	$PrintersLbl.Bounds = 20,45,100,15

	$PrintersResLbl = $ActionFrame.Controls.Add("Label")
	$PrintersResLbl.Bounds = 120,45,100,15

	
	$WriteLogLbl = $ActionFrame.Controls.Add("Label")
	$WriteLogLbl.Text = "Write Logfile:"
	$WriteLogLbl.Bounds = 20,60,100,15

	$WriteLogResLbl = $ActionFrame.Controls.Add("Label")
	$WriteLogResLbl.Bounds = 120,60,100,15

	
; Progress Bar
	$ProgressTextBox = $Form.Controls.Add("TextBox")
	$ProgressTextBox.Bounds = 6,198,240,20
	$ProgressTextBox.BackColor = $Form.BackColor

	$ProgressBar = $Form.Controls.Add("ProgressBar")
	$ProgressBar.Bounds = 250,198,180,20
	$ProgressBar.Style = 0
	

	
; Clock
	$CurrentTime=@Time
	$Clock = $Form.Controls.Add("Textbox")
	$Clock.Bounds = 435,198,55,20
	$Clock.Alignment=2
	$Clock.Enabled=1
	$Clock.BackColor=$Form.BackColor

$Form.Show
; DebugForm
If $DebugFlag=$True
	$DbgForm = CreateObject("Kixtart.Form")	
	$DbgForm.Text = "DebugBox"
	$DbgForm.Width = 260
	$DbgForm.Height = 500
	$DbgForm.Left=1024 -260
	$DbgFOrm.Top=768 - 550
	
	$DbgTextBox=$DbgForm.TextBox()
	$DbgTextBox.Left=5
	$DbgTextBox.Top=5
	$DbgTextBox.Width=245
	$DbgTextBox.Height=465
	$DbgTextBox.MultiLine=1
	$DbgTextBox.Enable=0
	$DbgTextBox.Text=""
	$DbgTextBox.ScrollBars=2
	$DbgTextBox.Wordwrap=1	
	
	$CurrentX=0
	$CurrentY=0
	$DbgForm.Show
EndIf	

EndFunction

;***********************************************************************
;**  Update the clock
;***********************************************************************
Function UpdateClock()
	If @Time<>$time
		$Clock.Text=@Time
		$time=@time
	EndIf
EndFunction


;****************************************************************************************************
;  Drop all shares
;****************************************************************************************************
Function DropAllShares()
	$DropSharesLbl.ForeColor = Blue
	Progress( "Dropping All Shares")
	Use * /DELETE
	If @ERROR<>0
		DBGMessage ("Error","Dropping All Shares:")
		$DropSharesResLbl.ForeColor = Red
		$DropSharesResLbl.FontBold = 1
		$DropSharesResLbl.Text = "FAILED"
	Else
		DbgMessage("Info","Dropping All Shares:")
		$DropSharesResLbl.ForeColor = Green
		$DropSharesResLbl.FontBold = 1
		$DropSharesResLbl.Text = "OK"
	EndIf
		$DropSharesLbl.ForeColor = Black	
EndFunction

;***********************************************************************
;**  Connecting Drives
;***********************************************************************
Function ConnectDrives()
	$ConnectDrivesLbl.ForeColor = Blue
	Progress( "Connecting Drives")
	DbgMessage("Info","Connecting Drives:")
	ConnectHomeDrive()
	ConnectGroupDrives()
	If @ERROR<>0
		DBGMessage ("Error","Connecting Drives:")
		$ConnectDrivesResLbl.ForeColor = Red
		$ConnectDrivesResLbl.FontBold = 1
		$ConnectDrivesResLbl.Text = "FAILED"
	Else
		DbgMessage("Info","Connecting Drives:")
		$ConnectDrivesResLbl.ForeColor = Green
		$ConnectDrivesResLbl.FontBold = 1
		$ConnectDrivesResLbl.Text = "OK"
	EndIf
	$ConnectDrivesLbl.ForeColor = Black	
EndFunction

;***********************************************************************
;**  Connecting Home Drive
;***********************************************************************
Function ConnectHomeDrive()

	ConnectShare("$homedrive, $lserver\dfs\homes\$username")

EndFunction


;***********************************************************************
;**  Connect GroupShares to Drives Format: "Drive Letter:, \\Server\Sharename"
;***********************************************************************
Function ConnectGroupDrives()
Call "$lserver\netlogon\windows_settings/drives/$pgroup.kix"
EndFunction

;***********************************************************************
;**  Connect Shares
;***********************************************************************
Function ConnectShare( $DriveDefinition)
	$DriveLetter=SubStr($DriveDefinition,1,InStr($DriveDefinition,",")-1)
	$DriveDefinition=LTrim(RTrim(SubStr($DriveDefinition,InStr($DriveDefinition,",")+1)))
	$Share=LTrim(RTrim(SubStr($DriveDefinition,InStr($DriveDefinition,",")+1)))
	If ($NT_mode = "no") 
		DelKey("HKEY_CURRENT_USER\Network\Persistent\" + $DriveLetter)
	EndIf
	Progress( "Connecting " + $DriveLetter + " to " + $Share)
	DbgMessage("Info","- Connecting " + $DriveLetter + " on " + $Share)
	Use $DriveLetter $Share
	If @ERROR <> 0
		DBGMessage ( "Error","- Connecting " + $DriveLetter + " on " + $Share )
	EndIf

	;sleep 2

EndFunction 

;***********************************************************************
;**  Update Progress Bar
;***********************************************************************
Function Progress($ProgressText,optional $Step)
	If $Step=""
		$Step=$progressstep
	EndIf
	$ProgressTextBox.Text=$ProgressText
	If $ProgressBar.Value + $Step < 101
		$ProgressBar.Value=$ProgressBar.Value+$Step
		If $DebugFlag = $TRUE		 
			Sleep $sleeptime
		EndIf
	Else
		$ProgressBar.Value=100
	EndIf
	$=Execute($Form.DoEvents())
EndFunction

;***********************************************************************
;**  Function: DBGMessage
;**  Usage: DBGMessage( "Debug", "This is a debug Message" ) 
;**  DebugType : Info, Debug, Error
;***********************************************************************
Function DBGMessage($DebugType, $DebugMessage, Optional $SError)
	Select
		Case $DebugLevel="Error"
			If $DebugType="Info" Or $DebugType="Debug"
				Return
			EndIf
		Case $DebugLevel="Info"
			If $DebugType="Debug"
				Return
			EndIf
	EndSelect
	
	If $DebugType="Error"
		$numerrors=$numerrors+1
	EndIf
	$NumMessages=$NumMessages + 1
	ReDim Preserve $DebugMessages[$NumMessages]
	
	$DebugTime="" + @Date + " - " + @Time +" >"
	$DebugText=$DebugType + " : " + $DebugMessage
	If $SError<>""
		 $DebugText=$DebugText + " | Additional Info: @SERROR"
	EndIf
	
	$DebugMessages[$NumMessages]=$DebugTime + $DebugText
	If $DebugFlag = $TRUE		 
		$DbgTextBox.Text=$DbgTextBox.Text + $DebugText + @CRLF
		Sleep $sleeptime
	EndIf		
EndFunction

;***********************************************************************
;**  Write Log File
;***********************************************************************
Function WriteLogFile($status)

	If NOT $status
		DBGMessage ("Error","Write Logfile:")
		$WriteLogResLbl.ForeColor = Green
		$WriteLogResLbl.FontBold = 1
		$WriteLogResLbl.Text = "Disabled"
	Else
		DbgMessage("Info","Write Logfile:")
		$WriteLogResLbl.ForeColor = Green
		$WriteLogResLbl.FontBold = 1
		$WriteLogResLbl.Text = "OK"
	
		; Display DebugMessage
		$WriteLogLbl.ForeColor = Black
		Progress( "Writing Logfile")
		$LogFile=$logginglocation + "\" + @Wksta + ".log"
		If Exist($LogFile)
			If GetFileSize($LogFile) > 512 * 1024
				Del($LogFile)
			EndIf
		EndIf
	
		$NumMessages=$NumMessages + 1
		ReDim PRESERVE $DebugMessages[$NumMessages]
		$DebugMessages[$NumMessages]="-END----------------------------"
	
		If Open(1, $LogFile,5) = 0
			For $x=0 to $NumMessages
				If WriteLine(1, $DebugMessages[$x] + @CRLF)<>0
					DbgMessage("Error","DebugLine could not be written")
				EndIf
			Next
			If Close(1)<>0
				DbgMessage("Error","Log File could not be closed")
			EndIf
		Else
			DbgMessage("Debug","Log file could not be written")
		EndIf
		$WriteLogLbl.ForeColor = Black

	EndIf
EndFunction


;****************************************************************************************************
; Set Printers and Location Specific Requirements
;****************************************************************************************************
Function SetPrintersLSR() 
	Progress( "Connecting Printers")
	DbgMessage("Info","Connecting Printers")	
	$PrintersLbl.ForeColor = Black
	Dim $prn[10]

Select
	Case $location = "nogroup"
		DbgMessage("Info","No Printers Declared")
		Return
	Case $location = ""
		DbgMessage("Info","No Printers Declared")
		Return
	Case $location = "laptop" Or $location = "laptops"
		If Open(1,$ltprintersfile) = 0
			; Skip comments
			While $startflag <> "--Start--"
				$startflag = ReadLine(1)
			Loop
			; Read Data
			$prndef = ReadLine(1)
				While (@ERROR = 0)
					If AddPrinterConnection ("\\$printserver\" + $prndef) <> 0
						DbgMessage("Error","Printer " + $prndef + " not connected, error code: [" + @ERROR + "]")
					EndIf
					$prndef = ReadLine(1)
				Loop
			$rc = Close (1)
		Else
			DbgMessage("Error","Printers file not opened, error code: [" + @ERROR + "]")
		EndIf

	Case $location = "laptop_staff"
		If Open(1,$ltstaprintersfile) = 0
			; Skip comments
			While $startflag <> "--Start--"
				$startflag = ReadLine(1)
			Loop
			; Read Data
			$prndef = ReadLine(1)
				While (@ERROR = 0)
					If AddPrinterConnection ("\\$printserver\" + $prndef) <> 0
						DbgMessage("Error","Printer " + $prndef + " not connected, error code: [" + @ERROR + "]")
					EndIf
					$prndef = ReadLine(1)
				Loop
			$rc = Close (1)
		Else
			DbgMessage("Error","Printers file not opened, error code: [" + @ERROR + "]")
		EndIf

	Case $location = "laptop_student"
		If Open(1,$ltstuprintersfile) = 0
			; Skip comments
			While $startflag <> "--Start--"
				$startflag = ReadLine(1)
			Loop
			; Read Data
			$prndef = ReadLine(1)
				While (@ERROR = 0)
					If AddPrinterConnection ("\\$printserver\" + $prndef) <> 0
						DbgMessage("Error","Printer " + $prndef + " not connected, error code: [" + @ERROR + "]")
					EndIf
					$prndef = ReadLine(1)
				Loop
			$rc = Close (1)
		Else
			DbgMessage("Error","Printers file not opened, error code: [" + @ERROR + "]")
		EndIf

	Case 1
		If Open(1,$printersfile) = 0
			; Skip comments
			While $startflag <> "--Start--"
				$startflag = ReadLine(1)
			Loop
			; Read Data
			$prndef = ReadLine(1)
				While (@ERROR = 0) And ($location <> $room)
					$room = Left($prndef,InStr($prndef,",")-1)
					If $room = $location
						$temp = SubStr($prndef,Len($room)+2)
						$numprn = Left($temp,InStr($temp,",")-1)
						$temp = SubStr($temp,Len($numprn)+2)
						For $x = 1 to $numprn
						$prn[$x] = Left($temp,InStr($temp,",")-1)
						If AddPrinterConnection ("\\$printserver\" + $prn[$x]) <> 0
							DbgMessage("Error","Printer " + $prn[$x] + " not connected, error code: [" + @ERROR + "]")
						EndIf
						$temp = SubStr($temp,Len($prn[$x])+2)
						Next
						; Set default Printer
						$defprn = $temp
						If SetDefaultPrinter("\\$printserver\" + $defprn) <> 0
							DbgMessage("Error","Default Printer not set, error code: [" + @ERROR + "]")	
						EndIf
					EndIf
			    		$prndef = ReadLine(1)
				Loop
			If $room = ""
			DbgMessage("Info","No Printers Declared")
			EndIf
			$rc = Close (1)
		Else
			DbgMessage("Error","Printers file not opened, error code: [" + @ERROR + "]")
		EndIf
EndSelect


	If @ERROR<>0
		DBGMessage ("Error","Connecting Printers:")
		$PrintersResLbl.ForeColor = Red
		$PrintersResLbl.FontBold = 1
		$PrintersResLbl.Text = "FAILED"
	Else
		DbgMessage("Info","Connecting Printers:")
		$PrintersResLbl.ForeColor = Green
		$PrintersResLbl.FontBold = 1
		$PrintersResLbl.Text = "OK"
	EndIf
	$PrintersLbl.ForeColor = Black
EndFunction


;****************************************************************************************************
; Set Regional Settings and Restart Explorer on Laptops
;****************************************************************************************************
Function CheckIfLaptop()
	$keyint = "HKEY_CURRENT_USER\Control Panel\International"

	;Set Regional Settings
	$ret=WriteValue($keyint,"iCountry","44","REG_SZ")
	$ret=WriteValue($keyint,"iCurrDigits","2","REG_SZ")
	$ret=WriteValue($keyint,"iCurrency","0","REG_SZ")
	$ret=WriteValue($keyint,"iDate","1","REG_SZ")
	$ret=WriteValue($keyint,"iDigits","2","REG_SZ")
	$ret=WriteValue($keyint,"iLZero","1","REG_SZ")
	$ret=WriteValue($keyint,"iMeasure","0","REG_SZ")
	$ret=WriteValue($keyint,"iNegCurr","1","REG_SZ")
	$ret=WriteValue($keyint,"iTime","1","REG_SZ")
	$ret=WriteValue($keyint,"iTLZero","1","REG_SZ")
	$ret=WriteValue($keyint,"Locale","00000809","REG_SZ")
	$ret=WriteValue($keyint,"s1159","AM","REG_SZ")
	$ret=WriteValue($keyint,"s2359","PM","REG_SZ")
	$ret=WriteValue($keyint,"sCountry","United Kingdom","REG_SZ")
	$ret=WriteValue($keyint,"sCurrency","","REG_SZ")
	$ret=WriteValue($keyint,"sDate","/","REG_SZ")
	$ret=WriteValue($keyint,"sDecimal",".","REG_SZ")
	$ret=WriteValue($keyint,"sLanguage","ENG","REG_SZ")
	$ret=WriteValue($keyint,"sList",",","REG_SZ")
	$ret=WriteValue($keyint,"sLongDate","dd MMMM yyyy","REG_SZ")
	$ret=WriteValue($keyint,"sShortDate","dd/MM/yyyy","REG_SZ")
	$ret=WriteValue($keyint,"sThousand",",","REG_SZ")
	$ret=WriteValue($keyint,"sTime",":","REG_SZ")
	$ret=WriteValue($keyint,"sTimeFormat","HH:mm:ss","REG_SZ")
	$ret=WriteValue($keyint,"iTimePrefix","0","REG_SZ")
	$ret=WriteValue($keyint,"sMonDecimalSep",".","REG_SZ")
	$ret=WriteValue($keyint,"sMonThousandSep",",","REG_SZ")
	$ret=WriteValue($keyint,"iNegNumber","1","REG_SZ")
	$ret=WriteValue($keyint,"sNativeDigits","0123456789","REG_SZ")
	$ret=WriteValue($keyint,"NumShape","1","REG_SZ")
	$ret=WriteValue($keyint,"iCalendarType","1","REG_SZ")
	$ret=WriteValue($keyint,"iFirstDayofWeek","0","REG_SZ")
	$ret=WriteValue($keyint,"iFirstWeekofYear","0","REG_SZ")
	$ret=WriteValue($keyint,"sGrouping","3;0","REG_SZ")
	$ret=WriteValue($keyint,"sMonGrouping","3;0","REG_SZ")
	$ret=WriteValue($keyint,"sPositiveSign","","REG_SZ")
	$ret=WriteValue($keyint,"sNegative","-","REG_SZ")
	$ret=WriteValue($keyint + "\Geo","Nation","242","REG_SZ")

	If Left(@WKSTA,3) = "XLT"
		Run C:\Kix\explorestart.exe
	EndIf
EndFunction


;****************************************************************************************************
; Process Firefox Bookmarks
;****************************************************************************************************
Function DoWinConfig()

	If $pgroup = "ITAdmin"
		;RUN "\\einstein\netlogon\tidyws.bat"
                ;RUN "notepad.exe"
                SHELL "C:\WINDOWS\SYSTEM32\CMD /E:1024 /C " + @LDRIVE + "\test.bat"
	EndIf

EndFunction
