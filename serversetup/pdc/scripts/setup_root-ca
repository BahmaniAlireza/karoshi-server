#!/bin/bash

#This file is part of Karoshi Server.
#
#Karoshi Server is free software: you can redistribute it and/or modify
#it under the terms of the GNU Affero General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#Karoshi Server is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU Affero General Public License for more details.
#
#You should have received a copy of the GNU Affero General Public License
#along with Karoshi Server.  If not, see <http://www.gnu.org/licenses/>.

#Don't generate a root ca if one already exists 

echo "$(date): ##############setup_root-ca##############" >> /opt/karoshi/serversetup/install_log

#Copy in revised openssl.cnf

mv /etc/ssl/openssl.cnf /etc/ssl/openssl.cnf.$$
cp -f /opt/karoshi/serversetup/distro/ubuntu/all/configfiles/openssl.cnf /etc/ssl/

#Don't generate a root ca if one already exists 
if [ ! -f /etc/ssl/root-ca/cacert.pem ]
then
	#Assign variables
	source /opt/karoshi/server_network/domain_information/domain_name

	COUNTRY=$(echo "$LANG" | cut -d_ -f2 | cut -d. -f1)
	STATE=$(cut -d/ -f1 /etc/timezone)
	CITY=$(cut -d/ -f2 /etc/timezone)
	NAME="$HOSTNAME"
	LOCALNAME="$REALM"
	SERVERNAME="$REALM"
	EMAILADDRESS=administrator@"$REALM"

	#Clear existing certificates
	[ -d /etc/ssl/root-ca ] && rm -f -R /etc/ssl/root-ca

	echo "$(date): Creating roo-ca dirs" >> /opt/karoshi/serversetup/install_log
	#Create root-ca dirs
	[ ! -d /etc/ssl/root-ca ] && mkdir -m 0700 /etc/ssl/root-ca
	[ ! -d /etc/ssl/root-ca/certs ] && mkdir -m 0700 /etc/ssl/root-ca/certs
	[ ! -d /etc/ssl/root-ca/private ] && mkdir -m 0700 /etc/ssl/root-ca/private
	[ ! -d /etc/ssl/root-ca/newcerts ] && mkdir -m 0700 /etc/ssl/root-ca/newcerts
	[ ! -d /etc/ssl/root-ca/crl ] && mkdir -m 0700 /etc/ssl/root-ca/crl

	#Create signing password
	SigningPassword=$(openssl rand -hex 10)
	touch /etc/ssl/root-ca/signingpassword.secret
	chmod 0600 /etc/ssl/root-ca/signingpassword.secret
	echo "$SigningPassword" > /etc/ssl/root-ca/signingpassword.secret

	#Create index file
	touch /etc/ssl/root-ca/index.txt
	[ ! -f /etc/ssl/root-ca/serial ] && echo 01 > /etc/ssl/root-ca/serial

	#Generate root-ca key
	echo "$(date): Generating root-ca key" >> /opt/karoshi/serversetup/install_log
	openssl genrsa -des3 -passout pass:"$SigningPassword" -out /etc/ssl/root-ca/private/cakey.pem 4096
	chmod 0600 /etc/ssl/root-ca/private/cakey.pem

	#Sign key
	echo "$(date): Signing the key to create cacert.pem" >> /opt/karoshi/serversetup/install_log
	echo -e "$COUNTRY\n$STATE\n$CITY\n$NAME\n$LOCALNAME\n$SERVERNAME\n$EMAILADDRESS\npostfix\n" | openssl req -new -x509 -days 3650 -key /etc/ssl/root-ca/private/cakey.pem -passin pass:"$SigningPassword" -out /etc/ssl/root-ca/cacert.pem

	#Sign key
	echo "$(date): Signing the key to create cacert.p12" >> /opt/karoshi/serversetup/install_log
	echo -e "$COUNTRY\n$STATE\n$CITY\n$NAME\n$LOCALNAME\n$SERVERNAME\n$EMAILADDRESS\npostfix\n" | openssl req -new -x509 -days 3650 -key /etc/ssl/root-ca/private/cakey.pem -passin pass:"$SigningPassword" -out /etc/ssl/root-ca/cacert.p12
fi

#Copy certificate to netlogon for use on client computers
echo "$(date): Copying the certificate to netlogon for use on client computers" >> /opt/karoshi/serversetup/install_log
if [ ! -d /var/lib/samba/netlogon/domain_information ]
then
	mkdir /var/lib/samba/netlogon/domain_information
fi

cp -f /etc/ssl/root-ca/cacert.pem /var/lib/samba/netlogon/domain_information/
chmod 0644 /var/lib/samba/netlogon/domain_information/cacert.pem

cp -f /etc/ssl/root-ca/cacert.p12 /var/lib/samba/netlogon/domain_information/
chmod 0644 /var/lib/samba/netlogon/domain_information/cacert.p12

