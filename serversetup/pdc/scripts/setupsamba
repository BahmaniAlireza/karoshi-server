#!/bin/bash
#setupsamba
#
#This file is part of Karoshi Server.
#
#Karoshi Server is free software: you can redistribute it and/or modify
#it under the terms of the GNU Affero General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#Karoshi Server is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU Affero General Public License for more details.
#
#You should have received a copy of the GNU Affero General Public License
#along with Karoshi Server.  If not, see <http://www.gnu.org/licenses/>.
#
#The Karoshi Team can be contacted at: 
#mpsharrad@karoshi.org.uk
#jharris@karoshi.org.uk
#aloughlin@karoshi.org.uk
#
#Website: http://www.karoshi.org.uk
[ -d /opt/karoshi/.tempdata ] || mkdir /opt/karoshi/.tempdata

[ -e /opt/karoshi/serversetup/variables/language ] || /opt/karoshi/serversetup/changelanguage
[ -e /opt/karoshi/serversetup/variables/distro ] || /opt/karoshi/serversetup/changedistro

source /opt/karoshi/serversetup/variables/language
source /opt/karoshi/serversetup/variables/distro
source /opt/karoshi/serversetup/variables/years
source /opt/karoshi/serversetup/language/$LANGCHOICE/pdc/setupsamba
source /opt/karoshi/serversetup/language/$LANGCHOICE/softwareinstall
source /opt/karoshi/serversetup/distro/$DISTROCHOICE/pdc/software

#########################
#Add log entry
#########################
echo `date`: '##############'setupsamba'##############' >> /opt/karoshi/serversetup/install_log
touch /opt/karoshi/serversetup/setuplog
if [ `grep -c "$TITLE" /opt/karoshi/serversetup/setuplog` = 0 ]
then
echo setupsamba:$TITLE:/opt/karoshi/serversetup/pdc/scripts/setupsamba >> /opt/karoshi/serversetup/setuplog
chmod 0600 /opt/karoshi/serversetup/setuplog
fi

THISYEAR=`date +%Y`
GUESTACCOUNTS=30
TECHACCOUNTS=4
EXAMACCOUNTS=40
TRAININGACCOUNTS=30
DAY=`date +%d`
MONTH=`date +%m`
LINUXCLIENTVERSION=karoshi4
######################
#Final samba Install check
######################

if [ ! -f /usr/local/sbin/samba ]
then
echo /usr/local/sbin/samba does not exist >> /opt/karoshi/serversetup/install_log
yad --title "$TITLE" --image="/opt/karoshi/serversetup/essentials/smalllogo.png" --window-icon="/opt/karoshi/serversetup/essentials/smalllogo.png" --timeout=4 --text="samba4 $NOTINSTALLED" --no-buttons 2>/dev/null
exit
fi

#######################
#Ensure that samba is running on boot
#######################
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/startonboot/samba
#############################
#Copy in security settings
#############################
/opt/karoshi/serversetup/distro/$DISTROCHOICE/pdc/scripts/serverlevelsecurity

function show_info {
yad --title "$TITLE" --image="/opt/karoshi/serversetup/essentials/smalllogo.png" --window-icon="/opt/karoshi/serversetup/essentials/smalllogo.png" --width 800 --height 230 --tail --no-buttons --text-info 2>/dev/null
}

function check_ldap_port {
echo `date`: Checking that samba4 is available on port 389 >> /opt/karoshi/serversetup/install_log
#Check that samba 4 is ready for ldap requests
LDAPCHECK=0
COUNTER=0
while [ $LDAPCHECK = 0 ]
do
LDAPCHECK=`netstat -vatn | grep -c -w 389`
sleep 1
#Give up after 60 seconds
[ $COUNTER = 60 ] && exit 101
let COUNTER=$COUNTER+1
done
}

function getyadpid {
sleep 1
YADPID=`ps aux | grep yad | grep '\--tail' | sed 's/ * / /g' | cut -d' ' -f2`
}

###############################
#Get new root samba password
###############################
function getrootsmbpasswd {
echo `date`: "Asking the user a new root samba password" >> /opt/karoshi/serversetup/install_log
DATA=`yad --image="/opt/karoshi/serversetup/essentials/smalllogo2.xpm" --window-icon="/opt/karoshi/serversetup/essentials/smalllogo.png" --form --title="$TITLE" --width 400 --wrap --text "$ROOTPASSWDMSG" --field="$ROOTPASSWDMSG4":H --field="$ROOTPASSWDMSG5":H --button=Ok 2>/dev/null`
SAMBAROOTPASSWORD1=`echo $DATA | cut -d"|" -f1`
SAMBAROOTPASSWORD2=`echo $DATA | cut -d"|" -f2`

echo $SAMBAROOTPASSWORD1 > /opt/karoshi/.tempdata/sambapassword
}

###############################
#Get domain name
###############################
function getdomainname {
echo `date`: "Asking the user for the new domain name" >> /opt/karoshi/serversetup/install_log
DATA=`yad --image="/opt/karoshi/serversetup/essentials/smalllogo.png" --window-icon="/opt/karoshi/serversetup/essentials/smalllogo.png" --form --title="$TITLE" --width 500 --wrap --text "$DOMAINNAMEMSG1\n$DOMAINNAMEMSG2\n\n$EXAMPLEMSG\n\n$DOMAINNAMEMSG3:\t\ttestdomain.example.com\n$SITENAMEMSG:\tExample Institute of Technology\nShort Name:\tEIT\n\n$DOMAINERRORMSG" --field="$DOMAINNAMEMSG3" --field="$SITENAMEMSG" --field="$SHORTSITENAMEMSG" --button="gtk-ok" 2>/dev/null`
WEBADDRESS=`echo $DATA | cut -d"|" -f1 | tr -cd 'A-Za-z0-9.:/' | tr 'A-Z' 'a-z' | sed 's/^https:\/\///' | sed 's/^http:\/\///' | sed 's/^www.//g'`
LONGNAME=`echo $DATA | cut -d"|" -f2 | tr -cd 'A-Za-z0-9.: /' | sed 's/^https:\/\///' | sed 's/^http:\/\///' | sed 's/^www.//g'`
SHORTNAME=`echo $DATA | cut -d"|" -f3 | tr -cd 'A-Za-z0-9.: /' | sed 's/^https:\/\///' | sed 's/^http:\/\///' | sed 's/^www.//g'`
}

#Get domain name
LENGTHCHECK=16
DOTCHECK=0
while [ -z "$WEBADDRESS" ] || [ "$WEBADDRESS" = $HOSTNAME ] || [ $LENGTHCHECK -gt 15 ] || [ $DOTCHECK = 0 ]
do
getdomainname
#Check to see if the domain name is the same as the hostname
[ "$WEBADDRESS" = $HOSTNAME ] && DOMAINERRORMSG="$DOMAINERRORMSG1"

#Check to see if any part of the domain name is longer than 15 chars
LENGTHCHECK=`echo -e "$WEBADDRESS" | sed 's/\./\n/g' | wc -L`
[ $LENGTHCHECK -gt 15 ] && DOMAINERRORMSG="$DOMAINERRORMSG2"

#Check for fqdn
DOTCHECK=`echo $WEBADDRESS | grep -c "\."`
[ $DOTCHECK = 0 ] && DOMAINERRORMSG="$DOMAINERRORMSG3"
done

#Create domain information

#Add .internal if only a short name is entered.
[ `echo $WEBADDRESS | tr -cd '.' | grep -c .` = 0 ] && WEBADDRESS=$WEBADDRESS.internal
SAMBADOMAIN=`echo $WEBADDRESS | cut -d. -f1`
SAMBADOMAINCAPS=`echo $SAMBADOMAIN | tr 'a-z' 'A-Z'`
REALM=$WEBADDRESS
REALMCAPS=`echo $WEBADDRESS | tr 'a-z' 'A-Z'`
LDAPBASE=`echo $WEBADDRESS | sed 's/\./,DC=/g' | sed 's/^/DC=/g'`

if [ ! -d /opt/karoshi/server_network/domain_information/ ]
then	
mkdir -p /opt/karoshi/server_network/domain_information/
fi
echo SAMBADOMAIN=\"$SAMBADOMAIN\" > /opt/karoshi/server_network/domain_information/domain_name
echo SAMBADOMAINCAPS=\"$SAMBADOMAINCAPS\" >> /opt/karoshi/server_network/domain_information/domain_name
echo WEBADDRESS=\"$WEBADDRESS\" >> /opt/karoshi/server_network/domain_information/domain_name
echo REALM=\"$WEBADDRESS\" >> /opt/karoshi/server_network/domain_information/domain_name
echo REALMCAPS=\"$REALMCAPS\" >> /opt/karoshi/server_network/domain_information/domain_name
echo LDAPBASE=\"$LDAPBASE\" >> /opt/karoshi/server_network/domain_information/domain_name
echo LONGNAME=\"$LONGNAME\" >> /opt/karoshi/server_network/domain_information/domain_name
echo SHORTNAME=\"$SHORTNAME\" >> /opt/karoshi/server_network/domain_information/domain_name
echo LINUXCLIENTVER=\"$LINUXCLIENTVERSION\" >> /opt/karoshi/server_network/domain_information/domain_name

function check_password {
#Check that passwords have been set
[ $SAMBAROOTPASSWORD1'null' = null ] && SAMBAROOTPASSWORD1=notset1
[ $SAMBAROOTPASSWORD2'null' = null ] && SAMBAROOTPASSWORD2=notset2

#Check that passwords match
if [ "$SAMBAROOTPASSWORD1" != "$SAMBAROOTPASSWORD2" ]
then
ROOTPASSWDMSG=`echo $ERRORMSG3 $ROOTPASSWDMSG1`
fi

#Get password length
PASSLENGTH=${#SAMBAROOTPASSWORD1}
if [ $PASSLENGTH -lt 8 ]
then
ROOTPASSWDMSG="$PASSWARN1"
SAMBAROOTPASSWORD2=$RANDOM
fi

#Check for upper and lowercase
if [ `echo "$SAMBAROOTPASSWORD1"'A' | tr -cd 'A-Z\n'` = A ]
then
SAMBAROOTPASSWORD2=$RANDOM
ROOTPASSWDMSG="$PASSWARN1"
fi
if [ `echo "$SAMBAROOTPASSWORD1"'a' | tr -cd 'a-z\n'` = a ]
then
ROOTPASSWDMSG="$PASSWARN1"
SAMBAROOTPASSWORD2=$RANDOM
fi
#Check for numbers
if [ `echo "$SAMBAROOTPASSWORD1"'1' | tr -cd '0-9\n'` = 1 ]
then
ROOTPASSWDMSG="$PASSWARN1"
SAMBAROOTPASSWORD2=$RANDOM
fi
}

#get samba root password
ROOTPASSWDMSG=`echo $ROOTPASSWDMSG1 $ROOTPASSWDMSG3`
getrootsmbpasswd
check_password
while [ "$SAMBAROOTPASSWORD1" != "$SAMBAROOTPASSWORD2" ]
do
#get samba root password
getrootsmbpasswd
check_password
done

LDAPPASS="$SAMBAROOTPASSWORD1"

#Add ldap password to /etc/ldap.secret
[ -f /etc/ldap.secret ] && rm -f /etc/ldap.secret
touch /etc/ldap.secret
chmod 0400 /etc/ldap.secret
echo $SAMBAROOTPASSWORD1 > /etc/ldap.secret

#Get forwarding dns server
DNSFORWARD=`grep dns-nameservers /etc/network/interfaces | cut -d" " -f2 | sed -n 1,1p`

#Get server ip
SERVERIP=`cat /etc/network/interfaces | grep address | cut -d' ' -f2 | sed -n 1,1p`
#Modify /etc/resolv.conf for samba4
echo domain $REALM > /etc/resolv.conf
echo nameserver $SERVERIP >> /etc/resolv.conf
#echo nameserver 8.8.8.8 >> /etc/resolv.conf
#echo nameserver 8.8.4.4 >> /etc/resolv.conf

function provision_samba4 {
echo `date`: "Provisioning samba4" >> /opt/karoshi/serversetup/install_log
echo Provisioning samba 4
#Delete smb.conf it exists
[ -f /etc/samba/smb.conf ] && rm -f /etc/samba/smb.conf
samba-tool domain provision --use-rfc2307 --realm=$REALM --domain=$SAMBADOMAIN --adminpass=''$SAMBAROOTPASSWORD1'' --server-role=dc 2>&1 | tee /opt/karoshi/server_network/domain_information/provisioning_info
}

function provisionsamba {
provision_samba4
getyadpid
if [ $YADPID'null' != null ]
then
kill $YADPID
fi
}

provisionsamba 2>> /opt/karoshi/serversetup/install_log | show_info

#Get domain sid and add to domain information
DOMAINSID=`grep ^"DOMAIN SID:" /opt/karoshi/server_network/domain_information/provisioning_info | cut -d: -f2 | sed 's/ //g'`
echo DOMAINSID=\"$DOMAINSID\" >> /opt/karoshi/server_network/domain_information/domain_name

#Show domain information box

yad --title "Domain Information" --button="gtk-ok" --geometry=400x100-40+10 --image="/opt/karoshi/serversetup/essentials/smalllogo.png" --window-icon="/opt/karoshi/serversetup/essentials/smalllogo.png"  --text="$PROVISONMSG\n\n$INFORMATIONMSG :\n\n$FQDMSG\n$REALM\n\n$SHORTDOMAINMSG\n$SAMBADOMAIN\n\n$BASEDNMSG\n$LDAPBASE\n" 2>/dev/null &

#Configure kerberos
echo `date`: "Configuring Kerberos" >> /opt/karoshi/serversetup/install_log
echo Configuring kerberos >> /opt/karoshi/serversetup/install_log
sed -i 's/${REALM}/'$REALMCAPS'/g' /usr/local/share/samba/setup/krb5.conf
#Copy in krb5.conf to etc
cp -f /usr/local/share/samba/setup/krb5.conf /etc/

#Add in dns entries

#samba-tool dns zonecreate <server> <reverse-network-ip-part>.in-addr.arpa -U Administrator
#samba-tool dns add <server> <zone> <host-part> PTR <domain-name> -U Administrator


#Create smb.conf
echo `date`: "Creating smb.conf" >> /opt/karoshi/serversetup/install_log
echo Creating smb.conf >> /opt/karoshi/serversetup/install_log
echo -e '# Global parameters
[global]
	workgroup = '$SAMBADOMAIN'
	realm = '$REALM'
	netbios name = '$HOSTNAME'
	server role = active directory domain controller
	dns forwarder = '$DNSFORWARD'
	allow dns updates = nonsecure
	idmap_ldb:use rfc2307 = yes
	acl:search=false
	log level = 1
	log file = /var/log/samba/log.%U
	# maximum size of 50KB per log file, then rotate:
	max log size = 50

[sysvol]
	comment = sysvol share
	path = /var/lib/samba/sysvol
	read only = No

[homes]
	comment = Home Directories
	invalid users = root
	read only = No
	browseable = No
	veto files = /*.exe/*.msi/*.mp3/*.wma/*.ram/*.mov/*.mpg/*.mpeg/*.bat/*.lnk/*.zip/"Folder Settings"/desktop.ini/

[applications]
	comment = Applications Share
	path = /home/applications
	invalid users = root
	read only = No
	guest ok = Yes
	browseable = No
	locking = No
	oplocks = No
	level2 oplocks = No

[itadmin]
	comment = Itadmin Share
	path = /home/itadminshare
	invalid users = root,administrator
	read only = No
	browseable = Yes

[staffshare]
	comment = Staff Share
	path = /home/staffshare
	invalid users = root,administrator
	read only = No
	browseable = Yes

[subjects]
	comment = Subjects Share
	path = /home/subjects
	invalid users = root,administrator
	read only = No
	browseable = Yes

[netlogon]
	comment = Netlogon Share
	path = /var/lib/samba/netlogon
	invalid users = root,administrator
	create mask = 0664
	guest ok = Yes
	locking = No
	oplocks = No
	level2 oplocks = No

[officeshare]
	comment = Office Share
	path = /home/officeshare
	invalid users = root,administrator
	read only = No
	browseable = Yes
' > /etc/samba/smb.conf

#Turn off complex password settings
echo `date`: "Turning off complex password settings" >> /opt/karoshi/serversetup/install_log
echo Setting password settings >> /opt/karoshi/serversetup/install_log
samba-tool domain passwordsettings set --complexity=off
samba-tool domain passwordsettings set --min-pwd-length=3
samba-tool domain passwordsettings set --min-pwd-age=0
samba-tool domain passwordsettings set --max-pwd-age=999

#Add entry to /etc/hosts
echo `date`: "Adding hostname entry to /etc/hosts" >> /opt/karoshi/serversetup/install_log
PDCIP=`hostname -I | cut -d" " -f1`
echo $PDCIP"	"$HOSTNAME.$REALM"	"$HOSTNAME >> /etc/hosts
#Restart samba
echo `date`: "Restarting samba4" >> /opt/karoshi/serversetup/install_log
echo Restarting samba4 >> /opt/karoshi/serversetup/install_log
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/samba_stop
sleep 1
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/samba_start
#Wait for port 389 on localhost to be available
check_ldap_port

#Add reverse dns entry
echo `date`: "Adding in reverse dns entry" >> /opt/karoshi/serversetup/install_log
SUBNET=`grep "netmask " /etc/network/interfaces | sed -n 1,1p | cut -d" " -f2`

/opt/karoshi/serversetup/pdc/"useful scripts"/reverse-dns add $PDCIP $SUBNET $HOSTNAME.$REALM

###############################
#Create special user accounts for servers and linux clients to get user information from samba4 ldap
##############################
function random_pass {
RANGE=61
COUNTER=1
while [ $COUNTER -lt 16 ]
do
row[$COUNTER]=$RANDOM
let "row[$COUNTER] %= $RANGE"
while [ ${row[$COUNTER]} = 0 ]
do
row[$COUNTER]=$RANDOM
let "row[$COUNTER] %= $RANGE"
done
CHARACTER[$COUNTER]=`sed -n ${row[$COUNTER]},1p /opt/karoshi/serversetup/pdc/"useful scripts"/.alphabet`

let COUNTER=COUNTER+1

done
PASSWORD=`echo ${CHARACTER[@]:0} | sed 's/ //g'`
}

function nslcd-user-accounts {
#nslcd-server
random_pass
echo `date`: "Adding nslcd-server." >> /opt/karoshi/serversetup/install_log
samba-tool user add nslcd-server --userou='OU=karoshi,OU=other,OU=People' --use-username-as-cn --random-password 1>/dev/null 2>> /opt/karoshi/serversetup/install_log
samba-tool user setpassword nslcd-server --newpassword=$PASSWORD 1>/dev/null 2>> /opt/karoshi/serversetup/install_log

#Modify useraccountcontrol
echo -e "dn: CN=nslcd-server,OU=karoshi,OU=other,CN=People,$LDAPBASE
changetype: modify
replace: userAccountControl
userAccountControl: 66112
-" | ldapmodify -x -D "CN=Administrator,CN=Users,$LDAPBASE" -w $LDAPPASS 1>/dev/null 2>> /opt/karoshi/serversetup/install_log

touch /opt/karoshi/server_network/domain_information/nslcd-server
chmod 0400 /opt/karoshi/server_network/domain_information/nslcd-server
echo $PASSWORD > /opt/karoshi/server_network/domain_information/nslcd-server

#nslcd-user
echo `date`: "Adding nslcd-user" >> /opt/karoshi/serversetup/install_log
random_pass
samba-tool user add nslcd-user --userou='OU=karoshi,OU=other,OU=People' --use-username-as-cn --random-password 1>/dev/null 2>> /opt/karoshi/serversetup/install_log
samba-tool user setpassword nslcd-user --newpassword=$PASSWORD 1>/dev/null 2>> /opt/karoshi/serversetup/install_log
#Modify useraccountcontrol
echo -e "dn: CN=nslcd-user,OU=karoshi,OU=other,OU=People,$LDAPBASE
changetype: modify
replace: userAccountControl
userAccountControl: 66112
-" | ldapmodify -x -D "CN=Administrator,CN=Users,$LDAPBASE" -w $LDAPPASS 1>/dev/null 2>> /opt/karoshi/serversetup/install_log

touch /opt/karoshi/server_network/domain_information/nslcd-user
chmod 0400 /opt/karoshi/server_network/domain_information/nslcd-user
echo $PASSWORD > /opt/karoshi/server_network/domain_information/nslcd-user
}

function add_organisational_unit {
echo `date`: "Addding organisational unit: $LDAPPATH" >> /opt/karoshi/serversetup/install_log
hour=`date +%H`
minutes=`date +%M`
seconds=`date +%S`
CREATETIME=$THISYEAR$MONTH$DAY$hour$minutes$seconds.0Z

echo -e "version: 1

# Entry 1: $LDAPPATH
dn: $LDAPPATH
ou: $NAME
description: $DESC
distinguishedname: $LDAPPATH
instancetype: 4
name: $NAME
objectcategory: CN=Organizational-Unit,CN=Schema,CN=Configuration,$LDAPBASE
objectclass: top
objectclass: organizationalUnit
usnchanged: 3372
usncreated: 3371
whenchanged: $CREATETIME
whencreated: $CREATETIME" | ldapadd -x -D "CN=Administrator,CN=Users,$LDAPBASE" -w $LDAPPASS
}

function creategpos {
#Create GPO
echo `date`: "Addding gpo: $LDAPPATH $GPOREF" >> /opt/karoshi/serversetup/install_log
GPOINFO=`samba-tool gpo create ''"$DESC"' Group Policy' --username=Administrator --password=$LDAPPASS`
echo gpoinfo: $GPOINFO
GPOREF=`echo "$GPOINFO" | cut -d"{" -f2 | sed 's/^/{/g'`
#Link GPO
echo gporef: $GPOREF
samba-tool gpo setlink "$LDAPPATH" "$GPOREF" --username=Administrator --password=$LDAPPASS
}

function add_organisational_units {
echo `date`: "Adding organisational units" >> /opt/karoshi/serversetup/install_log
#People subcontainer
NAME="People"
DESC="People"
LDAPPATH="OU=People,$LDAPBASE"
add_organisational_unit
creategpos
#All subcontainers for People

NAME="personnel"
DESC="Personnel"
LDAPPATH="OU=personnel,OU=People,$LDAPBASE"
add_organisational_unit
creategpos

NAME="staff"
DESC="Staff"
LDAPPATH="OU=staff,OU=personnel,OU=People,$LDAPBASE"
add_organisational_unit
creategpos

NAME="studentstaff"
DESC="Student staff"
LDAPPATH="OU=studentstaff,OU=personnel,OU=People,$LDAPBASE"
add_organisational_unit
creategpos

NAME="officestaff"
DESC="Office staff"
LDAPPATH="OU=officestaff,OU=personnel,OU=People,$LDAPBASE"
add_organisational_unit
creategpos

NAME="nonteachingstaff"
DESC="Non teaching staff"
LDAPPATH="OU=nonteachingstaff,OU=personnel,OU=People,$LDAPBASE"
add_organisational_unit
creategpos

NAME="governors"
DESC="Governors"
LDAPPATH="OU=governors,OU=personnel,OU=People,$LDAPBASE"
add_organisational_unit
creategpos

NAME="itadmin"
DESC="Itadmin users"
LDAPPATH="OU=itadmin,OU=personnel,OU=People,$LDAPBASE"
add_organisational_unit
creategpos

NAME="tech"
DESC="Technician users"
LDAPPATH="OU=tech,OU=personnel,OU=People,$LDAPBASE"
add_organisational_unit
creategpos

#All student sub containers

NAME="students"
DESC="Student accounts"
LDAPPATH="OU=students,OU=People,$LDAPBASE"
add_organisational_unit
creategpos

COUNTER=$STARTYEAR
while [ $COUNTER -le $ENDYEAR ]
do
NAME="yr$COUNTER"
DESC="Year $COUNTER"
LDAPPATH="OU=yr$COUNTER,OU=students,OU=People,$LDAPBASE"
add_organisational_unit
creategpos
let COUNTER=$COUNTER+1
done

#All other subcontainers
NAME="other"
DESC="Other users"
LDAPPATH="OU=other,OU=People,$LDAPBASE"
add_organisational_unit
creategpos

NAME="exams"
DESC="Exam users"
LDAPPATH="OU=exams,OU=other,OU=People,$LDAPBASE"
add_organisational_unit
creategpos

NAME="guestusers"
DESC="Guest users"
LDAPPATH="OU=guestusers,OU=other,OU=People,$LDAPBASE"
add_organisational_unit
creategpos

NAME="karoshi"
DESC="Karoshi user"
LDAPPATH="OU=karoshi,OU=other,OU=People,$LDAPBASE"
add_organisational_unit

NAME="nogroup"
DESC="No group"
LDAPPATH="OU=nogroup,OU=other,OU=People,$LDAPBASE"
add_organisational_unit

NAME="Groups"
DESC="Groups"
LDAPPATH="OU=Groups,OU=People,$LDAPBASE"
add_organisational_unit
}

function add_samba4_group {
echo `date`: "Addding samba4 group $NEWGROUP" >> /opt/karoshi/serversetup/install_log
samba-tool group add --groupou="OU=Groups,OU=People" $NEWGROUP

GIDNUMBER=`getent group $NEWGROUP | cut -d: -f3`
echo -e "dn: CN=$NEWGROUP,OU=Groups,OU=People,$LDAPBASE
changetype: modify
add: objectclass
objectclass: posixgroup
-
add: displayname
displayname: "$NEWGROUPDISP"
-
add: mail
mail: $NEWGROUP@$REALM
-
add: gidnumber
gidnumber: $GIDNUMBER
-" | ldapmodify -x -D "CN=Administrator,CN=Users,$LDAPBASE" -w $LDAPPASS

}

##############################
#function Make the folders and groups
##############################
function makefoldersandgroups {
echo `date`: "Making folders and groups" >> /opt/karoshi/serversetup/install_log
#Make Groups
COUNTER=$STARTYEAR
while [  $COUNTER -le $ENDYEAR ]; do
echo -e "$GROUPADDMSG yr$COUNTER"
NEWGROUP=yr$COUNTER
NEWGROUPDISP="Year $COUNTER"
add_samba4_group
let COUNTER=COUNTER+1
done

echo -e "$GROUPADDMSG staff"
NEWGROUP=staff
NEWGROUPDISP=Staff
add_samba4_group

echo -e "$GROUPADDMSG nonteachingstaff"
NEWGROUP=nonteachingstaff
NEWGROUPDISP="Non teaching staff"
add_samba4_group

echo -e "$GROUPADDMSG studentstaff"
NEWGROUP=studentstaff
NEWGROUPDISP="Student Staff"
add_samba4_group

echo -e "$GROUPADDMSG guestusers"
NEWGROUP=guestusers
NEWGROUPDISP="Guest Users"
add_samba4_group

echo -e "$GROUPADDMSG exams"
NEWGROUP=exams
NEWGROUPDISP="Exam Users"
add_samba4_group

echo -e "$GROUPADDMSG itadmin"
NEWGROUP=itadmin
NEWGROUPDISP="Itadmin Users"
add_samba4_group

echo "$GROUPADDMSG tech"
NEWGROUP=tech
NEWGROUPDISP="Tech Users"
add_samba4_group

echo -e "$GROUPADDMSG officestaff"
NEWGROUP=officestaff
NEWGROUPDISP="Office Staff"
add_samba4_group

echo -e "$GROUPADDMSG bursar"
NEWGROUP=bursar
NEWGROUPDISP="Bursars"
add_samba4_group

echo -e "$GROUPADDMSG smt"
NEWGROUP=smt
NEWGROUPDISP="Senior Management"
add_samba4_group

echo -e "$GROUPADDMSG governors"
NEWGROUP=governors
NEWGROUPDISP="Governors"
add_samba4_group

echo -e "$GROUPADDMSG guardians"
NEWGROUP=guardians
NEWGROUPDISP="Guardians"
add_samba4_group

echo -e "$GROUPADDMSG profilemanagement"
NEWGROUP=profilemanagement
NEWGROUPDISP="Profile Management"
add_samba4_group

echo $CREATEHOMEFOLDERSMSG
#Make top level user area
chmod 0755 /home
chown root.root /home
[ -d /home/users ] || mkdir /home/users
chmod 0755 /home/users
chown root.root /home/users
#Student users home areas
[ -d /home/users/students ] || mkdir /home/users/students
chmod 0755 /home/users/students
chown root.root /home/users/students
COUNTER=$STARTYEAR
while [  $COUNTER -le $ENDYEAR ]; do
[ -d /home/users/students/yr$COUNTER ] || mkdir /home/users/students/yr$COUNTER
chmod 0750 /home/users/students/yr$COUNTER
chown root.yr$COUNTER /home/users/students/yr$COUNTER
chown .yr$COUNTER -R /home/users/students/yr$COUNTER
let COUNTER=COUNTER+1
done
#Staff users home areas
[ -d /home/users/staff ] || mkdir /home/users/staff
chmod 0750 /home/users/staff
chown root.staff /home/users/staff
chown .staff -R /home/users/staff
#Studentstaff users home areas
[ -d /home/users/studentstaff ] || mkdir /home/users/studentstaff
chmod 0750 /home/users/studentstaff
chown root.studentstaff /home/users/studentstaff
chown .studentstaff -R /home/users/studentstaff

#Guardian users home areas
[ -d /home/users/guardians ] || mkdir /home/users/guardians
chmod 0750 /home/users/guardians
chown root.guardians /home/users/guardians
chown .guardians -R /home/users/guardians

#Governor users home areas
[ -d /home/users/governors ] || mkdir /home/users/governors
chmod 0750 /home/users/governors
chown root.governors /home/users/governors
chown .governors -R /home/users/governors

#Non teaching staff users home areas
[ -d /home/users/nonteachingstaff ] || mkdir /home/users/nonteachingstaff
chmod 0750 /home/users/nonteachingstaff
chown root.nonteachingstaff /home/users/nonteachingstaff
chown .nonteachingstaff -R /home/users/nonteachingstaff
#Office staff users home area
[ -d /home/users/officestaff ] || mkdir /home/users/officestaff
chmod 0750 /home/users/officestaff
chown root.officestaff /home/users/officestaff
chown .officestaff -R /home/users/officestaff
#Tech staff users home area
[ -d /home/users/techstaff ] || mkdir /home/users/techstaff
chmod 0750 /home/users/techstaff
chown root.tech /home/users/techstaff
chown .tech -R /home/users/techstaff
#Itadmin staff users home area
[ -d /home/users/itadminstaff ] || mkdir /home/users/itadminstaff
chmod 0750 /home/users/itadminstaff
chown root.itadmin /home/users/itadminstaff
chown .itadmin -R /home/users/itadminstaff
#Guest users home area
[ -d /home/users/guestusers ] || mkdir /home/users/guestusers
chmod 0750 /home/users/guestusers
chown root.guestusers /home/users/guestusers
chown .guestusers -R /home/users/guestusers
#Exam users home area
[ -d /home/users/exams ] || mkdir /home/users/exams
chmod 0750 /home/users/exams
chown root.exams /home/users/exams
chown .exams -R /home/users/exams
#Applications area - windows profiles
echo $CREATEFOLDERMSG applications
[ -d /home/applications ] || mkdir /home/applications
if ! test -d /home/applications/backgrounds
then
mkdir /home/applications/backgrounds
cp /opt/karoshi/serversetup/pdc/backgrounds/* /home/applications/backgrounds/
cp /opt/karoshi/serversetup/all/backgrounds/* /home/applications/backgrounds/
fi

#Extract windows GPOs
echo `date`: "Extracting windows GPOs" >> /opt/karoshi/serversetup/install_log
unzip /opt/karoshi/serversetup/pdc/gpos/GPOs.zip -d /home/applications/

#News information for karoshi log in banner
[ -d /home/applications/news ] || mkdir /home/applications/news
if ! test -f /home/applications/news/news.txt
then
echo Welcome to the Karoshi Network > /home/applications/news/news.txt
echo >> /home/applications/news/news.txt
echo http://www.karoshi.org.uk >> /home/applications/news/news.txt
fi
chmod 0664 -R /home/applications
chmod u+X,g+X,o+X -R /home/applications
chown root.itadmin -R /home/applications
#Subjects area
echo `date`: "Creating subjects area" >> /opt/karoshi/serversetup/install_log
echo $CREATEFOLDERMSG subjects
if ! test -d /home/subjects
then
mkdir /home/subjects /home/subjects/"work experience" /home/subjects/art /home/subjects/"business studies" /home/subjects/careers
mkdir /home/subjects/childcare /home/subjects/citizenship /home/subjects/drama /home/subjects/english /home/subjects/french
mkdir /home/subjects/geography /home/subjects/german /home/subjects/"health and social care" /home/subjects/history
mkdir /home/subjects/ict /home/subjects/"leisure and tourism" /home/subjects/literacy /home/subjects/mathematics /home/subjects/"media studies"
mkdir /home/subjects/music /home/subjects/olc /home/subjects/"physical education" /home/subjects/science /home/subjects/spanish
mkdir /home/subjects/welsh /home/subjects/technology
fi

chmod 2664 -R /home/subjects
chmod u+X,g+X,o+X -R  /home/subjects
chown root.itadmin -R /home/subjects
#Staffshare area
echo `date`: "Creating staffshare area" >> /opt/karoshi/serversetup/install_log
echo $CREATEFOLDERMSG staffshare
[ -d /home/staffshare ] || mkdir /home/staffshare
[ -d /home/staffshare/temp ] || mkdir /home/staffshare/temp
[ -d /home/staffshare/"useful documents" ] || mkdir /home/staffshare/"useful documents"
[ -d /home/staffshare/smt ] || mkdir /home/staffshare/smt
[ -d /home/staffshare/"work experience" ] || mkdir /home/staffshare/"work experience"
[ -d /home/staffshare/art ] || mkdir /home/staffshare/art
[ -d /home/staffshare/"business studies" ] || mkdir /home/staffshare/"business studies"
[ -d /home/staffshare/careers ] || mkdir /home/staffshare/careers
[ -d /home/staffshare/childcare ] || mkdir /home/staffshare/childcare
[ -d /home/staffshare/citizenship ] || mkdir /home/staffshare/citizenship
[ -d /home/staffshare/drama ] || mkdir /home/staffshare/drama
[ -d /home/staffshare/english ] || mkdir /home/staffshare/english
[ -d /home/staffshare/french ] || mkdir /home/staffshare/french
[ -d /home/staffshare/geography ] || mkdir /home/staffshare/geography
[ -d /home/staffshare/german ] || mkdir /home/staffshare/german
[ -d /home/staffshare/"health and social care" ] || mkdir /home/staffshare/"health and social care"
[ -d /home/staffshare/history ] || mkdir /home/staffshare/history
[ -d /home/staffshare/ict ] || mkdir /home/staffshare/ict
[ -d /home/staffshare/"leisure and tourism" ] || mkdir /home/staffshare/"leisure and tourism"
[ -d /home/staffshare/literacy ] || mkdir /home/staffshare/literacy
[ -d /home/staffshare/mathematics ] || mkdir /home/staffshare/mathematics
[ -d /home/staffshare/"media studies" ] || mkdir /home/staffshare/"media studies"
[ -d /home/staffshare/music ] || mkdir /home/staffshare/music
[ -d /home/staffshare/olc ] || mkdir /home/staffshare/olc
[ -d /home/staffshare/"physical education" ] || mkdir /home/staffshare/"physical education"
[ -d /home/staffshare/science ] || mkdir /home/staffshare/science
[ -d /home/staffshare/spanish ] || mkdir /home/staffshare/spanish
[ -d /home/staffshare/welsh ] || mkdir /home/staffshare/welsh
[ -d /home/staffshare/technology ] || mkdir /home/staffshare/technology

chmod 2660 -R /home/staffshare
chmod u+X,g+X /home/staffshare
chown -R root.itadmin /home/staffshare

#Officeshare area
echo `date`: "Creating officeshare area" >> /opt/karoshi/serversetup/install_log
echo $CREATEFOLDERMSG officeshare
[ -d /home/officeshare ] || mkdir /home/officeshare
[ -d /home/officeshare/temp ] || mkdir /home/officeshare/temp
[ -d /home/officeshare/bursar ] || mkdir /home/officeshare/bursar

chmod 2660 -R /home/officeshare
chmod u+X,g+X -R /home/officeshare
chown -R root.officestaff /home/officeshare
chown root.bursar -R /home/officeshare/bursar
#Itadminshare area
echo `date`: "Creating itadminshare area" >> /opt/karoshi/serversetup/install_log
echo $CREATEFOLDERMSG itadminshare
[ -d /home/itadminshare ] || mkdir /home/itadminshare
[ -d /home/itadminshare/"bulk user creation"/"input files" ] || mkdir -p /home/itadminshare/"bulk user creation"/"input files"
[ -d /home/itadminshare/documentation ] || mkdir /home/itadminshare/documentation
[ -d /home/itadminshare/temp ] || mkdir /home/itadminshare/temp
[ -d /home/itadminshare/"user data" ] || mkdir /home/itadminshare/"user data"
[ -d /home/itadminshare/other ] || mkdir /home/itadminshare/other

chown root.itadmin -R /home/itadminshare
chmod 0660 -R /home/itadminshare
chmod u+X,g+X -R /home/itadminshare
#Karoshi log area
[ -d /var/log/karoshilogs ] || mkdir /var/log/karoshilogs
chmod 0373 /var/log/karoshilogs
chown root.itadmin -R /var/log/karoshilogs

#############################
#Copy in netlogon files
#############################
echo $COPYLOGONFILESMSG
echo `date`: "Copying in netlogon files" >> /opt/karoshi/serversetup/install_log
[ -d /var/lib/samba/netlogon ] && cp -R /var/lib/samba/netlogon /var/lib/samba/netlogon_`date +%s`
[ ! -d /var/lib/samba/netlogon ] && mkdir /var/lib/samba/netlogon

cp -R /opt/karoshi/serversetup/pdc/logonscripts/kix /var/lib/samba/netlogon/
cp -R /opt/karoshi/serversetup/pdc/logonscripts/logo.bmp /var/lib/samba/netlogon/
cp -R /opt/karoshi/serversetup/pdc/logonscripts/logon.bat /var/lib/samba/netlogon/
cp -R /opt/karoshi/serversetup/pdc/logonscripts/logonform.kix /var/lib/samba/netlogon/

sed -i 's/CHANGETHISSERVER/'$HOSTNAME'.'$REALM'/g' /var/lib/samba/netlogon/logonform.kix

chmod 0644 /var/lib/samba/netlogon/*
chmod 0755 /var/lib/samba/netlogon/logon.bat
chmod 0755 /var/lib/samba/netlogon/kix/kixinstall.bat
chmod 0755 /var/lib/samba/netlogon/kix/getdll.bat
chmod 0755 /var/lib/samba/netlogon/kix/kix32.exe
chmod 0755 /var/lib/samba/netlogon/kix/wkix32.exe
#############################
#Modify logon forms to match servername
#############################
sed -i "s/CHANGETHISDOMAINNAME/$SAMBADOMAIN/g" /var/lib/samba/netlogon/logonform.kix
sed -i 's/CHANGETHISREALM/'$REALM'/g' /var/lib/samba/netlogon/logonform.kix
sed -i 's/CHANGETHISHOSTNAME/'$HOSTNAME'.'$REALM'/g' /var/lib/samba/netlogon/kixtart_install.bat
sed -i 's/CHANGETHISHOSTNAME/'$HOSTNAME'.'$REALM'/g' /var/lib/samba/netlogon/getdll.bat

#############################
#make group file information for kixtart windows logon script
#############################
echo exams,$HOSTNAME.$REALM > /var/lib/samba/netlogon/groups.txt
echo itadmin,$HOSTNAME.$REALM >> /var/lib/samba/netlogon/groups.txt
echo guestusers,$HOSTNAME.$REALM >> /var/lib/samba/netlogon/groups.txt
echo guardians,$HOSTNAME.$REALM >> /var/lib/samba/netlogon/groups.txt
echo governors,$HOSTNAME.$REALM >> /var/lib/samba/netlogon/groups.txt
echo nonteachingstaff,$HOSTNAME.$REALM >> /var/lib/samba/netlogon/groups.txt
echo officestaff,$HOSTNAME.$REALM >> /var/lib/samba/netlogon/groups.txt
echo profileuser,$HOSTNAME.$REALM >> /var/lib/samba/netlogon/groups.txt
echo staff,$HOSTNAME.$REALM >> /var/lib/samba/netlogon/groups.txt
echo studentstaff,$HOSTNAME.$REALM >> /var/lib/samba/netlogon/groups.txt
echo Domain Admins,$HOSTNAME.$REALM >> /var/lib/samba/netlogon/groups.txt

COUNTER=$STARTYEAR
         while [  $COUNTER -le $ENDYEAR ]; do
		echo yr$COUNTER,$HOSTNAME.$REALM >> /var/lib/samba/netlogon/groups.txt
		let COUNTER=COUNTER+1
         done

if [ ! -d /var/lib/samba/netlogon/windows_settings/drives ]
then
mkdir -p /var/lib/samba/netlogon/windows_settings/drives
cp -f -R /opt/karoshi/serversetup/pdc/logonscripts/drives/* /var/lib/samba/netlogon/windows_settings/drives/

COUNTER=2000
ENDYEAR=2050
while [ $COUNTER -le $ENDYEAR ]
do
ln -s /var/lib/samba/netlogon/windows_settings/drives/students.kix /var/lib/samba/netlogon/windows_settings/drives/yr$COUNTER.kix
let COUNTER=$COUNTER+1
done
fi

#############################
#make group file information for web management logon information
#############################
echo `date`: "Creating group information for primary groups" >> /opt/karoshi/serversetup/install_log
source /opt/karoshi/serversetup/variables/years
[ ! -d /opt/karoshi/server_network/group_information ] && mkdir -p /opt/karoshi/server_network/group_information

function make_primary_group_info {
echo SERVER'='$HOSTNAME.$REALM > /opt/karoshi/server_network/group_information/$PRIMARY_GROUP
echo HOMEPATH'='$HOMEPATH >> /opt/karoshi/server_network/group_information/$PRIMARY_GROUP
echo SUBUNIT'='$SUBUNIT >> /opt/karoshi/server_network/group_information/$PRIMARY_GROUP
echo SECONDARYGROUP'='$SECONDARYGROUP >> /opt/karoshi/server_network/group_information/$PRIMARY_GROUP
echo YEARSUFFIX'='$YEARSUFFIX >> /opt/karoshi/server_network/group_information/$PRIMARY_GROUP
}

PRIMARY_GROUP=profilemanagement
SUBUNIT=other
HOMEPATH=/home/users/
make_primary_group_info
PRIMARY_GROUP=exams
SUBUNIT=other
HOMEPATH=/home/users/exams
make_primary_group_info
PRIMARY_GROUP=guestusers
SUBUNIT=other
HOMEPATH=/home/users/guestusers
make_primary_group_info
PRIMARY_GROUP=governors
SUBUNIT=personnel
HOMEPATH=/home/users/governors
make_primary_group_info
PRIMARY_GROUP=guardians
SUBUNIT=trustees
HOMEPATH=/home/users/guardians
make_primary_group_info
PRIMARY_GROUP=staff
SUBUNIT=personnel
HOMEPATH=/home/users/staff
make_primary_group_info
PRIMARY_GROUP=nonteachingstaff
SUBUNIT=personnel
HOMEPATH=/home/users/nonteachingstaff
make_primary_group_info
PRIMARY_GROUP=officestaff
SUBUNIT=personnel
HOMEPATH=/home/users/officestaff
SECONDARYGROUP=staff
make_primary_group_info
PRIMARY_GROUP=studentstaff
SUBUNIT=personnel
HOMEPATH=/home/users/studentstaff
SECONDARYGROUP=staff
make_primary_group_info
PRIMARY_GROUP=tech
SUBUNIT=personnel
HOMEPATH=/home/users/techstaff
make_primary_group_info
PRIMARY_GROUP=itadmin
SUBUNIT=personnel
HOMEPATH=/home/users/itadminstaff
SECONDARYGROUP="staff,tech,officestaff"
make_primary_group_info
COUNTER=$STARTYEAR
SECONDARYGROUP=""
while [ $COUNTER -le $ENDYEAR ]
do
PRIMARY_GROUP=yr$COUNTER
SUBUNIT=students
HOMEPATH=/home/users/students/yr$COUNTER
YEARSUFFIX=${COUNTER:2}
make_primary_group_info
let COUNTER=$COUNTER+1
done

#######################
#Make printers.txt
#######################
echo `date`: "Creating printers.txt" >> /opt/karoshi/serversetup/install_log
if ! test -e /var/lib/samba/netlogon/printers.txt
then
echo '**********************************************************************' > /var/lib/samba/netlogon/printers.txt
echo '*'Printer names must match share names on the printer server >> /var/lib/samba/netlogon/printers.txt
echo '*'Supports a maximum of 10 printers per location >> /var/lib/samba/netlogon/printers.txt
echo '*'List your printers below the start marker >> /var/lib/samba/netlogon/printers.txt
echo '*'Do NOT remove or alter start marker >> /var/lib/samba/netlogon/printers.txt
echo '*' >> /var/lib/samba/netlogon/printers.txt
echo '*'Format: Location,Numberofprinters,Printer1,Printer2,....,DefaultPrinter >> /var/lib/samba/netlogon/printers.txt
echo '*'Example: R101,2,R101_BW,R101_CL,R101_BW >> /var/lib/samba/netlogon/printers.txt
echo '**********************************************************************' >> /var/lib/samba/netlogon/printers.txt
echo >> /var/lib/samba/netlogon/printers.txt
echo --start-- >> /var/lib/samba/netlogon/printers.txt
chmod 0644 /var/lib/samba/netlogon/printers.txt
fi
}

function make_profiles {
echo `date`: "Creating windows profiles" >> /opt/karoshi/serversetup/install_log
###################################
#Copying profiles
###################################
[ -d /home/remastersys ] && rm -f -R /home/remastersys
echo $COPYPROFILEMSG

#Extract profiles

[ ! -d /home/applications/profiles ] && mkdir /home/applications/profiles

echo $EXTRACTPROFILEMSG1
tar -zxf /opt/karoshi/serversetup/pdc/profiles/defaultprofile.tar.gz -C /home/applications/profiles/
echo $EXTRACTPROFILEMSG2
tar -zxf /opt/karoshi/serversetup/pdc/profiles/defaultprofile.V2.tar.gz -C /home/applications/profiles/
echo $EXTRACTPROFILEMSG4
tar -zxf /opt/karoshi/serversetup/pdc/profiles/defaultprofile.V4.tar.gz -C /home/applications/profiles/

#We dont have a windows 8.0 profile so make an empty folder for it
[ ! -d /home/applications/profiles/defaultprofile.V3 ] && mkdir -p /home/applications/profiles/defaultprofile.V3

#Point default profile icons to correct realm
[ -f /home/applications/profiles/defaultprofile/Desktop/"Help Desk.url" ] && sed -i 's@CHANGETHISREALM@'$REALM'@g' /home/applications/profiles/defaultprofile/Desktop/"Help Desk.url"
[ -f /home/applications/profiles/defaultprofile/Desktop/"Change My Password.url" ] && sed -i 's@CHANGETHISREALM@'$REALM'@g' /home/applications/profiles/defaultprofile/Desktop/"Change My Password.url"
[ -f /home/applications/profiles/defaultprofile/Desktop/"Karoshi Web Management.url" ] && sed -i 's@CHANGETHISREALM@'$REALM'@g' /home/applications/profiles/defaultprofile/Desktop/"Karoshi Web Management.url"

[ -f /home/applications/profiles/defaultprofile.V2/Desktop/"Help Desk.url" ] && sed -i 's@CHANGETHISREALM@'$REALM'@g' /home/applications/profiles/defaultprofile.V2/Desktop/"Help Desk.url"
[ -f /home/applications/profiles/defaultprofile.V2/Desktop/"Change My Password.url" ] && sed -i 's@CHANGETHISREALM@'$REALM'@g' /home/applications/profiles/defaultprofile.V2/Desktop/"Change My Password.url"
[ -f /home/applications/profiles/defaultprofile.V2/Desktop/"Karoshi Web Management.url" ] && sed -i 's@CHANGETHISREALM@'$REALM'@g' /home/applications/profiles/defaultprofile.V2/Desktop/"Karoshi Web Management.url"

[ -f /home/applications/profiles/defaultprofile.V3/Desktop/"Help Desk.url" ] && sed -i 's@CHANGETHISREALM@'$REALM'@g' /home/applications/profiles/defaultprofile.V3/Desktop/"Help Desk.url"
[ -f /home/applications/profiles/defaultprofile.V3/Desktop/"Change My Password.url" ] && sed -i 's@CHANGETHISREALM@'$REALM'@g' /home/applications/profiles/defaultprofile.V3/Desktop/"Change My Password.url"
[ -f /home/applications/profiles/defaultprofile.V3/Desktop/"Karoshi Web Management.url" ] && sed -i 's@CHANGETHISREALM@'$REALM'@g' /home/applications/profiles/defaultprofile.V3/Desktop/"Karoshi Web Management.url"

[ -f /home/applications/profiles/defaultprofile.V4/Desktop/"Help Desk.url" ] && sed -i 's@CHANGETHISREALM@'$REALM'@g' /home/applications/profiles/defaultprofile.V4/Desktop/"Help Desk.url"
[ -f /home/applications/profiles/defaultprofile.V4/Desktop/"Change My Password.url" ] && sed -i 's@CHANGETHISREALM@'$REALM'@g' /home/applications/profiles/defaultprofile.V4/Desktop/"Change My Password.url"
[ -f /home/applications/profiles/defaultprofile.V4/Desktop/"Karoshi Web Management.url" ] && sed -i 's@CHANGETHISREALM@'$REALM'@g' /home/applications/profiles/defaultprofile.V4/Desktop/"Karoshi Web Management.url"

[ ! -d /home/applications/profiles/profileuser ] && mkdir /home/applications/profiles/profileuser
[ ! -d /home/applications/profiles/profileuser.V2 ] && mkdir /home/applications/profiles/profileuser.V2
[ ! -d /home/applications/profiles/profileuser.V3 ] && mkdir /home/applications/profiles/profileuser.V3
[ ! -d /home/applications/profiles/profileuser.V4 ] && mkdir /home/applications/profiles/profileuser.V4
[ ! -d /home/applications/profiles/default_roaming_profile ] && mkdir /home/applications/profiles/default_roaming_profile
[ ! -d /home/applications/profiles/default_roaming_profile.V2 ] && mkdir /home/applications/profiles/default_roaming_profile.V2
[ ! -d /home/applications/profiles/default_roaming_profile.V3 ] && mkdir /home/applications/profiles/default_roaming_profile.V3
[ ! -d /home/applications/profiles/default_roaming_profile.V4 ] && mkdir /home/applications/profiles/default_roaming_profile.V4

echo $SETPROFILEPERMSMSG
chown -R root.itadmin /home/applications/profiles
chmod 0664 -R /home/applications/profiles
chmod u+X,g+X,o+X -R /home/applications/profiles
[ -d /home/applications/Shortcuts ] || cp -R /opt/karoshi/serversetup/pdc/Shortcuts /home/applications
chown -R root.itadmin /home/applications/Shortcuts
chmod 0664 -R /home/applications/Shortcuts
chmod u+X,g+X,o+X -R /home/applications/Shortcuts
chmod 0600 -R /home/applications/profiles/profileuser
chmod u+X -R /home/applications/profiles/profileuser
chown -R profileuser /home/applications/profiles/profileuser
chmod 0600 -R /home/applications/profiles/profileuser.V2
chmod u+X -R /home/applications/profiles/profileuser.V2
chown -R profileuser /home/applications/profiles/profileuser.V2
chmod 0600 -R /home/applications/profiles/profileuser.V3
chmod u+X -R /home/applications/profiles/profileuser.V3
chown -R profileuser /home/applications/profiles/profileuser.V3
chmod 0600 -R /home/applications/profiles/profileuser.V4
chmod u+X -R /home/applications/profiles/profileuser.V4
chown -R profileuser /home/applications/profiles/profileuser.V4

[ -d /home/applications/"profile management" ] || mkdir /home/applications/"profile management"
[ -d /home/applications/"profile management"/"desktop icons" ] || mkdir /home/applications/"profile management"/"desktop icons"
[ -d /home/applications/"profile management"/"start menu" ] || mkdir /home/applications/"profile management"/"start menu"
[ -d /home/applications/"profile management"/"new profile" ] || mkdir /home/applications/"profile management"/"new profile"
chown -R root.itadmin /home/applications/"profile management"
chmod 0660 -R /home/applications/"profile management"
chmod u+X,g+X -R /home/applications/"profile management"

[ -d /var/lib/samba/printers ] || mkdir /var/lib/samba/printers
chown -R root.itadmin /var/lib/samba/printers
chmod 0775 -R /var/lib/samba/printers
[ ! -d /var/spool/samba ] && mkdir -p /var/spool/samba
chmod 0777 /var/spool/samba
chmod +t /var/spool/samba
[ ! -d /home/applications/cups_print/x64 ] && mkdir -p /home/applications/cups_print/x64

chmod 0775 -R /home/applications/cups_print
chown root.tech -R /home/applications/cups_print

chmod 0444 -R /var/lib/samba/netlogon/*
chmod u+X,g+X,o+X -R /var/lib/samba/netlogon/*
chmod 0555 /var/lib/samba/netlogon/logon.bat
chmod 0555 /var/lib/samba/netlogon/kixtart_install.bat
chmod 0555 /var/lib/samba/netlogon/getdll.bat
chmod 0555 /var/lib/samba/netlogon/kix/reclassify.bat
}

echo EXTRASERVERS'='no > /opt/karoshi/serversetup/variables/choice
echo EXTRASERVERCOUNT'='1 >> /opt/karoshi/serversetup/variables/choice

function allow_anonumous_browse {
#Modify CN=Directory Service to allow anonymous ldap bind
echo -e "dn: CN=Directory Service,CN=Windows NT,CN=Services,CN=Configuration,$LDAPBASE
changetype: modify
add: dsHeuristics
dsHeuristics: 0000002001001
-" | ldapmodify -x -D "CN=Administrator,CN=Users,$LDAPBASE" -w $LDAPPASS 1>/dev/null 2>> /opt/karoshi/serversetup/install_log
}


function create_user {
echo `date`: "Creating user: $NEWUSERNAME" >> /opt/karoshi/serversetup/install_log
samba-tool user add $NEWUSERNAME --userou="$SUBPATH" --profile-path=\\\\$HOSTNAME\\applications\\profiles\\$PROFILEFOLDER --script-path="logon.bat $PRIMARYGROUP" --use-username-as-cn  --random-password --mail-address=$NEWUSERNAME@$REALM 1>/dev/null 2>>/opt/karoshi/serversetup/install_log

#Add user to primary group
echo `date`: "Adding $NEWUSERNAME to $PRIMARYGROUP" >> /opt/karoshi/serversetup/install_log
samba-tool group addmembers "$PRIMARYGROUP" $NEWUSERNAME  1>/dev/null 2>>/opt/karoshi/serversetup/install_log

#Add tech and itadmin users to the domain admins group
if [ $PRIMARYGROUP = itadmin ] || [ $PRIMARYGROUP = tech ]
then
echo `date`: "Adding $NEWUSERNAME to Domain Admins" >> /opt/karoshi/serversetup/install_log
samba-tool group addmembers "Domain Admins" $NEWUSERNAME  1>/dev/null 2>>/opt/karoshi/serversetup/install_log
fi

PRIGROUPID=`getent group $PRIMARYGROUP | cut -d: -f3`

#Change primarygroupid and add unixhomedirectory - have to use ldapmodify at this time since samba-tool does not seem to have this option!
#This is hideous why cant samba4 ldap do this all in one go??
echo -e "dn: CN=$NEWUSERNAME,$SUBPATH,$LDAPBASE
changetype: modify
add: objectclass
objectclass: posixaccount
-
add: gidnumber
gidnumber: $PRIGROUPID
-" | ldapmodify -x -D "CN=Administrator,CN=Users,$LDAPBASE" -w $LDAPPASS 1>/dev/null 2>>/opt/karoshi/serversetup/install_log

UIDNUMBER=`getent passwd $NEWUSERNAME | cut -d: -f3`

echo -e "dn: CN=$NEWUSERNAME,$SUBPATH,$LDAPBASE
changetype: modify
add: uidnumber
uidnumber: $UIDNUMBER
-
add: unixhomedirectory
unixhomedirectory: $NEWUSERPATH
-
add: displayname
displayname: "$NEWUSERDISP"
-" | ldapmodify -x -D "CN=Administrator,CN=Users,$LDAPBASE" -w $LDAPPASS 1>/dev/null 2>>/opt/karoshi/serversetup/install_log


[ ! -d $NEWUSERPATH ] && mkdir $NEWUSERPATH
chmod 0600 -R $NEWUSERPATH
chmod u+X -R $NEWUSERPATH
chown $NEWUSERNAME -R $NEWUSERPATH
}


function make_default_users {
echo `date`: "Making default users" >> /opt/karoshi/serversetup/install_log
#Get samba 4 database password
LDAPPASS=`sed -n 1,1p /etc/ldap.secret`

#Add sysadmin
NEWUSERNAME=sysadmin
NEWUSERPATH=/home/users/itadminstaff/sysadmin
SUBPATH='OU=itadmin,OU=personnel,OU=People'
PRIMARYGROUP=itadmin
PROFILEFOLDER=itadmin
NEWUSERDISP="Sysadmin User"
create_user


#Add profileuser
NEWUSERNAME=profileuser
NEWUSERPATH=/home/users/profileuser
SUBPATH='OU=other,OU=People'
PRIMARYGROUP=profilemanagement
PROFILEFOLDER=profileuser
NEWUSERDISP="Profile User"
create_user

#Add guest accounts
COUNTER=1
while [  $COUNTER -le 10 ]
do
NEWUSERNAME=guest$COUNTER
NEWUSERPATH=/home/users/guestusers/guest$COUNTER
SUBPATH='OU=guestusers,OU=other,OU=People'
PRIMARYGROUP=guestusers
PROFILEFOLDER=guestusers
NEWUSERDISP="Guest $COUNTER"
create_user
let COUNTER=COUNTER+1
done

#Add tech accounts
COUNTER=1
while [  $COUNTER -le 4 ]
do
NEWUSERNAME=tech$COUNTER
NEWUSERPATH=/home/users/techstaff/tech$COUNTER
SUBPATH='OU=tech,OU=personnel,OU=People'
PRIMARYGROUP=tech
PROFILEFOLDER=tech
NEWUSERDISP="Tech $COUNTER"
create_user
let COUNTER=COUNTER+1
done

#Add exam accounts
COUNTER=1
while [  $COUNTER -le 5 ]
do
NEWUSERNAME=exam$COUNTER
NEWUSERPATH=/home/users/exams/exam$COUNTER
SUBPATH='OU=exams,OU=other,OU=People'
PRIMARYGROUP=exams
PROFILEFOLDER=exams
NEWUSERDISP="Exam $COUNTER"
create_user
let COUNTER=COUNTER+1
done

#Add root account for domain member printing with cupsaddsmb
echo `date`: "Adding root account for domain member printing with cupsaddsmb" >> /opt/karoshi/serversetup/install_log
samba-tool user add root --use-username-as-cn --random-password 1>/dev/null 2>>/opt/karoshi/serversetup/install_log
samba-tool user setpassword root --newpassword=$LDAPPASS 1>/dev/null 2>>/opt/karoshi/serversetup/install_log
}

function setfolderpermissions {
echo `date`: "Setting acl folder permissions" >> /opt/karoshi/serversetup/install_log
setfacl -Rm u::rwx,g::---,o::---,g:itadmin:rwx,d:u::rwx,d:g::---,d:o::---,d:g:itadmin:rwx /home/itadminshare
setfacl -Rm u::rwx,g::---,o::---,g:staff:rwx,d:u::rwx,d:g::---,d:o::---,d:g:staff:rwx /home/staffshare
setfacl -Rm u::rwx,g::---,o::---,g:officestaff:rwx,d:u::rwx,d:g::---,d:o::---,d:g:officestaff:rwx /home/officeshare
setfacl -Rm u::rwx,g::r-x,o::r-x,g:staff:rwx,d:u::rwx,d:g::r-x,d:o::r-x,d:g:staff:rwx /home/subjects

setfacl -m g:staff:r-x,u::r-x /home/staffshare
setfacl -m g:staff:r-x,u::r-x /home/subjects

setfacl -bR /home/staffshare/smt
setfacl -Rm u::rwx,g::---,o::---,g:smt:rwx,d:u::rwx,d:g::---,d:o::---,d:g:smt:rwx /home/staffshare/smt

setfacl -R -m g:staff:r-x,d:g:staff:r-x /home/users/students
}

##############################
#Display progress box
##############################
function run_functions {
check_ldap_port
allow_anonumous_browse
add_organisational_units

#Add in fqdn
echo $HOSTNAME.$REALM > /etc/hostname-fqdn

#Create hostname-fqdn command
echo "cat /etc/hostname-fqdn" > /bin/hostname-fqdn
chmod 0755 /bin/hostname-fqdn

#nslcd-user-accounts - not needed using anonymous bind instead
echo "N.A.:127.0.0.1:N.A.:$HOSTNAME.$REALM:users:internal:" | /opt/karoshi/serversetup/modules/authentication/configure_authentication
makefoldersandgroups
creategpos
setfolderpermissions
make_default_users
make_profiles
getyadpid
if [ $YADPID'null' != null ]
then
kill $YADPID
fi
}

run_functions 2>> /opt/karoshi/serversetup/install_log | show_info
#######################
#Change passwords
#######################
echo `date`: "Changing root and karoshi passwords" >> /opt/karoshi/serversetup/install_log
echo root:"$SAMBAROOTPASSWORD1" | chpasswd
echo karoshi:"$SAMBAROOTPASSWORD1" | chpasswd

#######################
#Store and encrypt password "for" later use
#######################
grep -w root /etc/shadow | cut -d: -f2 | gpg --no-tty --passphrase-fd 0 -c /opt/karoshi/.tempdata/sambapassword
rm -f /opt/karoshi/.tempdata/sambapassword
mv -f /opt/karoshi/.tempdata/sambapassword.gpg /opt/karoshi/serversetup/variables/initial_password.gpg
chmod 0600 /opt/karoshi/serversetup/variables/initial_password.gpg

#######################
#Stop password aging
#######################
echo `date`: "Stopping password aging" >> /opt/karoshi/serversetup/install_log
chage -M 99999 root
chage -M 99999 karoshi

#######################
#Setup Scheduled Jobs
#######################
echo `date`: "Setting up scheduled jobs" >> /opt/karoshi/serversetup/install_log
[ -d /opt/karoshi/cronjobs/jobs ] || mkdir -p /opt/karoshi/cronjobs/jobs
echo 0 0 '*' '*' 7 /opt/karoshi/'"'useful scripts'"'/resetguestaccounts > /opt/karoshi/cronjobs/jobs/resetguestaccounts.cron
echo 1 0 '*' '*' 1-5 /opt/karoshi/'"'useful scripts'"'/resettechaccounts > /opt/karoshi/cronjobs/jobs/resettechaccounts.cron
echo 0 23 '*' '*' 1-5 /opt/karoshi/serversetup/all/'"'useful scripts'"'/backup_servers/samba_backup > /opt/karoshi/cronjobs/jobs/samba_backup.cron
echo '*/30' '*' '*' '*' 1-7 /opt/karoshi/'"'useful scripts'"'/check_services > /opt/karoshi/cronjobs/jobs/check_services.cron
/opt/karoshi/serversetup/all/"useful scripts"/refreshcronjobs

#########################
#Linux Client support
#########################
echo `date`: "Adding linux client support" >> /opt/karoshi/serversetup/install_log
[ ! -d /var/lib/samba/netlogon/linuxclient ] && mkdir -p /var/lib/samba/netlogon/linuxclient
cp -f -R /opt/karoshi/serversetup/pdc/linuxclient/$LINUXCLIENTVERSION /var/lib/samba/netlogon/linuxclient/

#Create pam_mount.conf.xml
/opt/karoshi/serversetup/pdc/"useful scripts"/generate_pam_mount

cp -f /opt/karoshi/serversetup/all/backgrounds/linuxclient.png /var/lib/samba/netlogon/linuxclient/background.png

#Create client info on netlogon
[ ! -d /var/lib/samba/netlogon/domain_information ] && mkdir -p /var/lib/samba/netlogon/domain_information
echo $SAMBADOMAIN > /var/lib/samba/netlogon/domain_information/domain_name
#echo $HOSTNAME.$REALM > /var/lib/samba/netlogon/domain_information/main_server_fqdn
echo $HOSTNAME > /var/lib/samba/netlogon/domain_information/main_server

#Copy printer info to netlogon
[ -f /opt/karoshi/server_network/printserver ] && cp -f /opt/karoshi/server_network/printserver /var/lib/samba/netlogon/

#Add LINUXCLIENTVERSION to versions.txt
touch /var/lib/samba/netlogon/linuxclient/versions.txt
[ `grep -c ^LINUXCLIENTVERSION /var/lib/samba/netlogon/linuxclient/versions.txt` = 0 ] && echo $LINUXCLIENTVERSION >> /var/lib/samba/netlogon/linuxclient/versions.txt

#Point icons at the correct path
sed -i 's/xen:50001/manage.'$REALM':50001/g' /var/lib/samba/netlogon/linuxclient/$LINUXCLIENTVERSION/desktop-icons/all/"Change Password.desktop"
sed -i 's/xen:50001/manage.'$REALM':50001/g' /var/lib/samba/netlogon/linuxclient/$LINUXCLIENTVERSION/desktop-icons/itadmin/"Helpdesk.desktop"
sed -i 's/xen:50001/manage.'$REALM':50001/g' /var/lib/samba/netlogon/linuxclient/$LINUXCLIENTVERSION/desktop-icons/itadmin/"karoshimanagement.desktop"
sed -i 's/xen:50001/manage.'$REALM':50001/g' /var/lib/samba/netlogon/linuxclient/$LINUXCLIENTVERSION/desktop-icons/staff/"Helpdesk.desktop"
sed -i 's/xen:50001/manage.'$REALM':50001/g' /var/lib/samba/netlogon/linuxclient/$LINUXCLIENTVERSION/desktop-icons/staff/"karoshimanagement.desktop"
sed -i 's/xen:50001/manage.'$REALM':50001/g' /var/lib/samba/netlogon/linuxclient/$LINUXCLIENTVERSION/desktop-icons/officestaff/"Helpdesk.desktop"
sed -i 's/xen:50001/manage.'$REALM':50001/g' /var/lib/samba/netlogon/linuxclient/$LINUXCLIENTVERSION/desktop-icons/officestaff/"karoshimanagement.desktop"

#Create zone information
echo `date`: "Creating zone information" >> /opt/karoshi/serversetup/install_log
[ ! -d /opt/karoshi/server_network/zones/internal/primary_domain_controller ] && mkdir -p /opt/karoshi/server_network/zones/internal/primary_domain_controller
echo $HOSTNAME.$REALM > /opt/karoshi/server_network/zones/internal/primary_domain_controller/$HOSTNAME.$REALM

[ ! -d /opt/karoshi/server_network/zones/$ZONE/servers ] && mkdir -p /opt/karoshi/server_network/zones/$ZONE/servers
touch /opt/karoshi/server_network/zones/$ZONE/servers/$HOSTNAME.$REALM

#Create information for linux clients
[ ! -d /var/lib/samba/netlogon/domain_information ] && mkdir -p /var/lib/samba/netlogon/domain_information
touch /var/lib/samba/netlogon/domain_information/samba4
echo $WEBADDRESS > /var/lib/samba/netlogon/domain_information/dns_domain
echo $DOMAINSID > /var/lib/samba/netlogon/domain_information/domain_sid
echo $LDAPBASE > /var/lib/samba/netlogon/domain_information/ldap_base

#Prepare client_settings
[ ! -d /var/lib/samba/netlogon/client_settings ] && mkdir -p /var/lib/samba/netlogon/client_settings

#Restart samba
echo Restarting samba4 >> /opt/karoshi/serversetup/install_log
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/samba_stop
sleep 1
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/samba_start
#Wait for port  on localhost to be available
check_ldap_port
exit
