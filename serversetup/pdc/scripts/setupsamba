#!/bin/bash
#setupsamba
#
#This file is part of Karoshi Server.
#
#Karoshi Server is free software: you can redistribute it and/or modify
#it under the terms of the GNU Affero General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#Karoshi Server is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU Affero General Public License for more details.
#
#You should have received a copy of the GNU Affero General Public License
#along with Karoshi Server.  If not, see <http://www.gnu.org/licenses/>.
#
#The Karoshi Team can be contacted at: 
#mpsharrad@karoshi.org.uk
#jharris@karoshi.org.uk
#
#Website: http://www.karoshi.org.uk
[ -d /opt/karoshi/.tempdata ] || mkdir /opt/karoshi/.tempdata

[ -e /opt/karoshi/serversetup/variables/language ] || /opt/karoshi/serversetup/changelanguage
[ -e /opt/karoshi/serversetup/variables/distro ] || /opt/karoshi/serversetup/changedistro

source /opt/karoshi/serversetup/variables/language
source /opt/karoshi/serversetup/variables/distro
source /opt/karoshi/serversetup/variables/years
source /opt/karoshi/serversetup/distro/"$DISTROCHOICE"/pdc/software

export TEXTDOMAIN=karoshi-server
locale 1>/dev/null

#########################
#Add log entry
#########################
echo "$(date): ##############setupsamba##############" >> /opt/karoshi/serversetup/install_log

THISYEAR=$(date +%Y)
GUESTACCOUNTS=10
TECHACCOUNTS=4
EXAMACCOUNTS=5
DAY=$(date +%d)
MONTH=$(date +%m)
WP_VERSIONS="V2 V3 V4 V5 V6"
LINUXCLIENTVERSION=karoshi5.0
OLDERCLIENTVERSIONS="karoshi4.0 karoshi4.2 karoshi4.3 karoshi4.4 karoshi4.4"

#Get install type
INSTALL_TYPE=education
if [ -f /opt/karoshi/server_network/install_type ]
then
	INSTALL_TYPE=$(sed -n 1,1p /opt/karoshi/server_network/install_type)
fi
#######################
#Ensure that samba is running on boot
#######################
/opt/karoshi/serversetup/distro/"$DISTROCHOICE"/scripts/startonboot/samba
#############################
#Copy in security settings
#############################
/opt/karoshi/serversetup/distro/"$DISTROCHOICE"/pdc/scripts/serverlevelsecurity

function show_info {
yad --title ''$"Setup"' '$"Samba"'' --image="/opt/karoshi/serversetup/essentials/smalllogo.png" --window-icon="/opt/karoshi/serversetup/essentials/smalllogo.png" --width 800 --height 230 --tail --no-buttons --text-info 2>/dev/null
}

function restoredata {

[ -f /etc/samba/smb.conf ] && rm -f /etc/samba/smb.conf

RESTOREPATH=$(yad --image="/opt/karoshi/serversetup/essentials/smalllogo2.xpm" --window-icon="/opt/karoshi/serversetup/essentials/smalllogo.png" --file-selection  --title=''$"Setup"' '$"Samba"'' --width 800 --height 600 --wrap --text '<span font_weight="bold" foreground="red">Restore Configuration Data</span>\n\nThis will restore critical configuration data from a Karoshi configuration backup that you have saved onto a backup media.\n'  2>/dev/null)

RESTORELIST="etc/apache2 etc/cups etc/e2guardian etc/dhcp etc/postfix etc/mdadm etc/samba/smb.conf etc/sogo etc/ssl/webmanagement etc/ssl/root-ca root/.ssh opt/karoshi/web_controls/web_access_admin opt/karoshi/web_controls/web_access_tech opt/karoshi/server_network"

if [ ! -z "$RESTOREPATH" ]
then
	#Attempt to restore the data from the archive
	for RESTOREFILE in $RESTORELIST
	do
		tar -xvzf "$RESTOREPATH" -C / "$RESTOREFILE"
		[ "$?" != 0 ] && yad --image="/opt/karoshi/serversetup/essentials/smalllogo2.xpm" --window-icon="/opt/karoshi/serversetup/essentials/smalllogo.png"  --title=''$"Setup"' '$"Samba"'' --width 300 --height 100 --text '/'"$RESTOREFILE"' - '$"There was a problem restoring this data"'' --button=Ok
	done
	
fi

#If smb.conf was restored move it so that we can join the domain correctly.
[ -f /etc/samba/smb.conf ] && mv /etc/samba/smb.conf /etc/samba/smb-karoshi-restore.conf

#Remove web management config so that it gets setup corectly later.
[ -d /etc/apache2/sites-karoshi-enabled ] && rm -f -R /etc/apache2/sites-karoshi-enabled

}

function create_resolv.conf {
#Get forwarding dns server
DNSFORWARD=$(grep dns-nameservers /etc/network/interfaces | cut -d" " -f2 | sed -n 1,1p)

#Get server ip
SERVERIP=$(cat /etc/network/interfaces | grep address | cut -d' ' -f2 | sed -n 1,1p)
#Modify /etc/resolv.conf for samba4
echo domain "$REALM" > /etc/resolv.conf
echo nameserver "$SERVERIP" >> /etc/resolv.conf
}

function check_ldap_port {
echo "$(date): Checking that samba4 is available on port 389" >> /opt/karoshi/serversetup/install_log
#Check that samba 4 is ready for ldap requests
LDAPCHECK=0
COUNTER=0
while [ "$LDAPCHECK" = 0 ]
do
	LDAPCHECK=$(netstat -vatn | grep -c -w 389)
	sleep 1
	#Give up after 60 seconds
	[ "$COUNTER" = 60 ] && exit 101
	let COUNTER="$COUNTER"+1
done
}

function getyadpid {
sleep 1
YADPID=$(ps aux | grep yad | grep '\--tail' | sed 's/ * / /g' | cut -d' ' -f2)
}

function create_hostname_fqdn {
#Add in fqdn
echo "$HOSTNAME.$REALM" > /etc/hostname-fqdn

#Create hostname-fqdn command
echo "cat /etc/hostname-fqdn" > /bin/hostname-fqdn
chmod 0755 /bin/hostname-fqdn
}

###############################
#Get new root samba password
###############################
function getrootsmbpasswd {
echo "$(date): Asking the user a new root samba password" >> /opt/karoshi/serversetup/install_log
DATA=$(yad --image="/opt/karoshi/serversetup/essentials/smalllogo2.xpm" --window-icon="/opt/karoshi/serversetup/essentials/smalllogo.png" --form --title=''$"Setup"' '$"Samba"'' --width 400 --wrap --text "$ROOTPASSWDMSG\n\n" --field=$"Password":H --field=$"Confirm":H --button=Ok 2>/dev/null)
SAMBAROOTPASSWORD1=$(echo "$DATA" | cut -d"|" -f1)
SAMBAROOTPASSWORD2=$(echo "$DATA" | cut -d"|" -f2)
}

###############################
#Get domain name
###############################
function getREALM {
echo "(date): Asking the user for the new domain name" >> /opt/karoshi/serversetup/install_log
DATA=$(yad --image="/opt/karoshi/serversetup/essentials/smalllogo.png" --window-icon="/opt/karoshi/serversetup/essentials/smalllogo.png" --form --title=''$"Setup"' '$"Samba"'' --width 500 --wrap --text ''$"Please enter your fully qualifed domain name."'\n'$"This could be the same as your web address."'\n\n<span font_weight="bold" foreground="blue">'$"Example"'</span>\n
<span font_weight="bold">'$"Domain"'</span> : testdomain.example.com\n
' --field=$"Domain" --button="gtk-ok" 2>/dev/null)

WEBADDRESS=$(echo "$DATA" | cut -d"|" -f1 | tr -cd 'A-Za-z0-9.:/' | tr '[:upper:]' '[:lower:]' | sed 's/^https:\/\///' | sed 's/^http:\/\///' | sed 's/^www.//g')
LONGNAME="$WEBADDRESS"
SHORTNAME=$(echo "$LONGNAME" | cut -d. -f1)
}


if [ "$INSTALL_TYPE" != adcrestore ] && [ "$INSTALL_TYPE" != archiverestore ] && [ "$INSTALL_TYPE" != joindomain_education ] && [ "$INSTALL_TYPE" != joindomain_business ]
then
	#Get domain name
	CHECK_DOMAIN=yes

	LENGTHCHECK=16
	DOTCHECK=0
	while [ "$CHECK_DOMAIN" = yes ]
	do
		CHECK_DOMAIN=no
		getREALM
		#Check to see if the domain name has been set
		if [ -z "$WEBADDRESS" ]
		then
			DOMAINERRORMSG=$"You have not entered a fully qualified domain name."
			CHECK_DOMAIN=yes
		else
			#Check to see if the domain name is the same as the hostname
			if [ "$WEBADDRESS" = "$HOSTNAME" ]
			then
				DOMAINERRORMSG=$"The domain name cannot be the same as the hostname."
				CHECK_DOMAIN=yes
			fi
			#Check to see if the first part of the domain name is the same as the hostname
			if [[ $(echo "$WEBADDRESS" | cut -d"." -f1) = "$HOSTNAME" ]]
			then
				DOMAINERRORMSG=$"The first part of the domain name cannot be the same as the hostname."
				CHECK_DOMAIN=yes
			fi 
			#Check to see if any part of the domain name is longer than 15 chars
			LENGTHCHECK=$(echo -e "$WEBADDRESS" | sed 's/\./\n/g' | wc -L)
			if [ "$LENGTHCHECK" -gt 15 ]
			then
				DOMAINERRORMSG=$"The maximum character length between dots is 15."
				CHECK_DOMAIN=yes
			fi
			#Check to see if the fqdn is longer than 64 chars
			LENGTHCHECK=$(echo -e "$WEBADDRESS" | wc -L)
			if [ "$LENGTHCHECK" -gt 64 ]
			then
				DOMAINERRORMSG=$"The maximum FQDN character length is 64."
				CHECK_DOMAIN=yes
			fi
			#Check for fqdn
			DOTCHECK=$(echo "$WEBADDRESS" | grep -c "\.")
			if [ "$DOTCHECK" = 0 ]
			then
				DOMAINERRORMSG=$"You have not entered a fully qualified domain name."
				CHECK_DOMAIN=yes
			fi
		fi
	done

	#Create domain information

	#Add .internal if only a short name is entered.
	[[ $(echo "$WEBADDRESS" | tr -cd '.' | grep -c .) = 0 ]] && WEBADDRESS="$WEBADDRESS".internal
	SAMBADOMAIN=$(echo "$WEBADDRESS" | cut -d. -f1)
	SAMBADOMAINCAPS=$(echo "$SAMBADOMAIN" | tr '[:lower:]' '[:upper:]')
	REALM="$WEBADDRESS"
	REALMCAPS=$(echo "$WEBADDRESS" | tr '[:lower:]' '[:upper:]')
	LDAPBASE=$(echo "$WEBADDRESS" | sed 's/\./,DC=/g' | sed 's/^/DC=/g')

	[ ! -d /opt/karoshi/server_network/domain_information/ ] && mkdir -p /opt/karoshi/server_network/domain_information/

	echo "SAMBADOMAIN=\"$SAMBADOMAIN\"
SAMBADOMAINCAPS=\"$SAMBADOMAINCAPS\"
WEBADDRESS=\"$WEBADDRESS\"
REALM=\"$WEBADDRESS\"
REALMCAPS=\"$REALMCAPS\"
LDAPBASE=\"$LDAPBASE\" 
LONGNAME=\"$LONGNAME\"
SHORTNAME=\"$SHORTNAME\"
LINUXCLIENTVER=\"$LINUXCLIENTVERSION\"" > /opt/karoshi/server_network/domain_information/domain_name
fi

function check_password {
#Check that passwords have been set
[ -z "$SAMBAROOTPASSWORD1" ] && SAMBAROOTPASSWORD1=notset1
[ -z "$SAMBAROOTPASSWORD2" ] && SAMBAROOTPASSWORD2=notset2

#Check that passwords match
if [ "$SAMBAROOTPASSWORD1" != "$SAMBAROOTPASSWORD2" ]
then
	ROOTPASSWDMSG=''$"The passwords do not match."' '$"Please enter the root and administrator password."''
fi

#Get password length
PASSLENGTH="${#SAMBAROOTPASSWORD1}"
if [ "$PASSLENGTH" -lt 8 ]
then
	ROOTPASSWDMSG=$"The password must be at least 8 characters long and have a combination of upper and lower case letters and numbers."
	SAMBAROOTPASSWORD2="$RANDOM"
fi

#Check for upper and lowercase
if [[ $(echo "$SAMBAROOTPASSWORD1"'A' | tr -cd 'A-Z\n') = A ]]
then
	SAMBAROOTPASSWORD2="$RANDOM"
	ROOTPASSWDMSG=$"The password must be at least 8 characters long and have a combination of upper and lower case letters and numbers."
fi
if [[ $(echo "$SAMBAROOTPASSWORD1"'a' | tr -cd 'a-z\n') = a ]]
then
	ROOTPASSWDMSG=$"The password must be at least 8 characters long and have a combination of upper and lower case letters and numbers."
	SAMBAROOTPASSWORD2="$RANDOM"
fi
#Check for numbers
if [[ $(echo "$SAMBAROOTPASSWORD1"'1' | tr -cd '0-9\n') = 1 ]]
then
	ROOTPASSWDMSG=$"The password must be at least 8 characters long and have a combination of upper and lower case letters and numbers."
	SAMBAROOTPASSWORD2=$RANDOM
fi
}

if [ "$INSTALL_TYPE" != adcrestore ] && [ "$INSTALL_TYPE" != joindomain_education ] && [ "$INSTALL_TYPE" != joindomain_business ]
then
	#get samba root password
	ROOTPASSWDMSG=''$"Please enter the root and administrator password."' '$"Minimum 8 characters, numbers, upper and lower case letters."''
	getrootsmbpasswd
	check_password

	while [ "$SAMBAROOTPASSWORD1" != "$SAMBAROOTPASSWORD2" ]
	do
		#get samba root password
		getrootsmbpasswd
		check_password
	done

	LDAPPASS="$SAMBAROOTPASSWORD1"

	#Get forwarding dns server
	DNSFORWARD=$(grep dns-nameservers /etc/network/interfaces | cut -d" " -f2 | sed -n 1,1p)
	create_resolv.conf
fi

function provision_samba4 {
echo "$(date): Provisioning samba4" >> /opt/karoshi/serversetup/install_log
echo Provisioning samba 4
#Delete smb.conf it exists
[ -f /etc/samba/smb.conf ] && rm -f /etc/samba/smb.conf
echo "$(date): Realm: $REALM Domain: $SAMBADOMAIN" >> /opt/karoshi/serversetup/install_log
samba-tool domain provision --use-rfc2307 --realm="$REALM" --domain="$SAMBADOMAIN" --adminpass="$SAMBAROOTPASSWORD1" --server-role=dc 2>&1 | tee /opt/karoshi/server_network/domain_information/provisioning_info
}

function provisionsamba {
provision_samba4
getyadpid
[ ! -z "$YADPID" ] & kill "$YADPID"
}

function getjoindomaininfo {

if [ "$SSHNOPASS" = yes ]
then
	DATA=$(yad --image="/opt/karoshi/serversetup/essentials/smalllogo.png" --window-icon="/opt/karoshi/serversetup/essentials/smalllogo.png" --form --title=''$"Setup"' '$"Samba"'' --width 500 --wrap --text '<span font_weight="bold">'$"Join an Existing Domain"'</span>\n\n'$"This will restore users and groups from a domain controller running on your domain."'\n\n'$"Enter the fully qualifed domain name that you want to join."'\n\n'$"The username should be a user that has the permissions to join clients to the domain."'\n\n<span font_weight="bold" foreground="blue">'$"Example"'</span>\n
<span font_weight="bold">'$"Domain"'</span> : testdomain.example.com\n
<span font_weight="bold">'$"Username"'</span> : Administrator\n\n'"$ERRORMSG"'
' --field=$"Domain" "$REALM" --field=$"DC TCPIP Address" "$DNSTCPIP" --field=$"Username" "$DUSER" --field=$"Password":H 2>/dev/null)
else
	DATA=$(yad --image="/opt/karoshi/serversetup/essentials/smalllogo.png" --window-icon="/opt/karoshi/serversetup/essentials/smalllogo.png" --form --title=''$"Setup"' '$"Samba"'' --width 500 --wrap --text '<span font_weight="bold">'$"Join an Existing Domain"'</span>\n\n'$"This will restore users and groups from a domain controller running on your domain."'\n\n'$"Enter the fully qualifed domain name that you want to join."'\n\n'$"The username should be a user that has the permissions to join clients to the domain."'\n\n<span font_weight="bold" foreground="blue">'$"Example"'</span>\n
<span font_weight="bold">'$"Domain"'</span> : testdomain.example.com\n
<span font_weight="bold">'$"Username"'</span> : Administrator\n\n'"$ERRORMSG"'
' --field=$"Domain" "$REALM" --field=$"DC TCPIP Address" "$DNSTCPIP" --field=$"Username" "$DUSER" --field=$"Password":H "$DPASS" --field=$"SSL Root Password":H "$ROOTPASS" 2>/dev/null)
fi

REALM=$(echo "$DATA" | cut -d"|" -f1 | tr -cd 'A-Za-z0-9.:/' | tr '[:upper:]' '[:lower:]')
DNSTCPIP=$(echo "$DATA" | cut -d"|" -f2 | tr -cd '0-9.: /')
DUSER=$(echo "$DATA" | cut -d"|" -f3 | tr -cd 'A-Za-z0-9.: /')
DPASS=$(echo "$DATA" | cut -d"|" -f4 | tr -cd 'A-Za-z0-9.: /')
[ "$SSHNOPASS" = no ] && ROOTPASS=$(echo "$DATA" | cut -d"|" -f5 | tr -cd 'A-Za-z0-9.:/')
}

if [ "$INSTALL_TYPE" = adcrestore ] || [ "$INSTALL_TYPE" = joindomain_education ] || [ "$INSTALL_TYPE" = joindomain_business ]
then
	if [ "$INSTALL_TYPE" = adcrestore ]
	then
		#Restore data from a backup archive.
		#restoredata - now done before network setup so that network name can be populated
		#Source domain information if available
		[ -f /opt/karoshi/server_network/domain_information/domain_name ] && source /opt/karoshi/server_network/domain_information/domain_name
	fi

	JOINSTATUS=1
	DUSER="Administrator"
	DPASS=""
	PINGCHECK=fail
	SSHNOPASS=yes
	while [ $JOINSTATUS != 0 ]
	do
		#Join this server up to the existing domain

		#Get and check data
		getjoindomaininfo
		while [ -z "$REALM" ] || [ -z "$DUSER" ] || [ -z "$DPASS" ] || [ -z "$DNSTCPIP" ]
		do
			ERRORMSG='<span foreground="red">'$"Please enter in the required fields."'</span>'
			getjoindomaininfo
		done
		#Check that domain can be resolved via dns
		while [ "$PINGCHECK" = fail ] || [ -z "$DNSTCPIP" ]
		do
			if [ ! -z "$DNSTCPIP" ]
			then
				echo "domain $REALM" > /etc/resolv.conf
				echo "nameserver $DNSTCPIP" >> /etc/resolv.conf
			fi
			dig +time=2 +tries=1 "$REALM"
			[ "$?" = 0 ] && break
			ERRORMSG='<span foreground="red">'$"DNS Failure for this TCPIP address."'</span>'
			getjoindomaininfo
		done

		create_hostname_fqdn


		if [ "$INSTALL_TYPE" = adcrestore ]
		then
			#Set the fsmo role on the existing domain controller - this must be done before proceeding any further.
			#Try and ssh to the server and set the role
			SETFSMO=no

			#Try setting fsmo role with ssh key
			echo "$(date): seizing fsmo roles on $DNSTCPIP" >> /opt/karoshi/serversetup/install_log
			ssh -o PasswordAuthentication=no -o ConnectTimeout=3 "$DNSTCPIP" '
			samba-tool fsmo seize --role=all --force
			'
			if [ "$?" != 0 ]
			then
				SSHNOPASS=no
				which sshpass 1>/dev/null
				if [ "$?" != 0 ]
				then
					#Install sshpass
					apt-get update
					apt-get install -f sshpass
				fi

				while [ "$SETFSMO" = no ]
				do
					echo "$(date): connecting with sshpass and seizing fsmo roles on $DNSTCPIP" >> /opt/karoshi/serversetup/install_log
					sshpass -p "$ROOTPASS" ssh -o StrictHostKeyChecking=no "$DNSTCPIP" samba-tool fsmo seize --role=all --force
					[ $? = 0 ] && break
					ERRORMSG='<span foreground="red">'$"Root SSL authentication error."'</span>'
					getjoindomaininfo
				done
			fi
		fi

		
		#Get idmp.ldb from an additional domain controller
		echo "$(date): Copying idmap.ldb from $DNSTCPIP" >> /opt/karoshi/serversetup/install_log
		ssh -o PasswordAuthentication=no -o ConnectTimeout=3 "$DNSTCPIP" '
		[ -f /var/lib/samba/private/idmap.ldb.bak ] && rm -f /var/lib/samba/private/idmap.ldb.bak
		tdbbackup -s .bak /var/lib/samba/private/idmap.ldb
		'
		scp root@"$DNSTCPIP":/var/lib/samba/private/idmap.ldb.bak /var/lib/samba/private/idmap.ldb

		#Attempt to join the domain
		#Delete any existing smb.conf
		[ -f /etc/samba/smb.conf ] && rm -f /etc/samba/smb.conf
		[ -d /var/lib/samba/private ] && rm -f -R /var/lib/samba/private

		function joindomain {
		[ -f /tmp/join_success ] && rm -f /tmp/join_success
		samba-tool domain join "$REALM" DC --username="$DUSER" --password="$DPASS" 2>&1
		[ "$?" = 0 ] && touch /tmp/join_success
		getyadpid
		[ ! -z "$YADPID" ] & kill "$YADPID"
		}

		joindomain | show_info
		[ -f /tmp/join_success ] && JOINSTATUS=0
		if [ "$JOINSTATUS" != 0 ]
		then
			ERRORMSG='<span foreground="red">'$"Failed to join the domain."'</span>'
		fi

	done

	create_resolv.conf

	#Move back restored smb.conf if it exists.
	if [ -f /etc/samba/smb-karoshi-restore.conf ]
	then
		[ -f /etc/samba/smb.conf ] && rm -f /etc/samba/smb.conf
		mv /etc/samba/smb-karoshi-restore.conf /etc/samba/smb.conf
	fi

	#Create realm information 
	
	WEBADDRESS="$REALM"
	[[ $(echo "$WEBADDRESS" | tr -cd '.' | grep -c .) = 0 ]] && WEBADDRESS="$WEBADDRESS".internal
	
	SAMBADOMAIN=$(echo "$WEBADDRESS" | cut -d. -f1)
	SAMBADOMAINCAPS=$(echo "$SAMBADOMAIN" | tr '[:lower:]' '[:upper:]')

	REALMCAPS=$(echo "$REALM" | tr '[:lower:]' '[:upper:]')
	LDAPBASE=$(echo "$REALM" | sed 's/\./,DC=/g' | sed 's/^/DC=/g')

	[ ! -d /opt/karoshi/server_network/domain_information/ ] && mkdir -p /opt/karoshi/server_network/domain_information/
	
	if [ "$INSTALL_TYPE" != adcrestore ] && [ "$INSTALL_TYPE" != archiverestore ]
	then
		echo "SAMBADOMAIN=\"$SAMBADOMAIN\"
SAMBADOMAINCAPS=\"$SAMBADOMAINCAPS\"
WEBADDRESS=\"$WEBADDRESS\"
REALM=\"$WEBADDRESS\"
REALMCAPS=\"$REALMCAPS\"
LDAPBASE=\"$LDAPBASE\"
LONGNAME=\"$LONGNAME\"
SHORTNAME=\"$SHORTNAME\"
LINUXCLIENTVER=\"$LINUXCLIENTVERSION\"" > /opt/karoshi/server_network/domain_information/domain_name
	fi
	SAMBAROOTPASSWORD1="$DPASS"
else
	if [ "$INSTALL_TYPE" != archiverestore ]
	then
		provisionsamba 2>> /opt/karoshi/serversetup/install_log | show_info

		#Get domain sid and add to domain information
		DOMAINSID=$(grep ^"DOMAIN SID:" /opt/karoshi/server_network/domain_information/provisioning_info | cut -d: -f2 | sed 's/ //g')
		echo "DOMAINSID=\"$DOMAINSID\"" >> /opt/karoshi/server_network/domain_information/domain_name

		#Show domain information box

		yad --title $"Domain Information" --button="gtk-ok" --geometry=400x100-40+10 --image="/opt/karoshi/serversetup/essentials/smalllogo.png" --window-icon="/opt/karoshi/serversetup/essentials/smalllogo.png"  --text=''$"Your samba domain has now been provisioned."'\n\n'$"You will need this information"' :\n\n'$"Fully qualified domain"'\n'"$REALM"'\n\n'$"Short domain name"'\n'"$SAMBADOMAIN"'\n\n'$"Base Dn"'\n'"$LDAPBASE"'\n' 2>/dev/null &
	fi
fi

#Add ldap password to /etc/ldap.secret
[ -f /etc/ldap.secret ] && rm -f /etc/ldap.secret
touch /etc/ldap.secret
chmod 0400 /etc/ldap.secret
echo "$SAMBAROOTPASSWORD1" > /etc/ldap.secret

#Configure kerberos
echo "$(date): Configuring Kerberos" >> /opt/karoshi/serversetup/install_log
echo Configuring kerberos >> /opt/karoshi/serversetup/install_log

#Create /etc/krb5.conf

echo '[libdefaults]
	default_realm = '"$REALMCAPS"'
	dns_lookup_realm = false
	dns_lookup_kdc = true
' > /etc/krb5.conf

if [ "$INSTALL_TYPE" != adcrestore ] && [ "$INSTALL_TYPE" != archiverestore ]
then
#Create smb.conf
	echo "$(date): Creating smb.conf" >> /opt/karoshi/serversetup/install_log
	echo -e '# Global parameters
[global]
	workgroup = '"$SAMBADOMAIN"'
	realm = '"$REALM"'
	netbios name = '"$HOSTNAME"'
	server role = active directory domain controller
	dns forwarder = '"$DNSFORWARD"'
	idmap_ldb:use rfc2307 = yes
	idmap config * : range = 30000-400000
	acl:search=false
	log level = 1
	log file = /var/log/samba/log.%U
	# maximum size of 50KB per log file, then rotate:
	max log size = 50
	host msdfs = yes
	printing = bsd
	ldap server require strong auth = No
	server signing = auto
	allow insecure wide links = yes

[dfs]
	path = /var/lib/samba/dfs
	msdfs root = yes
	guest ok = Yes
	msdfs shuffle referrals = yes
	wide links = yes

[sysvol]
	comment = sysvol share
	path = /var/lib/samba/sysvol
	read only = No

[homes]
	comment = Home Directories
	invalid users = root
	read only = No
	browseable = No' > /etc/samba/smb.conf

	if [ "$INSTALL_TYPE" = education ] || [ "$INSTALL_TYPE" = business ]
	then
		echo '	veto files = /*.exe/*.msi/*.mp3/*.wma/*.ram/*.mov/*.mpg/*.mpeg/*.bat/*.lnk/*.zip/"Folder Settings"/desktop.ini/' >> /etc/samba/smb.conf
	fi

echo '
[applications]
	comment = Applications Share
	path = /home/applications
	invalid users = root
	read only = No
	guest ok = Yes
	browseable = No
	locking = No
	oplocks = No
	level2 oplocks = No

[netlogon]
	comment = Netlogon Share
	path = /var/lib/samba/netlogon
	invalid users = root,administrator
	create mask = 0664
	guest ok = Yes
	locking = No
	oplocks = No
	level2 oplocks = No

[itadminshare]
	comment = Itadmin Share
	path = /home/itadminshare
	invalid users = root,administrator
	read only = No
	browseable = Yes' >> /etc/samba/smb.conf

	if [ "$INSTALL_TYPE" = education ] || [ "$INSTALL_TYPE" = business ]
	then
		echo '
[staffshare]
	comment = Staff Share
	path = /home/staffshare
	invalid users = root,administrator
	read only = No
	browseable = Yes

[officeshare]
	comment = Office Share
	path = /home/officeshare
	invalid users = root,administrator
	read only = No
	browseable = Yes' >> /etc/samba/smb.conf
	fi

	if [ "$INSTALL_TYPE" = education ]
	then
		echo '
[subjects]
	comment = Subjects Share
	path = /home/subjects
	invalid users = root,administrator
	read only = No
	browseable = Yes' >> /etc/samba/smb.conf
	fi

	if [ "$INSTALL_TYPE" = home ]
	then
		echo '
[multimedia]
	comment = Multimedia Share
	path = /home/multimedia
	invalid users = root,administrator
	read only = No
	browseable = Yes' >> /etc/samba/smb.conf
	fi
	#Turn off complex password settings
	echo "$(date): Turning off complex password settings" >> /opt/karoshi/serversetup/install_log
	echo Setting password settings >> /opt/karoshi/serversetup/install_log
	samba-tool domain passwordsettings set --complexity=off
	samba-tool domain passwordsettings set --min-pwd-length=3
	samba-tool domain passwordsettings set --min-pwd-age=0
	samba-tool domain passwordsettings set --max-pwd-age=999

	samba-tool domain passwordsettings set --account-lockout-duration=15
	samba-tool domain passwordsettings set --account-lockout-threshold=5
	samba-tool domain passwordsettings set --reset-account-lockout-after=30


	if [ "$INSTALL_TYPE" = home ]
	then
		#Set the default username style for home installs to enter in a username.
		echo DEFAULTSTYLE="10" > /opt/karoshi/server_network/default_username_style
	fi
fi

#Add entry to /etc/hosts
echo "$(date): Adding hostname entry to /etc/hosts" >> /opt/karoshi/serversetup/install_log
PDCIP=$(hostname -I | cut -d" " -f1)
echo "$PDCIP	$HOSTNAME.$REALM	$HOSTNAME" >> /etc/hosts
#Restart samba
echo "$(date): Restarting samba4" >> /opt/karoshi/serversetup/install_log
/opt/karoshi/serversetup/distro/"$DISTROCHOICE"/scripts/control_services/samba_stop
sleep 1
/opt/karoshi/serversetup/distro/"$DISTROCHOICE"/scripts/control_services/samba_start

#Set the Administrator account to ignore password age time
samba-tool user setexpiry Administrator --noexpiry

source /opt/karoshi/server_network/domain_information/domain_name
#Get samba 4 database password
LDAPPASS=$(sed -n 1,1p /etc/ldap.secret)

#Set useraccountcontrol so that the password will never age for the Administrator account
echo -e "dn: CN=Administrator,CN=Users,$LDAPBASE
changetype: modify
add: useraccountcontrol
useraccountcontrol: 66048
-" | ldapmodify -x -D "CN=Administrator,CN=Users,$LDAPBASE" -w "$LDAPPASS"


if [ "$INSTALL_TYPE" != adcrestore ] && [ "$INSTALL_TYPE" != archiverestore ]
then
	#Add reverse dns entry
	echo "$(date): Adding in reverse dns entry" >> /opt/karoshi/serversetup/install_log
	SUBNET=$(grep "netmask " /etc/network/interfaces | sed -n 1,1p | cut -d" " -f2)

	/opt/karoshi/serversetup/pdc/"useful scripts"/reverse-dns add "$PDCIP" "$SUBNET" "$HOSTNAME.$REALM"
fi

###############################
#Create special user accounts for servers and linux clients to get user information from samba4 ldap
##############################
function random_pass {
PASSWORD=$(openssl rand -hex 32 | base64 | head -c 15)
}

function nslcd-user-accounts {
#nslcd-server
random_pass
echo "$(date): Adding nslcd-server." >> /opt/karoshi/serversetup/install_log
samba-tool user add nslcd-server --userou='OU=karoshi,OU=other,OU=People' --use-username-as-cn --random-password 1>/dev/null 2>> /opt/karoshi/serversetup/install_log
samba-tool user setpassword nslcd-server --newpassword="$PASSWORD" 1>/dev/null 2>> /opt/karoshi/serversetup/install_log

#Modify useraccountcontrol
echo -e "dn: CN=nslcd-server,OU=karoshi,OU=other,OU=People,$LDAPBASE
changetype: modify
replace: userAccountControl
userAccountControl: 66112
-" | ldapmodify -x -D "CN=Administrator,CN=Users,$LDAPBASE" -w "$LDAPPASS" 1>/dev/null 2>> /opt/karoshi/serversetup/install_log

touch /opt/karoshi/server_network/domain_information/nslcd-server
chmod 0400 /opt/karoshi/server_network/domain_information/nslcd-server
echo "$PASSWORD" > /opt/karoshi/server_network/domain_information/nslcd-server

#nslcd-user
echo" $(date): Adding nslcd-user" >> /opt/karoshi/serversetup/install_log
random_pass
samba-tool user add nslcd-user --userou='OU=karoshi,OU=other,OU=People' --use-username-as-cn --random-password 1>/dev/null 2>> /opt/karoshi/serversetup/install_log
samba-tool user setpassword nslcd-user --newpassword="$PASSWORD" 1>/dev/null 2>> /opt/karoshi/serversetup/install_log
#Modify useraccountcontrol
echo -e "dn: CN=nslcd-user,OU=karoshi,OU=other,OU=People,$LDAPBASE
changetype: modify
replace: userAccountControl
userAccountControl: 66112
-" | ldapmodify -x -D "CN=Administrator,CN=Users,$LDAPBASE" -w "$LDAPPASS" 1>/dev/null 2>> /opt/karoshi/serversetup/install_log

touch /opt/karoshi/server_network/domain_information/nslcd-user
chmod 0400 /opt/karoshi/server_network/domain_information/nslcd-user
echo "$PASSWORD" > /opt/karoshi/server_network/domain_information/nslcd-user
}

function add_organisational_unit {
echo "$(date): Addding organisational unit: $LDAPPATH" >> /opt/karoshi/serversetup/install_log
hour=$(date +%H)
minutes=$(date +%M)
seconds=$(date +%S)
CREATETIME="$THISYEAR$MONTH$DAY$hour$minutes$seconds.0Z"

echo -e "version: 1

# Entry 1: $LDAPPATH
dn: $LDAPPATH
ou: $NAME
description: $DESC
distinguishedname: $LDAPPATH
instancetype: 4
name: $NAME
objectcategory: CN=Organizational-Unit,CN=Schema,CN=Configuration,$LDAPBASE
objectclass: top
objectclass: organizationalUnit
usnchanged: 3372
usncreated: 3371
whenchanged: $CREATETIME
whencreated: $CREATETIME" | ldapadd -x -D "CN=Administrator,CN=Users,$LDAPBASE" -w "$LDAPPASS"
}

function creategpos {
#Create GPO
echo "$(date): Adding gpo: $LDAPPATH $GPOREF" >> /opt/karoshi/serversetup/install_log
GPOINFO=$(samba-tool gpo create ''"$DESC"' Group Policy' --username=Administrator --password="$LDAPPASS")
echo gpoinfo: "$GPOINFO"
GPOREF=$(echo "$GPOINFO" | cut -d"{" -f2 | sed 's/^/{/g')
#Link GPO
echo gporef: "$GPOREF"
samba-tool gpo setlink "$LDAPPATH" "$GPOREF" --username=Administrator --password="$LDAPPASS"
}

function add_organisational_units {
echo "$(date): Adding organisational units" >> /opt/karoshi/serversetup/install_log
#People subcontainer
NAME="People"
DESC="People"
LDAPPATH="OU=People,$LDAPBASE"
add_organisational_unit
creategpos

#All subcontainers for People

NAME="personnel"
DESC="Personnel"
LDAPPATH="OU=personnel,OU=People,$LDAPBASE"
add_organisational_unit
creategpos

NAME="staff"
DESC="Staff"
LDAPPATH="OU=staff,OU=personnel,OU=People,$LDAPBASE"
add_organisational_unit
creategpos

NAME="officestaff"
DESC="Office staff"
LDAPPATH="OU=officestaff,OU=personnel,OU=People,$LDAPBASE"
add_organisational_unit
creategpos

NAME="itadmin"
DESC="Itadmin users"
LDAPPATH="OU=itadmin,OU=personnel,OU=People,$LDAPBASE"
add_organisational_unit
creategpos

NAME="tech"
DESC="Technician users"
LDAPPATH="OU=tech,OU=personnel,OU=People,$LDAPBASE"
add_organisational_unit
creategpos

if [ "$INSTALL_TYPE" = home ]
then
	NAME="family"
	DESC="Family"
	LDAPPATH="OU=family,OU=People,$LDAPBASE"
	add_organisational_unit
	creategpos

	NAME="parents"
	DESC="Parents"
	LDAPPATH="OU=parents,OU=family,OU=People,$LDAPBASE"
	add_organisational_unit
	creategpos

	NAME="relatives"
	DESC="Relatives"
	LDAPPATH="OU=relatives,OU=family,OU=People,$LDAPBASE"
	add_organisational_unit
	creategpos

	NAME="carers"
	DESC="Carers"
	LDAPPATH="OU=carers,OU=family,OU=People,$LDAPBASE"
	add_organisational_unit
	creategpos

	NAME="teenagers"
	DESC="Teenagers"
	LDAPPATH="OU=teenagers,OU=family,OU=People,$LDAPBASE"
	add_organisational_unit
	creategpos

	NAME="children"
	DESC="Children"
	LDAPPATH="OU=children,OU=family,OU=People,$LDAPBASE"
	add_organisational_unit
	creategpos
fi

if [ "$INSTALL_TYPE" = education ] || [ "$INSTALL_TYPE" = joindomain_education ]
then
	NAME="studentstaff"
	DESC="Student staff"
	LDAPPATH="OU=studentstaff,OU=personnel,OU=People,$LDAPBASE"
	add_organisational_unit
	creategpos

	NAME="governors"
	DESC="Governors"
	LDAPPATH="OU=governors,OU=personnel,OU=People,$LDAPBASE"
	add_organisational_unit
	creategpos

	NAME="nonteachingstaff"
	DESC="Non teaching staff"
	LDAPPATH="OU=nonteachingstaff,OU=personnel,OU=People,$LDAPBASE"
	add_organisational_unit
	creategpos

	#All student sub containers
	NAME="students"
	DESC="Student accounts"
	LDAPPATH="OU=students,OU=People,$LDAPBASE"
	add_organisational_unit
	creategpos

	COUNTER="$STARTYEAR"
	while [ "$COUNTER" -le "$ENDYEAR" ]
	do
		NAME="yr$COUNTER"
		DESC="Year $COUNTER"
		LDAPPATH="OU=yr$COUNTER,OU=students,OU=People,$LDAPBASE"
		add_organisational_unit
		creategpos
		let COUNTER="$COUNTER"+1
	done
fi

#All other subcontainers
NAME="other"
DESC="Other users"
LDAPPATH="OU=other,OU=People,$LDAPBASE"
add_organisational_unit
creategpos

if [ "$INSTALL_TYPE" = education ] || [ "$INSTALL_TYPE" = joindomain_education ]
then
	NAME="trustees"
	DESC="trustees"
	LDAPPATH="OU=trustees,OU=People,$LDAPBASE"
	add_organisational_unit
	creategpos

	NAME="exams"
	DESC="Exam users"
	LDAPPATH="OU=exams,OU=other,OU=People,$LDAPBASE"
	add_organisational_unit
	creategpos
fi

NAME="guestusers"
DESC="Guest users"
LDAPPATH="OU=guestusers,OU=other,OU=People,$LDAPBASE"
add_organisational_unit
creategpos

NAME="karoshi"
DESC="Karoshi user"
LDAPPATH="OU=karoshi,OU=other,OU=People,$LDAPBASE"
add_organisational_unit

NAME="nogroup"
DESC="No group"
LDAPPATH="OU=nogroup,OU=other,OU=People,$LDAPBASE"
add_organisational_unit

NAME="Groups"
DESC="Groups"
LDAPPATH="OU=Groups,OU=People,$LDAPBASE"
add_organisational_unit
}

function add_samba4_group {
echo "$(date): Addding samba4 group $NEWGROUP" >> /opt/karoshi/serversetup/install_log
samba-tool group add --groupou="OU=Groups,OU=People" "$NEWGROUP"

GIDNUMBER=$(getent group "$NEWGROUP" | cut -d: -f3)
echo -e "dn: CN=$NEWGROUP,OU=Groups,OU=People,$LDAPBASE
changetype: modify
add: objectclass
objectclass: posixgroup
-
add: displayname
displayname: $NEWGROUPDISP
-
add: mail
mail: $NEWGROUP@$REALM
-
add: gidnumber
gidnumber: $GIDNUMBER
-" | ldapmodify -x -D "CN=Administrator,CN=Users,$LDAPBASE" -w "$LDAPPASS"


#Create flag file for windows users to be created with roaming profiles by default
echo roaming > /opt/karoshi/server_network/clients/windows_profile_types/"$NEWGROUP"
}

##############################
#function Make the folders and groups
##############################
function makefoldersandgroups {
if [ "$INSTALL_TYPE" != adcrestore ] && [ "$INSTALL_TYPE" != archiverestore ]
then
	echo "$(date): Making folders and groups" >> /opt/karoshi/serversetup/install_log

	#Create falg folder for windows user profile types
	[ ! -d /opt/karoshi/server_network/clients/windows_profile_types ] && mkdir -p /opt/karoshi/server_network/clients/windows_profile_types

	#Make Groups
	if [ "$INSTALL_TYPE" != home ]
	then
		echo -e ''$"Adding group"' staff'
		NEWGROUP=staff
		NEWGROUPDISP=Staff
		add_samba4_group

		echo -e ''$"Adding group"' officestaff'
		NEWGROUP=officestaff
		NEWGROUPDISP="Office Staff"
		add_samba4_group
	else
		echo -e ''$"Adding group"' parents'
		NEWGROUP=parents
		NEWGROUPDISP="Parents"
		add_samba4_group

		echo -e ''$"Adding group"' relatives'
		NEWGROUP=relatives
		NEWGROUPDISP="Relatives"
		add_samba4_group

		echo -e ''$"Adding group"' carers'
		NEWGROUP=carers
		NEWGROUPDISP="Carers"
		add_samba4_group

		echo -e ''$"Adding group"' teenagers'
		NEWGROUP=teenagers
		NEWGROUPDISP="Teenagers"
		add_samba4_group

		echo -e ''$"Adding group"' children'
		NEWGROUP=children
		NEWGROUPDISP="Children"
		add_samba4_group

		echo -e ''$"Adding group"' multimedia'
		NEWGROUP=multimedia
		NEWGROUPDISP="Multimedia"
		add_samba4_group
	
	fi

	echo "$"Adding group" tech"
	NEWGROUP=tech
	NEWGROUPDISP="Tech Users"
	add_samba4_group

	echo -e ''$"Adding group"' guestusers'
	NEWGROUP=guestusers
	NEWGROUPDISP="Guest Users"
	add_samba4_group

	echo -e "$"Adding group" itadmin"
	NEWGROUP=itadmin
	NEWGROUPDISP="Itadmin Users"
	add_samba4_group

	echo -e ''$"Adding group"' profilemanagement'
	NEWGROUP=profilemanagement
	NEWGROUPDISP="Profile Management"
	add_samba4_group


	#Add education groups
	if [ "$INSTALL_TYPE" = education ] || [ "$INSTALL_TYPE" = joindomain_education ]
	then
		echo -e ''$"Adding group"' nonteachingstaff'
		NEWGROUP=nonteachingstaff
		NEWGROUPDISP="Non teaching staff"
		add_samba4_group

		echo -e ''$"Adding group"' studentstaff'
		NEWGROUP=studentstaff
		NEWGROUPDISP="Student Staff"
		add_samba4_group

		echo -e ''$"Adding group"' exams'
		NEWGROUP=exams
		NEWGROUPDISP="Exam Users"
		add_samba4_group

		echo -e ''$"Adding group"' governors'
		NEWGROUP=governors
		NEWGROUPDISP="Governors"
		add_samba4_group

		echo -e ''$"Adding group"' guardians'
		NEWGROUP=guardians
		NEWGROUPDISP="Guardians"
		add_samba4_group

		COUNTER="$STARTYEAR"
		while [ "$COUNTER" -le "$ENDYEAR" ]; do
			echo -e ''$"Adding group"' yr'"$COUNTER"''
			NEWGROUP=yr$COUNTER
			NEWGROUPDISP="Year $COUNTER"
			add_samba4_group
			let COUNTER=COUNTER+1
		done
	fi
fi

echo $"Creating home folders"
#Make top level user area
chmod 0755 /home
chown root.root /home
[ -d /home/users ] || mkdir /home/users
chmod 0755 /home/users
chown root.root /home/users

#Add multimedia area for home use
if [ "$INSTALL_TYPE" = home ]
then
	[ -d /home/multimedia ] || mkdir /home/multimedia
	chmod 0770 /home/multimedia
	chown root.multimedia /home/multimedia
	chown .multimedia -R /home/multimedia
else
	#Guardian users home areas
	[ -d /home/users/techstaff ] || mkdir /home/users/techstaff
	chmod 0750 /home/users/techstaff
	chown root.tech /home/users/techstaff
	chown .tech -R /home/users/techstaff
fi

#Add education home areas
if [ "$INSTALL_TYPE" = education ] || [ "$INSTALL_TYPE" = joindomain_education ]
then
	#Guardian users home areas
	[ -d /home/users/guardians ] || mkdir /home/users/guardians
	chmod 0750 /home/users/guardians
	chown root.guardians /home/users/guardians
	chown .guardians -R /home/users/guardians

	#Governor users home areas
	[ -d /home/users/governors ] || mkdir /home/users/governors
	chmod 0750 /home/users/governors
	chown root.governors /home/users/governors
	chown .governors -R /home/users/governors

	#Non teaching staff users home areas
	[ -d /home/users/nonteachingstaff ] || mkdir /home/users/nonteachingstaff
	chmod 0750 /home/users/nonteachingstaff
	chown root.nonteachingstaff /home/users/nonteachingstaff
	chown .nonteachingstaff -R /home/users/nonteachingstaff

	#Exam users home area
	[ -d /home/users/exams ] || mkdir /home/users/exams
	chmod 0750 /home/users/exams
	chown root.exams /home/users/exams
	chown .exams -R /home/users/exams

	#Studentstaff users home areas
	[ -d /home/users/studentstaff ] || mkdir /home/users/studentstaff
	chmod 0750 /home/users/studentstaff
	chown root.studentstaff /home/users/studentstaff
	chown .studentstaff -R /home/users/studentstaff

	#Student users home areas
	[ -d /home/users/students ] || mkdir /home/users/students
	chmod 0755 /home/users/students
	chown root.root /home/users/students
	COUNTER="$STARTYEAR"
	while [ "$COUNTER" -le "$ENDYEAR" ]; do
		[ -d /home/users/students/yr"$COUNTER" ] || mkdir /home/users/students/yr"$COUNTER"
		chmod 0750 /home/users/students/yr"$COUNTER"
		chown root.yr"$COUNTER" /home/users/students/yr"$COUNTER"
		chown .yr"$COUNTER" -R /home/users/students/yr"$COUNTER"
		let COUNTER=COUNTER+1
	done
fi

#Itadmin staff users home area
[ -d /home/users/itadminstaff ] || mkdir /home/users/itadminstaff
chmod 0750 /home/users/itadminstaff
chown root.itadmin /home/users/itadminstaff
chown .itadmin -R /home/users/itadminstaff
#Guest users home area
[ -d /home/users/guestusers ] || mkdir /home/users/guestusers
chmod 0750 /home/users/guestusers
chown root.guestusers /home/users/guestusers
chown .guestusers -R /home/users/guestusers

if [ "$INSTALL_TYPE" != adcrestore ] && [ "$INSTALL_TYPE" != archiverestore ]
then
	#Applications area - windows profiles
	echo $"Creating" applications
	[ -d /home/applications ] || mkdir /home/applications
	if ! test -d /home/applications/backgrounds
	then
		mkdir /home/applications/backgrounds
		cp /opt/karoshi/serversetup/pdc/backgrounds/* /home/applications/backgrounds/
		cp /opt/karoshi/serversetup/all/backgrounds/* /home/applications/backgrounds/
	fi

	#Extract windows GPOs
	echo "$(date): Extracting windows GPOs" >> /opt/karoshi/serversetup/install_log
	unzip /opt/karoshi/serversetup/pdc/gpos/GPOs.zip -d /home/applications/

	#News information for karoshi log in banner
	[ -d /home/applications/news ] || mkdir /home/applications/news
	if ! test -f /home/applications/news/news.txt
	then
		echo Welcome to the Karoshi Network > /home/applications/news/news.txt
		echo >> /home/applications/news/news.txt
		echo http://www.karoshi.org.uk >> /home/applications/news/news.txt
	fi
	chmod 0664 -R /home/applications
	chmod u+X,g+X,o+X -R /home/applications
	chown root.itadmin -R /home/applications
fi

#Add education home areas
if [ "$INSTALL_TYPE" = education ] || [ "$INSTALL_TYPE" = joindomain_education ]
then

if ! test -d /home/subjects
then
	mkdir /home/subjects /home/subjects/"work experience" /home/subjects/art /home/subjects/"business studies" /home/subjects/careers
	mkdir /home/subjects/childcare /home/subjects/citizenship /home/subjects/drama /home/subjects/english /home/subjects/french
	mkdir /home/subjects/geography /home/subjects/german /home/subjects/"health and social care" /home/subjects/history
	mkdir /home/subjects/ict /home/subjects/"leisure and tourism" /home/subjects/literacy /home/subjects/mathematics /home/subjects/"media studies"
	mkdir /home/subjects/music /home/subjects/olc /home/subjects/"physical education" /home/subjects/science /home/subjects/spanish
	mkdir /home/subjects/welsh /home/subjects/technology
fi

chmod 2664 -R /home/subjects
chmod u+X,g+X,o+X -R  /home/subjects
chown root.itadmin -R /home/subjects
fi

if [ "$INSTALL_TYPE" != home ]
then 
	#Staffshare area
	echo "$(date): Creating staffshare area" >> /opt/karoshi/serversetup/install_log
	echo $"Creating" staffshare
	[ -d /home/staffshare ] || mkdir /home/staffshare

	#Add education home areas
	if [ "$INSTALL_TYPE" = education ] || [ "$INSTALL_TYPE" = joindomain_education ]
	then
		[ -d /home/staffshare/temp ] || mkdir /home/staffshare/temp
		[ -d /home/staffshare/"useful documents" ] || mkdir /home/staffshare/"useful documents"
		[ -d /home/staffshare/"work experience" ] || mkdir /home/staffshare/"work experience"
		[ -d /home/staffshare/art ] || mkdir /home/staffshare/art
		[ -d /home/staffshare/"business studies" ] || mkdir /home/staffshare/"business studies"
		[ -d /home/staffshare/careers ] || mkdir /home/staffshare/careers
		[ -d /home/staffshare/childcare ] || mkdir /home/staffshare/childcare
		[ -d /home/staffshare/citizenship ] || mkdir /home/staffshare/citizenship
		[ -d /home/staffshare/drama ] || mkdir /home/staffshare/drama
		[ -d /home/staffshare/english ] || mkdir /home/staffshare/english
		[ -d /home/staffshare/french ] || mkdir /home/staffshare/french
		[ -d /home/staffshare/geography ] || mkdir /home/staffshare/geography
		[ -d /home/staffshare/german ] || mkdir /home/staffshare/german
		[ -d /home/staffshare/"health and social care" ] || mkdir /home/staffshare/"health and social care"
		[ -d /home/staffshare/history ] || mkdir /home/staffshare/history
		[ -d /home/staffshare/ict ] || mkdir /home/staffshare/ict
		[ -d /home/staffshare/"leisure and tourism" ] || mkdir /home/staffshare/"leisure and tourism"
		[ -d /home/staffshare/literacy ] || mkdir /home/staffshare/literacy
		[ -d /home/staffshare/mathematics ] || mkdir /home/staffshare/mathematics
		[ -d /home/staffshare/"media studies" ] || mkdir /home/staffshare/"media studies"
		[ -d /home/staffshare/music ] || mkdir /home/staffshare/music
		[ -d /home/staffshare/olc ] || mkdir /home/staffshare/olc
		[ -d /home/staffshare/"physical education" ] || mkdir /home/staffshare/"physical education"
		[ -d /home/staffshare/science ] || mkdir /home/staffshare/science
		[ -d /home/staffshare/spanish ] || mkdir /home/staffshare/spanish
		[ -d /home/staffshare/welsh ] || mkdir /home/staffshare/welsh
		[ -d /home/staffshare/technology ] || mkdir /home/staffshare/technology
		fi

	chmod 2660 -R /home/staffshare
	chmod u+X,g+X /home/staffshare
	chown -R root.itadmin /home/staffshare
fi

if [ "$INSTALL_TYPE" != home ]
then 
	#Officeshare area
	echo "$(date): Creating officeshare area" >> /opt/karoshi/serversetup/install_log
	echo $"Creating" officeshare
	[ -d /home/officeshare ] || mkdir /home/officeshare
	[ -d /home/officeshare/temp ] || mkdir /home/officeshare/temp
	chmod 2660 -R /home/officeshare
	chmod u+X,g+X -R /home/officeshare
	chown -R root.officestaff /home/officeshare
fi
#Itadminshare area
echo "$(date): Creating itadminshare area" >> /opt/karoshi/serversetup/install_log
echo $"Creating" itadminshare
[ -d /home/itadminshare ] || mkdir /home/itadminshare
[ -d /home/itadminshare/"bulk user creation/input files" ] || mkdir -p /home/itadminshare/"bulk user creation/input files"
[ -d /home/itadminshare/documentation ] || mkdir /home/itadminshare/documentation
[ -d /home/itadminshare/temp ] || mkdir /home/itadminshare/temp
[ -d /home/itadminshare/"user data" ] || mkdir /home/itadminshare/"user data"
[ -d /home/itadminshare/other ] || mkdir /home/itadminshare/other

chown root.itadmin -R /home/itadminshare
chmod 0660 -R /home/itadminshare
chmod u+X,g+X -R /home/itadminshare
#Karoshi log area
[ -d /var/log/karoshilogs ] || mkdir /var/log/karoshilogs
chmod 0373 /var/log/karoshilogs
chown root.itadmin -R /var/log/karoshilogs

#############################
#Copy in netlogon files
#############################
if [ "$INSTALL_TYPE" != adcrestore ] && [ "$INSTALL_TYPE" != archiverestore ]
then
	echo $"Copying in logon files"
	echo "$(date): Copying in netlogon files" >> /opt/karoshi/serversetup/install_log
	[ -d /var/lib/samba/netlogon ] && cp -R "/var/lib/samba/netlogon" "/var/lib/samba/netlogon_$(date +%s)"
	[ ! -d /var/lib/samba/netlogon ] && mkdir /var/lib/samba/netlogon

	cp -R /opt/karoshi/serversetup/pdc/logonscripts/kix /var/lib/samba/netlogon/
	cp -R /opt/karoshi/serversetup/pdc/logonscripts/logo.bmp /var/lib/samba/netlogon/
	cp -R /opt/karoshi/serversetup/pdc/logonscripts/logon.bat /var/lib/samba/netlogon/
	cp -R /opt/karoshi/serversetup/pdc/logonscripts/logonform.kix /var/lib/samba/netlogon/

	sed -i 's/CHANGETHISREALM/'"$REALM"'/g' /var/lib/samba/netlogon/logonform.kix
	sed -i 's/CHANGETHISSERVER/'"$HOSTNAME"'/g' /var/lib/samba/netlogon/logon.bat
	sed -i 's/CHANGETHISSERVER/'"$HOSTNAME"'/g' /var/lib/samba/netlogon/kix/getdll.bat
	sed -i 's/CHANGETHISSERVER/'"$HOSTNAME"'/g' /var/lib/samba/netlogon/kix/kixinstall.bat
	sed -i 's/CHANGETHISSERVER/'"$HOSTNAME"'/g' /var/lib/samba/netlogon/kix/Setup_Workstation.bat

	chmod 0644 /var/lib/samba/netlogon/*
	chmod 0755 /var/lib/samba/netlogon/logon.bat
	chmod 0755 /var/lib/samba/netlogon/kix/kixinstall.bat
	chmod 0755 /var/lib/samba/netlogon/kix/getdll.bat
	chmod 0755 /var/lib/samba/netlogon/kix/kix32.exe
	chmod 0755 /var/lib/samba/netlogon/kix/wkix32.exe
	chmod 0755 /var/lib/samba/netlogon/kix

	#############################
	#make group file information for kixtart windows logon script
	#############################

	echo -e "itadmin,$HOSTNAME\nguestusers,$HOSTNAME\nofficestaff,$HOSTNAME\nprofileuser,$HOSTNAME\nstaff,$HOSTNAME\nDomain Admins,$HOSTNAME" > /var/lib/samba/netlogon/groups.txt
	if [ "$INSTALL_TYPE" = education ]
	then
		echo -e "exams,$HOSTNAME.$REALM\ngovernors,$HOSTNAME\nnonteachingstaff,$HOSTNAME\nguardians,$HOSTNAME\nstudentstaff,$HOSTNAME" >> /var/lib/samba/netlogon/groups.txt

		COUNTER="$STARTYEAR"
		while [ "$COUNTER" -le "$ENDYEAR" ]; do
			echo "yr$COUNTER,$HOSTNAME" >> /var/lib/samba/netlogon/groups.txt
			let COUNTER=COUNTER+1
		done

	fi

	if [ ! -d /var/lib/samba/netlogon/windows_settings/drives ]
	then
		mkdir -p /var/lib/samba/netlogon/windows_settings/drives

		if [ "$INSTALL_TYPE" = education ]
		then
			cp -f -R /opt/karoshi/serversetup/pdc/logonscripts/drives/* /var/lib/samba/netlogon/windows_settings/drives/
		fi
	fi
fi
#############################
#make group file information for web management logon information
#############################
echo "$(date): Creating group information for primary groups" >> /opt/karoshi/serversetup/install_log
source /opt/karoshi/serversetup/variables/years
[ ! -d /opt/karoshi/server_network/group_information ] && mkdir -p /opt/karoshi/server_network/group_information
[ ! -d /opt/karoshi/server_network/group_information_secondary ] && mkdir -p /opt/karoshi/server_network/group_information_secondary
[ ! -d /opt/karoshi/server_network/group_information_dynamic ] && mkdir -p /opt/karoshi/server_network/group_information_dynamic

function make_primary_group_info {
echo "SERVER=$HOSTNAME.$REALM
HOMEPATH=$HOMEPATH
SUBUNIT=$SUBUNIT
SECONDARYGROUP=$SECONDARYGROUP
YEARSUFFIX=$YEARSUFFIX" > /opt/karoshi/server_network/group_information/"$PRIMARY_GROUP"
}

if [ "$INSTALL_TYPE" != adcrestore ] && [ "$INSTALL_TYPE" != archiverestore ]
then
	PRIMARY_GROUP=profilemanagement
	SUBUNIT=other
	HOMEPATH=/home/users/profilemanagement
	SECONDARYGROUP=""
	make_primary_group_info

	PRIMARY_GROUP=guestusers
	SUBUNIT=other
	HOMEPATH=/home/users/guestusers
	SECONDARYGROUP=""
	make_primary_group_info

	if [ "$INSTALL_TYPE" != home ]
	then
		PRIMARY_GROUP=staff
		SUBUNIT=personnel
		HOMEPATH=/home/users/staff
		SECONDARYGROUP=""
		make_primary_group_info

		PRIMARY_GROUP=officestaff
		SUBUNIT=personnel
		HOMEPATH=/home/users/officestaff
		SECONDARYGROUP=staff
		make_primary_group_info

		PRIMARY_GROUP=tech
		SUBUNIT=personnel
		HOMEPATH=/home/users/techstaff
		SECONDARYGROUP=""
		make_primary_group_info
	else
		PRIMARY_GROUP=parents
		SUBUNIT=family
		HOMEPATH=/home/users/parents
		SECONDARYGROUP=multimedia
		make_primary_group_info

		PRIMARY_GROUP=relatives
		SUBUNIT=family
		HOMEPATH=/home/users/relatives
		SECONDARYGROUP=multimedia
		make_primary_group_info

		PRIMARY_GROUP=carers
		SUBUNIT=family
		HOMEPATH=/home/users/carers
		SECONDARYGROUP=multimedia
		make_primary_group_info

		PRIMARY_GROUP=teenagers
		SUBUNIT=family
		HOMEPATH=/home/users/teenagers
		SECONDARYGROUP=multimedia
		make_primary_group_info

		PRIMARY_GROUP=children
		SUBUNIT=family
		HOMEPATH=/home/users/children
		SECONDARYGROUP=multimedia
		make_primary_group_info
	fi

	PRIMARY_GROUP=itadmin
	SUBUNIT=personnel
	HOMEPATH=/home/users/itadminstaff
	SECONDARYGROUP="staff,tech,officestaff"
	[ "$INSTALL_TYPE" = home ] && SECONDARYGROUP="multimedia"
	make_primary_group_info

	if [ "$INSTALL_TYPE" = education ]
	then
		PRIMARY_GROUP=nonteachingstaff
		SUBUNIT=personnel
		HOMEPATH=/home/users/nonteachingstaff
		SECONDARYGROUP=""
		make_primary_group_info

		PRIMARY_GROUP=studentstaff
		SUBUNIT=personnel
		HOMEPATH=/home/users/studentstaff
		SECONDARYGROUP=staff
		make_primary_group_info

		PRIMARY_GROUP=exams
		SUBUNIT=other
		HOMEPATH=/home/users/exams
		SECONDARYGROUP=""
		make_primary_group_info

		PRIMARY_GROUP=guardians
		SUBUNIT=trustees
		HOMEPATH=/home/users/guardians
		SECONDARYGROUP=""
		make_primary_group_info

		PRIMARY_GROUP=governors
		SUBUNIT=personnel
		HOMEPATH=/home/users/governors
		SECONDARYGROUP=""
		make_primary_group_info

		COUNTER="$STARTYEAR"
		SECONDARYGROUP=""
		while [ "$COUNTER" -le "$ENDYEAR" ]
		do
			PRIMARY_GROUP=yr"$COUNTER"
			SUBUNIT=students
			HOMEPATH=/home/users/students/yr"$COUNTER"
			YEARSUFFIX="${COUNTER:2}"
			make_primary_group_info
			let COUNTER="$COUNTER"+1
		done
	fi

	function set_gid_ad_account {
	echo -e "dn: CN=$Account,CN=Users,$LDAPBASE
changetype: modify
add: objectclass
objectclass: posixaccount
-
add: gidnumber
gidnumber: $GIDnumber
-" | ldapmodify -x -D "CN=Administrator,CN=Users,$LDAPBASE" -w "$LDAPPASS" 1>/dev/null 2>/dev/null
}


	for GIDInfo in "Domain Admins",512 "Domain Users",513 "Domain Guests",514  "Schema Admins",518 "Enterprise Admins",519 "Group Policy Creator Owners",520
	do
		Account=$(echo "$GIDInfo" | cut -d, -f1)
		GIDnumber=$(echo "$GIDInfo" | cut -d, -f2)
		set_gid_ad_account
	done

fi
#Create a default location
echo default > /var/lib/samba/netlogon/locations.txt
echo >> /var/lib/samba/netlogon/locations.txt

#######################
#Make printers.txt
#######################
echo "$(date): Creating printers.txt" >> /opt/karoshi/serversetup/install_log
if ! test -e /var/lib/samba/netlogon/printers.txt
then
	echo "**********************************************************************
*Printer names must match share names on the printer server
*Supports a maximum of 10 printers per location
*List your printers below the start marker
*Do NOT remove or alter start marker
*
*
*Example: R101,2,R101_BW,R101_CL,R101_BW
**********************************************************************

--start--" > /var/lib/samba/netlogon/printers.txt
	chmod 0644 /var/lib/samba/netlogon/printers.txt
fi
}

function make_profiles {
echo "$(date): Creating windows profiles" >> /opt/karoshi/serversetup/install_log
###################################
#Copying profiles
###################################
[ -d /home/remastersys ] && rm -f -R /home/remastersys
echo $"Copying in windows client profiles"

#Extract profiles

[ ! -d /home/applications/profiles ] && mkdir /home/applications/profiles

echo $"Extracting Windows XP Profile"
tar -zxf /opt/karoshi/serversetup/pdc/profiles/defaultprofile.tar.gz -C /home/applications/profiles/
echo $"Extracting Windows 7 Profile"
tar -zxf /opt/karoshi/serversetup/pdc/profiles/defaultprofile.V2.tar.gz -C /home/applications/profiles/
echo $"Extracting Windows 8.1 Profile"
tar -zxf /opt/karoshi/serversetup/pdc/profiles/defaultprofile.V4.tar.gz -C /home/applications/profiles/

#We dont have a windows 8.0 profile so make an empty folder for it
[ ! -d /home/applications/profiles/defaultprofile.V3 ] && mkdir -p /home/applications/profiles/defaultprofile.V3

if [ -f /opt/karoshi/serversetup/pdc/profiles/defaultprofile.V5.tar.gz ]
then
	echo $"Extracting Windows 10 Profile"
	tar -zxf /opt/karoshi/serversetup/pdc/profiles/defaultprofile.V5.tar.gz -C /home/applications/profiles/
fi

if [ -f /opt/karoshi/serversetup/pdc/profiles/defaultprofile.V6.tar.gz ]
then
	echo $"Extracting Windows 10 Aniversary Profile"
	tar -zxf /opt/karoshi/serversetup/pdc/profiles/defaultprofile.V6.tar.gz -C /home/applications/profiles/
fi

#Copy in windows icons
cp -f /opt/karoshi/serversetup/pdc/profiles/icons/"Change My Password.url" /home/applications/profiles/defaultprofile/Desktop/
cp -f /opt/karoshi/serversetup/pdc/profiles/icons/"Help Desk.url" /home/applications/profiles/defaultprofile/Desktop/
cp -f /opt/karoshi/serversetup/pdc/profiles/icons/"Karoshi Web Management.url" /home/applications/profiles/defaultprofile/Desktop/

#Point default profile icons to correct realm
[ -f /home/applications/profiles/defaultprofile/Desktop/"Help Desk.url" ] && sed -i 's@CHANGETHISREALM@'"$REALM"'@g' /home/applications/profiles/defaultprofile/Desktop/"Help Desk.url"
[ -f /home/applications/profiles/defaultprofile/Desktop/"Change My Password.url" ] && sed -i 's@CHANGETHISREALM@'"$REALM"'@g' /home/applications/profiles/defaultprofile/Desktop/"Change My Password.url"
[ -f /home/applications/profiles/defaultprofile/Desktop/"Karoshi Web Management.url" ] && sed -i 's@CHANGETHISREALM@'"$REALM"'@g' /home/applications/profiles/defaultprofile/Desktop/"Karoshi Web Management.url"

[ ! -d /home/applications/profiles/default_roaming_profile ] && mkdir /home/applications/profiles/default_roaming_profile

#Create tech profile
cp -f -R /home/applications/profiles/defaultprofile /home/applications/profiles/tech

for WP_VERSION in $WP_VERSIONS
do
	if [ -d /home/applications/profiles/defaultprofile."$WP_VERSION"/Desktop/ ]
	then
		cp -f /opt/karoshi/serversetup/pdc/profiles/icons/"Change My Password.url" /home/applications/profiles/defaultprofile."$WP_VERSION"/Desktop/
		cp -f /opt/karoshi/serversetup/pdc/profiles/icons/"Help Desk.url" /home/applications/profiles/defaultprofile."$WP_VERSION"/Desktop/
		cp -f /opt/karoshi/serversetup/pdc/profiles/icons/"Karoshi Web Management.url" /home/applications/profiles/defaultprofile."$WP_VERSION"/Desktop/

		[ -f /home/applications/profiles/defaultprofile."$WP_VERSION/Desktop/Help Desk.url" ] && sed -i 's@CHANGETHISREALM@'"$REALM"'@g' /home/applications/profiles/defaultprofile."$WP_VERSION/Desktop/Help Desk.url"
		[ -f /home/applications/profiles/defaultprofile."$WP_VERSION/Desktop/Change My Password.url" ] && sed -i 's@CHANGETHISREALM@'"$REALM"'@g' /home/applications/profiles/defaultprofile."$WP_VERSION/Desktop/Change My Password.url"
		[ -f /home/applications/profiles/defaultprofile."$WP_VERSION/Desktop/Karoshi Web Management.url" ] && sed -i 's@CHANGETHISREALM@'"$REALM"'@g' /home/applications/profiles/defaultprofile."$WP_VERSION/Desktop/Karoshi Web Management.url"
	fi

	[ ! -d /home/applications/profiles/default_roaming_profile."$WP_VERSION" ] && mkdir /home/applications/profiles/default_roaming_profile."$WP_VERSION"

	#Create tech profile
	cp -f -R /home/applications/profiles/defaultprofile."$WP_VERSION" /home/applications/profiles/tech."$WP_VERSION"

done

echo $"Setting profile permissions"
chown -R root.itadmin /home/applications/profiles
chmod 0664 -R /home/applications/profiles
chmod u+X,g+X,o+X -R /home/applications/profiles
[ -d /home/applications/Shortcuts ] || cp -R /opt/karoshi/serversetup/pdc/Shortcuts /home/applications
chown -R root.itadmin /home/applications/Shortcuts
chmod 0664 -R /home/applications/Shortcuts
chmod u+X,g+X,o+X -R /home/applications/Shortcuts

[ -d /home/applications/"profile management" ] || mkdir /home/applications/"profile management"
[ -d /home/applications/"profile management/desktop icons" ] || mkdir /home/applications/"profile management/desktop icons"
[ -d /home/applications/"profile management/start menu" ] || mkdir /home/applications/"profile management/start menu"
[ -d /home/applications/"profile management/new profile" ] || mkdir /home/applications/"profile management/new profile"
chown -R root.itadmin /home/applications/"profile management"
chmod 0660 -R /home/applications/"profile management"
chmod u+X,g+X -R /home/applications/"profile management"

#Create information files for each windows version
if [ ! -d /opt/karoshi/server_network/clients/windows_client_versions ]
then
	mkdir -p /opt/karoshi/server_network/clients/windows_client_versions
fi
chown root.apache_karoshi -R /opt/karoshi/server_network/clients/windows_client_versions
chmod 0640 -R /opt/karoshi/server_network/clients/windows_client_versions
chmod u+X,g+X -R /opt/karoshi/server_network/clients/windows_client_versions

echo -e 'WINDOWS_VERSION=windowsxp\nPROFILE_VERSION=""\nWINDOWS_NAME="Windows XP"' >  /opt/karoshi/server_network/clients/windows_client_versions/windowsxp
echo -e 'WINDOWS_VERSION=windows7\nPROFILE_VERSION=V2\nWINDOWS_NAME="Windows 7"' >  /opt/karoshi/server_network/clients/windows_client_versions/windows7
echo -e 'WINDOWS_VERSION=windows8.0\nPROFILE_VERSION=V3\nWINDOWS_NAME="Windows 8"' >  /opt/karoshi/server_network/clients/windows_client_versions/windows8
echo -e 'WINDOWS_VERSION=windows8.1\nPROFILE_VERSION=V4\nWINDOWS_NAME="Windows 8.1"' >  /opt/karoshi/server_network/clients/windows_client_versions/windows8.1
echo -e 'WINDOWS_VERSION=windows10\nPROFILE_VERSION=V5\nWINDOWS_NAME="Windows 10"' >  /opt/karoshi/server_network/clients/windows_client_versions/windows10
echo -e 'WINDOWS_VERSION=windows10.1\nPROFILE_VERSION=V6\nWINDOWS_NAME="Windows 10 Anniversary Edition"' >  /opt/karoshi/server_network/clients/windows_client_versions/windows10.1


[ -d /var/lib/samba/printers ] || mkdir /var/lib/samba/printers
chown -R root.itadmin /var/lib/samba/printers
chmod 0775 -R /var/lib/samba/printers
[ ! -d /var/spool/samba ] && mkdir -p /var/spool/samba
chmod 0777 /var/spool/samba
chmod +t /var/spool/samba
[ ! -d /home/applications/cups_print/x64 ] && mkdir -p /home/applications/cups_print/x64

chmod 0775 -R /home/applications/cups_print
chown root.tech -R /home/applications/cups_print

chmod 0444 -R /var/lib/samba/netlogon/*
chmod u+X,g+X,o+X -R /var/lib/samba/netlogon/*
chmod 0555 /var/lib/samba/netlogon/logon.bat
chmod 0555 /var/lib/samba/netlogon/kix/kixinstall.bat
chmod 0555 /var/lib/samba/netlogon/kix/getdll.bat
chmod 0555 /var/lib/samba/netlogon/kix/Setup_Workstation.bat
}

echo "EXTRASERVERS=no
EXTRASERVERCOUNT=1" > /opt/karoshi/serversetup/variables/choice

function allow_anonymous_browse {
echo "$(date): Allowing anonymous ldap bind " >> /opt/karoshi/serversetup/install_log
#Modify CN=Directory Service to allow anonymous ldap bind
echo -e "dn: CN=Directory Service,CN=Windows NT,CN=Services,CN=Configuration,$LDAPBASE
changetype: modify
add: dsHeuristics
dsHeuristics: 0000002001001
-" | ldapmodify -x -D "CN=Administrator,CN=Users,$LDAPBASE" -w "$LDAPPASS" 1>/dev/null 2>> /opt/karoshi/serversetup/install_log
}


function create_user {
echo "$(date): Creating user: $NEWUSERNAME" >> /opt/karoshi/serversetup/install_log

if [ "$NEWUSERNAME" = profileuser ]
then
	#Dont add in a profile path for profileuser - so that this account has a local profile.
	samba-tool user add "$NEWUSERNAME" --userou="$SUBPATH" --script-path="logon.bat $PRIMARYGROUP" --use-username-as-cn  --random-password --mail-address="$NEWUSERNAME@$REALM" 1>/dev/null 2>>/opt/karoshi/serversetup/install_log
else
	samba-tool user add "$NEWUSERNAME" --userou="$SUBPATH" --profile-path=\\\\"$HOSTNAME"\\applications\\profiles\\"$PROFILEFOLDER" --script-path="logon.bat $PRIMARYGROUP" --use-username-as-cn  --random-password --mail-address="$NEWUSERNAME@$REALM" 1>/dev/null 2>>/opt/karoshi/serversetup/install_log
fi

#Add user to primary group
echo "$(date): Adding $NEWUSERNAME to $PRIMARYGROUP" >> /opt/karoshi/serversetup/install_log
samba-tool group addmembers "$PRIMARYGROUP" "$NEWUSERNAME"  1>/dev/null 2>>/opt/karoshi/serversetup/install_log

#Add tech and itadmin users to the domain admins group
if [ "$PRIMARYGROUP" = itadmin ] || [ "$PRIMARYGROUP" = tech ]
then
	echo "$(date): Adding $NEWUSERNAME to Domain Admins" >> /opt/karoshi/serversetup/install_log
	samba-tool group addmembers "Domain Admins" "$NEWUSERNAME"  1>/dev/null 2>>/opt/karoshi/serversetup/install_log
fi

PRIGROUPID=$(getent group "$PRIMARYGROUP" | cut -d: -f3)

#Change primarygroupid and add unixhomedirectory - have to use ldapmodify at this time since samba-tool does not seem to have this option!
#This is hideous why cant samba4 ldap do this all in one go??
echo -e "dn: CN=$NEWUSERNAME,$SUBPATH,$LDAPBASE
changetype: modify
add: objectclass
objectclass: posixaccount
-
add: gidnumber
gidnumber: $PRIGROUPID
-" | ldapmodify -x -D "CN=Administrator,CN=Users,$LDAPBASE" -w "$LDAPPASS" 1>/dev/null 2>>/opt/karoshi/serversetup/install_log

UIDNUMBER=$(getent passwd "$NEWUSERNAME" | cut -d: -f3)

echo -e "dn: CN=$NEWUSERNAME,$SUBPATH,$LDAPBASE
changetype: modify
add: uidnumber
uidnumber: $UIDNUMBER
-
add: unixhomedirectory
unixhomedirectory: $NEWUSERPATH
-
add: displayname
displayname: $NEWUSERDISP
-" | ldapmodify -x -D "CN=Administrator,CN=Users,$LDAPBASE" -w "$LDAPPASS" 1>/dev/null 2>>/opt/karoshi/serversetup/install_log


[ ! -d "$NEWUSERPATH" ] && mkdir "$NEWUSERPATH"
chmod 0600 -R "$NEWUSERPATH"
chmod u+X -R "$NEWUSERPATH"
chown "$NEWUSERNAME" -R "$NEWUSERPATH"
}

function make_default_users {
echo "$(date): Making default users" >> /opt/karoshi/serversetup/install_log
#Get samba 4 database password
LDAPPASS=$(sed -n 1,1p /etc/ldap.secret)

#Add sysadmin
NEWUSERNAME=sysadmin
NEWUSERPATH=/home/users/itadminstaff/sysadmin
SUBPATH='OU=itadmin,OU=personnel,OU=People'
PRIMARYGROUP=itadmin
PROFILEFOLDER=itadmin
NEWUSERDISP="Sysadmin User"
create_user


#Add profileuser
NEWUSERNAME=profileuser
NEWUSERPATH=/home/users/profileuser
SUBPATH='OU=other,OU=People'
PRIMARYGROUP=profilemanagement
PROFILEFOLDER=profileuser
NEWUSERDISP="Profile User"
create_user

#Add guest accounts
COUNTER=1

while [ "$COUNTER" -le "$GUESTACCOUNTS" ]
do
	NEWUSERNAME=guest"$COUNTER"
	NEWUSERPATH=/home/users/guestusers/guest"$COUNTER"
	SUBPATH='OU=guestusers,OU=other,OU=People'
	PRIMARYGROUP=guestusers
	PROFILEFOLDER=guestusers
	NEWUSERDISP="Guest $COUNTER"
	create_user
	let COUNTER=COUNTER+1
done

#Add tech accounts
if [ "$INSTALL_TYPE" != home ]
then
	COUNTER=1
	while [ "$COUNTER" -le "$TECHACCOUNTS" ]
	do
		NEWUSERNAME=tech"$COUNTER"
		NEWUSERPATH=/home/users/techstaff/tech"$COUNTER"
		SUBPATH='OU=tech,OU=personnel,OU=People'
		PRIMARYGROUP=tech
		PROFILEFOLDER=tech
		NEWUSERDISP="Tech $COUNTER"
		create_user
		let COUNTER=COUNTER+1
	done
fi

if [ "$INSTALL_TYPE" = education ] || [ "$INSTALL_TYPE" = joindomain_education ]
then
	#Add exam accounts
	COUNTER=1
	while [ "$COUNTER" -le "$EXAMACCOUNTS" ]
	do
		NEWUSERNAME=exam"$COUNTER"
		NEWUSERPATH=/home/users/exams/exam"$COUNTER"
		SUBPATH='OU=exams,OU=other,OU=People'
		PRIMARYGROUP=exams
		PROFILEFOLDER=exams
		NEWUSERDISP="Exam $COUNTER"
		create_user
		let COUNTER=COUNTER+1
	done
fi

#Add root account for domain member printing with cupsaddsmb
echo "$(date): Adding root account for domain member printing with cupsaddsmb" >> /opt/karoshi/serversetup/install_log
samba-tool user add root --use-username-as-cn --random-password 1>/dev/null 2>>/opt/karoshi/serversetup/install_log
samba-tool user setpassword root --newpassword="$LDAPPASS" 1>/dev/null 2>>/opt/karoshi/serversetup/install_log
}

function setfolderpermissions {
echo "$(date): Setting acl folder permissions" >> /opt/karoshi/serversetup/install_log
setfacl -Rm u::rwx,g::---,o::---,g:itadmin:rwx,d:u::rwx,d:g::---,d:o::---,d:g:itadmin:rwx /home/itadminshare
if [ "$INSTALL_TYPE" != home ]
then
	setfacl -Rm u::rwx,g::---,o::---,g:staff:rwx,d:u::rwx,d:g::---,d:o::---,d:g:staff:rwx /home/staffshare
	setfacl -Rm u::rwx,g::---,o::---,g:officestaff:rwx,d:u::rwx,d:g::---,d:o::---,d:g:officestaff:rwx /home/officeshare
	setfacl -m g:staff:r-x,u::r-x /home/staffshare
fi

if [ "$INSTALL_TYPE" = education ] || [ "$INSTALL_TYPE" = joindomain_education ]
then
	setfacl -Rm u::rwx,g::r-x,o::r-x,g:staff:rwx,d:u::rwx,d:g::r-x,d:o::r-x,d:g:staff:rwx /home/subjects
	setfacl -m g:staff:r-x,u::r-x /home/subjects
	setfacl -R -m g:staff:r-x,d:g:staff:r-x /home/users/students
fi
}

##############################
#Display progress box
##############################
function run_functions {
if [ "$INSTALL_TYPE" != adcrestore ] && [ "$INSTALL_TYPE"  != archiverestore ]
then
	check_ldap_port
	allow_anonymous_browse
	add_organisational_units
fi

create_hostname_fqdn

#nslcd-user-accounts - not needed using anonymous bind instead
echo "N.A.:127.0.0.1:N.A.:$HOSTNAME.$REALM:users:internal:" | /opt/karoshi/serversetup/modules/authentication/configure_authentication
makefoldersandgroups

if [ "$INSTALL_TYPE" != adcrestore ] && [ "$INSTALL_TYPE" != archiverestore ]
then
	creategpos
	setfolderpermissions
	make_default_users
	make_profiles
fi
getyadpid
[ ! -z "$YADPID" ] && kill "$YADPID"
}

run_functions 2>> /opt/karoshi/serversetup/install_log | show_info

#######################
#Change passwords
#######################
echo "$(date): Changing root and karoshi passwords" >> /opt/karoshi/serversetup/install_log
echo root:"$SAMBAROOTPASSWORD1" | chpasswd
echo karoshi:"$SAMBAROOTPASSWORD1" | chpasswd

#######################
#Stop password aging
#######################
echo "$(date): Stopping password aging" >> /opt/karoshi/serversetup/install_log
chage -M 99999 root
chage -M 99999 karoshi

if [ "$INSTALL_TYPE" != adcrestore ] && [ "$INSTALL_TYPE" != archiverestore ]
then
	#######################
	#Setup Scheduled Jobs
	#######################
	echo "$(date): Setting up scheduled jobs" >> /opt/karoshi/serversetup/install_log
	[ ! -d /opt/karoshi/server_network/cronjobs/"$(hostname-fqdn)"/jobs ] && mkdir -p /opt/karoshi/server_network/cronjobs/"$(hostname-fqdn)"/jobs
	echo "0 0 * * 7 /opt/karoshi/\"useful scripts\"/resetguestaccounts" > /opt/karoshi/server_network/cronjobs/"$(hostname-fqdn)"/jobs/resetguestaccounts.cron
	echo "1 0 * * 1-5 /opt/karoshi/\"useful scripts\"/resettechaccounts" > /opt/karoshi/server_network/cronjobs/"$(hostname-fqdn)"/jobs/resettechaccounts.cron
	echo "0 23 * * 1-5 /opt/karoshi/serversetup/all/\"useful scripts\"/backup_servers/samba_backup" > /opt/karoshi/server_network/cronjobs/"$(hostname-fqdn)"/jobs/samba_backup.cron
	echo "*/30 * * * 1-7 /opt/karoshi/\"useful scripts\"/check_services" > /opt/karoshi/server_network/cronjobs/"$(hostname-fqdn)"/jobs/check_services.cron
	echo "*/30 * * * 1-7 /opt/karoshi/\"useful scripts\"/check_logs" > /opt/karoshi/server_network/cronjobs/"$(hostname-fqdn)"/jobs/check_logs.cron

	#########################
	#Linux Client support
	#########################
	echo "$(date): Adding linux client support" >> /opt/karoshi/serversetup/install_log

	[ ! -d /var/lib/samba/netlogon/linuxclient ] && mkdir -p /var/lib/samba/netlogon/linuxclient
	cp -f -R /opt/karoshi/serversetup/pdc/linuxclient/karoshi /var/lib/samba/netlogon/linuxclient/"$LINUXCLIENTVERSION"
	tar -xvzf /opt/karoshi/serversetup/pdc/linuxclient/"$LINUXCLIENTVERSION".tar.gz -C /var/lib/samba/netlogon/linuxclient 1>/dev/null

	cp -f /opt/karoshi/serversetup/all/backgrounds/linuxclient.png /var/lib/samba/netlogon/linuxclient/background.png

	#Create client info on netlogon
	[ ! -d /var/lib/samba/netlogon/domain_information ] && mkdir -p /var/lib/samba/netlogon/domain_information
	echo "$SAMBADOMAIN" > /var/lib/samba/netlogon/domain_information/domain_name
	#echo $HOSTNAME.$REALM > /var/lib/samba/netlogon/domain_information/main_server_fqdn
	echo "$HOSTNAME" > /var/lib/samba/netlogon/domain_information/main_server

	#Copy printer info to netlogon
	[ -f /opt/karoshi/server_network/printserver ] && cp -f /opt/karoshi/server_network/printserver /var/lib/samba/netlogon/

	#Add LINUXCLIENTVERSION to versions.txt
	touch /var/lib/samba/netlogon/linuxclient/versions.txt
	[[ $(grep -c ^LINUXCLIENTVERSION /var/lib/samba/netlogon/linuxclient/versions.txt) = 0 ]] && echo "$LINUXCLIENTVERSION" >> /var/lib/samba/netlogon/linuxclient/versions.txt

	#Point icons at the correct path
	sed -i 's/xen:50001/manage.'"$REALM"':50001/g' /var/lib/samba/netlogon/linuxclient/"$LINUXCLIENTVERSION/desktop-icons/all/Change Password.desktop"
	sed -i 's/xen:50001/manage.'"$REALM"':50001/g' /var/lib/samba/netlogon/linuxclient/"$LINUXCLIENTVERSION"/desktop-icons/itadmin/Helpdesk.desktop
	sed -i 's/xen:50001/manage.'"$REALM"':50001/g' /var/lib/samba/netlogon/linuxclient/"$LINUXCLIENTVERSION"/desktop-icons/itadmin/karoshimanagement.desktop
	sed -i 's/xen:50001/manage.'"$REALM"':50001/g' /var/lib/samba/netlogon/linuxclient/"$LINUXCLIENTVERSION"/desktop-icons/staff/Helpdesk.desktop
	sed -i 's/xen:50001/manage.'"$REALM"':50001/g' /var/lib/samba/netlogon/linuxclient/"$LINUXCLIENTVERSION"/desktop-icons/staff/karoshimanagement.desktop
	sed -i 's/xen:50001/manage.'"$REALM"':50001/g' /var/lib/samba/netlogon/linuxclient/"$LINUXCLIENTVERSION"/desktop-icons/officestaff/Helpdesk.desktop
	sed -i 's/xen:50001/manage.'"$REALM"':50001/g' /var/lib/samba/netlogon/linuxclient/"$LINUXCLIENTVERSION"/desktop-icons/officestaff/karoshimanagement.desktop

	#Add in support for older client versions
	for OLDERCLIENTVERSION in $OLDERCLIENTVERSIONS
	do
		[ ! -d /var/lib/samba/netlogon/linuxclient/"$OLDERCLIENTVERSION"/libreoffice/extensions/ ] && mkdir -p /var/lib/samba/netlogon/linuxclient/"$OLDERCLIENTVERSION"/libreoffice/extensions/
		cp -f -R /var/lib/samba/netlogon/linuxclient/"$LINUXCLIENTVERSION"/desktop-icons /var/lib/samba/netlogon/linuxclient/"$OLDERCLIENTVERSION"/desktop-icons 
	done

	#Create information for linux clients
	[ ! -d /var/lib/samba/netlogon/domain_information ] && mkdir -p /var/lib/samba/netlogon/domain_information
	[ ! -d /var/lib/samba/dfs/homes ] && mkdir -p /var/lib/samba/dfs/homes
	touch /var/lib/samba/netlogon/domain_information/samba4
	echo "$WEBADDRESS" > /var/lib/samba/netlogon/domain_information/dns_domain
	echo "$DOMAINSID" > /var/lib/samba/netlogon/domain_information/domain_sid
	echo "$LDAPBASE" > /var/lib/samba/netlogon/domain_information/ldap_base

	#Prepare client_settings
	[ ! -d /var/lib/samba/netlogon/client_settings ] && mkdir -p /var/lib/samba/netlogon/client_settings
fi

#Create zone information
echo "$(date): Creating zone information" >> /opt/karoshi/serversetup/install_log
[ ! -d /opt/karoshi/server_network/zones/internal/primary_domain_controller ] && mkdir -p /opt/karoshi/server_network/zones/internal/primary_domain_controller
echo "$HOSTNAME.$REALM" > /opt/karoshi/server_network/zones/internal/primary_domain_controller/"$HOSTNAME.$REALM"

[ ! -d /opt/karoshi/server_network/zones/internal/servers ] && mkdir -p /opt/karoshi/server_network/zones/internal/servers
touch /opt/karoshi/server_network/zones/internal/servers/"$HOSTNAME.$REALM"

#Make sure all jobs are scheduled
/opt/karoshi/serversetup/all/"useful scripts"/refreshcronjobs

#Restart samba
echo Restarting samba4 >> /opt/karoshi/serversetup/install_log
/opt/karoshi/serversetup/distro/"$DISTROCHOICE"/scripts/control_services/samba_stop
sleep 1
/opt/karoshi/serversetup/distro/"$DISTROCHOICE"/scripts/control_services/samba_start

if [ "$INSTALL_TYPE" != adcrestore ] && [ "$INSTALL_TYPE" != archiverestore ]
then 
	#Create dfs links
	ln -s msdfs:"$HOSTNAME"\\applications /var/lib/samba/dfs/applications
	ln -s msdfs:"$HOSTNAME"\\itadminshare /var/lib/samba/dfs/itadminshare
	ln -s msdfs:"$HOSTNAME"\\netlogon /var/lib/samba/dfs/netlogon
	ln -s msdfs:"$HOSTNAME"\\sysvol /var/lib/samba/dfs/sysvol

	if [ "$INSTALL_TYPE" = education ]
	then 
		ln -s msdfs:"$HOSTNAME"\\subjects /var/lib/samba/dfs/subjects
	fi

	if [ "$INSTALL_TYPE" = education ] || [ "$INSTALL_TYPE" = business ] 
	then
		ln -s msdfs:"$HOSTNAME"\\staffshare /var/lib/samba/dfs/staffshare
		ln -s msdfs:"$HOSTNAME"\\officeshare /var/lib/samba/dfs/officeshare
	fi

	if [ "$INSTALL_TYPE" = home ]
	then 
		ln -s msdfs:"$HOSTNAME"\\multimedia /var/lib/samba/dfs/multimedia
	fi

	#Create dfs links for existing users
	for NEWUSER in $(getent passwd | grep /home/users | cut -d: -f1) 
	do
		ln -s msdfs:"$HOSTNAME\\$NEWUSER" /var/lib/samba/dfs/homes/"$NEWUSER"
	done

	#Add in server declarations
	[ ! -d /opt/karoshi/server_network/network_shares ] && mkdir -p /opt/karoshi/server_network/network_shares
	SERVERNAME=$(hostname-fqdn)
	[ ! -d /opt/karoshi/server_network/network_shares/"$SERVERNAME" ] && mkdir -p /opt/karoshi/server_network/network_shares/"$SERVERNAME"

	SERVERSHARES="applications subjects staffshare sysvol itadminshare officeshare netlogon"
	[ "$INSTALL_TYPE" = business ] && SERVERSHARES="applications staffshare sysvol itadminshare officeshare netlogon"
	[ "$INSTALL_TYPE" = home ] && SERVERSHARES="applications multimedia sysvol itadminshare netlogon"

	for SHARENAME in $SERVERSHARES
	do
		if [[ $(grep -c "$SHARENAME" /etc/samba/smb.conf) -gt 0 ]]
		then
			NETUSERS=""
			NETGROUPS=""
			MASK=0775
			GROUPPERMS=5
			MAP_DRIVE=1
			if [ "$SHARENAME" = subjects ]
			then
				DRIVELETTER='"q"'
				NETGROUPS="all,staff,officestaff,itadmin"
				SHAREPATH="/home/subjects"
				MASK=0755
				GROUPPERMS="5,7,7,7"
				MAP_DRIVE="1,0,0,0"
			fi
			if [ "$SHARENAME" = sysvol ]
			then
				DRIVELETTER='"u"'
				NETGROUPS="all,itadmin"
				SHAREPATH="/var/lib/samba/sysvol"
				MASK=0755
				GROUPPERMS="5,7"
				MAP_DRIVE="0,1"
			fi
			if [ "$SHARENAME" = netlogon ]
			then
				DRIVELETTER='"n"'
				SHAREPATH="/var/lib/samba/netlogon"
				MASK="0755"
				MAP_DRIVE="0,1"
				NETGROUPS="all,itadmin"
				GROUPPERMS="5,7"
			
			fi
			if [ "$SHARENAME" = staffshare ]
			then
				DRIVELETTER='"s"'
				NETGROUPS="staff,itadmin,officestaff"
				SHAREPATH="/home/staffshare"
				MASK="0770"
				GROUPPERMS="7,7,7"
				MAP_DRIVE="1,1,1"
			fi
			if [ "$SHARENAME" = itadminshare ]
			then
				DRIVELETTER='"i"'
				NETGROUPS="itadmin"
				SHAREPATH="/home/itadminshare"
				MASK="0770"
				GROUPPERMS="7"
				MAP_DRIVE="1"
			fi
			if [ "$SHARENAME" = applications ]
			then
				DRIVELETTER='"j"'
				NETGROUPS="itadmin"
				SHAREPATH="/home/applications"
				GROUPPERMS="7"
			fi
			if [ "$SHARENAME" = officeshare ]
			then
				DRIVELETTER='"o"'
				NETGROUPS="officestaff"
				SHAREPATH="/home/officeshare"
				GROUPPERMS="7"
				MASK="0770"
				MAP_DRIVE="1"
			fi
			if [ "$SHARENAME" = multimedia ]
			then
				DRIVELETTER='"m"'
				NETGROUPS="parents,teenagers,children"
				SHAREPATH="/home/multimedia"
				GROUPPERMS="7,7,5"
				MASK="0770"
				MAP_DRIVE="1,1,1,"
			fi

			echo "SERVER=\"$SERVERNAME\"
SHAREPATH=\"$SHAREPATH\"
USERLIST=\"$NETUSERS\"
GROUPLIST=\"$NETGROUPS\"
GROUPPERMS=\"$GROUPPERMS\"
MAP_DRIVE=\"$MAP_DRIVE\"
DRIVELETTER=\"$DRIVELETTER\"
SERVERTYPE=\"network\"
SERVERMASTER=\"\"
MASK=\"$MASK\"" > /opt/karoshi/server_network/network_shares/"$SERVERNAME/$SHARENAME"
		fi
	done

	#Add in categories folder
	if [ ! -d /opt/karoshi/server_network/categories ]
	then
		mkdir /opt/karoshi/server_network/categories
		if [ "$INSTALL_TYPE" = business ] || [ "$INSTALL_TYPE" = education ]
		then
			echo CATEGORYNAME='$"'$"Personnel"'"' > /opt/karoshi/server_network/categories/personnel
		fi
		if [ "$INSTALL_TYPE" = home ]
		then
			echo CATEGORYNAME='$"'$"Family"'"' > /opt/karoshi/server_network/categories/family
		fi
		if [ "$INSTALL_TYPE" = education ]
		then
			echo CATEGORYNAME='$"'$"Students"'"' > /opt/karoshi/server_network/categories/students
		fi
		touch /opt/karoshi/server_network/categories/other
		echo CATEGORYNAME='$"'$"Other"'"' > /opt/karoshi/server_network/categories/other
	fi

	#Add in flag file for dfs
	touch /var/lib/samba/netlogon/domain_information/dfs_enabled

	#Create drive maps
	/opt/karoshi/serversetup/pdc/"useful scripts"/generate_logon_scripts

fi

if [ "$INSTALL_TYPE" = adcrestore ]
then
	#Set /etc/resolv.conf to use the existing domain controller
	echo domain "$REALM" > /etc/resolv.conf
	echo nameserver "$DNSTCPIP" >> /etc/resolv.conf
	#Restore dc-data gluster volume
	echo "$(date): Restoring dc-data gluster volume" >> /opt/karoshi/serversetup/install_log
	/opt/karoshi/serversetup/modules/glusterfs/scripts/karoshi_gluster "$(hostname-fqdn)" dc-data restore
	if [ "$?" = 0 ]
	then
		for FOLDER in /var/lib/samba/netlogon /var/lib/samba/sysvol /var/lib/samba/dfs /home/applications /opt/karoshi/server_network
		do
			echo "$(date): Populating $FOLDER on dc-data" >> /opt/karoshi/serversetup/install_log
			/opt/karoshi/serversetup/modules/glusterfs/scripts/populate_gluster_volume "$(hostname-fqdn)" "$FOLDER" dc-data
		done
	fi

	#Restore any other gluster volumes that have been setup for the main server
	for GLUSTERVOLUME in $(ls -1 /opt/karoshi/server_network/gluster-volumes)
	do
		if [ "$GLUSTERVOLUME" != dc-data ]
		then
			#Check if this server is on the gluster volume
			if [ -f /opt/karoshi/server_network/gluster-volumes/"$GLUSTERVOLUME/servers/$(hostname-fqdn)" ]
			then
				#Restore gluster volume
				echo "$(date): Restoring $GLUSTERVOLUME gluster volume" >> /opt/karoshi/serversetup/install_log
				/opt/karoshi/serversetup/modules/glusterfs/scripts/karoshi_gluster "$(hostname-fqdn)" "$GLUSTERVOLUME" restore
				if [ $? = 0 ]
				then
					for FOLDER in $(ls -1 /opt/karoshi/server_network/gluster-volumes/"$GLUSTERVOLUME"/folders)
					do
						FOLDER=$(echo "$FOLDER" | sed 's%-%/%g')
						echo "$(date): Populating $FOLDER on $GLUSTERVOLUME" >> /opt/karoshi/serversetup/install_log
						/opt/karoshi/serversetup/modules/glusterfs/scripts/populate_gluster_volume "$(hostname-fqdn)" "$FOLDER" "$GLUSTERVOLUME"
					done
				fi
			fi
		fi
	done
	#Seize ad roles back
	echo "$(date): Seizing adc roles" >> /opt/karoshi/serversetup/install_log
	samba-tool fsmo seize --role=all &
	#Set /etc/resolv.conf back to this server
	echo "$(date): Creating resolv.conf" >> /opt/karoshi/serversetup/install_log
	create_resolv.conf
fi

#Set permissions on sysvol
#samba-tool ntacl sysvolreset

if [ "$INSTALL_TYPE" = adcrestore ] || [ "$INSTALL_TYPE" = archiverestore ]
then 
	#Modify role information
	if [ -d /opt/karoshi/server_network/servers/"$HOSTNAME.$REALM" ]
	then
		echo "$(date): modifying role information" >> /opt/karoshi/serversetup/install_log
		for INFOFILES in /opt/karoshi/server_network/servers/"$HOSTNAME.$REALM"/*
		do
			INFOFILE=$(basename "$INFOFILES")
			if [ "$INFOFILE" != apacheserver ] && [ "$INFOFILE" != glusterfs_server ] && [ "$INFOFILE" != 1dc ] && [ "$INFOFILE" != 1domainmember ] && [ "$INFOFILE" != 2users-groups ]
			then
				if [[ $(grep -c RE-INSTALL /opt/karoshi/server_network/servers/"$HOSTNAME.$REALM/$INFOFILE") = 0 ]]
				then
					echo "$(date): marking $INFOFILE for re-install" >> /opt/karoshi/serversetup/install_log
					sed -i '1i <span class="reinstall"><b>' /opt/karoshi/server_network/servers/"$HOSTNAME.$REALM/$INFOFILE"
					echo 'RE-INSTALL MODULE<br></b></span>' >> /opt/karoshi/server_network/servers/"$HOSTNAME.$REALM/$INFOFILE"
				fi
			fi
		done
	fi
fi

#Restore original install type if this is a restore
if [ -f /opt/karoshi/server_network/install_type_pre_restore ]
then
	rm -f /opt/karoshi/server_network/install_type
	mv /opt/karoshi/server_network/install_type_pre_restore /opt/karoshi/server_network/install_type
fi

exit
