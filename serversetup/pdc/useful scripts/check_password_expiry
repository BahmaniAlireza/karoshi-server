#!/bin/bash

source /opt/karoshi/server_network/domain_information/domain_name

#Variables

#Send E-Mail alerts - you will need to have applied and be using the E-Mail server module for this
SEND_EMAIL_AERTS=yes

#How many days beforehand should we alert if a password needs changing
DAYS_BEFORE=5

#The account name that the email will be sent from - $REALM will substitute your domain name
EMAILFROM=sysadmin@"$REALM"

#The E-Mail subject for each warning E-Mail sent
EMAILSUBJECT="Password Expiry"

#The saluation at the start of the E-Mail warning
SALUTATION="Dear"

#The first sentence of the E-Mail message - this is followed by the date and time that the password is due to expire
EMAILMSG1="Your password is due to expire on"

#The main part of the E-Mail message - line returns are included in the E-Mail
EMAILMSG2="You will need to make sure that you change your password before this date so that you can continue to access this computer network.

Should you require any further assistance in this please consult a member of your IT administration team."

#The valediction at the end of the E-Mail warning
VALEDICTION="Kind regards - the I.T. team."

#Add a Weblink to where user's can change their password - set this to yes if required - this is not ideal since the link will probably only work internally and will look like a phishing email
ADD_WEBLINK=no

#The text that goes with the weblink - only used if ADD_WEBLINK is set to yes
WEBLINKMSG="If you are logged in internally you can click here to change your password."

#The url that users can click on to change their passwords - only used if ADD_WEBLINK is set to yes
WEBLINK="https://manage.$REALM:50001/cgi-bin/all/change_my_password_fm.cgi"

#Groups of users that are removed from the search because we don't want to send E-Mail alerts to these users
IGNOREGROUPS="/home/users/guestusers/|/home/users/exams/|/home/users/techstaff/|/home/users/profileuser|/home/users/itadminstaff/"

#Get the days before in seconds as we are using epoch time
(( DAYS_BEFORE2 = "$DAYS_BEFORE" * 24 * 60 * 60 ))

#Check if we have an E-Mail server to send alerts to
if [ -f /opt/karoshi/server_network/emailserver ]
then
	EMAILSERVER=$(sed -n 1,1p /opt/karoshi/server_network/emailserver)
fi

#Get ldap password
LDAPPASS=$(sed -n 1,1p /etc/ldap.secret)
source /opt/karoshi/server_network/domain_information/domain_name

#Get maximum password age
MAX_PASS_AGE=$(samba-tool domain passwordsettings show | grep -w "Maximum password age" | tr -cd 0-9)

#Convert maximum password age into seconds as we are using epoch time
(( MAX_PASS_AGE = "$MAX_PASS_AGE" * 24 * 60 * 60 ))

#Get time now
NOW=$(date +%s)

#Check all users for password expiry apart from tech, exam, profileuser and guest accounts
for USERNAME in $(getent passwd | grep /home/users/ | grep -E -v ''"$IGNOREGROUPS"'' | cut -d: -f1)
do
	#Get ldap information for the user
	LDAPDATA=$(ldapsearch -x -w "$LDAPPASS" -b "OU=People,$LDAPBASE" -D "cn=Administrator,cn=Users,$LDAPBASE" cn="$USERNAME" | sed "s/[\]/BACKSLASH/g")

	#Get to see if this account has password expiry enabled
	PASSWORD_EXPIRY=$(echo -e "$LDAPDATA" | grep ^userAccountControl: | cut -d: -f2 | tr -cd 0-9)

	#Dont check password expiry for 66048 66050 66080 66082
	if [ "$PASSWORD_EXPIRY" != 66048 ] && [ "$PASSWORD_EXPIRY" != 66050 ] && [ "$PASSWORD_EXPIRY" != 66080 ] && [ "$PASSWORD_EXPIRY" != 66082 ]
	then		
		#Get the pwdLastSet: information from ldap for the user
		SMBPWDLASTSET=$(echo -e "$LDAPDATA" | grep ^pwdLastSet: | cut -d: -f2 | tr -cd 0-9)
		
		#Convert time from number of 100 nanosecond intervals since 1 January 1601 to epoch time
		SMBPWDLASTSET_EPOCH=$(((SMBPWDLASTSET/10000000)-11644473600))
		#Check to see if the password is due to be changed
		(( TIME_PASS_MUST_CHANGE = "$SMBPWDLASTSET_EPOCH" + "$MAX_PASS_AGE" ))
		
		(( GRACETIME = "$TIME_PASS_MUST_CHANGE" - "$DAYS_BEFORE2 " ))
		if [ "$GRACETIME" -lt "$NOW" ]
		then
			#Convert the password must change time from epoch to human readable
			TIME_PASS_MUST_CHANGE2=$(date -d @"$TIME_PASS_MUST_CHANGE")
			#Get the user's name
			givenName=$(echo -e "$LDAPDATA" | grep ^givenName: | cut -d: -f2 | sed 's/ //g')
			#echo "$USERNAME": password change required by: "$TIME_PASS_MUST_CHANGE2"
			USERNAMELIST="$USERNAMELIST,$USERNAME:$givenName:$TIME_PASS_MUST_CHANGE"
		fi
	fi
done

if [ ! -z "$EMAILSERVER" ] && [ "$SEND_EMAIL_AERTS" = yes ]
then
	#Send an E-Mail to all users with passwords about to expire if we have an E-Mail server setup
	function send_email_warnings {

	#Make sure we have a configured smtp-cli script to use
	if [ ! -f "/opt/karoshi/useful scripts/smtp-cli" ]
	then
		cp -f /opt/karoshi/serversetup/modules/monitoring/mon/alerts/smtp-cli /opt/karoshi/"useful scripts"/
		sed -i "s/CHANGEGTHISSERVERNAME/$(hostname-fqdn)/g" /opt/karoshi/"useful scripts"/smtp-cli
	fi

	#Process the data gathered from the LDAP search carried out above
	for USERDATA in ${USERNAMELIST//,/ }
	do
		USERNAME=$(echo "$USERDATA" | cut -d: -f1)
		givenName=$(echo "$USERDATA" | cut -d: -f2)
		TIME_PASS_MUST_CHANGE=$(echo "$USERDATA" | cut -d: -f3)
		TIME_PASS_MUST_CHANGE2=$(date -d @"$TIME_PASS_MUST_CHANGE")
		#Semd an E-Mail alert using smtp-cli
		if [ "$ADD_WEBLINK" = no ]
		then
			/opt/karoshi/"useful scripts"/smtp-cli --verbose --host="127.0.0.1" --from "$EMAILFROM" --to "$USERNAME@$REALM" --subject "$EMAILSUBJECT" --body-plain "$SALUTATION $givenName

$EMAILMSG1 $TIME_PASS_MUST_CHANGE2.

$EMAILMSG2

$VALEDICTION
"
		else
			/opt/karoshi/"useful scripts"/smtp-cli --verbose --host="127.0.0.1" --from "$EMAILFROM" --to "$USERNAME@$REALM" --subject "$EMAILSUBJECT" --body-plain "$SALUTATION $givenName

$EMAILMSG1 $TIME_PASS_MUST_CHANGE2.

$EMAILMSG2

$WEBLINKMSG

$WEBLINK

$VALEDICTION
"
		fi
	done
	}


	if [[ "$EMAILSERVER" = $(hostname-fqdn) ]]
	then
		send_email_warnings
	else
		ssh -o PasswordAuthentication=no -o ConnectTimeout=3 "$EMAILSERVER" "$(declare -f send_email_warnings);
		#Asign variables as we are on the other side of the ssh and the declared function will not recognise the variables otherwise
		USERNAMELIST='"$USERNAMELIST"'
		REALM='"$REALM"'
		EMAILSUBJECT='"$EMAILSUBJECT"'
		EMAILFROM='"$EMAILFROM"'
		EMAILMSG1='"$EMAILMSG1"'
		EMAILMSG2='"$EMAILMSG2"'
		SALUTATION='"$SALUTATION"'
		VALEDICTION='"$VALEDICTION"'
		ADD_WEBLINK='"$ADD_WEBLINK"'
		WEBLINKMSG='"$WEBLINKMSG"'
		WEBLINK='"$WEBLINK"'
		send_email_warnings"
	fi
fi

exit
