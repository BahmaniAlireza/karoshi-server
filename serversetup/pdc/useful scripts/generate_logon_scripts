#!/bin/bash

REALM=internal
[  -f /opt/karoshi/server_network/domain_information/domain_name ] && source /opt/karoshi/server_network/domain_information/domain_name

TRUSTED_DOMAINS=no
[ -d /opt/karoshi/server_network/domain_information/trusted_domains ] && TRUSTED_DOMAINS=yes

#Check if we have owncloud or nextcloud
CLOUDSTORAGE=no
if [ -f /opt/karoshi/server_network/nextcloudserver ]
then
	CLOUDSTORAGE=yes
	CLOUDSERVERTYPE=nextcloud
	STORAGE='\\OCA\\Files_External\\Lib\\Storage\\SMB'
fi

if [ -f /opt/karoshi/server_network/owncloudserver ]
then
	CLOUDSTORAGE=yes
	CLOUDSERVERTYPE=owncloud
	STORAGE='\\OC\\Files\\Storage\\SMB'
fi

#Remove all auto generated kix entries.
for KIXFILES in /var/lib/samba/netlogon/windows_settings/drives/*
do
	KIXFILE=$(basename "$KIXFILES")
	sed -i '/;Karoshi_auto_generated/d' /var/lib/samba/netlogon/windows_settings/drives/"$KIXFILE"	
done

if [ "$CLOUDSTORAGE" = yes ]
then
	#Delete any existing json files for owncloud or nextcloud and recreate the folder
	[ -d "/home/$CLOUDSERVERTYPE/import_json" ] && rm -f -R "/home/$CLOUDSERVERTYPE/import_json"
	mkdir -p "/home/$CLOUDSERVERTYPE/import_json"
fi

#Create linux client pam mount header.
[ ! -d /var/lib/samba/netlogon/linuxclient ] && mkdir -p /var/lib/samba/netlogon/linuxclient
[ ! -d /var/lib/samba/netlogon/windows_settings/drives/ ] && mkdir /var/lib/samba/netlogon/windows_settings/drives/
cat /opt/karoshi/serversetup/pdc/linuxclient/pam_mount/pam_mount_header_xml > /var/lib/samba/netlogon/linuxclient/pam_mount.conf.xml.krb5

#Create mac client mount-home-areas header
[ ! -d /var/lib/samba/netlogon/mac_client/scripts ] && mkdir -p /var/lib/samba/netlogon/mac_client/scripts
cp -f /opt/karoshi/serversetup/pdc/mac_client/scripts/mount-shares.sh /var/lib/samba/netlogon/mac_client/scripts/

#Copy in mac scripts
cp -f /opt/karoshi/serversetup/pdc/mac_client/scripts/install-script.sh /var/lib/samba/netlogon/mac_client/scripts/
cp -f /opt/karoshi/serversetup/pdc/mac_client/scripts/detect-user.sh.plist /var/lib/samba/netlogon/mac_client/scripts/
cp -f /opt/karoshi/serversetup/pdc/mac_client/scripts/detect-user.sh /var/lib/samba/netlogon/mac_client/scripts/
chmod 0555 /var/lib/samba/netlogon/mac_client/scripts/install-script.sh

#Set domain on install-script
sed -i 's/CHANGETHISDOMAIN/'$REALM'/g' /var/lib/samba/netlogon/mac_client/scripts/detect-user.sh
sed -i 's/CHANGETHISDOMAIN/'$REALM'/g' /var/lib/samba/netlogon/mac_client/scripts/install-script.sh

#Get primary group
#function get_pri_group_number {
#GROUPNUM=$(getent group "$GROUPNAME" | cut -d: -f3)
#}

function add_drive_map_windows {
#Set paths to shares

SMBSERVER2='$lserver'
CLIENTPATH2='\dfs\'"$SHARE"''

if [ "$GROUPNAME" = all ]
then
	#Add in a drive map for all users

	#Add windows drive map
	for KIXFILES in /opt/karoshi/server_network/group_information/*
	do
		KIXFILE=$(basename "$KIXFILES")
		touch /var/lib/samba/netlogon/windows_settings/drives/"$KIXFILE".kix
		if [[ $(grep -F -c "$CLIENTPATH2" /var/lib/samba/netlogon/windows_settings/drives/"$KIXFILE".kix) = 0 ]]
		then
			echo run '"net use '"$DRIVELETTER"' '"$SMBSERVER2"''"$CLIENTPATH2"' /persistent:no" ;Karoshi_auto_generated' >> /var/lib/samba/netlogon/windows_settings/drives/"$KIXFILE".kix
		fi
	done
else
	#Add windows drive map
	touch /var/lib/samba/netlogon/windows_settings/drives/"$GROUPNAME".kix
	if [[ $(grep -F -c "$CLIENTPATH2" /var/lib/samba/netlogon/windows_settings/drives/"$GROUPNAME".kix) = 0 ]]
	then
		echo run '"net use '"$DRIVELETTER"' '"$SMBSERVER2"''"$CLIENTPATH2"' /persistent:no" ;Karoshi_auto_generated' >> /var/lib/samba/netlogon/windows_settings/drives/"$GROUPNAME".kix
	fi
fi
}

function add_drive_map_linux {
if [ "$GROUPNAME" = all ]
then
	if [[ $(grep -c '<volume options="sec=ntlmssp,cruid=%(USERUID),dir_mode=0700" mountpoint="~/network/'"$SHARE"'" path="dfs/'"$SHARE"'" server="'"$REALM"'" uid="1000-5000000" fstype="cifs" />' /var/lib/samba/netlogon/linuxclient/pam_mount.conf.xml.krb5) = 0 ]]
	then
		echo '<volume options="sec=ntlmssp,cruid=%(USERUID),dir_mode=0700" mountpoint="~/network/'"$SHARE"'" path="dfs/'"$SHARE"'" server="'"$REALM"'" uid="1000-5000000" fstype="cifs" />' >> /var/lib/samba/netlogon/linuxclient/pam_mount.conf.xml.krb5
	fi	
else
	if [[ $(grep -c '<volume options="sec=ntlmssp,cruid=%(USERUID),dir_mode=0700" mountpoint="~/network/'"$SHARE"'" path="dfs/'"$SHARE"'" server="'"$REALM"'" pgrp="'"$GROUPNAME"'" fstype="cifs" />' /var/lib/samba/netlogon/linuxclient/pam_mount.conf.xml.krb5) = 0 ]]
	then
		echo '<volume options="sec=ntlmssp,cruid=%(USERUID),dir_mode=0700" mountpoint="~/network/'"$SHARE"'" path="dfs/'"$SHARE"'" server="'"$REALM"'" pgrp="'"$GROUPNAME"'" fstype="cifs" />' >> /var/lib/samba/netlogon/linuxclient/pam_mount.conf.xml.krb5
	fi	
fi
}

function add_drive_map_mac {
#Set paths to shares

CLIENTPATH1=dfs/"$SHARE"
SMBSERVER="$REALM"

if [ "$GROUPNAME" = all ]
then
	#Add in a drive map for all users
	echo '
#'"$SHARE"'
[ ! -d /tmp/$LoggedInUser/'"$SHARE"'/ ] && mkdir -p /tmp/$LoggedInUser/'"$SHARE"'/
mount -t smbfs "//'"$SMBSERVER"'/'"$CLIENTPATH1"'" /tmp/$LoggedInUser/'"$SHARE"'/
' >> /var/lib/samba/netlogon/mac_client/scripts/mount-shares.sh

else
	#get_pri_group_number
	echo '
#'"$SHARE"'
if [ $PrimaryGroup = '"$GROUPNAME"' ]
then
	[ ! -d /tmp/$LoggedInUser/'"$SHARE"'/ ] && mkdir -p /tmp/$LoggedInUser/'"$SHARE"'/
	if [ $(mount | grep -c "/tmp/$LoggedInUser/'"$SHARE"'/") = 0 ]
	then
		mount -t smbfs "//'"$SMBSERVER"'/'"$CLIENTPATH1"'" /tmp/$LoggedInUser/'"$SHARE"'/
	fi
fi' >> /var/lib/samba/netlogon/mac_client/scripts/mount-shares.sh

fi
}

#Add in paths for home share on linux and mac clients
#Not needed on windows clients - handled by logonform.kix

if [ -f /opt/karoshi/server_network/network_information/linux_client_mountpath ]
then
	#Create empty file to mount at top level of the user's home area or enter in a relative path for the mountpoint
	HOMEMOUNTPATH=$(cat "/opt/karoshi/server_network/network_information/linux_client_mountpath")
else
	HOMEMOUNTPATH=/network/home
fi

#Add in linux home area mount - using dfs
echo '<volume options="sec=ntlmssp,cruid=%(USERUID),dir_mode=0700" mountpoint="~'$HOMEMOUNTPATH'" path="dfs/homes/%(USER)" server="'$REALM'" uid="1000-5000000" fstype="cifs" />' >> /var/lib/samba/netlogon/linuxclient/pam_mount.conf.xml.krb5

#Add in mac home area mount - using dfs
echo '#Network home area
mount -t smbfs "//'"$REALM"'/dfs/homes/$LoggedInUser/" /tmp/$LoggedInUser/home/
' >> /var/lib/samba/netlogon/mac_client/scripts/mount-shares.sh

#Auth type for nextcloud external storage
#sessioncredentials - this is the best to use but limits functionality
#logincredentials - stores encrypted passwords in the nextcloud database
#AUTH_TYPE=sessioncredentials
AUTH_TYPE=logincredentials

#Add home path for Nextcloud or Owncloud
if [ "$CLOUDSTORAGE" = yes ]
then
	echo '[
	{
		"mount_point": "\/home",
		"storage": "'$STORAGE'",
		"authentication_type": "password::'"$AUTH_TYPE"'",
		"configuration": {
		    "host": "'$REALM'",
		    "share": "dfs\/homes\/$user",
		    "root": "",
		    "domain": "'$REALM'"
		},
		"options": {
		    "encrypt": true,
		    "previews": true,
		    "filesystem_check_changes": 1,
		    "enable_sharing": false
		},
		"applicable_users": [],
		"applicable_groups": []
	}
]
' > /home/"$CLOUDSERVERTYPE"/import_json/homes.json
fi

function add_drive_cloudstorage {
if [ "$CLOUDSTORAGE" = yes ]
then
	echo '[
	{
		"mount_point": "\/'"$SHARE"'",
		"storage": "'$STORAGE'",
		"authentication_type": "password::'"$AUTH_TYPE"'",
		"configuration": {
		    "host": "'"$REALM"'",
		    "share": "dfs\/'"$SHARE"'",
		    "root": "",
		    "domain": "'$REALM'"
		},
		"options": {
		    "encrypt": true,
		    "previews": true,
		    "filesystem_check_changes": 1,
		    "enable_sharing": false
		},
		"applicable_users": [],' > "/home/$CLOUDSERVERTYPE/import_json/$SHARE-$GROUPNAME.json"


	if [ "$GROUPNAME" = all ]
	then
		echo '		"applicable_groups": []' >> "/home/$CLOUDSERVERTYPE/import_json/$SHARE-$GROUPNAME.json"
	else
		echo '		"applicable_groups": [
		"'"$GROUPNAME"'"
		]' >> "/home/$CLOUDSERVERTYPE/import_json/$SHARE-$GROUPNAME.json"
	fi
	echo '	}
]' >> "/home/$CLOUDSERVERTYPE/import_json/$SHARE-$GROUPNAME.json"
fi
}

#Add in network shares
for SERVER in $(ls -1 /opt/karoshi/server_network/network_shares/)
do
	#Get data for network shares
	for SHARE in $(ls -1 /opt/karoshi/server_network/network_shares/"$SERVER"/)
	do
		DRIVELETTER=""
		source "/opt/karoshi/server_network/network_shares/$SERVER/$SHARE"
		GROUPNAMES=( `echo "$GROUPLIST" | sed 's/,/ /g'` )
		MAP_DRIVES=( `echo "$MAP_DRIVE" | sed 's/,/ /g'` )
		if [ -z "$DRIVELETTER" ]
		then
			DRIVELETTER="*"
		else
			DRIVELETTER="$DRIVELETTER:"
		fi
		GROUPNAMECOUNT=${#GROUPNAMES[*]}
		COUNTER=0
		while [ "$COUNTER" -lt "$GROUPNAMECOUNT" ]
		do
			GROUPNAME=${GROUPNAMES[$COUNTER]}
			DO_MAP=${MAP_DRIVES[$COUNTER]}
			#echo $SHARE $GROUPNAME $DO_MAP
			let COUNTER=$COUNTER+1

			if [ "$DO_MAP" = 1 ]
			then
				#add_drive_map for windows
				add_drive_map_windows
				#Add drive map for linux
				add_drive_map_linux
				#Mac
				add_drive_map_mac
				#Nextcloud or Owncloud
				#Don't add shares for sysvol and netlogon
				if [ "$SHARE" != sysvol ] && [ "$SHARE" != netlogon ]
				then
					add_drive_cloudstorage
				fi
			fi

		done
	done
done


#Add in domain trust shares
if [ "$TRUSTED_DOMAINS" = yes ]
then
	for TRUSTED_DOMAIN in $(ls -1 /opt/karoshi/server_network/domain_information/trusted_domains/)
	do
		if [ -d "/opt/karoshi/server_network/domain_information/trusted_domains/$TRUSTED_DOMAIN/network_shares/" ]
		then
			for TRUST_SERVER in $(ls -1 "/opt/karoshi/server_network/domain_information/trusted_domains/$TRUSTED_DOMAIN/network_shares/")
			do
				for TRUST_SHARE in $(ls -1 "/opt/karoshi/server_network/domain_information/trusted_domains/$TRUSTED_DOMAIN/network_shares/$TRUST_SERVER/")
				do
					source "/opt/karoshi/server_network/domain_information/trusted_domains/$TRUSTED_DOMAIN/network_shares/$TRUST_SERVER/$TRUST_SHARE"
					if [ "$SHAREPATH" = username ]
					then
						LINUXSHAREPATH="%(DOMAIN_USER)"
						WINSHAREPATH='$username'	
					else
						LINUXSHAREPATH="$SHAREPATH"
						WINSHAREPATH="$SHAREPATH"
					fi
					for TRUST_GROUP in $(echo $GROUPLIST | sed 's/,/ /g')
					do
						#Linux drive map
						echo '<volume options="sec=krb5,cruid=%(USERUID),dir_mode=0700" mountpoint="~/network/'"$SHARENAME"'" path="'"$LINUXSHAREPATH"'" server="'"$SERVER"'" sgrp="'"$TRUST_GROUP"'" fstype="cifs" />' >> /var/lib/samba/netlogon/linuxclient/pam_mount.conf.xml.krb5
						#Windows drive maps
						touch /var/lib/samba/netlogon/windows_settings/drives/"$TRUST_GROUP".kix
						[ -z "$DRIVELETTER" ] && DRIVELETTER='*'
						if [[ $(grep -F -c "$WINSHAREPATH" /var/lib/samba/netlogon/windows_settings/drives/"$TRUST_GROUP".kix) = 0 ]]
						then
							echo run '"net use '"$DRIVELETTER"' \\'"$SERVER"'\'"$WINSHAREPATH"' /persistent:no" ;Karoshi_auto_generated' >> /var/lib/samba/netlogon/windows_settings/drives/"$TRUST_GROUP".kix
						fi
					done
				done
			done
		fi
	done
fi

#Complete mount-shares.sh
echo -e '\n#Show mounted shares on desktop\ndefaults write /Users/$LoggedInUser/Library/Preferences/com.apple.finder.plist ShowMountedServersOnDesktop -bool TRUE\nkillall Finder' >> /var/lib/samba/netlogon/mac_client/scripts/mount-shares.sh

#Complete pam_mount.conf.xml.krb5
echo -e '\n</pam_mount>' >> /var/lib/samba/netlogon/linuxclient/pam_mount.conf.xml.krb5

#Import json files to Nextcloud or Owncloud
if [ "$CLOUDSTORAGE" = yes ]
then
	CLOUDSERVER=$(sed -n 1,1p /opt/karoshi/server_network/"$CLOUDSERVERTYPE"server)

	if [[ "$CLOUDSERVER" = $(hostname-fqdn) ]]
	then
		#Get existing external mount ids
		MOUNTIDS=$(sudo -u www-data /usr/bin/php /var/www/html/"$CLOUDSERVERTYPE"/occ files_external:list | cut -d"|" -f2 | tr -cd "0-9\n")
		#Delete any existing external mounts from the cloud server
		for MOUNTID in $(echo -e "$MOUNTIDS")
		do
			sudo -u www-data /usr/bin/php /var/www/html/"$CLOUDSERVERTYPE"/occ files_external:delete "$MOUNTID" -y
		done
		#Import the json files into the cloud server
		for JSONFILE in $(ls -1 /home/"$CLOUDSERVERTYPE"/import_json)
		do
			sudo -u www-data /usr/bin/php /var/www/html/"$CLOUDSERVERTYPE"/occ files_external:import /home/"$CLOUDSERVERTYPE/import_json/$JSONFILE"
		done
	else
		#Copy the json files to the cloud server
		rsync --timeout=30 --verbose --dirs --recursive --xattrs --links --compress --delete --times --perms --executability --acls --owner --group -o "/home/$CLOUDSERVERTYPE/import_json" "$CLOUDSERVER:/home/$CLOUDSERVERTYPE"/ 1>/dev/null

		ssh -o PasswordAuthentication=no -o ConnectTimeout=3 "$CLOUDSERVER" '
		#Get existing external mount ids
		MOUNTIDS=$(sudo -u www-data /usr/bin/php /var/www/html/'"$CLOUDSERVERTYPE"'/occ files_external:list | cut -d"|" -f2 | tr -cd "0-9\n")
		#Delete any existing external mounts from the cloud server
		for MOUNTID in $(echo -e "$MOUNTIDS")
		do
			sudo -u www-data /usr/bin/php /var/www/html/'"$CLOUDSERVERTYPE"'/occ files_external:delete "$MOUNTID" -y
		done
		#Import the json files into the cloud server
		for JSONFILE in $(ls -1 /home/'"$CLOUDSERVERTYPE"'/import_json)
		do
			sudo -u www-data /usr/bin/php /var/www/html/'"$CLOUDSERVERTYPE"'/occ files_external:import /home/'"$CLOUDSERVERTYPE"'/import_json/$JSONFILE
		done
	'
	fi
fi
exit

