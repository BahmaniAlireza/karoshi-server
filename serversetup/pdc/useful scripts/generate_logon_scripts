#!/bin/bash

REALM=internal
[  -f /opt/karoshi/server_network/domain_information/domain_name ] && source /opt/karoshi/server_network/domain_information/domain_name

#Check for dfs support
DFS=no
[ -f /var/lib/samba/netlogon/domain_information/dfs_enabled ] && DFS=yes

#Remove all auto generated kix entries.
for KIXFILES in /var/lib/samba/netlogon/windows_settings/drives/*
do
	KIXFILE=`basename "$KIXFILES"`
	sed -i '/;Karoshi_auto_generated/d' /var/lib/samba/netlogon/windows_settings/drives/"$KIXFILE"	
done

#Create linux client pam mount header.
[ ! -d /var/lib/samba/netlogon/linuxclient ] && mkdir -p /var/lib/samba/netlogon/linuxclient
[ ! -d /var/lib/samba/netlogon/windows_settings/drives/ ] && mkdir /var/lib/samba/netlogon/windows_settings/drives/
cat /opt/karoshi/serversetup/pdc/linuxclient/pam_mount/pam_mount_header_xml > /var/lib/samba/netlogon/linuxclient/pam_mount.conf.xml.krb5

#Create mac client mount-home-areas header
[ ! -d /var/lib/samba/netlogon/mac_client/scripts ] && mkdir -p /var/lib/samba/netlogon/mac_client/scripts
cp -f /opt/karoshi/serversetup/pdc/mac_client/scripts/mount-shares.sh /var/lib/samba/netlogon/mac_client/scripts/

#Copy in mac scripts
cp -f /opt/karoshi/serversetup/pdc/mac_client/scripts/install-script.sh /var/lib/samba/netlogon/mac_client/scripts/
cp -f /opt/karoshi/serversetup/pdc/mac_client/scripts/detect-user.sh.plist /var/lib/samba/netlogon/mac_client/scripts/
cp -f /opt/karoshi/serversetup/pdc/mac_client/scripts/detect-user.sh /var/lib/samba/netlogon/mac_client/scripts/
chmod 0555 /var/lib/samba/netlogon/mac_client/scripts/install-script.sh

#Set domain on install-script
sed -i 's/CHANGETHISDOMAIN/'$REALM'/g' /var/lib/samba/netlogon/mac_client/scripts/detect-user.sh
sed -i 's/CHANGETHISDOMAIN/'$REALM'/g' /var/lib/samba/netlogon/mac_client/scripts/install-script.sh

#Get primary group
function get_pri_group_number {
GROUPNUM=`getent group "$GROUPNAME" | cut -d: -f3`
}

function add_drive_map_windows {
#Set paths to shares
if [ "$DFS" = yes ]
then
	SMBSERVER2='$lserver.$realm'
	CLIENTPATH2='\dfs\'$SHARE''
else
	SMBSERVER2='\\'$SERVER''
	CLIENTPATH2='\'$SHARE''
fi

if [ "$GROUPNAME" = all ]
then
	#Add in a drive map for all users

	#Add windows drive map
	for KIXFILES in /opt/karoshi/server_network/group_information/*
	do
		KIXFILE=`basename "$KIXFILES"`
		touch /var/lib/samba/netlogon/windows_settings/drives/"$KIXFILE".kix
		if [ `grep -F -c "$CLIENTPATH2" /var/lib/samba/netlogon/windows_settings/drives/"$KIXFILE".kix` = 0 ]
		then
			echo run '"net use '$DRIVELETTER' '$SMBSERVER2''$CLIENTPATH2' /persistent:no" ;Karoshi_auto_generated' >> /var/lib/samba/netlogon/windows_settings/drives/"$KIXFILE".kix
		fi
	done
else
	#Add windows drive map
	touch /var/lib/samba/netlogon/windows_settings/drives/"$GROUPNAME".kix
	if [ `grep -F -c "$CLIENTPATH2" /var/lib/samba/netlogon/windows_settings/drives/"$GROUPNAME".kix` = 0 ]
	then
		echo run '"net use '$DRIVELETTER' '$SMBSERVER2''$CLIENTPATH2' /persistent:no" ;Karoshi_auto_generated' >> /var/lib/samba/netlogon/windows_settings/drives/"$GROUPNAME".kix
	fi
fi
}

function add_drive_map_linux_and_mac {
#Set paths to shares
if [ "$DFS" = yes ]
then
	#Not using dfs for linux clients - mount.cifs does not do dfs failover correctly
	#CLIENTPATH1=dfs/"$SHARE"
	#SMBSERVER="$REALM"
	CLIENTPATH1="$SHARE"
	SMBSERVER="$SERVER2"
else
	CLIENTPATH1="$SHARE"
	SMBSERVER="$SERVER2"
fi

if [ "$GROUPNAME" = all ]
then
	#Add in a drive map for all users

	#Linux - Check if line is unique and add linux drive map
	if [ `grep -c '<volume options="sec=krb5,cruid=%(USERUID),dir_mode=0700" mountpoint="~/network/'$SHARE'" path="'$CLIENTPATH1'" server="'$SMBSERVER'" uid="1000-5000000" fstype="cifs" />' /var/lib/samba/netlogon/linuxclient/pam_mount.conf.xml.krb5` = 0 ]
	then 
		echo '<volume options="sec=krb5,cruid=%(USERUID),dir_mode=0700" mountpoint="~/network/'$SHARE'" path="'$CLIENTPATH1'" server="'$SMBSERVER'" uid="1000-5000000" fstype="cifs" />' >> /var/lib/samba/netlogon/linuxclient/pam_mount.conf.xml.krb5
	fi
	#Mac
	echo '
#'$SHARE'
[ ! -d /tmp/$LoggedInUser/'$SHARE'/ ] && mkdir -p /tmp/$LoggedInUser/'$SHARE'/
mount -t smbfs "//'$SMBSERVER'/'$CLIENTPATH1'" /tmp/$LoggedInUser/'$SHARE'/
' >> /var/lib/samba/netlogon/mac_client/scripts/mount-shares.sh

else
	get_pri_group_number
	#Linux - check if line is uniqie and add linux drive map
	if [ `grep -c '<volume options="sec=krb5,cruid=%(USERUID),dir_mode=0700" mountpoint="~/network/'$SHARE'" path="'$CLIENTPATH1'" server="'$SMBSERVER'" gid="'$GROUPNUM'" fstype="cifs" />' /var/lib/samba/netlogon/linuxclient/pam_mount.conf.xml.krb5` = 0 ]
	then
		echo '<volume options="sec=krb5,cruid=%(USERUID),dir_mode=0700" mountpoint="~/network/'$SHARE'" path="'$CLIENTPATH1'" server="'$SMBSERVER'" gid="'$GROUPNUM'" fstype="cifs" />' >> /var/lib/samba/netlogon/linuxclient/pam_mount.conf.xml.krb5
	fi
	
	#Mac
	echo '
#'$SHARE'
if [ $PrimaryGroup = '$GROUPNAME' ]
then
	[ ! -d /tmp/$LoggedInUser/'$SHARE'/ ] && mkdir -p /tmp/$LoggedInUser/'$SHARE'/
	if [ $(mount | grep -c "/tmp/$LoggedInUser/'$SHARE'/") = 0 ]
	then
		mount -t smbfs "//'$SMBSERVER'/'$CLIENTPATH1'" /tmp/$LoggedInUser/'$SHARE'/
	fi
fi' >> /var/lib/samba/netlogon/mac_client/scripts/mount-shares.sh

fi
}

function get_shares {
MAINSERVER=`hostname-fqdn`
SERVERLIST="`echo $MAINSERVER` `ls -1 /opt/karoshi/server_network/network_shares/ | sed "s/$MAINSERVER//g"`"
for SERVERS in /opt/karoshi/server_network/network_shares/*
do
	#Get names of servers with network shares
	SERVER=`basename $SERVERS`
	#Get data for network shares
	if [ `ls -1 /opt/karoshi/server_network/network_shares/$SERVER/ | wc -l` -gt 0 ]
	then
		for SHARES in /opt/karoshi/server_network/network_shares/$SERVER/*
		do
			SHARE=`basename $SHARES`
			DRIVELETTER=""
			source /opt/karoshi/server_network/network_shares/$SERVER/$SHARE
			GROUPNAMES=( `echo $GROUPLIST | sed 's/,/ /g'` )
			MAP_DRIVES=( `echo $MAP_DRIVE | sed 's/,/ /g'` )
			if [ -z "$DRIVELETTER" ]
			then
				DRIVELETTER="*"
			else
				DRIVELETTER="$DRIVELETTER:"
			fi
			GROUPNAMECOUNT=${#GROUPNAMES[*]}
			COUNTER=0
			while [ "$COUNTER" -lt "$GROUPNAMECOUNT" ]
			do
				GROUPNAME=${GROUPNAMES[$COUNTER]}
				DO_MAP=${MAP_DRIVES[$COUNTER]}
				#echo $SHARE $GROUPNAME $DO_MAP
				let COUNTER=$COUNTER+1

				if [ $DO_MAP = 1 ]
				then
					#add_drive_map for windows
					add_drive_map_windows
					#Add drive map for linux due to broken dfs in mount.cfs

					#Get server(s) that the share is on in case it it gluster aware
					if [ -L /var/lib/samba/dfs/$SHARE ]
					then
						for DFSSERVER in $(ls -l /var/lib/samba/dfs/$SHARE | cut -d">" -f2 | cut -d: -f2 | sed 's/,/ /g')
						do
							SERVER2=$(echo $DFSSERVER | cut -d"\\" -f1)
							add_drive_map_linux_and_mac
						done
					fi
				fi

			done
		done
	fi
done
}

get_shares 

#Add in paths for home share on linux and mac clients
#Not needed on windows clients - handled by logonform.kix
if [ "$DFS" = yes ]
then
	#Mot using dfs
	#echo '<volume options="sec=krb5,cruid=%(USERUID),dir_mode=0700" mountpoint="~/network/home" path="dfs/homes/%(USER)" server="'$REALM'" uid="1000-5000000" fstype="cifs" />' >> /var/lib/samba/netlogon/linuxclient/pam_mount.conf.xml.krb5

	#Having to add an entry for each server if the first one connects the second one will fail because it is already mounted.
	for PRI_GROUPS in /opt/karoshi/server_network/group_information/*
	do
		GROUPNAME=`basename $PRI_GROUPS`
		source /opt/karoshi/server_network/group_information/$GROUPNAME
		get_pri_group_number
		for HOMESERVER in `echo $SERVER | sed 's/,/ /g'`
		do
			echo '<volume options="sec=krb5,cruid=%(USERUID),dir_mode=0700" mountpoint="~/network/home" path="%(USER)" server="'$HOMESERVER'" gid="'$GROUPNUM'" fstype="cifs" />' >> /var/lib/samba/netlogon/linuxclient/pam_mount.conf.xml.krb5

		#Mac
		echo '
#Network home area
if [ $PrimaryGroup = '$GROUPNAME' ]
then
	HOMESERVER='$SERVER'
fi
' >> /var/lib/samba/netlogon/mac_client/scripts/mount-shares.sh

		done
	done

else
	for PRI_GROUPS in /opt/karoshi/server_network/group_information/*
	do
		GROUPNAME=`basename $PRI_GROUPS`
		source /opt/karoshi/server_network/group_information/$GROUPNAME
		get_pri_group_number
		echo '<volume options="sec=krb5,cruid=%(USERUID),dir_mode=0700" mountpoint="~/network/home" path="%(USER)" server="'$SERVER'" gid="'$GROUPNUM'" fstype="cifs" />' >> /var/lib/samba/netlogon/linuxclient/pam_mount.conf.xml.krb5

		#Mac
		echo '
#Network home area
if [ $PrimaryGroup = '$GROUPNAME' ]
then
	HOMESERVER='$SERVER'
fi
' >> /var/lib/samba/netlogon/mac_client/scripts/mount-shares.sh

	done
fi

echo 'if [ ! -z "$HOMESERVER" ]
then
	mount -t smbfs "//$HOMESERVER/$LoggedInUser/" /tmp/$LoggedInUser/home/
fi' >> /var/lib/samba/netlogon/mac_client/scripts/mount-shares.sh

#Complete mount-shares.sh
echo -e '\n#Show mounted shares on desktop\ndefaults write /Users/$LoggedInUser/Library/Preferences/com.apple.finder.plist ShowMountedServersOnDesktop -bool TRUE\nkillall Finder' >> /var/lib/samba/netlogon/mac_client/scripts/mount-shares.sh

#Complete pam_mount.conf.xml.krb5
echo -e '\n</pam_mount>' >> /var/lib/samba/netlogon/linuxclient/pam_mount.conf.xml.krb5

#Create mount information for owncloud

if [ -f /opt/karoshi/server_network/owncloudserver ]
then
	OWNCLOUDSERVER=`sed -n 1,1p /opt/karoshi/server_network/owncloudserver`
	[ ! -d /home/owncloud/data ] && mkdir -p /home/owncloud/data

	MAINSERVER=`hostname-fqdn`
	#Groups
	MAPEXTRASHARES=no
	echo '{"group":{' > /home/owncloud/data/mount.json


	#Get number of groups
	GROUPCOUNT=`ls /opt/karoshi/server_network/group_information/ | wc -l`
	COUNTER=1
	COMMA=","
	for PRI_GROUPS in /opt/karoshi/server_network/group_information/*
	do
		PRI_GROUP=`basename $PRI_GROUPS`
		source /opt/karoshi/server_network/group_information/$PRI_GROUP
		SERVER=`echo $SERVER | cut -d, -f1`
		[ "$COUNTER" = "$GROUPCOUNT" ] && COMMA=""
		echo '"'$PRI_GROUP'":{"\/$user\/files\/home":{"class":"\\OC\\Files\\Storage\\SMB_OC","options":{"host":"'$SERVER'","username_as_share":"true","share":"","root":""}}}'$COMMA' ' >> /home/owncloud/data/mount.json
		let COUNTER=$COUNTER+1
	done

	echo '}}' >> /home/owncloud/data/mount.json

	chown www-data:www-data /home/owncloud/data/mount.json
	chmod 0640 /home/owncloud/data/mount.json

	if [ $OWNCLOUDSERVER != `hostname-fqdn` ]
	then
		scp -p -o PasswordAuthentication=no /home/owncloud/data/mount.json $OWNCLOUDSERVER:/home/owncloud/data/
		ssh -o PasswordAuthentication=no -o ConnectTimeout=3 $OWNCLOUDSERVER '
		chown www-data /home/owncloud/data/mount.json
		'
	fi
fi

#Create external storage for owncloud V9
#owncloud v9 mount info now stored in the database and not in mount.json
if [ -f /opt/karoshi/server_network/owncloudserver ]
then
	OWNCLOUDSERVER=`sed -n 1,1p /opt/karoshi/server_network/owncloudserver`
	SERVERLIST=""
	#Delete any existing json files and recreate the folder
	[ -d /home/owncloud/import_json ] && rm -f -R /home/owncloud/import_json
	mkdir -p /home/owncloud/import_json

	#Get a list of all servers and primary groups
	for PRI_GROUP in $(ls -1 /opt/karoshi/server_network/group_information)
	do
		source /opt/karoshi/server_network/group_information/$PRI_GROUP
		SERVERLIST="$SERVERLIST\n$SERVER:$PRI_GROUP"
	done

	function start_json_file {
	echo '[
    {
        "mount_point": "\/home",
        "storage": "\\OC\\Files\\Storage\\SMB",
        "authentication_type": "password::sessioncredentials",
        "configuration": {
            "host": "'$SERVER'",
            "share": "$user",
            "root": "",
            "domain": ""
        },
        "options": {
            "encrypt": true,
            "previews": true,
            "filesystem_check_changes": 1,
            "enable_sharing": false
        },
        "applicable_users": [],
        "applicable_groups": [
		"'$PRI_GROUP'",' > /home/owncloud/import_json/$SERVER.json
	}

	function complete_json_file {
	#Remove comma from after the final group.
	sed -i 's/"'$PRI_GROUP'",/"'$PRI_GROUP'"/g' /home/owncloud/import_json/$SERVER.json
	#Add in closing brackets.
	echo '        ]
    }
]
' >> /home/owncloud/import_json/$LASTSERVER.json
	}

	LASTSERVER=notset
	for SERVERDATA in $(echo -e "$SERVERLIST" | sed 's/^ //g' | sort)
	do
		SERVER=$(echo $SERVERDATA | cut -d: -f1)
		PRI_GROUP=$(echo $SERVERDATA | cut -d: -f2)
		if [ $LASTSERVER != $SERVER ]
		then
			#Complete the last server if a json file exists for it
			if [ -f /home/owncloud/import_json/$LASTSERVER.json ]
			then
				complete_json_file
			fi

		        #New server so start a new json file
			start_json_file
		else
			#Same server so add to the same json file
		        echo  '		"'$PRI_GROUP'",' >> /home/owncloud/import_json/$SERVER.json
		fi
		LASTSERVER="$SERVER"
	done
	#Complete the last json file
	complete_json_file

	if [ $OWNCLOUDSERVER = $(hostname-fqdn) ]
	then
		#Check that owncloud is version 9 or higher
		VERSION=$(sudo -u www-data /usr/bin/php /var/www/html/owncloud/occ -V | tr -cd "0-9\n")
		if [ $VERSION -gt 900 ]
		then
			#Get existing external mount ids
			MOUNTIDS=$(sudo -u www-data /usr/bin/php /var/www/html/owncloud/occ files_external:list | cut -d"|" -f2 | tr -cd "0-9\n")
			#Delete any existing external mounts from owncloud
			for MOUNTID in $(echo -e "$MOUNTIDS")
			do
				sudo -u www-data /usr/bin/php /var/www/html/owncloud/occ files_external:delete "$MOUNTID" -y
			done
			#Import the json files into owncloud
			for JSONFILE in $(ls -1 /home/owncloud/import_json)
			do
				sudo -u www-data /usr/bin/php /var/www/html/owncloud/occ files_external:import /home/owncloud/import_json/$JSONFILE
			done
		fi
	else
		#Copy the json files to the owncloud server
		rsync --timeout=30 --verbose --dirs --recursive --xattrs --links --compress --delete --times --perms --executability --acls --owner --group -o "/home/owncloud/import_json" $OWNCLOUDSERVER:/home/owncloud/ 1>/dev/null

		ssh -o PasswordAuthentication=no -o ConnectTimeout=3 $OWNCLOUDSERVER '
		#Check that owncloud is version 9 or higher
		VERSION=$(sudo -u www-data /usr/bin/php /var/www/html/owncloud/occ -V | tr -cd "0-9\n")
		if [ $VERSION -gt 900 ]
		then
			#Get existing external mount ids
			MOUNTIDS=$(sudo -u www-data /usr/bin/php /var/www/html/owncloud/occ files_external:list | cut -d"|" -f2 | tr -cd "0-9\n")
			#Delete any existing external mounts from owncloud
			for MOUNTID in $(echo -e "$MOUNTIDS")
			do
				sudo -u www-data /usr/bin/php /var/www/html/owncloud/occ files_external:delete "$MOUNTID" -y
			done
			#Import the json files into owncloud
			for JSONFILE in $(ls -1 /home/owncloud/import_json)
			do
				sudo -u www-data /usr/bin/php /var/www/html/owncloud/occ files_external:import /home/owncloud/import_json/$JSONFILE
			done
		fi
		'
	fi
fi
exit

