#!/bin/bash

#This script has been developed from the information at https://help.ubuntu.com/community/LiveCDCustomizationFromScratch

KaroshiBuildVersion=karoshi-server-v12.0.1-amd64
KaroshiBuildVersion=$(echo "$KaroshiBuildVersion" | tr '[:upper:]' '[:lower:]')
BuildPath=/home/karoshi/"$KaroshiBuildVersion"
Architecture=amd64
UbuntuVersion=bionic
DistroVersion=ubuntu-18.04
KaroshiVersion=12.0

clear

#Exit if this is not the root user
if [[ $(id -u) != 0 ]]
then
	echo -e "Karoshi Server Remaster Utility\n\nThis script must be run as root."
	exit
fi

echo -e "Karoshi Server Remaster Utility\n"

which unzip 1>/dev/null
if [ "$?" != 0 ]
then
	echo -e "Installing unzip\n"
	sudo apt-get install unzip
	if [ "$?" != 0 ]
	then
		echo -e "There was a problem installing unzip - exiting now."
		exit
	fi
fi

#Install debootstrap
which debootstrap 1>/dev/null
if [ "$?" != 0 ]
then
	echo -e "Installing debootstrap\n"
	sleep 1
	apt-get install debootstrap
	if [ "$?" != 0 ]
	then
		echo -e "There was a problem installing debootstrap - exiting now."
		exit
	fi
fi

echo -e "Making the chroot environment for $KaroshiBuildVersion based on $UbuntuVersion.\n"
sleep 1


#Create the chroot folder
if [ -d "$BuildPath"/chroot ]
then
	echo -e "$BuildPath/chroot exits\n\n1: Delete this folder and make the chroot environment\n2: Skip this step\n"
	read choice
	case $choice in
		1)
		RUNDEBOOSTRAP=yes
		rm -f -R "$BuildPath"/chroot
		;;
		2)
		RUNDEBOOSTRAP=no;;
	esac

else
	RUNDEBOOSTRAP=yes
	echo -e "Creating $BuildPath/chroot\n"
	sleep 1	
	mkdir -p "$BuildPath"/chroot
fi

#Chroot into the folder

cd "$BuildPath"

[ "$RUNDEBOOSTRAP" = yes ] && debootstrap --arch="$Architecture" "$UbuntuVersion" chroot

echo -e "\nDownload serversetup\n"
sleep 1
if [ -d chroot/opt/karoshi/serversetup ]
then
	echo -e "$BuildPath/chroot/opt/karoshi/serversetup exits\n\n1: Delete this folder and download the latest version\n2: Skip this step\n"
	read choice
	case $choice in
		1)
		getserversetup=yes
		rm -f -R chroot/opt/karoshi/serversetup
		;;
		2)
		getserversetup=no
		;;
	esac
else
	getserversetup=yes
fi

#Download master.zip and extract to chroot

if [ "$getserversetup" = yes ]
then
	[ -f /tmp/master.zip ] && rm -f /tmp/master.zip
	cd /tmp
	echo -e "\nDownloading master.zip from github.\n"
	sleep 1
	wget https://github.com/the-linux-schools-project/karoshi-server/archive/master.zip
	if [ $? != 0 ]
	then
		echo -e "There was a problem downloading master.zip - exiting now."
		exit
	fi

	echo -e "Unziping master.zip to $BuildPath/chroot/opt/karoshi\n"
	sleep 1
	unzip master.zip  -d "$BuildPath"/chroot/opt/karoshi/
	if [ $? != 0 ]
	then
		echo -e "There was a problem unziping master.zip - exiting now."
		exit
	fi

	mv "$BuildPath"/chroot/opt/karoshi/karoshi-server-master/serversetup "$BuildPath"/chroot/opt/karoshi/
	rm -f -R "$BuildPath"/chroot/opt/karoshi/karoshi-server-master

	cd "$BuildPath"
fi


#Mount dev folder

echo -e "\nMounting $BuildPath/chroot\n"
sleep 1	
mount --bind /dev chroot/dev


#Copy in system files for network configuration for the chroot

echo -e "Copying /etc/hosts\n"
cp /etc/hosts chroot/etc/hosts
echo -e "Copying /etc/resolv.conf\n"
cp /etc/resolv.conf chroot/etc/resolv.conf

#Copy in sources.list if only a minimal list is there
if [[ $(wc -l < chroot/etc/apt/sources.list) -lt 2 ]]
then
	cp /etc/apt/sources.list chroot/etc/apt/sources.list
fi

#Backup /sbin/initctl
cp /sbin/initctl /sbin/initctl".$$"

#Run configure chroot
chroot chroot /opt/karoshi/serversetup/distro/"$DistroVersion"/all/buildserver/configure_chroot "$DistroVersion" "$KaroshiVersion"

#Copy out karoshi_build.log
mv chroot/var/log/karoshi_build.log "$BuildPath"/

umount "$BuildPath"/chroot/dev 

echo -e "\nCreate ISO image\n"

#Install software to create the cd image
echo -e "Installing isolinux syslinux squashfs-tools and genisoimage\n"
sleep 1	
apt-get install --yes isolinux syslinux squashfs-tools genisoimage

#Remove existing image directory
if [ -d image ]
then
	echo -e "\nDeleting existing image directory\n"
	sleep 1	
	rm -f -R image
fi

#Create image directory
echo -e "\nCreating image directory\n"
sleep 1	

mkdir -p image/{casper,isolinux,install}

#Copy in the kernel built with the casper scripts
echo -e "\nCopying in the kernel built with casper scripts\n"
sleep 1	
cp chroot/boot/vmlinuz-* image/casper/vmlinuz
cp chroot/boot/initrd.img-* image/casper/initrd.gz

#Copy in isolinux and memtest binaries
echo -e "\nCopying in isolinux and memtest binaries\n"
sleep 1	
cp /usr/lib/ISOLINUX/isolinux.bin image/isolinux/
cp /boot/memtest86+.bin image/install/memtest
cp /usr/lib/syslinux/modules/bios/chain.c32 image/isolinux/
cp /usr/lib/syslinux/modules/bios/gfxboot.c32 image/isolinux/
cp /usr/lib/syslinux/modules/bios/vesamenu.c32 image/isolinux/
cp /usr/lib/syslinux/modules/bios/ldlinux.c32 image/isolinux/
cp /usr/lib/syslinux/modules/bios/libcom32.c32 image/isolinux/
cp /usr/lib/syslinux/modules/bios/libutil.c32 image/isolinux/

#Copy in boot splash
cp -f chroot/opt/karoshi/serversetup/all/backgrounds/bootmenu.png image/isolinux/splash.png

#Create boot instructions
echo -e "\nCreating boot instructions\n"
sleep 1	
echo 'splash.rle

************************************************************************

This is a Ubuntu Remix Live CD.

For the default live system, enter "live".  To run memtest86+, enter "memtest"

************************************************************************' > image/isolinux/isolinux.txt

#Create isolinux.cfg
echo -e "Creating isolinux.cfg\n"
sleep 1	
echo '
path 
default vesamenu.c32
prompt 0
timeout 100
ui gfxboot

menu title Karoshi Server
menu background splash.png
menu color title 1;37;44 #c0ffffff #00000000 std

label install
  menu label Install Karoshi Server
  kernel /casper/vmlinuz
  append  file=/cdrom/preseed/custom.seed boot=casper automatic-ubiquity initrd=/casper/initrd.gz quiet splash --

LABEL Live-CD
  menu label Live CD
  kernel /casper/vmlinuz
  append  file=/cdrom/preseed/ubuntu.seed boot=casper initrd=/casper/initrd.gz quiet splash --

label memtest
  menu label memtest - Run memtest
  kernel /install/memtest
  append -
' > image/isolinux/isolinux.cfg

#Create preseed
[ ! -d image/preseed ] && mkdir -p image/preseed

echo "# Only install the standard system and language packs.
tasksel	tasksel/first	multiselect
d-i	pkgsel/language-pack-patterns	string
# No language support packages.
d-i	pkgsel/install-language-support	boolean false
d-i passwd/user-fullname string karoshi
d-i passwd/username string karoshi
d-i passwd/user-password password karoshi
d-i passwd/user-password-again password karoshi
d-i user-setup/allow-password-weak boolean true
d-i user-setup/encrypt-home boolean false
d-i finish-install/reboot_in_progress note
ubiquity ubiquity/summary note

" > image/preseed/custom.seed

#Create manifest
echo -e "\nCreating manifest\n"

sudo chroot chroot dpkg-query -W --showformat='${Package} ${Version}\n' | sudo tee image/casper/filesystem.manifest
sudo cp -v image/casper/filesystem.manifest image/casper/filesystem.manifest-desktop
REMOVE='ubiquity ubiquity-frontend-gtk ubiquity-frontend-kde casper lupin-casper live-initramfs user-setup discover1 xresprobe os-prober libdebian-installer4'
for i in $REMOVE 
do
        sudo sed -i "/${i}/d" image/casper/filesystem.manifest-desktop
done

#Set permissions on vmlinuz
chmod 0644 image/casper/vmlinuz

echo -e "\nCompressing chroot\n"
sleep 1
#Compress the chroot
mksquashfs chroot image/casper/filesystem.squashfs 
#Write the filesystem size - needed by the installer
echo -e "\nWriting the filesystem size\n"
sleep 1
printf $(sudo du -sx --block-size=1 chroot | cut -f1) > image/casper/filesystem.size

#Create diskdefines
echo '#define DISKNAME  '$KaroshiBuildVersion'
#define TYPE  binary
#define TYPEbinary  1
#define Architecture  amd64
#define Architectureamd64  1
#define DISKNUM  1
#define DISKNUM1  1
#define TOTALNUM  0
#define TOTALNUM0  1
' > image/README.diskdefines

cp -f image/README.diskdefines image/casper/

#Recognition as a Ubuntu remix
KaroshiBuildVersion2=${KaroshiBuildVersion//-/ }

touch image/ubuntu
mkdir image/.disk
cd image/.disk
touch base_installable
echo "full_cd/single" > cd_type
echo "$KaroshiBuildVersion2" > info
echo "http://www.linuxschools.com" > release_notes_url
cd ../..

#Set permissions on vmlinuz
chmod 0644 image/casper/vmlinuz

#Calculate MD5
echo -e "\nCalculating MD5\n"
sleep 1
cd "$BuildPath"/image
sudo find . -type f -print0 | xargs -0 md5sum | grep -v "\./md5sum.txt" > md5sum.txt
echo -e "\nCreating the iso image\n"
sleep 1
#Create iso image for the live CD

[ -f "$BuildPath/$KaroshiBuildVersion.iso" ] && rm -f "$BuildPath/$KaroshiBuildVersion.iso"

sudo mkisofs -r -V "$KaroshiBuildVersion" -cache-inodes -J -l -b isolinux/isolinux.bin -c isolinux/boot.cat -no-emul-boot -boot-load-size 4 -boot-info-table -o ../$KaroshiBuildVersion.iso .
cd ..

echo -e "\nThe iso has been created at: $BuildPath/$KaroshiBuildVersion.iso\n"

exit
