#!/bin/bash
#Copyright (C) 2007 Paul Sharrad

#This file is part of Karoshi Server.
#
#Karoshi Server is free software: you can redistribute it and/or modify
#it under the terms of the GNU Affero General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#Karoshi Server is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU Affero General Public License for more details.
#
#You should have received a copy of the GNU Affero General Public License
#along with Karoshi Server.  If not, see <http://www.gnu.org/licenses/>.

#
#The Karoshi Team can be contacted at: 
#mpsharrad@karoshi.org.uk
#jsharrad@karoshi.org.uk

#
#Website: http://www.karoshi.org.uk
LOG_DATE=`date +%F`
########################
#Check md5checksum
########################
if ! test -f /opt/karoshi/web_controls/checksums/admin_checksums/backup_assign_cgi
then
	echo `date`: backup_assign - No admin MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
source /opt/karoshi/web_controls/checksums/admin_checksums/backup_assign_cgi
MD5SUM=`md5sum /var/www/cgi-bin_karoshi/admin/backup_assign.cgi | cut -d' ' -f1`
[ -z "$MD5SUM" ] && MD5SUM=not_set
if [ $MD5SUM'check' != $backup_assign_cgi'check' ]
then
	echo `date`: backup_assign - Incorrect admin MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi

########################
#Get variables
########################
numArgs=$#
if [ $numArgs != 0 ]
then
echo `date`: backup_assign - incorrect number of arguments >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi

read DATA
DATA=`echo $DATA | tr -cd 'A-Za-z0-9\._:\-'`
if [ -z "$DATA" ]
then
	echo `date`: backup_assign - no data >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
REMOTE_USER=`echo "$DATA" | cut -s -d: -f1`
REMOTE_ADDR=`echo "$DATA" | cut -s -d: -f2`
REMOTE_MD5=`echo "$DATA" | cut -s -d: -f3`
SERVERNAME=`echo "$DATA" | cut -s -d: -f4`
BACKUPSERVERNAME=`echo "$DATA" | cut -s -d: -f5`

########################
#Check data
########################
if [ $REMOTE_MD5'check' != $MD5SUM'check' ]
then
	echo `date`: backup_assign - Not called by backup_assign.cgi >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ -z "$REMOTE_USER" ]
then
	echo `date`: backup_assign - Blank remote user >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ -z "$REMOTE_ADDR" ]
then
	echo `date`: backup_assign - Blank remote tcpip address >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ -z "$SERVERNAME" ]
then
	echo `date`: backup_assign - Blank server by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit
fi
if [ -z "$BACKUPSERVERNAME" ]
then
	echo `date`: backup_assign - Blank backup server by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit
fi

if [ `grep -c ^$REMOTE_USER: /opt/karoshi/web_controls/web_access_admin` != 1 ]
then
	echo `date`: backup_assign - access denied to $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi

if [ "$BACKUPSERVERNAME" = removebackupoption ]
then
	echo `date`: backup_assign - removing backup option "for" $SERVERNAME by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	[ -d /opt/karoshi/server_network/backup_servers/backup_settings/$SERVERNAME ] && rm -f -R /opt/karoshi/server_network/backup_servers/backup_settings/$SERVERNAME
	exit
fi

##########################
#Language
##########################

STYLESHEET=defaultstyle.css
[ -f /opt/karoshi/web_controls/user_prefs/$REMOTE_USER ] && source /opt/karoshi/web_controls/user_prefs/$REMOTE_USER
TEXTDOMAIN=karoshi-server


echo `date`: backup_assign - assigning $SERVERNAME to $BACKUPSERVERNAME by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE


#Enable ssh from the server to the backup server

if [ $SERVERNAME != `hostname-fqdn` ]
then
	ssh -x -o PasswordAuthentication=no $SERVERNAME '
	[ -f /root/.ssh/known_hosts ] && rm -f /root/.ssh/known_hosts
	########################
	#Check to see if keys do not exist
	########################
	if ! test -f $HOME/.ssh/id_ecdsa || ! test -f $HOME/.ssh/id_ecdsa.pub
	then
		#Check that timeout has been set
		TIMEOUTSTATUS=`grep -c "#""   "ConnectTimeout" "0 /etc/ssh/ssh_config`
		if [ $TIMEOUTSTATUS != 0 ]
		then
			sed -i "s/#   ConnectTimeout 0/ConnectTimeout 4/g" /etc/ssh/ssh_config
		fi
		rm -f $HOME/.ssh/id_ecdsa
		ssh-keygen -t ecdsa -b 521 -N "" -f $HOME/.ssh/id_ecdsa > /dev/null
		#ssh-keygen -t dsa -N "" -f $HOME/.ssh/id_dsa > /dev/null
	fi
	cat /root/.ssh/id_ecdsa.pub > /root/.ssh/authorized_keys'$SERVERNAME'
	#cat /root/.ssh/id_dsa.pub >> /root/.ssh/authorized_keys'$SERVERNAME'
	[ ! -d /root/.ssh_servers ] && mkdir /root/.ssh_servers
	chmod 0700 /root/.ssh_servers
	cp -f /root/.ssh/authorized_keys'$SERVERNAME' /root/.ssh_servers/
	chmod 0600 /root/.ssh_servers/authorized_keys'$SERVERNAME'
	'

	#Get server ip
	KAROSHISERVERNAMETCPIP=`net lookup $SERVERNAME`
	scp -o PasswordAuthentication=no -r $SERVERNAME:/root/.ssh_servers/authorized_keys$SERVERNAME /root/.ssh_servers
	scp -o PasswordAuthentication=no -r /root/.ssh_servers/authorized_keys$SERVERNAME $BACKUPSERVERNAME:/root/.ssh
	ssh -x -o PasswordAuthentication=no $BACKUPSERVERNAME '
	sed "/root@'$SERVERNAME'/d" /root/.ssh/authorized_keys2 > /root/.ssh/authorized_keys2.$$
	rm -f /root/.ssh/authorized_keys2
	mv /root/.ssh/authorized_keys2.$$ /root/.ssh/authorized_keys2
	[ -f /root/.ssh/authorized_keys'$SERVERNAME' ] && cat /root/.ssh/authorized_keys'$SERVERNAME' >> /root/.ssh/authorized_keys2
	#Make sure that the server is allowed in shorewall
	if [ `grep -c -w '$KAROSHISERVERNAMETCPIP' /etc/shorewall/rules` = 0 ]
	then
		#Append server ip to the line
		LINENUM=`grep -n "LAST LINE -- ADD YOUR ENTRIES BEFORE THIS ONE -- DO NOT REMOVE" /etc/shorewall/rules | cut -d: -f1`
		sed -i $LINENUM"c"\ACCEPT"	"net:'$KAROSHISERVERNAMETCPIP'"	"fw"	"tcp"	"22"	"-#'$SERVERNAME'_ssh_rule /etc/shorewall/rules
		echo "#"LAST LINE -- ADD YOUR ENTRIES BEFORE THIS ONE -- DO NOT REMOVE >> /etc/shorewall/rules
		source /opt/karoshi/serversetup/variables/distro
		/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/shorewall_stop 1>/dev/null
		/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/shorewall_start 1>/dev/null
	fi

	# Make sure the server is listed in hosts.allow
	HOSTSALLOWDATA=`grep sshd /etc/hosts.allow`
	if [ `echo $HOSTSALLOWDATA"null" | grep -c '$KAROSHISERVERNAMETCPIP'` = 0 ]
	then
		#Delete current sshd line
		sed -i "/sshd:/d" /etc/hosts.allow
		echo $HOSTSALLOWDATA , '$KAROSHISERVERNAMETCPIP' >> /etc/hosts.allow
	fi
	'
fi

#Get install type
INSTALL_TYPE=education
if [ -f /opt/karoshi/server_network/install_type ]
then
	INSTALL_TYPE=`sed -n 1,1p /opt/karoshi/server_network/install_type`
fi

#Write backup config
[ ! -d /opt/karoshi/server_network/backup_servers/backup_settings/$SERVERNAME ] && mkdir -p /opt/karoshi/server_network/backup_servers/backup_settings/$SERVERNAME ]
echo $BACKUPSERVERNAME > /opt/karoshi/server_network/backup_servers/backup_settings/$SERVERNAME/backupserver

#Write default backup paths
if [ ! -f /opt/karoshi/server_network/backup_servers/backup_settings/$SERVERNAME/backup_folders ]
then
	#Check if we have an email server
	if [ -f /opt/karoshi/server_network/emailserver ]
	then
		EMAILSERVER=$(cat /opt/karoshi/server_network/emailserver)
	else
		EMAILSERVER=notset
	fi
	echo /etc,etc,21 > /opt/karoshi/server_network/backup_servers/backup_settings/$SERVERNAME/backup_folders
	echo /opt/karoshi,karoshi,21 >> /opt/karoshi/server_network/backup_servers/backup_settings/$SERVERNAME/backup_folders
	echo /home/applications,applications,21 >> /opt/karoshi/server_network/backup_servers/backup_settings/$SERVERNAME/backup_folders
	echo /home/staffshare,staffshare,21 >> /opt/karoshi/server_network/backup_servers/backup_settings/$SERVERNAME/backup_folders
	echo /home/officeshare,officeshare,21 >> /opt/karoshi/server_network/backup_servers/backup_settings/$SERVERNAME/backup_folders
	echo /home/itadminshare,itadminshare,21 >> /opt/karoshi/server_network/backup_servers/backup_settings/$SERVERNAME/backup_folders

	if [ "$INSTALL_TYPE" = education ]
	then
		echo /home/subjects,subjects,21 >> /opt/karoshi/server_network/backup_servers/backup_settings/$SERVERNAME/backup_folders
		echo /home/users/exams,exams,21 >> /opt/karoshi/server_network/backup_servers/backup_settings/$SERVERNAME/backup_folders
	fi

	echo /var/lib/samba/,samba,21 >> /opt/karoshi/server_network/backup_servers/backup_settings/$SERVERNAME/backup_folders

	if [ "$SERVERNAME" = "$EMAILSERVER" ]
	then
		echo /home/users/email,email,21 >> /opt/karoshi/server_network/backup_servers/backup_settings/$SERVERNAME/backup_folders
	fi
	echo /var/www/html,html,21 >> /opt/karoshi/server_network/backup_servers/backup_settings/$SERVERNAME/backup_folders
	echo /var/www/moodle-data,moodle-data,21 >> /opt/karoshi/server_network/backup_servers/backup_settings/$SERVERNAME/backup_folders
	echo /var/lib/mysql,mysql,21 >> /opt/karoshi/server_network/backup_servers/backup_settings/$SERVERNAME/backup_folders

	#Add in home area paths from primary group information
	for PRIGROUP in $(ls -1 /opt/karoshi/server_network/group_information/)
	do
		source /opt/karoshi/server_network/group_information/"$PRIGROUP"
		if [ "$SERVERNAME" = "$SERVER" ] || [ "$SERVERNAME" = "$EMAILSERVER" ]
		then
			echo "$HOMEPATH,$PRIGROUP,21" >> /opt/karoshi/server_network/backup_servers/backup_settings/$SERVERNAME/backup_folders
		fi
	done
fi
exit


