#!/bin/bash
#Copyright (C) 2016 Paul Sharrad

#This file is part of Karoshi Server.
#
#Karoshi Server is free software: you can redistribute it and/or modify
#it under the terms of the GNU Affero General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#Karoshi Server is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU Affero General Public License for more details.
#
#You should have received a copy of the GNU Affero General Public License
#along with Karoshi Server.  If not, see <http://www.gnu.org/licenses/>.

#
#The Karoshi Team can be contacted at: 
#mpsharrad@karoshi.org.uk
#jsharrad@karoshi.org.uk

#
#Website: http://www.karoshi.org.uk
LOG_DATE=`date +%F`


########################
#Check md5checksum
########################
if ! test -f /opt/karoshi/web_controls/checksums/admin_checksums/backup_configure_offsite_cgi
then
	echo `date`: backup_configure_offsite - No MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
source /opt/karoshi/web_controls/checksums/admin_checksums/backup_configure_offsite_cgi
MD5SUM=`md5sum /var/www/cgi-bin_karoshi/admin/backup_configure_offsite.cgi | cut -d' ' -f1`
[ -z "$MD5SUM" ] && MD5SUM=not_set
if [ $MD5SUM'check' != $backup_configure_offsite_cgi'check' ]
then
	echo `date`: backup_configure_offsite - Incorrect MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
########################
#Get variables
########################
numArgs=$#
if [ $numArgs != 0 ]
then
	echo `date`: backup_configure_offsite - incorrect number of arguments >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
read DATA
DATA=`echo $DATA | tr -cd 'A-Za-z0-9\._:%\n-+-'`
if [ -z "$DATA" ]
then
	echo `date`: backup_configure_offsite - no data >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi

#echo $DATA"<br>"

REMOTE_USER=`echo "$DATA" | cut -s -d: -f1`
REMOTE_ADDR=`echo "$DATA" | cut -s -d: -f2`
REMOTE_MD5=`echo "$DATA" | cut -s -d: -f3`
ACTION=`echo "$DATA" | cut -s -d: -f4`
SERVERNAME=`echo "$DATA" | cut -s -d: -f5`
BACKUPSERVERNAME=`echo "$DATA" | cut -s -d: -f6`
BACKUPUSERNAME=`echo "$DATA" | cut -s -d: -f7`
BACKUPTYPE=`echo "$DATA" | cut -s -d: -f8`
BACKUPPASSWORD=`echo "$DATA" | cut -s -d: -f9`
ENCRYPTIONKEY=`echo "$DATA" | cut -s -d: -f10`
HOURS=`echo "$DATA" | cut -s -d: -f11`
MINUTES=`echo "$DATA" | cut -s -d: -f12`
BACKUPNAME=`echo "$DATA" | cut -s -d: -f13`
BACKUPFOLDER=`echo "$DATA" | cut -s -d: -f14`
DURATION=`echo "$DATA" | cut -s -d: -f15`
STORAGEPATH=`echo "$DATA" | cut -s -d: -f16`
########################
#Check data
########################
if [ $REMOTE_MD5'check' != $MD5SUM'check' ]
then
	echo `date`: backup_configure_offsite - Not called by backup_configure_offsite.cgi >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ -z "$REMOTE_USER" ]
then
	echo `date`: backup_configure_offsite - Blank remote user >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ -z "$REMOTE_ADDR" ]
then
	echo `date`: backup_configure_offsite - Blank remote tcpip address >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ -z "$SERVERNAME" ]
then
	echo `date`: backup_configure_offsite - Blank servername by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ -z "$ACTION" ]
then
	echo `date`: backup_configure_offsite - Blank action by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi

if [ `grep -c ^$REMOTE_USER: /opt/karoshi/web_controls/web_access_admin` != 1 ]
then
	echo `date`: backup_configure_offsite - access denied to $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi

LOG_DATE=`echo $YEAR-$MONTH-$DAY`
############################
#Language
############################

[ -f /opt/karoshi/web_controls/user_prefs/$REMOTE_USER/language_choice ] && source /opt/karoshi/web_controls/user_prefs/$REMOTE_USER/language_choice
TEXTDOMAIN=karoshi-server

ICON1=/images/submenus/file/edit.png
ICON2=/images/submenus/file/delete.png

#Set backup status
if [ "$ACTION" = setbackupstatus ]
then
	if [ -f /opt/karoshi/server_network/backup_servers_offsite/$SERVERNAME/$BACKUPUSERNAME.$BACKUPSERVERNAME/stop_backup ]
	then
		echo `date`": backup_configure_offsite - enabling $SERVERNAME by $REMOTE_USER from $REMOTE_ADDR" >> /opt/karoshi/logs/karoshi_web_management/"$LOG_DATE"
		rm -f /opt/karoshi/server_network/backup_servers_offsite/$SERVERNAME/$BACKUPUSERNAME.$BACKUPSERVERNAME/stop_backup
	else
		echo `date`": backup_configure_offsite - disabling $SERVERNAME by $REMOTE_USER from $REMOTE_ADDR" >> /opt/karoshi/logs/karoshi_web_management/"$LOG_DATE"
		touch /opt/karoshi/server_network/backup_servers_offsite/$SERVERNAME/$BACKUPUSERNAME.$BACKUPSERVERNAME/stop_backup
	
	fi
	ACTION=view
fi

if [ ! -d "/opt/karoshi/server_network/backup_servers_offsite" ]
then
	mkdir -p "/opt/karoshi/server_network/backup_servers_offsite/"
	chmod 0700 "/opt/karoshi/server_network/backup_servers_offsite/"
fi

#Check to see if there is an offsite backup configured for this server
if [ ! -d "/opt/karoshi/server_network/backup_servers_offsite/$SERVERNAME" ]
then
	mkdir -p "/opt/karoshi/server_network/backup_servers_offsite/$SERVERNAME"
	chmod 0700 "/opt/karoshi/server_network/backup_servers_offsite/$SERVERNAME"
	ACTION=add
fi

if [ "$ACTION" = reallyadd ]
then
	STORAGEPATH=$(echo "$STORAGEPATH" | sed 's/%2F/\\\//g')
	echo `date`": backup_configure_offsite - adding $BACKUPNAME by $REMOTE_USER from $REMOTE_ADDR" >> /opt/karoshi/logs/karoshi_web_management/"$LOG_DATE"

	if [ ! -d "/opt/karoshi/server_network/backup_servers_offsite/$SERVERNAME/$BACKUPUSERNAME.$BACKUPSERVERNAME" ]
	then
		mkdir -p "/opt/karoshi/server_network/backup_servers_offsite/$SERVERNAME/$BACKUPUSERNAME.$BACKUPSERVERNAME"
		chmod 0700 "/opt/karoshi/server_network/backup_servers_offsite/$SERVERNAME/$BACKUPUSERNAME.$BACKUPSERVERNAME"
	fi

	#Create config.cfg
	touch "/opt/karoshi/server_network/backup_servers_offsite/$SERVERNAME/$BACKUPUSERNAME.$BACKUPSERVERNAME/connect.cfg"
	chmod 0700 "/opt/karoshi/server_network/backup_servers_offsite/$SERVERNAME/$BACKUPUSERNAME.$BACKUPSERVERNAME/connect.cfg"
	echo "BACKUPUSERNAME=$BACKUPUSERNAME" > "/opt/karoshi/server_network/backup_servers_offsite/$SERVERNAME/$BACKUPUSERNAME.$BACKUPSERVERNAME/connect.cfg"
	echo "BACKUPSERVERNAME=$BACKUPSERVERNAME" >> "/opt/karoshi/server_network/backup_servers_offsite/$SERVERNAME/$BACKUPUSERNAME.$BACKUPSERVERNAME/connect.cfg"
	echo "BACKUPTYPE=$BACKUPTYPE" >> "/opt/karoshi/server_network/backup_servers_offsite/$SERVERNAME/$BACKUPUSERNAME.$BACKUPSERVERNAME/connect.cfg"
	echo "STORAGEPATH=$STORAGEPATH" >> "/opt/karoshi/server_network/backup_servers_offsite/$SERVERNAME/$BACKUPUSERNAME.$BACKUPSERVERNAME/connect.cfg"
	echo "BACKUPPASSWORD=$BACKUPPASSWORD" >> "/opt/karoshi/server_network/backup_servers_offsite/$SERVERNAME/$BACKUPUSERNAME.$BACKUPSERVERNAME/connect.cfg"
	echo "ENCRYPTIONKEY=$ENCRYPTIONKEY" >> "/opt/karoshi/server_network/backup_servers_offsite/$SERVERNAME/$BACKUPUSERNAME.$BACKUPSERVERNAME/connect.cfg"
	echo "HOURS=$HOURS" >> "/opt/karoshi/server_network/backup_servers_offsite/$SERVERNAME/$BACKUPUSERNAME.$BACKUPSERVERNAME/connect.cfg"
	echo "MINUTES=$MINUTES" >> "/opt/karoshi/server_network/backup_servers_offsite/$SERVERNAME/$BACKUPUSERNAME.$BACKUPSERVERNAME/connect.cfg"

	#Create backup.cfg
	if [ ! -f "/opt/karoshi/server_network/backup_servers_offsite/$SERVERNAME/$BACKUPUSERNAME.$BACKUPSERVERNAME/backup.cfg" ]
	then
		#Check if we have an email server
		if [ -f /opt/karoshi/server_network/emailserver ]
		then
			EMAILSERVER=$(cat /opt/karoshi/server_network/emailserver)
		else
			EMAILSERVER=notset
		fi
		echo /etc,21 > "/opt/karoshi/server_network/backup_servers_offsite/$SERVERNAME/$BACKUPUSERNAME.$BACKUPSERVERNAME/backup.cfg"
		if [ $SERVERNAME = $(hostname-fqdn) ]
		then
			echo /opt/karoshi,21 >> "/opt/karoshi/server_network/backup_servers_offsite/$SERVERNAME/$BACKUPUSERNAME.$BACKUPSERVERNAME/backup.cfg"
			echo /home/applications,21 >> "/opt/karoshi/server_network/backup_servers_offsite/$SERVERNAME/$BACKUPUSERNAME.$BACKUPSERVERNAME/backup.cfg"
			echo /home/staffshare,21 >> "/opt/karoshi/server_network/backup_servers_offsite/$SERVERNAME/$BACKUPUSERNAME.$BACKUPSERVERNAME/backup.cfg"
			echo /home/officeshare,21 >> "/opt/karoshi/server_network/backup_servers_offsite/$SERVERNAME/$BACKUPUSERNAME.$BACKUPSERVERNAME/backup.cfg"
			echo /home/itadminshare,21 >> "/opt/karoshi/server_network/backup_servers_offsite/$SERVERNAME/$BACKUPUSERNAME.$BACKUPSERVERNAME/backup.cfg"
		fi

		if [ "$INSTALL_TYPE" = education ] && [ $SERVERNAME = $(hostname-fqdn) ]
		then
			echo /home/subjects,21 >> "/opt/karoshi/server_network/backup_servers_offsite/$SERVERNAME/$BACKUPUSERNAME.$BACKUPSERVERNAME/backup.cfg"
			echo /home/users/exams,21 >> "/opt/karoshi/server_network/backup_servers_offsite/$SERVERNAME/$BACKUPUSERNAME.$BACKUPSERVERNAME/backup.cfg"
		fi

		if [ -f /opt/karoshi/server_network/servers/$SERVERNAME/1dc ]
		then
			echo /var/lib/samba/,21 >> "/opt/karoshi/server_network/backup_servers_offsite/$SERVERNAME/$BACKUPUSERNAME.$BACKUPSERVERNAME/backup.cfg"
		fi

		if [ "$SERVERNAME" = "$EMAILSERVER" ]
		then
			echo /home/users/email,21 >> "/opt/karoshi/server_network/backup_servers_offsite/$SERVERNAME/$BACKUPUSERNAME.$BACKUPSERVERNAME/backup.cfg"
		fi
		echo /var/www/html,21 >> "/opt/karoshi/server_network/backup_servers_offsite/$SERVERNAME/$BACKUPUSERNAME.$BACKUPSERVERNAME/backup.cfg"

		if [ -f /opt/karoshi/server_network/servers/$SERVERNAME/moodle ]
		then
			echo /var/www/moodle-data,21 >> "/opt/karoshi/server_network/backup_servers_offsite/$SERVERNAME/$BACKUPUSERNAME.$BACKUPSERVERNAME/backup.cfg"
		fi
		echo /var/lib/mysql,21 >> "/opt/karoshi/server_network/backup_servers_offsite/$SERVERNAME/$BACKUPUSERNAME.$BACKUPSERVERNAME/backup.cfg"

		#Add in home area paths from primary group information
		for PRIGROUP in $(ls -1 /opt/karoshi/server_network/group_information/)
		do
			source /opt/karoshi/server_network/group_information/"$PRIGROUP"
			if [ "$SERVERNAME" = "$SERVER" ] || [ "$SERVERNAME" = "$EMAILSERVER" ]
			then
				echo "$HOMEPATH,21" >> "/opt/karoshi/server_network/backup_servers_offsite/$SERVERNAME/$BACKUPUSERNAME.$BACKUPSERVERNAME/backup.cfg"
			fi
		done
	fi

	#Copy the configuration files to the server and schedule the offsite backup
	if [ $SERVERNAME != $(hostname-fqdn) ]
	then
		ssh -x -o PasswordAuthentication=no $SERVERNAME '
		if [ ! -d /opt/karoshi/server_network/backup_servers_offsite ]
		then
			mkdir -p /opt/karoshi/server_network/backup_servers_offsite
			chmod 0700 /opt/karoshi/server_network/backup_servers_offsite
		fi
		'
		scp -p -r /opt/karoshi/server_network/backup_servers_offsite/$SERVERNAME root@$SERVERNAME:/opt/karoshi/server_network/backup_servers_offsite 1> /dev/null
	else
		echo schedule offsite backup
	fi

	ACTION=view
fi

if [ $(ls -1  "/opt/karoshi/server_network/backup_servers_offsite/$SERVERNAME" | wc -l) = 0 ]
then
	ACTION=add
fi

if [ "$ACTION" = reallyaddbackupfolder ]
then
	BACKUPFOLDER=$(echo "$BACKUPFOLDER" | sed 's/%2F/\\\//g')
	sed -i '/'$BACKUPFOLDER',/d' /opt/karoshi/server_network/backup_servers_offsite/"$SERVERNAME"/$BACKUPNAME/backup.cfg
	BACKUPFOLDER=$(echo "$BACKUPFOLDER" | sed 's%\\%%g') 
	echo `date`: "backup_configure_offsite -adding $BACKUPFOLDER for $DURATION days to $BACKUPNAME for $SERVERNAME by  $REMOTE_USER from $REMOTE_ADDR" >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	echo "$BACKUPFOLDER,$DURATION" >> /opt/karoshi/server_network/backup_servers_offsite/$SERVERNAME/$BACKUPNAME/backup.cfg

	#Sort the list
	cat "/opt/karoshi/server_network/backup_servers_offsite/$SERVERNAME/$BACKUPNAME/backup.cfg" | sort > "/opt/karoshi/server_network/backup_servers_offsite/$SERVERNAME/$BACKUPNAME/backup.cfg.$$"
	rm -f "/opt/karoshi/server_network/backup_servers_offsite/$SERVERNAME/$BACKUPNAME/backup.cfg"
	mv -f "/opt/karoshi/server_network/backup_servers_offsite/$SERVERNAME/$BACKUPNAME/backup.cfg.$$" "/opt/karoshi/server_network/backup_servers_offsite/$SERVERNAME/$BACKUPNAME/backup.cfg"

	#Copy backup.cfg to the server
	scp -p "/opt/karoshi/server_network/backup_servers_offsite/$SERVERNAME/$BACKUPNAME/backup.cfg" root@$SERVERNAME:/opt/karoshi/server_network/backup_servers_offsite/"$SERVERNAME/$BACKUPNAME"/ 1> /dev/null	
	ACTION=view
fi

if [ "$ACTION" = addbackupfolder ] || [ "$ACTION" = editbackupfolder ]
then
	SECTIONTITLE=$"Add Backup Folder"
	[ "$ACTION" = editbackupfolder ] && SECTIONTITLE=$"Edit Backup Folder"
	if [ ! -z "$BACKUPFOLDER" ]
	then
		BACKUPFOLDER=$(echo $BACKUPFOLDER | sed 's/%2F/\//g')
	fi

	echo '<b>'$SECTIONTITLE'</b><br><br><form action="/cgi-bin/admin/backup_configure_offsite.cgi" name="testform" method="post">
	<input type="hidden" name="____ACTION____" value="reallyaddbackupfolder">
	<input type="hidden" name="____SERVERNAME____" value="'$SERVERNAME'">
	<table class="standard" style="text-align: left;" >
    	<tbody>
	<tr><td style="width: 180px;">'$"Backup Folder"'</td><td>'
	if [ "$ACTION" = addbackupfolder ]
	then
		echo '<input tabindex= "1" value="'$BACKUPFOLDER'" name="____BACKUPFOLDER____" style="width: 200px;" size="20" type="text">'
	else
		echo ''$BACKUPFOLDER'<input type="hidden" name="____BACKUPFOLDER____" value="'$BACKUPFOLDER'">'
	fi
	echo '</td></tr>
	<tr><td>'$"Duration"'</td><td><input tabindex= "2" value="'$DURATION'" name="____DURATION____" style="width: 200px;" size="20" type="text"></td></tr>
	<tr><td>'$"Backup Server"'</td><td>'
	if [ "$ACTION" = addbackupfolder ]
	then
		echo '<select name="____BACKUPNAME____" style="width: 200px;">'
		#Show list of configured backup servers to add to
		for BACKUPSERVER in $(ls -1 /opt/karoshi/server_network/backup_servers_offsite/$SERVERNAME)
		do
			echo '<option>'$BACKUPSERVER'</option>'
		done
		echo '</select>'
	else
		echo ''$BACKUPNAME'<input type="hidden" name="____BACKUPNAME____" value="'$BACKUPNAME'">'
	fi
	echo '</td></tr>
	</tbody></table><br>
	<input value="'$"Submit"'" class="button" type="submit"> <input value="'$"Reset"'" class="button" type="reset"></form>
	'
fi 

if [ "$ACTION" = reallydelete ]
then
	echo `date`: "backup_configure_offsite - deleting $BACKUPNAME on $SERVERNAME by $REMOTE_USER from $REMOTE_ADDR" >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE

	if [ -d "/opt/karoshi/server_network/backup_servers_offsite/"$SERVERNAME"/$BACKUPNAME/" ]
	then
		rm -f -R "/opt/karoshi/server_network/backup_servers_offsite/"$SERVERNAME"/$BACKUPNAME/"

		#Delete the backup folder from the server

		if [ "$SERVERNAME" != $(hostname-fqdn) ]
		then
			ssh -x -o PasswordAuthentication=no $SERVERNAME '
			if [ -d "/opt/karoshi/server_network/backup_servers_offsite/"'$SERVERNAME'"/'$BACKUPNAME'/" ]
			then
				rm -f -R "/opt/karoshi/server_network/backup_servers_offsite/"'$SERVERNAME'"/'$BACKUPNAME'/"
			fi
			'
		fi
	fi
	ACTION=add
fi

if [ "$ACTION" = add ] || [ "$ACTION" = edit ]
then
	#Show options to add an offsite backup

	if [ "$ACTION" = add ]
	then
		ENCRYPTIONKEY=$(echo $RANDOM | sha256sum | base64 | head -c 35 ; echo)
		STORAGEPATH=/home/offsite-backups/
	else
		source "/opt/karoshi/server_network/backup_servers_offsite/$SERVERNAME/$BACKUPNAME/connect.cfg"
	fi

	echo '<b>'$"Add Offsite Backup"'</b><br><br><form action="/cgi-bin/admin/backup_configure_offsite.cgi" name="testform" method="post">
	<input type="hidden" name="____SERVERNAME____" value="'$SERVERNAME'">
	<input type="hidden" name="____ACTION____" value="reallyadd">
	<table class="standard" style="text-align: left;" >
    	<tbody>
	<tr><td style="width: 180px;">'$"Backup Server"'</td><td><input tabindex= "1" value="'$BACKUPSERVERNAME'" name="____BACKUPSERVERNAME____" style="width: 200px;" size="20" type="text"></td><td><a class="info" target="_blank" href="http://www.linuxschools.com/karoshi/documentation/wiki/index.php?title=Configure_Offsite_Backup"><img class="images" alt="" src="/images/help/info.png"><span>'$"Enter in the fully qualified name of the backup server."'</span></a></td></tr>
	<tr><td>'$"Username to connect as"'</td><td><input tabindex= "2" value="'$BACKUPUSERNAME'" name="____BACKUPUSERNAME____" style="width: 200px;" size="20" type="text"></td><td><a class="info" target="_blank" href="http://www.linuxschools.com/karoshi/documentation/wiki/index.php?title=Configure_Offsite_Backup"><img class="images" alt="" src="/images/help/info.png"><span>'$"Enter in the username to use to connect to the backup server."'</span></a></td></tr>
	<tr><td>'$"Storage Path"'</td><td><input tabindex= "3" value="'$STORAGEPATH'" name="____STORAGEPATH____" style="width: 200px;" size="20" type="text"></td><td><a class="info" target="_blank" href="http://www.linuxschools.com/karoshi/documentation/wiki/index.php?title=Configure_Offsite_Backup"><img class="images" alt="" src="/images/help/info.png"><span>'$"Enter in the storage path to where your backups will be stored."'</span></a></td></tr>
	<tr><td>'$"Password"'</td><td><input tabindex= "4" value="'$BACKUPPASSWORD'" name="____BACKUPPASSWORD____" style="width: 200px;" size="20" type="password"></td><td><a class="info" target="_blank" href="http://www.linuxschools.com/karoshi/documentation/wiki/index.php?title=Configure_Offsite_Backup"><img class="images" alt="" src="/images/help/info.png"><span>'$"Enter in the password to use for connecting to the backup server. Leave this blank if you are using an ssh key to connect."'</span></a></td></tr>
	<tr><td>'$"Encryption Key"'</td><td><input tabindex= "5" value="'$ENCRYPTIONKEY'" name="____ENCRYPTIONKEY____" style="width: 200px;" size="20" type="text"></td><td><a class="info" target="_blank" href="http://www.linuxschools.com/karoshi/documentation/wiki/index.php?title=Configure_Offsite_Backup"><img class="images" alt="" src="/images/help/info.png"><span>'$"This is the encryption key that is used for encrypting your backups. You should keep this key safe to ensure that you can restore from the backup."'</span></a></td></tr>
	<tr><td>'$"Backup Type"'</td><td>
	<select name="____BACKUPTYPE____" style="width: 200px;">
	<option value="ftp">FTP</option>
	<option value="rsync">Rsync</option>	
	<option value="sftp">SFTP</option>
	<option value="scp">SSH / SCP</option>
	<option value="AmazonS3">Amazon S3</option>
	<option value="BackblazeB2">Backblaze B2</option>
	<option value="BackblazeB2">Backblaze B2</option>
	<option value="DropBox">DropBox</option>
	<option value="GoogleDrive">Google Drive</option>
	<option value="WebDAV">WebDAV</option>
	</select>
	</td><td><a class="info" target="_blank" href="http://www.linuxschools.com/karoshi/documentation/wiki/index.php?title=Configure_Offsite_Backup"><img class="images" alt="" src="/images/help/info.png"><span>'$"Choose the backup type."'</span></a></td></tr>
	<tr><td>'$"Backup Time"'</td><td>
	<select name="____HOURS____" style="width: 100px;">'
	[ "$ACTION" = edit ] && echo '<option selected>'$HOURS'</option>'
	COUNTER=24
	while [ $COUNTER -ge 0 ]
	do
		HOURS=$COUNTER
		[ $COUNTER -lt 10 ] && HOURS=0$COUNTER
		echo '<option>'$HOURS'</option>'
		let COUNTER=$COUNTER-1
	done
	echo  '</select>
	<select name="____MINUTES____" style="width: 100px;">'
	if [ "$ACTION" = edit ]
	then
		echo '<option selected>'$MINUTES'</option>'
	else
		echo '<option>00</option>'
	fi
	COUNTER=59
	while [ $COUNTER -ge 1 ]
	do
		MINUTES=$COUNTER
		[ $COUNTER -lt 10 ] && MINUTES=0$COUNTER
		echo '<option>'$MINUTES'</option>'
		let COUNTER=$COUNTER-1
	done
	echo '<option>00</option></select></td><td></td></tr>
	</tbody></table><br><input value="'$"Submit"'" class="button" type="submit"> <input value="'$"Reset"'" class="button" type="reset"></form>
	'
	exit
fi

if [ "$ACTION" = deletebackupfolder ]
then
	#Get data for this backup
	BACKUPFOLDER=$(echo "$BACKUPFOLDER" | sed 's/%2F/\//g')
	DURATION=`grep "$BACKUPFOLDER," /opt/karoshi/server_network/backup_servers_offsite/$SERVERNAME/$BACKUPNAME/backup.cfg | cut -d, -f2 | sed 's/REPLACESPACE/ /g'`

	echo '<table class="tablesorter" style="text-align: left;" >
    	<thead><tr><th style="width: 200px;"><b>'$"Backup Folder"'</b></th><th><b>'$"Days Tracked"'</b></th></tr></thead><tbody>
	<tr><td>'$BACKUPFOLDER'</td><td>'$DURATION'</td></tr>
	</tbody></table><br>
	<table class="standard" style="text-align: left;" >
	<tr><td>
	<form action="/cgi-bin/admin/backup_configure_offsite.cgi" name="testform" method="post"><input type="hidden" name="____ACTION____" value="reallydeletebackupfolder">
	<input type="hidden" name="____BACKUPNAME____" value="'$BACKUPNAME'">
	<input type="hidden" name="____BACKUPFOLDER____" value="'$BACKUPFOLDER'">
	<input type="hidden" name="____SERVERNAME____" value="'$SERVERNAME'">
	
	<input value="'$"Delete"'" class="button" type="submit"></form></td><td>
	<form action="/cgi-bin/admin/backup_configure_offsite.cgi" name="testform" method="post"><input type="hidden" name="____ACTION____" value="view"><input type="hidden" name="____SERVERNAME____" value="'$SERVERNAME'"><input value="'$"Cancel"'" class="button" type="submit"></form></td></tr></tbody></table>'
fi

if [ "$ACTION" = reallydeletebackupfolder ]
then
	echo `date`: "backup_configure_offsite - deleting $BACKUPFOLDER by $REMOTE_USER from $REMOTE_ADDR" >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	BACKUPFOLDER=$(echo "$BACKUPFOLDER" | sed 's/%2F/\\\//g')
	
	#Delete the matching line from backup_folders
	sed -i '/'$BACKUPFOLDER',/d' /opt/karoshi/server_network/backup_servers_offsite/"$SERVERNAME"/$BACKUPNAME/backup.cfg
	ACTION=view
	#Copy backup.cfg to the server
	if [ "$SERVERNAME" != $(hostname-fqdn) ]
	then
		scp -p "/opt/karoshi/server_network/backup_servers_offsite/$SERVERNAME/$BACKUPNAME/backup.cfg" root@$SERVERNAME:/opt/karoshi/server_network/backup_servers_offsite/"$SERVERNAME/$BACKUPNAME"/ 1> /dev/null	
	fi
fi

if [ "$ACTION" = delete ]
then
echo '<table class="tablesorter" style="text-align: left;" >
    	<tbody><tr><td style="width: 200px;">'$"Server"'</td><td>'$SERVERNAME'</td></tr>
	<tr><td>'$"Backup Server"'</td><td>'$BACKUPNAME'</td></tr>
	</tbody></table><br>'$"Are you sure that you want to delete this backup configuration?"'<br><br>
	<table class="standard" style="text-align: left;" >
	<tr><td>
	<form action="/cgi-bin/admin/backup_configure_offsite.cgi" name="testform" method="post"><input type="hidden" name="____ACTION____" value="reallydelete">
	<input type="hidden" name="____BACKUPNAME____" value="'$BACKUPNAME'">
	<input type="hidden" name="____SERVERNAME____" value="'$SERVERNAME'">
	<input value="'$"Delete"'" class="button" type="submit"></form></td><td>
	<form action="/cgi-bin/admin/backup_configure_offsite.cgi" name="testform" method="post"><input type="hidden" name="____ACTION____" value="view"><input type="hidden" name="____SERVERNAME____" value="'$SERVERNAME'"><input value="'$"Cancel"'" class="button" type="submit"></form></td></tr></tbody></table>'


fi

if [ "$ACTION" = view ]
then
	for BACKUPNAME in $(ls -1 /opt/karoshi/server_network/backup_servers_offsite/$SERVERNAME/)
	do
		source /opt/karoshi/server_network/backup_servers_offsite/$SERVERNAME/$BACKUPNAME/connect.cfg

		#Get backup status
		BACKUPSTATUS=$"Enabled"
		BACKUPSTATUS2=disable
		STATUSICON=/images/submenus/system/enabled.png
		if [ -f /opt/karoshi/server_network/backup_servers_offsite/$SERVERNAME/$BACKUPNAME/stop_backup ]
		then
			BACKUPSTATUS=$"Disabled"
			BACKUPSTATUS2=enable
			STATUSICON=/images/submenus/system/disabled.png
		fi

		#Show offsite backup details for scheduled servers

		echo '<form action="/cgi-bin/admin/backup_configure_offsite.cgi" name="testform" method="post"><br><table class="standard" style="text-align: left;" >
		<tr><td style="width: 200px; height: 30px;"><b>'$"Backup Server"'</b></td><td style="width: 170px;">
	'$BACKUPSERVERNAME'</td><td><input name="____SERVERNAME____'$SERVERNAME'____ACTION____edit____BACKUPNAME____'$BACKUPNAME'____BACKUPSERVERNAME____'$BACKUPSERVERNAME'____" type="submit" class="button" value="'$"Edit"'"></td><td><input name="____SERVERNAME____'$SERVERNAME'____ACTION____delete____BACKUPNAME____'$BACKUPNAME'____BACKUPSERVERNAME____'$BACKUPSERVERNAME'____" type="submit" class="button" value="'$"Delete"'"></td></tr>
		<tr><td style="height: 30px;"><b>'$"Backup Status"'</b></td>
		<td>
			<button class="info" name="____SetStatus____" value="____SERVERNAME____'$SERVERNAME'____ACTION____setbackupstatus____BACKUPSTATUS____'$BACKUPSTATUS2'____BACKUPUSERNAME____'$BACKUPUSERNAME'____BACKUPSERVERNAME____'$BACKUPSERVERNAME'____">
			<img src="'$STATUSICON'" alt="'$BACKUPSTATUS'">
			<span>'$BACKUPSTATUS'</span>
			</button>
		</td>
		<td><input name="____SERVERNAME____'$SERVERNAME'____ACTION____setbackupstatus____BACKUPSTATUS____'$BACKUPSTATUS2'____BACKUPUSERNAME____'$BACKUPUSERNAME'____BACKUPSERVERNAME____'$BACKUPSERVERNAME'____" type="submit" class="button" value="'$BACKUPSTATUS'"></td><td><input name="____ACTION____addbackupfolder____SERVERNAME____'$SERVERNAME'____" type="submit" class="button" value="'$"Add Folder"'"></td></tr>
		<tr><td style="height: 30px;"><b>'$"Backup Type"'</b></td><td>
	'$BACKUPTYPE'</td><td></td><td></td></tr>
		<tr><td style="height: 30px;"><b>'$"Storage Path"'</b></td><td>
	'$STORAGEPATH'</td><td></td><td></td></tr>
		<tr><td style="height: 30px;"><b>'$"Backup Time"'</b></td><td>'$HOURS':'$MINUTES'</td><td></td><td></td></tr>

		</tbody></table></form><br>'


		#Show all folders that are set to be backed up.
		echo '<form action="/cgi-bin/admin/backup_configure_offsite.cgi" name="testform" method="post"><table id="myTable" class="tablesorter" style="text-align: left;" >
	    	<thead><tr><th style="width: 300px;"><b>'$"Backup Folder"'</b></th><th style="width: 80px;"><b>'$"Days"'</b></th><th style="width: 80px;"><b>'$"Edit"'</b></th><th style="width: 80px;"><b>'$"Delete"'</b></th></tr></thead><tbody>'
		for BACKUPDATA in `cat /opt/karoshi/server_network/backup_servers_offsite/$SERVERNAME/$BACKUPNAME/backup.cfg | sed 's/ /REPLACESPACE/g'`
		do
			BACKUPFOLDER=`echo "$BACKUPDATA" | cut -d, -f1 | sed 's/REPLACESPACE/ /g'`
			DURATION=`echo "$BACKUPDATA" | cut -d, -f2 | sed 's/REPLACESPACE/ /g'`
			echo '<tr><td>'$BACKUPFOLDER'</td><td>'$DURATION'</td>
			<td>
				<button class="info" name="____DoEdit____" value="____ACTION____editbackupfolder____SERVERNAME____'$SERVERNAME'____BACKUPNAME____'$BACKUPNAME'____BACKUPFOLDER____'$BACKUPFOLDER'____DURATION____'$DURATION'____">
				<img src="'$ICON1'" alt="'$"Edit"'">
				<span>'$"Edit"'<br>'$BACKUPNAME'</span>
				</button>
			</td>
			<td>
				<button class="info" name="____DoDelete____" value="____ACTION____deletebackupfolder____SERVERNAME____'$SERVERNAME'____BACKUPFOLDER____'$BACKUPFOLDER'____BACKUPNAME____'$BACKUPNAME'____">
				<img src="'$ICON2'" alt="'$"Delete"'">
				<span>'$"Delete"'<br>'$BACKUPNAME'</span>
				</button>
			</td></tr>'
		done
		echo '</tbody></table></form>'
	done
fi

exit

