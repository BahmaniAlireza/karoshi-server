#!/bin/bash
#Copyright (C) 2007 Paul Sharrad

#This file is part of Karoshi Server.
#
#Karoshi Server is free software: you can redistribute it and/or modify
#it under the terms of the GNU Affero General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#Karoshi Server is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU Affero General Public License for more details.
#
#You should have received a copy of the GNU Affero General Public License
#along with Karoshi Server.  If not, see <http://www.gnu.org/licenses/>.

#
#The Karoshi Team can be contacted at: 
#mpsharrad@karoshi.org.uk
#jharris@karoshi.org.uk
#aball@karoshi.org.uk
#
#Website: http://www.karoshi.org.uk
LOG_DATE=`date +%F`
########################
#Check md5checksum
########################
if ! test -f /opt/karoshi/web_controls/checksums/admin_checksums/change_management_passwords_cgi
then
echo `date`: change_management_passwords - No MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
source /opt/karoshi/web_controls/checksums/admin_checksums/change_management_passwords_cgi
MD5SUM=`md5sum /var/www/cgi-bin_karoshi/admin/change_management_passwords.cgi | cut -d' ' -f1`
[ $MD5SUM'null' = null ] && MD5SUM=not_set
if [ $MD5SUM'check' != $change_management_passwords_cgi'check' ]
then
echo `date`: change_management_passwords - Incorrect MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
########################
#Get variables
########################
numArgs=$#
if [ $numArgs != 0 ]
then
echo `date`: change_management_passwords - incorrect number of arguments >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
read DATA
DATA=`echo $DATA | tr -cd 'A-Za-z0-9\._:%\n-+-' | sed 's/REPLACEUNDERSCORE/_/g'`
if [ $DATA'null' = null ]
then
echo `date`: change_password - no data >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
REMOTE_USER=`echo "$DATA" | cut -s -d: -f1`
REMOTE_ADDR=`echo "$DATA" | cut -s -d: -f2`
REMOTE_MD5=`echo "$DATA" | cut -s -d: -f3`
SERVERNAME=`echo "$DATA" | cut -s -d: -f4`
USERACCOUNT=`echo "$DATA" | cut -s -d: -f5`
NEWUSERPASSWORD=`echo "$DATA" | cut -s -d: -f6`
SERVERTYPE=`echo "$DATA" | cut -s -d: -f7`
SERVERMASTER=`echo "$DATA" | cut -s -d: -f8`

########################
#Check data
########################
if [ $REMOTE_MD5'check' != $MD5SUM'check' ]
then
echo `date`: change_management_passwords - Not called by change_management_passwords.cgi >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
if [ $REMOTE_USER'null' = null ]
then
echo `date`: change_management_passwords - Blank remote user >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
if [ $REMOTE_ADDR'null' = null ]
then
echo `date`: change_management_passwords - Blank remote tcpip address >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
if [ $SERVERNAME'null' = null ]
then
echo `date`: change_management_passwords - Blank SERVERNAME by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
if [ $SERVERTYPE'null' = null ]
then
echo `date`: change_management_passwords - Blank servertype by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi

if [ $SERVERTYPE = federatedslave ]
then
if [ $SERVERMASTER'null' = null ]
then
echo `date`: change_management_passwords - Blank servermaster by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
fi

if [ $USERACCOUNT'null' = null ]
then
echo `date`: change_management_passwords - Blank useraccount by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit
fi
if [ $NEWUSERPASSWORD'null' = null ]
then
echo `date`: change_management_passwords - Blank password by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
if [ `grep -c ^$REMOTE_USER: /opt/karoshi/web_controls/web_access_admin` != 1 ]
then
echo `date`: change_management_passwords - access denied to $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi

############################
#Language
############################
LANGCHOICE=englishuk
[ -f /opt/karoshi/web_controls/user_prefs/$REMOTE_USER ] && source /opt/karoshi/web_controls/user_prefs/$REMOTE_USER
[ -f /opt/karoshi/web_controls/language/$LANGCHOICE/system/change_management_passwords ] || LANGCHOICE=englishuk
source /opt/karoshi/web_controls/language/$LANGCHOICE/system/change_management_passwords
[ -f /opt/karoshi/web_controls/language/$LANGCHOICE/all ] || LANGCHOICE=englishuk
source /opt/karoshi/web_controls/language/$LANGCHOICE/all

#Get current shadowmax
[ -f /opt/karoshi/server_network/ldap_settings/shadowmax ] && SHADOWMAX=`sed -n 1,1p /opt/karoshi/server_network/ldap_settings/shadowmax | tr -cd '0-9'`
[ $SHADOWMAX'null' = null ] && SHADOWMAX=3650

########################
#Change the password
########################
echo `date`: change_management_passwords - Changing password "for" $USERACCOUNT on $SERVERNAME by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE

CHANGE_PASSWORD_STATUS=101

########################
#Convert special characters back for current password
########################

NEWUSERPASSWORD=`echo $NEWUSERPASSWORD | sed 's/+/ /g; s/%21/!/g; s/%3F/?/g; s/%2C/,/g; s/%3A/:/g; s/%7E/~/g; s/%40/@/g; s/%23/#/g; s/%24/$/g; s/%26/\&/g; s/%2B/+/g; s/%3D/=/g; s/%28/(/g; s/%29/)/g; s/%5E/^/g; s/%7B/{/g; s/%7D/}/g; s/%3C/</g; s/%3E/>/g; s/%5B/[/g; s/%5D/]/g; s/%7C/|/g; s/%22/"/g; s/%1123/*/g' | sed "s/%27/'/g" | sed 's/%3B/;/g' | sed 's/%60/\`/g' | sed 's/%5C/\\\/g' | sed 's/%2F/\//g' | sed 's/%25/%/g'`


########################
#Change the root or karoshi user account password
########################
function changeaccountpasswd {
#Change password on this server
if [ $SERVERNAME = $HOSTNAME ]
then
echo Server: $HOSTNAME - $USERACCOUNT: $CHANGEPASSMSG"<br><br>"
echo $USERACCOUNT:"$NEWUSERPASSWORD" | chpasswd
CHANGE_PASSWORD_STATUS=`echo $?`
fi

#Change password on other servers
if [ $SERVERNAME != $HOSTNAME ]
then
#Check if using ldap
LDAPSTATUS=no
[ -f /opt/karoshi/server_network/servers/$SERVERNAME/ldapserver ] && LDAPSTATUS=yes

if [ $SERVERTYPE = network ] || [ $SERVERTYPE = federated ]
then
ssh -x -o PasswordAuthentication=no -o ConnectTimeout=3 root@$SERVERNAME '
echo Server: $HOSTNAME - '$USERACCOUNT': '$CHANGEPASSMSG'"<br><br>"
echo '$USERACCOUNT':"'$NEWUSERPASSWORD'" | chpasswd
CHANGE_PASSWORD_STATUS=`echo $?`
exit $CHANGE_PASSWORD_STATUS
'
CHANGE_PASSWORD_STATUS=`echo $?`
fi
fi


if [ $SERVERTYPE = federatedslave ]
then
ssh -x -o PasswordAuthentication=no -o ConnectTimeout=3  $SERVERMASTER '
ssh -x -o PasswordAuthentication=no -o ConnectTimeout=3 '$SERVERNAME' '\''
echo Server: '$USERACCOUNT': '$CHANGEPASSMSG'"<br><br>"
echo '$USERACCOUNT':"'$NEWUSERPASSWORD'" | chpasswd
CHANGE_PASSWORD_STATUS=`echo $?`
exit $CHANGE_PASSWORD_STATUS
'\''
CHANGE_PASSWORD_STATUS=`echo $?`
exit $CHANGE_PASSWORD_STATUS
'
CHANGE_PASSWORD_STATUS=`echo $?`
fi
}

if [ $USERNAME = Administrator ]
then
#Change Administrator password on this server
samba-tool user setpassword Administrator --newpassword=$NEWUSERPASSWORD 1>/dev/null 2>>/opt/karoshi/logs/karoshi_web_management/$LOG_DATE
echo $NEWUSERPASSWORD > /etc/ldap.secret
fi

if [ $USERACCOUNT = root ] || [ $USERACCOUNT = karoshi ] 
then
if [ $SERVERNAME != allservers ]
then
SERVERNAME=$SERVERNAME 
changeaccountpasswd
else
for SERVERS in /opt/karoshi/server_network/servers/*
do
SERVERNAME=`basename $SERVERS`
SERVERTYPE=network
changeaccountpasswd
done
if [ -d /opt/karoshi/server_network/federated_ldap_servers ]
then
if [ `ls -1 /opt/karoshi/server_network/federated_ldap_servers/ | wc -l` -gt 0 ]
then
for FEDERATED_SERVERS in /opt/karoshi/server_network/federated_ldap_servers/*
do
FEDERATED_SERVER=`basename $FEDERATED_SERVERS`
SERVERTYPE=federated
changeaccountpasswd
done
fi
fi

fi
fi

if [ $USERACCOUNT = mysql ]
then
#Create a new key
gen_rand_pass
if [ $SERVERNAME = $HOSTNAME ]
then

#Get current mysql password
CURRENTMYSQLPASS=`cat /opt/karoshi/server_network/mysql/.key | gpg --no-tty --passphrase-fd 0 -o - /opt/karoshi/server_network/mysql/mysql_password.gpg 2>/dev/null`
#Change mysql password to new password password
mysqladmin -u root -p$CURRENTMYSQLPASS password ''$NEWUSERPASSWORD''
#Encrypt paswsword for later use
rm -f /opt/karoshi/server_network/mysql/mysql_password
rm -f /opt/karoshi/server_network/mysql/.key
echo $RANDPASS > /opt/karoshi/server_network/mysql/.key
touch /opt/karoshi/server_network/mysql/mysql_password
chmod 0600 /opt/karoshi/server_network/mysql/mysql_password
echo $NEWUSERPASSWORD > /opt/karoshi/server_network/mysql/mysql_password
sed -n 1,1p /opt/karoshi/server_network/mysql/.key | gpg --no-tty --passphrase-fd 0 -c /opt/karoshi/server_network/mysql/mysql_password
rm -f /opt/karoshi/server_network/mysql/mysql_password
chmod 0600 /opt/karoshi/server_network/mysql/mysql_password.gpg
else
if [ $SERVERTYPE = network ] || [ $SERVERTYPE = federated ]
then
ssh -x -o PasswordAuthentication=no -o ConnectTimeout=3 root@$SERVERNAME '
#Get current mysql password
CURRENTMYSQLPASS=`cat /opt/karoshi/server_network/mysql/.key | gpg --no-tty --passphrase-fd 0 -o - /opt/karoshi/server_network/mysql/mysql_password.gpg 2>/dev/null`
#Change mysql password to new password password
mysqladmin -u root -p$CURRENTMYSQLPASS password "'$NEWUSERPASSWORD'"
#Encrypt paswsword for later use
rm -f /opt/karoshi/server_network/mysql/mysql_password
rm -f /opt/karoshi/server_network/mysql/.key
echo '$RANDPASS' > /opt/karoshi/server_network/mysql/.key
touch /opt/karoshi/server_network/mysql/mysql_password
chmod 0600 /opt/karoshi/server_network/mysql/mysql_password
echo '$NEWUSERPASSWORD' > /opt/karoshi/server_network/mysql/mysql_password
sed -n 1,1p /opt/karoshi/server_network/mysql/.key | gpg --no-tty --passphrase-fd 0 -c /opt/karoshi/server_network/mysql/mysql_password
rm -f /opt/karoshi/server_network/mysql/mysql_password
chmod 0600 /opt/karoshi/server_network/mysql/mysql_password.gpg
'
CHANGE_PASSWORD_STATUS=`echo $?`
fi
fi
fi

exit $CHANGE_PASSWORD_STATUS
