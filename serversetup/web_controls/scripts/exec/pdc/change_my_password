#!/bin/bash
#Copyright (C) 2007  Paul Sharrad

#This file is part of Karoshi Server.
#
#Karoshi Server is free software: you can redistribute it and/or modify
#it under the terms of the GNU Affero General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#Karoshi Server is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU Affero General Public License for more details.
#
#You should have received a copy of the GNU Affero General Public License
#along with Karoshi Server.  If not, see <http://www.gnu.org/licenses/>.

#
#The Karoshi Team can be contacted at: 
#mpsharrad@karoshi.org.uk
#jsharrad@karoshi.org.uk

#
#Website: http://www.karoshi.org.uk
LOG_DATE=`date +%F`
[ -z "$LOG_DATE" ] && exit
########################
#Check md5checksum
########################
if ! test -f /opt/karoshi/web_controls/checksums/all_checksums/change_my_password_cgi
then
	echo `date`: change_my_password - No MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
source /opt/karoshi/web_controls/checksums/all_checksums/change_my_password_cgi
MD5SUM=`md5sum /var/www/cgi-bin_karoshi/all/change_my_password.cgi | cut -d' ' -f1`
[ -z "$MD5SUM" ] && MD5SUM=not_set
if [ $MD5SUM'check' != $change_my_password_cgi'check' ]
then
	echo `date`: change_my_password - Incorrect MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
########################
#Get variables
########################
numArgs=$#
if [ $numArgs != 0 ]
then
	echo `date`: change_my_password - incorrect number of arguments >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
read DATA
DATA=`echo $DATA | tr -cd 'A-Za-z0-9\._:%\n-+-' | sed 's/REPLACEUNDERSCORE/_/g'`
if [ -z "$DATA" ]
then
	echo `date`: change_my_password - no data >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
REMOTE_ADDR=`echo "$DATA" | cut -s -d: -f1`
REMOTE_MD5=`echo "$DATA" | cut -s -d: -f2`
USERNAME=`echo "$DATA" | cut -s -d: -f3`
CURRENT_PASSWORD=`echo "$DATA" | cut -s -d: -f4`
NEW_PASSWORD=`echo "$DATA" | cut -s -d: -f5`
########################
#Check data
########################
if [ $REMOTE_MD5'check' != $MD5SUM'check' ]
then
	echo `date`: change_my_password - Not called by change_my_password.cgi >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ -z "$REMOTE_ADDR" ]
then
	echo `date`: change_my_password - Blank remote tcpip address >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ -z "$USERNAME" ]
then
	echo `date`: change_my_password - Blank username from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit
fi
if [ -z "$CURRENT_PASSWORD" ] || [ -z "$NEW_PASSWORD" ]
then
	echo `date`: change_my_password - Blank password from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
########################
#Convert special characters back for current password
########################

CURRENT_PASSWORD=`echo "$CURRENT_PASSWORD" | sed 's/+/ /g; s/%21/!/g; s/%3F/?/g; s/%2C/,/g; s/%3A/:/g; s/%7E/~/g; s/%40/@/g; s/%23/#/g; s/%24/$/g; s/%26/\&/g; s/%2B/+/g; s/%3D/=/g; s/%28/(/g; s/%29/)/g; s/%5E/^/g; s/%7B/{/g; s/%7D/}/g; s/%3C/</g; s/%3E/>/g; s/%5B/[/g; s/%5D/]/g; s/%7C/|/g; s/%22/"/g; s/%1123/*/g' | sed "s/%27/'/g" | sed 's/%3B/;/g' | sed 's/%60/\`/g' | sed 's/%5C/\\\/g' | sed 's/%2F/\//g' | sed 's/%25/%/g'`


#Check password is correct for the user

smbclient //$HOSTNAME/applications -U "$USERNAME"%"$CURRENT_PASSWORD" -c 'help' 1>/dev/null 2>/dev/null
PASS_STATUS=$?

if [ "$PASS_STATUS" != 0 ]
then
	echo `date`: change_my_password - Incorrect password from $REMOTE_ADDR 'for' username $USERNAME >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 102
fi


########################
#Convert special characters back for new password
########################

NEW_PASSWORD=`echo "$NEW_PASSWORD" | sed 's/+/ /g; s/%21/!/g; s/%3F/?/g; s/%2C/,/g; s/%3A/:/g; s/%7E/~/g; s/%40/@/g; s/%23/#/g; s/%24/$/g; s/%26/\&/g; s/%2B/+/g; s/%3D/=/g; s/%28/(/g; s/%29/)/g; s/%5E/^/g; s/%7B/{/g; s/%7D/}/g; s/%3C/</g; s/%3E/>/g; s/%5B/[/g; s/%5D/]/g; s/%7C/|/g; s/%22/"/g; s/%1123/*/g' | sed "s/%27/'/g" | sed 's/%3B/;/g' | sed 's/%60/\`/g' | sed 's/%5C/\\\/g' | sed 's/%2F/\//g' | sed 's/%25/%/g'`

#Get current shadowmax
[ -f /opt/karoshi/server_network/ldap_settings/shadowmax ] && SHADOWMAX=`sed -n 1,1p /opt/karoshi/server_network/ldap_settings/shadowmax | tr -cd '0-9'`
[ -z "$SHADOWMAX" ] && SHADOWMAX=3650

########################
#Change the password
########################
echo `date`: change_my_password - Changing password 'for' $USERNAME from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
samba-tool user setpassword $USERNAME --newpassword="$NEW_PASSWORD" 1>/dev/null 2>>/opt/karoshi/logs/karoshi_web_management/$LOG_DATE

#Allow new user to join clients to the domain if they are a member of the itadmin or tech groups
PRIMARYGROUP=`id -g -n $USERNAME`
if [ "$PRIMARYGROUP" = itadmin ] || [ "$PRIMARYGROUP" = tech ]
then
	echo `date`: change_my_password - allowing "$USERNAME" to "join" clients to the domain by "$REMOTE_USER" from "$REMOTE_ADDR" >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	#Get domain name
	SAMBADOMAIN=`cat /etc/samba/smb.conf | grep workgroup | sed -n 1,1p | sed 's/ //g' | cut -d'=' -f2`
	net rpc rights grant -U $USERNAME%"$NEW_PASSWORD" "$SAMBADOMAIN\Domain Admins" SeMachineAccountPrivilege \
SePrintOperatorPrivilege SeAddUsersPrivilege SeDiskOperatorPrivilege SeRemoteShutdownPrivilege 1>/dev/null
fi

########################
#Change the password on federated ldap servers
########################
if [ -d /opt/karoshi/server_network/federated_ldap_servers ]
then
	if [ `ls -1 /opt/karoshi/server_network/federated_ldap_servers/ | wc -l` -gt 0 ]
	then
		for FEDERATED_LDAP_SERVER in /opt/karoshi/server_network/federated_ldap_servers/*
		do
			FEDERATED_LDAP_SERVER=`basename "$FEDERATED_LDAP_SERVER"`
			ssh -x -o PasswordAuthentication=no "$FEDERATED_LDAP_SERVER" '

			echo `date`: change_my_password \(federated mode\) - Changing password for '$USERNAME' by '$REMOTE_USER' from '$REMOTE_ADDR' >> /opt/karoshi/logs/karoshi_web_management/'$LOG_DATE'

			samba-tool user setpassword '$USERNAME' --newpassword='$PASSWORD' 1>/dev/null

			if [ $PRIMARYGROUP = itadmin ]
				then
				echo `date`: change_my_password \(federated mode\) - allowing '$USERNAME' to "join" clients to the domain by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/'$LOG_DATE'
				#Get domain name
				SAMBADOMAIN=`cat /etc/samba/smb.conf | grep workgroup | sed -n 1,1p | sed "s/ //g" | cut -d"=" -f2`
				net rpc rights grant -U '$USERNAME'%'$NEW_PASSWORD' "$SAMBADOMAIN\Domain Admins" SeMachineAccountPrivilege \
				SePrintOperatorPrivilege SeAddUsersPrivilege SeDiskOperatorPrivilege SeRemoteShutdownPrivilege 1>/dev/null
			fi

				#Change password on any federated slave ldap servers.
			if [ -d /opt/karoshi/server_network/slave_ldap_servers/ ]
			then
				if [ `ls -1 /opt/karoshi/server_network/slave_ldap_servers/ | wc -l` -gt 0 ]
				then
					for SLAVELDAPSERVERS in /opt/karoshi/server_network/slave_ldap_servers/*
					do
						SLAVELDAPSERVER=`basename $SLAVELDAPSERVERS`

						echo `date`: change_my_password \(federated mode\) - Changing password on $SLAVELDAPSERVER for '$USERNAME' by '$REMOTE_USER' from '$REMOTE_ADDR' >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE

						ssh -x -o PasswordAuthentication=no $SLAVELDAPSERVER "
						samba-tool user setpassword '$USERNAME' --newpassword="'$PASSWORD'" 1>/dev/null
						"
					done
				fi
			fi
			' 2>> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
		done
	fi
fi

exit $CHANGE_PASS_STATUS

