#!/bin/bash
#Copyright (C) 2007 Paul Sharrad

#This file is part of Karoshi Server.
#
#Karoshi Server is free software: you can redistribute it and/or modify
#it under the terms of the GNU Affero General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#Karoshi Server is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU Affero General Public License for more details.
#
#You should have received a copy of the GNU Affero General Public License
#along with Karoshi Server.  If not, see <http://www.gnu.org/licenses/>.

#
#The Karoshi Team can be contacted at: 
#mpsharrad@karoshi.org.uk
#jsharrad@karoshi.org.uk

#
#Website: http://www.karoshi.org.uk
LOG_DATE=$(date +%F)
[ -z "$LOG_DATE" ] && exit
########################
#Check md5checksum
########################
if ! test -f /opt/karoshi/web_controls/checksums/admin_checksums/change_password_cgi
then
	echo "$(date): change_password - No MD5Checksum" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101	
fi
source /opt/karoshi/web_controls/checksums/admin_checksums/change_password_cgi
MD5SUM=$(md5sum /var/www/cgi-bin_karoshi/admin/change_password.cgi | cut -d' ' -f1)
[ -z "$MD5SUM" ] && MD5SUM=not_set
if [ "$MD5SUM" != "$change_password_cgi" ]
then
	echo "date: change_password - Incorrect MD5Checksum" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi
if ! test -f /opt/karoshi/web_controls/checksums/tech_checksums/change_password_cgi
then
	echo "$(date): change_password - No MD5Checksum" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi
source /opt/karoshi/web_controls/checksums/tech_checksums/change_password_cgi
MD5SUM2=$(md5sum /var/www/cgi-bin_karoshi/tech/change_password.cgi | cut -d' ' -f1)
[ -z "$MD5SUM2" ] && MD5SUM2=not_set
if [ "$MD5SUM2" != "$change_password_cgi" ]
then
	echo "$(date): change_password - Incorrect MD5Checksum" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi
########################
#Get variables
########################
numArgs=$#
if [ "$numArgs" != 0 ]
then
	echo "$(date): change_password - incorrect number of arguments" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi

read DATA
DATA=$(echo "$DATA" | tr -cd 'A-Za-z0-9\._:%\n-+-' | sed 's/REPLACEUNDERSCORE/_/g')
if [ -z "$DATA" ]
then
	echo "$(date): change_password - no data" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi
REMOTE_USER=$(echo "$DATA" | cut -s -d: -f1)
REMOTE_ADDR=$(echo "$DATA" | cut -s -d: -f2)
REMOTE_MD5=$(echo "$DATA" | cut -s -d: -f3)
USERNAME=$(echo "$DATA" | cut -s -d: -f4)
PASSWORD=$(echo "$DATA" | cut -s -d: -f5)
NEXTLOGON=$(echo "$DATA" | cut -s -d: -f6)
########################
#Check data
########################
if [ "$REMOTE_MD5" != "$MD5SUM" ] && [ "$REMOTE_MD5" != "$MD5SUM2" ]
then
	echo "$(date): change_password - Not called by change_password.cgi" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi
if [ -z "$REMOTE_USER" ]
then
	echo "$(date): change_password - Blank remote user" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi
if [ -z "$REMOTE_ADDR" ]
then
	echo "$(date): change_password - Blank remote tcpip address" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi
if [ -z "$USERNAME" ]
then
	echo "$(date): change_password - Blank username by $REMOTE_USER from $REMOTE_ADDR" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit
fi

#Dont change passwords for certain users
if [ "$USERNAME" = karoshi ] || [ "$USERNAME" = root ]
then
	echo "$(date): change_password - attempt to change password 'for' $USERNAME by $REMOTE_USER from $REMOTE_ADDR" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit
fi

#Dont change password for system accounts
if [[ $(id -u "$USERNAME") -lt 1000 ]]
then
	echo "$(date): change_password - attempt to change system password 'for' $USERNAME by $REMOTE_USER from $REMOTE_ADDR" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi

if [ -z "$PASSWORD" ]
then
	echo "$(date): change_password - Blank password by $REMOTE_USER from $REMOTE_ADDR" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi

if [[ $(grep -c ^"$REMOTE_USER": /opt/karoshi/web_controls/web_access_admin) != 1 ]] && [[ $(grep -c ^"$REMOTE_USER": /opt/karoshi/web_controls/web_access_tech) != 1 ]]
then
	echo "$(date): change_password - access denied to $REMOTE_USER from $REMOTE_ADDR" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi

if [ -z "$NEXTLOGON" ]
then
	NEXTLOGON=no
fi

#Dont change passwords for banned users
[ -f "/opt/karoshi/logs/banned_user_permanent/$USERNAME" ] && exit 102
[ -f "/opt/karoshi/logs/banned_user_account_durations/$USERNAME" ] && exit 102


#Get current shadowmax
[ -f /opt/karoshi/server_network/ldap_settings/shadowmax ] && SHADOWMAX=$(sed -n 1,1p /opt/karoshi/server_network/ldap_settings/shadowmax | tr -cd '0-9')
[ -z "$SHADOWMAX" ] && SHADOWMAX=3650

########################
#Convert special characters back for current password
########################

PASSWORD=$(echo "$PASSWORD" | sed 's/+/ /g; s/%21/!/g; s/%3F/?/g; s/%2C/,/g; s/%3A/:/g; s/%7E/~/g; s/%40/@/g; s/%23/#/g; s/%24/$/g; s/%26/\&/g; s/%2B/+/g; s/%3D/=/g; s/%28/(/g; s/%29/)/g; s/%5E/^/g; s/%7B/{/g; s/%7D/}/g; s/%3C/</g; s/%3E/>/g; s/%5B/[/g; s/%5D/]/g; s/%7C/|/g; s/%22/"/g; s/%1123/*/g' | sed "s/%27/'/g" | sed 's/%3B/;/g' | sed 's/%60/\`/g' | sed 's/%5C/\\/g' | sed 's/%2F/\//g' | sed 's/%25/%/g')


#Change the password on any additional domain controllers - this is just in case we have slow replication.
function adc_password_change {
for DOMAIN_CONTROLLER in $(ls -1 "/opt/karoshi/server_network/zones/$ZONE/additional_domain_controllers")
do
	echo "$(date): change_password - Changing password for $USERNAME on $DOMAIN_CONTROLLER by $REMOTE_USER from $REMOTE_ADDR" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	ssh -o PasswordAuthentication=no -o ConnectTimeout=3 "$DOMAIN_CONTROLLER" '
	samba-tool user setpassword '"$USERNAME"' --newpassword="'"$PASSWORD"'" 1>/dev/null
	'
done
}

#Change password on Internal zone domain controllers
if [ -d /opt/karoshi/server_network/zones/internal/additional_domain_controllers ]
then
	ZONE=internal
	adc_password_change
fi

#Change password on dmz domain controllers
if [ -d /opt/karoshi/server_network/zones/dmz/additional_domain_controllers ]
then
	ZONE=dmz
	adc_password_change
fi

#Change the password on the PDC
echo "$(date): change_password - Changing password for $USERNAME on $(hostname-fqdn) by $REMOTE_USER from $REMOTE_ADDR" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
samba-tool user setpassword "$USERNAME" --newpassword="$PASSWORD" 1>/dev/null 2>>"/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
CHANGE_PASS_STATUS="$?"

#Allow new user to join clients to the domain if they are a member of the itadmin or tech groups
PRIMARYGROUP=$(id -g -n "$USERNAME")
if [ "$PRIMARYGROUP" = itadmin ] || [ "$PRIMARYGROUP" = tech ]
then
	echo "$(date): change_password - allowing $USERNAME to join clients to the domain by $REMOTE_USER from $REMOTE_ADDR" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	#Get domain name
	SAMBADOMAIN=$(grep workgroup /etc/samba/smb.conf | sed -n 1,1p | sed 's/ //g' | cut -d'=' -f2)
	net rpc rights grant -U "$USERNAME%$PASSWORD" "$SAMBADOMAIN\Domain Admins" SeMachineAccountPrivilege \
	SePrintOperatorPrivilege SeAddUsersPrivilege SeDiskOperatorPrivilege SeRemoteShutdownPrivilege 1>/dev/null
fi

#Change password on next logon
if [ "$NEXTLOGON" = yes ]
then
	echo "$(date):change_password - forcing $USERNAME to change password on next logon by $REMOTE_USER from $REMOTE_ADDR" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	net sam set pwdmustchangenow "$USERNAME" yes 2>> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
else
	net sam set pwdmustchangenow "$USERNAME" no 2>> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
fi
########################
#Change the password on federated ldap servers
########################
if [ -d /opt/karoshi/server_network/federated_ldap_servers/ ]
then
	if [[ $(ls -1 /opt/karoshi/server_network/federated_ldap_servers/ | wc -l) -gt 0 ]]
	then
	for FEDERATEDLDAPSERVERS in /opt/karoshi/server_network/federated_ldap_servers/*
	do
		FEDERATEDLDAPSERVER=$(basename "$FEDERATEDLDAPSERVERS")
		echo "$(date): change_password \(federated mode\) - Changing password for $USERNAME on $FEDERATEDLDAPSERVER by $REMOTE_USER from $REMOTE_ADDR" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
		ssh -x -o PasswordAuthentication=no "$FEDERATEDLDAPSERVER" '

		echo `date`: change_password \(federated mode\) - Changing password for '"$USERNAME"' by '"$REMOTE_USER"' from '"$REMOTE_ADDR"' >> /opt/karoshi/logs/karoshi_web_management/'"$LOG_DATE"'
		samba-tool user setpassword '"$USERNAME"' --newpassword='"$PASSWORD"' 1>/dev/null 2>>/opt/karoshi/logs/karoshi_web_management/'"$LOG_DATE"'

		#Set shadowmax
		smbldap-usermod --shadowMax '"$SHADOWMAX"' '"$USERNAME"'

		#Allow new user to join clients to the domain if they are a member of the itadmin group
		PRIMARYGROUP=`id -g -n '"$USERNAME"'`
		if [ $PRIMARYGROUP = itadmin ]
		then
		echo `date`: change_password \(federated mode\) - allowing '"$USERNAME"' to "join" clients to the domain by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/'"$LOG_DATE"'
		#Get domain name
		SAMBADOMAIN=`cat /etc/samba/smb.conf | grep workgroup | sed -n 1,1p | sed "s/ //g" | cut -d"=" -f2`
		net rpc rights grant -U '"$USERNAME"'%'"$PASSWORD"' "$SAMBADOMAIN\Domain Admins" SeMachineAccountPrivilege \
		SePrintOperatorPrivilege SeAddUsersPrivilege SeDiskOperatorPrivilege SeRemoteShutdownPrivilege 1>/dev/null
		fi
		' 2>> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	done
	fi
fi

exit "$CHANGE_PASS_STATUS"

