#!/bin/bash
#Copyright (C) 2007  The karoshi Team

#This file is part of Karoshi Server.
#
#Karoshi Server is free software: you can redistribute it and/or modify
#it under the terms of the GNU Affero General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#Karoshi Server is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU Affero General Public License for more details.
#
#You should have received a copy of the GNU Affero General Public License
#along with Karoshi Server.  If not, see <http://www.gnu.org/licenses/>.

#
#The Karoshi Team can be contacted at: 
#mpsharrad@karoshi.org.uk
#jsharrad@karoshi.org.uk

#
#Website: http://www.karoshi.org.uk
LOG_DATE=`date +%F`
[ -z "$LOG_DATE" ] && exit

########################
#Check md5checksum
########################
if ! test -f /opt/karoshi/web_controls/checksums/admin_checksums/change_primary_group_cgi
then
	echo `date`: change_primary_group - No MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
source /opt/karoshi/web_controls/checksums/admin_checksums/change_primary_group_cgi
MD5SUM=`md5sum /var/www/cgi-bin_karoshi/admin/change_primary_group.cgi | cut -d' ' -f1`
[ -z "$MD5SUM" ] && MD5SUM=not_set
if [ $MD5SUM'check' != $change_primary_group_cgi'check' ]
then
	echo `date`: change_primary_group - Incorrect MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if ! test -f /opt/karoshi/web_controls/checksums/tech_checksums/change_primary_group_cgi
then
	echo `date`: change_primary_group - No MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
source /opt/karoshi/web_controls/checksums/tech_checksums/change_primary_group_cgi
MD5SUM2=`md5sum /var/www/cgi-bin_karoshi/tech/change_primary_group.cgi | cut -d' ' -f1`
[ -z "$MD5SUM2" ] && MD5SUM2=not_set
if [ $MD5SUM2'check' != $change_primary_group_cgi'check' ]
then
	echo `date`: change_primary_group - Incorrect MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
########################
#Get variables
########################
numArgs=$#
if [ $numArgs != 0 ]
then
	echo `date`: change_primary_group - incorrect number of arguments >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
read DATA
DATA=`echo $DATA | tr -cd 'A-Za-z0-9\._:\-'`
if [ -z "$DATA" ]
then
	echo `date`: change_password - no data >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
REMOTE_USER=`echo "$DATA" | cut -s -d: -f1`
REMOTE_ADDR=`echo "$DATA" | cut -s -d: -f2`
REMOTE_MD5=`echo "$DATA" | cut -s -d: -f3`
USERNAME=`echo "$DATA" | cut -s -d: -f4`
NEWPRIGROUP=`echo "$DATA" | cut -s -d: -f5`

########################
#Check data
########################
if [ $REMOTE_MD5'check' != $MD5SUM'check' ] && [ $REMOTE_MD5'check' != $MD5SUM2'check' ]
then
	echo `date`: change_primary_group - Not called by change_primary_group.cgi >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ -z "$REMOTE_USER" ]
then
	echo `date`: change_primary_group - Blank remote user >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ -z "$REMOTE_ADDR" ]
then
	echo `date`: change_primary_group - Blank remote tcpip address >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ -z "$USERNAME" ]
then
	echo `date`: change_primary_group - Blank username by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit
fi
if [ -z "$NEWPRIGROUP" ]
then
	echo `date`: change_primary_group - Blank new primary group by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ `grep -c ^$REMOTE_USER: /opt/karoshi/web_controls/web_access_admin` != 1 ] && [ `grep -c ^$REMOTE_USER: /opt/karoshi/web_controls/admin_users/web_access_tech` != 1 ]
then
	echo `date`: change_primary_group - access denied to $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
########################
#Change the primary group
########################
echo `date`: change_primary_group - Changing the primary group "for" $USERNAME to $NEWPRIGROUP by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE

#Get data on user
CURRENTPATH=`getent passwd | grep ^$USERNAME | cut -d: -f6`
CURRENTPRIGROUP=`id -g -n $USERNAME`
PRIMARYGROUP=$CURRENTPRIGROUP

source /opt/karoshi/server_network/group_information/$CURRENTPRIGROUP
CURRENTSUBUNIT=$SUBUNIT
SERVER=`echo $SERVER | cut -d, -f1`
CURRENT_SERVER=$SERVER
if [ -z "$CURRENT_SERVER" ]
then
	echo `date`: change_primary_group - Blank current server by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi

PRIMARYGROUP=$NEWPRIGROUP
source /opt/karoshi/server_network/group_information/$NEWPRIGROUP
SERVER=`echo $SERVER | cut -d, -f1`
NEWSUBUNIT=$SUBUNIT
NEW_SERVER=$SERVER
if [ -z "$NEW_SERVER" ]
then
	echo `date`: change_primary_group - Blank new server by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi


#Get samba 4 database password
LDAPPASS=`sed -n 1,1p /etc/ldap.secret`
#Get domain information
source /opt/karoshi/server_network/domain_information/domain_name
#Get group information
PRIGROUPID=`getent group $NEWPRIGROUP | cut -d: -f3`
#Remove user from current primary group
samba-tool group removemembers "$CURRENTPRIGROUP" $USERNAME  1>/dev/null 2>>/opt/karoshi/logs/karoshi_web_management/$LOG_DATE
#Add user to new primary group
samba-tool group addmembers "$NEWPRIGROUP" $USERNAME  1>/dev/null 2>>/opt/karoshi/logs/karoshi_web_management/$LOG_DATE
#Set new home path for the user

echo -e 'dn: CN='$USERNAME',OU='$CURRENTPRIGROUP',OU='$CURRENTSUBUNIT',OU=People,'$LDAPBASE'
changetype: modify
replace: unixhomedirectory
unixhomedirectory: '$HOMEPATH'/'$USERNAME'
-
replace: profilePath
profilePath: %LOGONSERVER%\\applications\\profiles\\'$NEWPRIGROUP'
-
replace: homeDirectory
homeDirectory: \\\\'$SERVER'\\'$USERNAME'
-
replace: gidNumber
gidNumber: '$PRIGROUPID'
-
replace: scriptPath
scriptPath: logon.bat '$NEWPRIGROUP'
-' | ldapmodify -x -D "CN=Administrator,CN=Users,$LDAPBASE" -w $LDAPPASS  1>/dev/null 2>>/opt/karoshi/logs/karoshi_web_management/$LOG_DATE

#Move ldap entry

echo -e 'dn: CN='$USERNAME',OU='$CURRENTPRIGROUP',OU='$CURRENTSUBUNIT',OU=People,'$LDAPBASE'
changetype: modrdn
newrdn: CN='$USERNAME'
deleteoldrdn: 1
newsuperior: OU='$NEWPRIGROUP',OU='$NEWSUBUNIT',OU=People,'$LDAPBASE'
' | ldapmodify -x -D "CN=Administrator,CN=Users,$LDAPBASE" -w $LDAPPASS  1>/dev/null 2>>/opt/karoshi/logs/karoshi_web_management/$LOG_DATE


#Check that home area should still be on the same server

#User home area is on the main server
if [ $CURRENT_SERVER = $NEW_SERVER ] && [ $CURRENT_SERVER = `hostname-fqdn` ]
then
	#Move home area
	if [ -d $CURRENTPATH ]
	then
		[ ! -d $HOMEPATH ] && mkdir -p $HOMEPATH
		mv $CURRENTPATH $HOMEPATH
		chmod 0600 -R $HOMEPATH/$USERNAME
		chmod u+X -R $HOMEPATH/$USERNAME
		chown $USERNAME:$NEWPRIGROUP $HOMEPATH/$USERNAME
	fi
fi

#Move the home area to the main server
if [ $CURRENT_SERVER != `hostname-fqdn` ] && [ $NEW_SERVER = `hostname-fqdn` ]
then
	[ ! -d $HOMEPATH ] && mkdir -p $HOMEPATH
	scp -r root@$CURRENT_SERVER:/$CURRENTPATH $HOMEPATH
	chmod 0600 -R $HOMEPATH/$USERNAME
	chmod u+X -R $HOMEPATH/$USERNAME
	chown $USERNAME:$NEWPRIGROUP $HOMEPATH/$USERNAME
fi

#Move the home area to an additional file server
if [ $CURRENT_SERVER = `hostname-fqdn` ] && [ $NEW_SERVER != `hostname-fqdn` ]
then
	ssh -o PasswordAuthentication=no -o ConnectTimeout=3 $NEW_SERVER '
	[ ! -d '$HOMEPATH' ] && mkdir -p '$HOMEPATH'
	'
	scp -r $CURRENTPATH root@$NEW_SERVER:/$HOMEPATH
	ssh -o PasswordAuthentication=no -o ConnectTimeout=3 $NEW_SERVER '
	chmod 0600 -R '$HOMEPATH'/'$USERNAME'
	chmod u+X -R '$HOMEPATH'/'$USERNAME'
	chown '$USERNAME':'$NEWPRIGROUP' '$HOMEPATH'/'$USERNAME'
	'
fi

#Move the home area between additional file servers
if [ $CURRENT_SERVER != `hostname-fqdn` ] && [ $NEW_SERVER != `hostname-fqdn` ]
then
	[ ! -d /opt/karoshi/mount/$CURRENT_SERVER/home ] && mkdir -p /opt/karoshi/mount/$CURRENT_SERVER/home
	[ ! -d /opt/karoshi/mount/$NEW_SERVER/home ] && mkdir -p /opt/karoshi/mount/$NEW_SERVER/home
	sshfs root@$CURRENT_SERVER:/home /opt/karoshi/mount/$CURRENT_SERVER/home 2>> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	sshfs root@$NEW_SERVER:/home /opt/karoshi/mount/$NEW_SERVER/home 2>> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	rsync --timeout=30 --dirs --recursive --links --compress --times --perms --acls --owner --group /opt/karoshi/mount/$CURRENTSERVER/$CURRENTPATH /opt/karoshi/mount/$NEWSERVER/$HOMEPATH 2>> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	#Unmount sshfs shares
	fusermount -u /opt/karoshi/mount/$CURRENT_SERVER/home 2>> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	fusermount -u /opt/karoshi/mount/$NEW_SERVER/home 2>> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
fi

#Move homepath on the email server
if [ -f /opt/karoshi/server_network/emailserver ]
then
	EMAILSERVER=`sed -n 1,1p /opt/karoshi/server_network/emailserver`
	if [ $EMAILSERVER != `hostname-fqdn` ]
	then 
		ssh -o PasswordAuthentication=no -o ConnectTimeout=3 $EMAILSERVER '
		if [ -d '$CURRENTPATH' ]
		then
			[ ! -d '$HOMEPATH' ] && mkdir -p '$HOMEPATH'
			mv '$CURRENTPATH' '$HOMEPATH'
			chmod 0600 -R '$HOMEPATH'/'$USERNAME'
			chmod u+X -R '$HOMEPATH'/'$USERNAME'
			chown '$USERNAME':'$NEWPRIGROUP' '$HOMEPATH'/'$USERNAME'
		fi
		'
	fi
fi

exit $CHANGE_PASS_STATUS
1>/dev/null 2>>/opt/karoshi/logs/karoshi_web_management/$LOG_DATE
