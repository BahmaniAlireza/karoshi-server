#!/bin/bash
#Copyright (C) 2007 Paul Sharrad

#This file is part of Karoshi Server.
#
#Karoshi Server is free software: you can redistribute it and/or modify
#it under the terms of the GNU Affero General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#Karoshi Server is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU Affero General Public License for more details.
#
#You should have received a copy of the GNU Affero General Public License
#along with Karoshi Server.  If not, see <http://www.gnu.org/licenses/>.

#
#The Karoshi Team can be contacted at: 
#mpsharrad@karoshi.org.uk
#jsharrad@karoshi.org.uk

#
#Website: http://www.karoshi.org.uk
LOG_DATE=$(date +%F)
[ -z "$LOG_DATE" ] && exit
########################
#Check md5checksum
########################
if ! test -f /opt/karoshi/web_controls/checksums/staff_checksums/change_student_password_cgi
then
	echo `date`: change_student_password - No MD5Checksum >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi
source /opt/karoshi/web_controls/checksums/staff_checksums/change_student_password_cgi
Checksum=$(sha256sum /var/www/cgi-bin_karoshi/staff/change_student_password.cgi | cut -d' ' -f1)
[ -z "$Checksum" ] && Checksum=not_set
if [ "$Checksum"'check' != "$change_student_password_cgi"'check' ]
then
	echo "$(date): change_student_password - Incorrect MD5Checksum" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi

########################
#Get variables
########################
numArgs="$#"
if [ "$numArgs" != 0 ]
then
	echo "$(date): change_student_password - incorrect number of arguments" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi
read DATA
DATA=$(echo "$DATA" | tr -cd 'A-Za-z0-9\._:%\n-+-' | sed 's/REPLACEUNDERSCORE/_/g')
if [ -z "$DATA" ]
then
	echo "$(date): change_student_password - no data" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi
REMOTE_USER=$(echo "$DATA" | cut -s -d: -f1)
REMOTE_ADDR=$(echo "$DATA" | cut -s -d: -f2)
RemoteCheckSum=$(echo "$DATA" | cut -s -d: -f3)
USERNAME=$(echo "$DATA" | cut -s -d: -f4)
PASSWORD=$(echo "$DATA" | cut -s -d: -f5)
########################
#Check data
########################
if [ "$RemoteCheckSum"'check' != "$Checksum"'check' ]
then
	echo "$(date): change_student_password - Not called by change_student_password.cgi" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi
if [ -z "$REMOTE_ADDR" ]
then
	echo "$(date): change_student_password - Blank remote tcpip address" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi
if [ -z "$USERNAME" ]
then
	echo "$(date): change_student_password - Blank username by $REMOTE_USER from $REMOTE_ADDR" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit
fi
if [ -z "$PASSWORD" ]
then
	echo "$(date): change_student_password - Blank password by $REMOTE_USER from $REMOTE_ADDR" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi
#Check that user changing the password is a member of staff
MYPRIGROUP=$(id -g -n "$REMOTE_USER")
if [ "$MYPRIGROUP" != staff ] && [ "$MYPRIGROUP" != officestaff ] && [ "$MYPRIGROUP" != itadmin ] && [ "$MYPRIGROUP" != tech ]
then
	echo "$(date): change_student_password - $MYUSERNAME is not a member of staff changing password for $USERNAME from $REMOTE_ADDR" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi
#Check that user being changed is a student
if [[ $(getent passwd "$USERNAME" | grep -c /home/users/students/) = 0 ]]
then
	echo "$(date): change_student_password - $USERNAME is not a student for $REMOTE_USER from $REMOTE_ADDR" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101	
fi 

########################
#Convert special characters back for new password
########################
#                                 space                      !              #                      $                &               (                 )                  +                   =               % (must be last) 
PASSWORD=$(echo "$PASSWORD" | sed 's/+/ /g' | sed 's/%21/!/g' | sed 's/%23/#/g' |  sed 's/%24/$/g' | sed 's/%26/\&/g' |  sed 's/%28/(/g' | sed 's/%29/)/g' | sed 's/%2B/+/g' | sed 's/%3D/=/g' | sed 's/%25/%/g')
########################
#Change the password
########################
echo "$(date): change_student_password - Changing password for $USERNAME by $REMOTE_USER from $REMOTE_ADDR" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
samba-tool user setpassword "$USERNAME" --newpassword="$PASSWORD" 1>/dev/null 2>>"/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
CHANGE_PASS_STATUS="$?"

########################
#Change the password on federated ldap servers
########################
if [ -d /opt/karoshi/server_network/federated_ldap_servers/ ]
then
	if [ `ls -1 /opt/karoshi/server_network/federated_ldap_servers/ | wc -l` -gt 0 ]
	then
	for FEDERATEDLDAPSERVERS in /opt/karoshi/server_network/federated_ldap_servers/*
	do
		FEDERATEDLDAPSERVER=$(basename "$FEDERATEDLDAPSERVERS")
		echo "$(date): change_password (federated mode) - Changing password for $USERNAME on $FEDERATEDLDAPSERVER by $REMOTE_USER from $REMOTE_ADDR" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
		ssh -x -o PasswordAuthentication=no "$FEDERATEDLDAPSERVER" '

		echo `date`: change_password \(federated mode\) - Changing password for '$USERNAME' by '$REMOTE_USER' from '$REMOTE_ADDR' >> /opt/karoshi/logs/karoshi_web_management/'$LOG_DATE'
		samba-tool user setpassword '"$USERNAME"' --newpassword='"$PASSWORD"' 1>/dev/null 2>>/opt/karoshi/logs/karoshi_web_management/'"$LOG_DATE"'

		' 2>> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	done
	fi
fi

exit "$CHANGE_PASS_STATUS"

