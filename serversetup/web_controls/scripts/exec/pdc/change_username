#!/bin/bash
#Copyright (C) 2007  The karoshi Team
#This program is free software; you can redistribute it and/or
#modify it under the terms of the GNU General Public License
#as published by the Free Software Foundation; either version 2
#of the License, or (at your option) any later version.
#
#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.
#
#You should have received a copy of the GNU General Public License
#along with this program; if not, write to the Free Software
#Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#
#The Karoshi Team can be contacted at: 
#mpsharrad@karoshi.org.uk
#jsharrad@karoshi.org.uk

#
#Website: http://www.karoshi.org.uk

LOG_DATE=$(date +%F)
[ -z "$LOG_DATE" ] && exit
########################
#Check md5checksum
########################
if ! test -f /opt/karoshi/web_controls/checksums/admin_checksums/change_user_info_cgi
then
	echo "$(date): change_username - No MD5Checksum" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi
source /opt/karoshi/web_controls/checksums/admin_checksums/change_user_info_cgi
MD5SUM=$(md5sum /var/www/cgi-bin_karoshi/admin/change_user_info.cgi | cut -d' ' -f1)
[ -z "$MD5SUM" ] && MD5SUM=not_set
if [ "$MD5SUM"'check' != "$change_user_info_cgi"'check' ]
then
	echo "$(date): change_username - Incorrect admin MD5Checksum" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi

if ! test -f /opt/karoshi/web_controls/checksums/tech_checksums/change_username_cgi
then
	echo "$(date): change_username - No MD5Checksum" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi
source /opt/karoshi/web_controls/checksums/tech_checksums/change_username_cgi
MD5SUM2=$(md5sum /var/www/cgi-bin_karoshi/tech/change_username.cgi | cut -d' ' -f1)
[ -z "$MD5SUM2" ] && MD5SUM2=not_set
if [ "$MD5SUM2"'check' != "$change_username_cgi"'check' ]
then
	echo "$(date): change_username - Incorrect tech MD5Checksum" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi
########################
#Get variables
########################
numArgs=$#
if [ "$numArgs" != 0 ]
then
	echo "$(date): change_username - incorrect number of arguments" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi
read DATA
DATA=$(echo "$DATA" | tr -cd 'A-Za-z0-9\._:%\n\-+')
if [ -z "$DATA" ]
then
	echo "$(date): change_username - no data" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi
REMOTE_USER=$(echo "$DATA" | cut -s -d: -f1)
REMOTE_ADDR=$(echo "$DATA" | cut -s -d: -f2)
REMOTE_MD5=$(echo "$DATA" | cut -s -d: -f3)
CURRENT_USERNAME=$(echo "$DATA" | cut -s -d: -f4)
NEW_USERNAME=$(echo "$DATA" | cut -s -d: -f5)
FIRSTNAME=$(echo "$DATA" | cut -s -d: -f6)
SURNAME=$(echo "$DATA" | cut -s -d: -f7)
########################
#Check data
########################
if [ "$REMOTE_MD5"'check' != "$MD5SUM"'check' ] && [ "$REMOTE_MD5"'check' != "$MD5SUM2"'check' ]
then
	echo "$(date): change_username - Not called by change_username.cgi" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi
if [ -z "$REMOTE_USER" ]
then
	echo "$(date): change_username - Blank remote user" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi
if [ -z "$REMOTE_ADDR" ]
then
	echo "$(date): change_username - Blank remote tcpip address" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi
if [ -z "$CURRENT_USERNAME" ]
then
	echo "$(date): change_username - Blank username by $REMOTE_USER from $REMOTE_ADDR" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi
if [ -z "$NEW_USERNAME" ]
then
	echo "$(date): change_username - Blank new username by $REMOTE_USER from $REMOTE_ADDR" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi
if [ -z "$FIRSTNAME" ]
then
	echo "$(date): change_username - Blank first name by $REMOTE_USER from $REMOTE_ADDR" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi
if [ -z "$SURNAME" ]
then
	echo "$(date): change_username - Blank surname by $REMOTE_USER from $REMOTE_ADDR" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi
if [[ $(grep -c ^"$REMOTE_USER": /opt/karoshi/web_controls/web_access_admin) != 1 ]] && [[ $(grep -c ^"$REMOTE_USER": /opt/karoshi/web_controls/admin_users/web_access_tech) != 1 ]]
then
	echo "$(date): change_username - access denied to $REMOTE_USER from $REMOTE_ADDR" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi

#Make sure current username exists
getent passwd "$CURRENT_USERNAME" 1> /dev/null
if [ "$?" != 0 ]
then
	echo "$(date): change_username - $CURRENT_USERNAME does not exist by $REMOTE_USER from $REMOTE_ADDR" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi

#Make sure new username does not exist
getent passwd "$NEW_USERNAME" 1> /dev/null
if [ "$?" = 0 ]
then
	echo "$(date): change_username - $NEW_USERNAME already exists by $REMOTE_USER from $REMOTE_ADDR" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi

########################
#Change the username
########################
echo "$(date): change_username - Changing username for $CURRENT_USERNAME to $NEW_USERNAME by $REMOTE_USER from $REMOTE_ADDR" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"

#Get primary group for user
PRIMARYGROUP=$(id -g -n "$CURRENT_USERNAME")
#Get userid
USERID=$(getent passwd "$CURRENT_USERNAME" | cut -d: -f3)

#########################
#Change username
#########################
LDAPPASS=$(sed -n 1,1p /etc/ldap.secret)
source /opt/karoshi/server_network/domain_information/domain_name
source /opt/karoshi/server_network/group_information/"$PRIMARYGROUP"
SERVER=$(echo "$SERVER" | cut -d, -f1)

echo -e 'dn: CN='"$CURRENT_USERNAME"',OU='"$PRIMARYGROUP"',OU='"$SUBUNIT"',OU=People,'"$LDAPBASE"'
changetype: modify
replace: mail
mail: '"$NEW_USERNAME"'@'"$REALM"'
-
replace: unixHomeDirectory
unixHomeDirectory: '"$HOMEPATH"'/'"$NEW_USERNAME"'
-
replace: homeDirectory
homeDirectory: \\\\'"$SERVER"'\\'"$NEW_USERNAME"'
-
replace: sn
sn: '"$SURNAME"'
-
replace: givenName
givenName: '"$FIRSTNAME"'
-
replace: displayName
displayName: '"$FIRSTNAME"' '"$SURNAME"'
-
replace: userPrincipalName
userPrincipalName: '"$NEW_USERNAME"'@'"$REALM"'
-
replace: sAMAccountName
sAMAccountName: '"$NEW_USERNAME"'
-' | ldapmodify -x -D "CN=Administrator,CN=Users,$LDAPBASE" -w "$LDAPPASS" 1>/dev/null 2>>"/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"

echo -e "dn: CN=$CURRENT_USERNAME,OU=$PRIMARYGROUP,OU=$SUBUNIT,OU=People,$LDAPBASE
changetype: modrdn
newrdn: cn=$NEW_USERNAME
deleteoldrdn: 1
newsuperior: OU=$PRIMARYGROUP,OU=$SUBUNIT,OU=People,$LDAPBASE
-" | ldapmodify -x -D "CN=Administrator,CN=Users,$LDAPBASE" -w "$LDAPPASS" 1>/dev/null 2>>"/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"


#Lookup profile path in ldap and check if it is mandatory or roaming
if [[ $(ldapsearch -x -w "$LDAPPASS" -b "OU=People,$LDAPBASE" -D "cn=Administrator,cn=Users,$LDAPBASE" cn="$NEW_USERNAME" | grep profilePath: | grep -c roaming_profile) -gt 0 ]]
then
	#Set new profile path for the user
echo -e 'dn: CN='"$NEW_USERNAME"',OU='"$PRIMARYGROUP"',OU='"$SUBUNIT"',OU=People,'"$LDAPBASE"'
changetype: modify
replace: profilePath
profilePath: %LOGONSERVER%\\applications\\profiles\\roaming_profiles\\'"$PRIMARYGROUP"'\\'"$NEW_USERNAME"'
-' | ldapmodify -x -D "CN=Administrator,CN=Users,$LDAPBASE" -w "$LDAPPASS" 1>/dev/null 2>>"/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"

fi

#########################
#Move files to new area
#########################
if [ -d "$HOMEPATH/$CURRENT_USERNAME" ]
then
	mv "$HOMEPATH/$CURRENT_USERNAME" "$HOMEPATH"/"$NEW_USERNAME"
	chmod 0600 -R "$HOMEPATH"/"$NEW_USERNAME"
	chmod u+X -R "$HOMEPATH"/"$NEW_USERNAME"
	chown "$USERID":"$PRIMARYGROUP" -R "$HOMEPATH"/"$NEW_USERNAME"
	CHANGE_PASS_STATUS="$?"
fi
if [[ "$SERVER" != $(hostname-fqdn) ]]
then
	ssh -x -o PasswordAuthentication=no "$SERVER" '
	mv '"$HOMEPATH/$CURRENT_USERNAME"' '"$HOMEPATH/$NEW_USERNAME"'
	chmod 0600 -R '"$HOMEPATH/$NEW_USERNAME"'
	chmod u+X -R '"$HOMEPATH/$NEW_USERNAME"'
	chown -R '"$USERID"':'"$PRIMARYGROUP"' '"$HOMEPATH/$NEW_USERNAME"''
fi
#########################
#Move mail
#########################
if [ -f /opt/karoshi/server_network/emailserver ]
then
	EMAILSERVER=$(sed -n 1,1p /opt/karoshi/server_network/emailserver)
	if [[ "$EMAILSERVER" != $(hostname-fqdn) ]]
	then 
		ssh -o PasswordAuthentication=no -o ConnectTimeout=3 "$EMAILSERVER" '
		if [ -d /home/users/email/'"$CURRENT_USERNAME"' ]
		then
			mv /home/users/email/'"$CURRENT_USERNAME"' /home/users/email/'"$NEW_USERNAME"'
			chown '"$USERID"' -R /home/users/email/'"$NEW_USERNAME"'
		fi
		if [ -d '"$HOMEPATH/$CURRENT_USERNAME"' ]
		then
			mv '"$HOMEPATH/$CURRENT_USERNAME"' '"$HOMEPATH/$NEW_USERNAME"'
			chmod 0600 -R '"$HOMEPATH/$NEW_USERNAME"'
			chmod u+X -R '"$HOMEPATH/$NEW_USERNAME"'
			chown -R '"$USERID"':'"$PRIMARYGROUP"' '"$HOMEPATH/$NEW_USERNAME"'
		fi
		'
	else
		if [ -d /home/users/email/"$CURRENT_USERNAME" ]
		then
			mv /home/users/email/"$CURRENT_USERNAME" /home/users/email/"$NEW_USERNAME"
			chown "$USERID" -R /home/users/email/"$NEW_USERNAME"
		fi
	fi
fi

#Add dfs path
[ -L /var/lib/samba/dfs/homes/"$CURRENT_USERNAME" ] && rm -f /var/lib/samba/dfs/homes/"$CURRENT_USERNAME"
if [ ! -z "$GLUSTERVOL" ]
then
	DFSPATH=""
	for GLUSTERSERVERS in /opt/karoshi/server_network/gluster-volumes/"$GLUSTERVOL"/servers/*
	do
		#Use short names for windows
		GLUSTERSERVER=$(basename "$GLUSTERSERVERS" | cut -d"." -f1)
		DFSPATH="$DFSPATH,$GLUSTERSERVER\\$NEW_USERNAME"
	done
	DFSPATH=$(echo "$DFSPATH" | sed 's/^,//g')
	[ -L /var/lib/samba/dfs/"$NEW_USERNAME" ] && rm -f /var/lib/samba/dfs/homes/"$NEW_USERNAME"
	ln -s msdfs:"$DFSPATH" /var/lib/samba/dfs/homes/"$NEW_USERNAME"

else
	#Use short names for windows
	SERVER2=$(echo "$SERVER" | cut -d"." -f1)
	ln -s msdfs:"$SERVER2"\\"$NEW_USERNAME" /var/lib/samba/dfs/homes/"$NEW_USERNAME"
fi

#Rename in acceptable use
if [ -f /opt/karoshi/server_network/acceptable_use_authorisations/pending/"$CURRENT_USERNAME" ]
then
	mv  -f /opt/karoshi/server_network/acceptable_use_authorisations/pending/"$CURRENT_USERNAME" /opt/karoshi/server_network/acceptable_use_authorisations/pending/"$NEW_USERNAME"
fi

exit $CHANGE_PASS_STATUS
