#!/bin/bash
#Copyright (C) 2010 Paul Sharrad

#This file is part of Karoshi Server.
#
#Karoshi Server is free software: you can redistribute it and/or modify
#it under the terms of the GNU Affero General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#Karoshi Server is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU Affero General Public License for more details.
#
#You should have received a copy of the GNU Affero General Public License
#along with Karoshi Server.  If not, see <http://www.gnu.org/licenses/>.

#
#The Karoshi Team can be contacted at: 
#mpsharrad@karoshi.org.uk
#jharris@karoshi.org.uk
#aball@karoshi.org.uk
#
#Website: http://www.karoshi.org.uk
LOG_DATE=`date +%F`
########################
#Check md5checksum
########################
if ! test -f /opt/karoshi/web_controls/checksums/admin_checksums/client_boot_controls2_cgi
then
echo `date`: client_boot_controls2 - No admin MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
source /opt/karoshi/web_controls/checksums/admin_checksums/client_boot_controls2_cgi
MD5SUM=`md5sum /var/www/cgi-bin_karoshi/admin/client_boot_controls2.cgi | cut -d' ' -f1`
[ $MD5SUM'null' = null ] && MD5SUM=not_set
if [ $MD5SUM'check' != $client_boot_controls2_cgi'check' ]
then
echo `date`: client_boot_controls2 - Incorrect admin MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi

if ! test -f /opt/karoshi/web_controls/checksums/tech_checksums/client_boot_controls2_cgi
then
echo `date`: client_boot_controls2 - No tech MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
source /opt/karoshi/web_controls/checksums/tech_checksums/client_boot_controls2_cgi
MD5SUM2=`md5sum /var/www/cgi-bin_karoshi/tech/client_boot_controls2.cgi | cut -d' ' -f1`
[ $MD5SUM2'null' = null ] && MD5SUM2=not_set
if [ $MD5SUM2'check' != $client_boot_controls2_cgi'check' ]
then
echo `date`: client_boot_controls2 - Incorrect tech MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
########################
#Get variables
########################
numArgs=$#
if [ $numArgs != 0 ]
then
echo `date`: client_boot_controls2 - incorrect number of arguments >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi

read DATA
DATA=`echo $DATA | tr -cd 'A-Za-z0-9\._:%\-'`
if [ $DATA'null' = null ]
then
echo `date`: client_boot_controls2 - no data >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
REMOTE_USER=`echo "$DATA" | cut -s -d: -f1`
REMOTE_ADDR=`echo "$DATA" | cut -s -d: -f2`
REMOTE_MD5=`echo "$DATA" | cut -s -d: -f3`
LOCATION=`echo "$DATA" | cut -s -d: -f4`
ACTION=`echo "$DATA" | cut -s -d: -f5`
ASSET=`echo "$DATA" | cut -s -d: -f6`
TCPIP=`echo "$DATA" | cut -s -d: -f7`
MACADDRESS=`echo "$DATA" | cut -s -d: -f8 | sed 's/%3A/:/g'`

########################
#Check data
########################
if [ $REMOTE_MD5'check' != $MD5SUM'check' ] && [ $REMOTE_MD5'check' != $MD5SUM2'check' ]
then
echo `date`: client_boot_controls2 - Not called by client_boot_controls2.cgi >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
if [ $REMOTE_USER'null' = null ]
then
echo `date`: client_boot_controls2 - Blank remote user >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
if [ $REMOTE_ADDR'null' = null ]
then
echo `date`: client_boot_controls2 - Blank remote tcpip address >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi

if [ $LOCATION'null' = null ]
then
echo `date`: client_boot_controls2 - Blank location by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
if [ $ACTION'null' = null ]
then
echo `date`: client_boot_controls2 - Blank action by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
if [ $ASSET'null' = null ]
then
echo `date`: client_boot_controls2 - Blank asset by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
if [ $TCPIP'null' = null ]
then
echo `date`: client_boot_controls2 - Blank tcpip by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
if [ $MACADDRESS'null' = null ]
then
echo `date`: client_boot_controls2 - Blank macaddress by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
if [ `grep -c ^$REMOTE_USER: /opt/karoshi/web_controls/web_access_admin` != 1 ] && [ `grep -c ^$REMOTE_USER: /opt/karoshi/web_controls/web_access_tech` != 1 ]
then
echo `date`: client_boot_controls2 - access denied to $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi

DISTRIBUTIONSERVER=`sed -n 1,1p /opt/karoshi/server_network/distribution_server`
SERVERIP=`net lookup $DISTRIBUTIONSERVER`

BOOT_CONTROL_CONFIG=/opt/karoshi/server_network/dhcp/network_boot_list


if [ $ACTION = install ]
then
if [ $TCPIP'null' != null ] && [ $MACADDRESS'null' != null ]
then 
if [ $TCPIP != N.A. ] && [ $MACADDRESS != N.A. ]
then
echo `date`: client_boot_controls2 - setting asset $ASSET to install $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
echo $TCPIP,$MACADDRESS, > /opt/karoshi/asset_register/network_install/install/$ASSET
[ -f /opt/karoshi/asset_register/network_install/memtest/$ASSET ] && rm -f /opt/karoshi/asset_register/network_install/memtest/$ASSET
fi
fi
fi

if [ $ACTION = memtest ]
then
if [ $TCPIP'null' != null ] && [ $MACADDRESS'null' != null ]
then 
if [ $TCPIP != N.A. ] && [ $MACADDRESS != N.A. ]
then
echo `date`: client_boot_controls2 - setting asset $ASSET to memtest $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
echo $TCPIP,$MACADDRESS, > /opt/karoshi/asset_register/network_install/memtest/$ASSET
[ -f /opt/karoshi/asset_register/network_install/install/$ASSET ] && rm -f /opt/karoshi/asset_register/network_install/install/$ASSET
fi
fi
fi

if [ $ACTION = wakeonlan ]
then
if [ $MACADDRESS'null' != null ]
then 
if [ $MACADDRESS != N.A. ]
then
echo `date`: client_boot_controls2 - waking up $ASSET on $MACADDRESS by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
wakeonlan $MACADDRESS
fi
fi
fi

if [ $ACTION = wakeonlanall ]
then
if [ -d /opt/karoshi/asset_register/locations/$LOCATION/1 ]
then
if [ `ls -1 /opt/karoshi/asset_register/locations/$LOCATION/1 | wc -l` -gt 0 ]
then
for ASSETS in /opt/karoshi/asset_register/locations/$LOCATION/1/*
do
ASSET=`basename $ASSETS`
MACADDRESS=`sed -n 8,8p /opt/karoshi/asset_register/locations/$LOCATION/1/$ASSET | cut -d: -f2- | sed 's/ //g'`
if [ $MACADDRESS'null' != null ] && [ $MACADDRESS != N.A. ]
then
echo Waking $MACADDRESS"<br>"
wakeonlan $MACADDRESS 1>/dev/null
sleep 1.5
fi
done
fi
fi

if [ -d /opt/karoshi/asset_register/locations/$LOCATION/2 ]
then
if [ `ls -1 /opt/karoshi/asset_register/locations/$LOCATION/2 | wc -l` -gt 0 ]
then
for ASSETS in /opt/karoshi/asset_register/locations/$LOCATION/2/*
do
ASSET=`basename $ASSETS`
MACADDRESS=`sed -n 8,8p /opt/karoshi/asset_register/locations/$LOCATION/2/$ASSET | cut -d: -f2- | sed 's/ //g'`
if [ $MACADDRESS'null' != null ] && [ $MACADDRESS != N.A. ]
then
echo Waking $MACADDRESS"<br>"
wakeonlan $MACADDRESS 1>/dev/null
sleep 1.5
fi
done
fi
fi

if [ -d /opt/karoshi/asset_register/locations/$LOCATION/3 ]
then
if [ `ls -1 /opt/karoshi/asset_register/locations/$LOCATION/3 | wc -l` -gt 0 ]
then
for ASSETS in /opt/karoshi/asset_register/locations/$LOCATION/3/*
do
ASSET=`basename $ASSETS`
MACADDRESS=`sed -n 8,8p /opt/karoshi/asset_register/locations/$LOCATION/3/$ASSET | cut -d: -f2- | sed 's/ //g'`
if [ $MACADDRESS'null' != null ] && [ $MACADDRESS != N.A. ]
then
echo Waking $MACADDRESS"<br>"
wakeonlan $MACADDRESS 1>/dev/null
sleep 1.5
fi
done
fi
fi

if [ -d /opt/karoshi/asset_register/locations/$LOCATION/4 ]
then
if [ `ls -1 /opt/karoshi/asset_register/locations/$LOCATION/4 | wc -l` -gt 0 ]
then
for ASSETS in /opt/karoshi/asset_register/locations/$LOCATION/4/*
do
ASSET=`basename $ASSETS`
MACADDRESS=`sed -n 8,8p /opt/karoshi/asset_register/locations/$LOCATION/2/$ASSET | cut -d: -f2- | sed 's/ //g'`
if [ $MACADDRESS'null' != null ] && [ $MACADDRESS != N.A. ]
then
echo Waking $MACADDRESS"<br>"
wakeonlan $MACADDRESS 1>/dev/null
sleep 1.5
fi
done
fi
fi

if [ -d /opt/karoshi/asset_register/locations/$LOCATION/5 ]
then
if [ `ls -1 /opt/karoshi/asset_register/locations/$LOCATON/5 | wc -l` -gt 0 ]
then
for ASSETS in /opt/karoshi/asset_register/locations/$LOCATION/5/*
do
ASSET=`basename $ASSETS`
MACADDRESS=`sed -n 8,8p /opt/karoshi/asset_register/locations/$LOCATION/5/$ASSET | cut -d: -f2- | sed 's/ //g'`
if [ $MACADDRESS'null' != null ] && [ $MACADDRESS != N.A. ]
then
echo Waking $MACADDRESS"<br>"
wakenonlan $MACADDRESS 1>/dev/null
sleep 1.5
fi
done
fi
fi


fi

if [ $ACTION = normal ]
then
echo `date`: client_boot_controls2 - setting asset $ASSET to normal $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
[ -f /opt/karoshi/asset_register/network_install/memtest/$ASSET ] && rm -f /opt/karoshi/asset_register/network_install/memtest/$ASSET
[ -f /opt/karoshi/asset_register/network_install/install/$ASSET ] && rm -f /opt/karoshi/asset_register/network_install/install/$ASSET
fi

function restart_dhcp {
source /opt/karoshi/serversetup/variables/distro
#Restart DHCP
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/dhcp_stop 1>/dev/null 2>>/opt/karoshi/logs/karoshi_web_management/$LOG_DATE
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/dhcp_start 1>/dev/null 2>>/opt/karoshi/logs/karoshi_web_management/$LOG_DATE
}

function collate_client_info {
#Create warning file
echo -e "#Karoshi DHCP auto configuration.
#
#Do not add any configuration below this point." > /opt/karoshi/server_network/dhcp/karoshi_warning


echo "#Client_network_install_configuration" > $BOOT_CONTROL_CONFIG

if [ -d /opt/karoshi/asset_register/network_install/install ]
then
if [ `ls -1 /opt/karoshi/asset_register/network_install/install | wc -l` -gt 0 ]
then
for CLIENTS in /opt/karoshi/asset_register/network_install/install/*
do
CLIENT=`basename $CLIENTS`
CLIENT_DATA=`sed -n 1,1p /opt/karoshi/asset_register/network_install/install/$CLIENT`
TCPIP=`echo $CLIENT_DATA | cut -d, -f1`
MACADDRESS=`echo $CLIENT_DATA | cut -d, -f2`

echo >> $BOOT_CONTROL_CONFIG
echo 'host '$TCPIP' {' >> $BOOT_CONTROL_CONFIG
echo '	hardware ethernet '$MACADDRESS';' >> $BOOT_CONTROL_CONFIG
echo '	fixed-address '$TCPIP';' >> $BOOT_CONTROL_CONFIG
echo '	option host-name "'$TCPIP'";' >> $BOOT_CONTROL_CONFIG
echo '	next-server '$SERVERIP';' >> $BOOT_CONTROL_CONFIG 
echo '	filename "pxelinux.0";' >> $BOOT_CONTROL_CONFIG
echo '}' >> $BOOT_CONTROL_CONFIG
echo >> $BOOT_CONTROL_CONFIG
done
fi
fi

if [ -d /opt/karoshi/asset_register/network_install/memtest ]
then
if [ `ls -1 /opt/karoshi/asset_register/network_install/memtest | wc -l` -gt 0 ]
then
for CLIENTS in /opt/karoshi/asset_register/network_install/memtest/*
do
CLIENT=`basename $CLIENTS`
CLIENT_DATA=`sed -n 1,1p /opt/karoshi/asset_register/network_install/memtest/$CLIENT`
TCPIP=`echo $CLIENT_DATA | cut -d, -f1`
MACADDRESS=`echo $CLIENT_DATA | cut -d, -f2`

echo >> $BOOT_CONTROL_CONFIG
echo 'host '$TCPIP' {' >> $BOOT_CONTROL_CONFIG
echo 'hardware ethernet '$MACADDRESS';' >> $BOOT_CONTROL_CONFIG
echo 'fixed-address '$TCPIP';' >> $BOOT_CONTROL_CONFIG
echo 'option host-name "'$TCPIP'";' >> $BOOT_CONTROL_CONFIG
echo 'next-server '$SERVERIP';' >> $BOOT_CONTROL_CONFIG 
echo 'filename "pxelinux.0";' >> $BOOT_CONTROL_CONFIG
echo '}' >> $BOOT_CONTROL_CONFIG
echo >> $BOOT_CONTROL_CONFIG
done
fi
fi

#Remove existing lines from dhcp config file
sed -i '/^#Karoshi DHCP auto configuration/,$d' /etc/dhcp/dhcpd.conf

#Add warning message
[ -f /opt/karoshi/server_network/dhcp/karoshi_warning ] && cat /opt/karoshi/server_network/dhcp/karoshi_warning >> /etc/dhcp/dhcpd.conf

#Cat reservation list  into dhcpd.conf
[ -f /opt/karoshi/server_network/dhcp/reservation_list ] && cat /opt/karoshi/server_network/dhcp/reservation_list >> /etc/dhcp/dhcpd.conf

#Cat client network boots into the dhcp config file
[ -f /opt/karoshi/server_network/dhcp/network_boot_list ] && cat /opt/karoshi/server_network/dhcp/network_boot_list >> /etc/dhcp/dhcpd.conf
}


if [ $ACTION = resetall ]
then
echo `date`: client_boot_controls2 - resetting all by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
[ -d /opt/karoshi/asset_register/network_install/memtest/ ] && rm -f /opt/karoshi/asset_register/network_install/memtest/*
[ -d /opt/karoshi/asset_register/network_install/install/ ] && rm -f /opt/karoshi/asset_register/network_install/install/*
restart_dhcp
fi

if [ $ACTION = activatechanges ]
then
echo `date`: client_boot_controls2 - activating changes by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
#Check to see if there are any clients to add to the dhcp config file
collate_client_info
restart_dhcp
fi


exit
