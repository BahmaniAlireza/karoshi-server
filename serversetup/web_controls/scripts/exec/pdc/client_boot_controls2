#!/bin/bash
#Copyright (C) 2010 Paul Sharrad

#This file is part of Karoshi Server.
#
#Karoshi Server is free software: you can redistribute it and/or modify
#it under the terms of the GNU Affero General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#Karoshi Server is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU Affero General Public License for more details.
#
#You should have received a copy of the GNU Affero General Public License
#along with Karoshi Server.  If not, see <http://www.gnu.org/licenses/>.

#
#The Karoshi Team can be contacted at: 
#mpsharrad@karoshi.org.uk
#jsharrad@karoshi.org.uk

#
#Website: http://www.karoshi.org.uk
LOG_DATE=`date +%F`
########################
#Check md5checksum
########################
if ! test -f /opt/karoshi/web_controls/checksums/admin_checksums/client_boot_controls2_cgi
then
	echo `date`: client_boot_controls2 - No admin MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
source /opt/karoshi/web_controls/checksums/admin_checksums/client_boot_controls2_cgi
Checksum=`sha256sum /var/www/cgi-bin_karoshi/admin/client_boot_controls2.cgi | cut -d' ' -f1`
[ -z "$Checksum" ] && Checksum=not_set
if [ $Checksum'check' != $client_boot_controls2_cgi'check' ]
then
	echo `date`: client_boot_controls2 - Incorrect admin MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi

if ! test -f /opt/karoshi/web_controls/checksums/tech_checksums/client_boot_controls2_cgi
then
	echo `date`: client_boot_controls2 - No tech MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
source /opt/karoshi/web_controls/checksums/tech_checksums/client_boot_controls2_cgi
Checksum2=`sha256sum /var/www/cgi-bin_karoshi/tech/client_boot_controls2.cgi | cut -d' ' -f1`
[ -z "$Checksum2" ] && Checksum2=not_set
if [ $Checksum2'check' != $client_boot_controls2_cgi'check' ]
then
	echo `date`: client_boot_controls2 - Incorrect tech MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
########################
#Get variables
########################
numArgs=$#
if [ $numArgs != 0 ]
then
echo `date`: client_boot_controls2 - incorrect number of arguments >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi

read DATA
DATA=`echo $DATA | tr -cd 'A-Za-z0-9\._:%\-'`
if [ -z "$DATA" ]
then
	echo `date`: client_boot_controls2 - no data >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
REMOTE_USER=`echo "$DATA" | cut -s -d: -f1`
REMOTE_ADDR=`echo "$DATA" | cut -s -d: -f2`
RemoteCheckSum=`echo "$DATA" | cut -s -d: -f3`
LOCATION=`echo "$DATA" | cut -s -d: -f4`
ACTION=`echo "$DATA" | cut -s -d: -f5`
ASSET=`echo "$DATA" | cut -s -d: -f6`
TCPIP=`echo "$DATA" | cut -s -d: -f7`
MACADDRESS=`echo "$DATA" | cut -s -d: -f8 | sed 's/%3A/:/g'`
NETBOOT=`echo "$DATA" | cut -s -d: -f9`
########################
#Check data
########################
if [ $RemoteCheckSum'check' != $Checksum'check' ] && [ $RemoteCheckSum'check' != $Checksum2'check' ]
then
	echo `date`: client_boot_controls2 - Not called by client_boot_controls2.cgi >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ -z "$REMOTE_USER" ]
then
	echo `date`: client_boot_controls2 - Blank remote user >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ -z "$REMOTE_ADDR" ]
then
	echo `date`: client_boot_controls2 - Blank remote tcpip address >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi

if [ -z "$LOCATION" ]
then
	echo `date`: client_boot_controls2 - Blank location by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ -z "$ACTION" ]
then
	echo `date`: client_boot_controls2 - Blank action by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ -z "$ASSET" ]
then
	echo `date`: client_boot_controls2 - Blank asset by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ -z "$TCPIP" ]
then
	echo `date`: client_boot_controls2 - Blank tcpip by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ -z "$MACADDRESS" ]
then
	echo `date`: client_boot_controls2 - Blank macaddress by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ "$ACTION" = install ] || [ "$ACTION" = enableall ]
then
	if [ -z "$NETBOOT" ]
	then
		echo `date`: client_boot_controls2 - Blank netboot by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
		exit 101
	fi
fi
if [ `grep -c ^$REMOTE_USER: /opt/karoshi/web_controls/web_access_admin` != 1 ] && [ `grep -c ^$REMOTE_USER: /opt/karoshi/web_controls/web_access_tech` != 1 ]
then
	echo `date`: client_boot_controls2 - access denied to $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi

DISTRIBUTIONSERVER=`sed -n 1,1p /opt/karoshi/server_network/distribution_server`
SERVERIP=`net lookup $DISTRIBUTIONSERVER`

BOOT_CONTROL_CONFIG=/opt/karoshi/server_network/dhcp/network_boot_list


if [ "$ACTION" = install ]
then
	if [ ! -z "$TCPIP" ] && [ ! -z "$MACADDRESS" ]
	then 
		if [ $TCPIP != N.A. ] && [ $MACADDRESS != N.A. ]
		then
			echo `date`: client_boot_controls2 - setting asset $ASSET to install $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
			echo $TCPIP,$MACADDRESS,$NETBOOT > /opt/karoshi/server_network/dhcp/network_install/install/$ASSET
			[ -f /opt/karoshi/server_network/dhcp/asset_register/network_install/memtest/$ASSET ] && rm -f /opt/karoshi/server_network/dhcp/asset_register/network_install/memtest/$ASSET
		fi
	fi
fi

if [ $ACTION = memtest ]
then
	if [ ! -z "$TCPIP" ] && [ ! -z "$MACADDRESS" ]
	then 
		if [ $TCPIP != N.A. ] && [ $MACADDRESS != N.A. ]
		then
			echo `date`: client_boot_controls2 - setting asset $ASSET to memtest $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
			echo $TCPIP,$MACADDRESS, > /opt/karoshi/server_network/dhcp/asset_register/network_install/memtest/$ASSET
			[ -f /opt/karoshi/server_network/dhcp/network_install/install/$ASSET ] && rm -f /opt/karoshi/server_network/dhcp/network_install/install/$ASSET
		fi
	fi
fi

if [ "$ACTION" = wakeonlan ]
then
	if [ ! -z "$MACADDRESS" ]
	then 
		if [ "$MACADDRESS" != N.A. ]
		then
			echo `date`: client_boot_controls2 - waking up $ASSET on $MACADDRESS by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
			wakeonlan $MACADDRESS
		fi
	fi
fi

if [ "$ACTION" = wakeonlanall ]
then

	if [ -d /opt/karoshi/asset_register/locations/"$LOCATION" ]
	then
		if [ `ls -1 /opt/karoshi/asset_register/locations/"$LOCATION" | wc -l` -gt 0 ]
		then
			for ASSETS in /opt/karoshi/asset_register/locations/"$LOCATION"/*
			do
				ASSET=`basename $ASSETS`
				MACADDRESS=`sed -n 8,8p /opt/karoshi/asset_register/locations/$LOCATION/$ASSET | cut -d: -f2- | sed 's/ //g' | tr -cd "A-Za-z0-9:"`
				if [ ! -z "$MACADDRESS" ] && [ $MACADDRESS != N.A. ]
				then
					echo $"Waking" "$MACADDRESS""<br>"
					wakeonlan "$MACADDRESS" 1>/dev/null
					sleep 1.5
				fi
			done
		fi
	fi
fi

if [ "$ACTION" = normal ]
then
	echo `date`: client_boot_controls2 - setting asset $ASSET to normal $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	[ -f /opt/karoshi/server_network/dhcp/asset_register/network_install/memtest/$ASSET ] && rm -f /opt/karoshi/server_network/dhcp/asset_register/network_install/memtest/$ASSET
	[ -f /opt/karoshi/server_network/dhcp/network_install/install/$ASSET ] && rm -f /opt/karoshi/server_network/dhcp/network_install/install/$ASSET
fi

function restart_dhcp {

#Cat reservation list  into dhcpd.conf
cat /opt/karoshi/server_network/dhcp/network_boot_list > /etc/dhcp/dhcpd_client_boot.conf

source /opt/karoshi/serversetup/variables/distro
#Restart DHCP
echo '<ul><li>'$HOSTNAME' - '$"Restarting dhcp"'</li></ul>'
echo `date`: client_boot_controls2 - $HOSTNAME - restarting dhcp by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/dhcp_stop 1>/dev/null 2>>/opt/karoshi/logs/karoshi_web_management/$LOG_DATE
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/dhcp_start 1>/dev/null 2>>/opt/karoshi/logs/karoshi_web_management/$LOG_DATE

#Sync config file to failover server
if [ -d /opt/karoshi/server_network/dhcp_servers ]
then
	for DHCPSERVER in `ls -1 /opt/karoshi/server_network/dhcp_servers`
	do
		if [ "$DHCPSERVER" != `hostname-fqdn` ]
		then
			DHCPSERVER2=`echo "$DHCPSERVER" | cut -d. -f1`
			echo '<ul><li>'$DHCPSERVER2' - '$"Restarting dhcp"'</li></ul>'
			echo `date`: client_boot_controls2 - $DHCPSERVER - restarting dhcp by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
			scp /etc/dhcp/dhcpd_client_boot.conf root@$DHCPSERVER:/etc/dhcp/
			ssh -o PasswordAuthentication=no -o ConnectTimeout=3 $DHCPSERVER '
			source /opt/karoshi/serversetup/variables/distro
			/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/dhcp_stop 1>/dev/null
			/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/dhcp_start 1>/dev/null
			'
		fi
	done
fi
sleep 2
}

function collate_client_info {
[ -f "$BOOT_CONTROL_CONFIG" ] && rm -f "$BOOT_CONTROL_CONFIG"
touch "$BOOT_CONTROL_CONFIG"
if [ -d /opt/karoshi/server_network/dhcp/network_install/install ]
then
	if [ `ls -1 /opt/karoshi/server_network/dhcp/network_install/install | wc -l` -gt 0 ]
	then
		for CLIENTS in /opt/karoshi/server_network/dhcp/network_install/install/*
		do
			CLIENT=`basename $CLIENTS`
			CLIENT_DATA=`sed -n 1,1p /opt/karoshi/server_network/dhcp/network_install/install/$CLIENT`
			TCPIP=`echo $CLIENT_DATA | cut -d, -f1`
			MACADDRESS=`echo $CLIENT_DATA | cut -d, -f2`
			NETBOOT=`echo $CLIENT_DATA | cut -d, -f3`

			echo >> $BOOT_CONTROL_CONFIG
			echo 'host '$TCPIP' {' >> $BOOT_CONTROL_CONFIG
			echo '	hardware ethernet '$MACADDRESS';' >> $BOOT_CONTROL_CONFIG
			echo '	fixed-address '$TCPIP';' >> $BOOT_CONTROL_CONFIG
			echo '	option host-name "'$TCPIP'";' >> $BOOT_CONTROL_CONFIG
			echo '	next-server '$SERVERIP';' >> $BOOT_CONTROL_CONFIG 
			echo '	filename "'$NETBOOT'/pxelinux.0";' >> $BOOT_CONTROL_CONFIG
			echo '}' >> $BOOT_CONTROL_CONFIG
			echo >> $BOOT_CONTROL_CONFIG
		done
	fi
fi

if [ -d /opt/karoshi/server_network/dhcp/asset_register/network_install/memtest ]
then
	if [ `ls -1 /opt/karoshi/server_network/dhcp/asset_register/network_install/memtest | wc -l` -gt 0 ]
	then
		for CLIENTS in /opt/karoshi/server_network/dhcp/asset_register/network_install/memtest/*
		do
			CLIENT=`basename $CLIENTS`
			CLIENT_DATA=`sed -n 1,1p /opt/karoshi/server_network/dhcp/asset_register/network_install/memtest/$CLIENT`
			TCPIP=`echo $CLIENT_DATA | cut -d, -f1`
			MACADDRESS=`echo $CLIENT_DATA | cut -d, -f2`

			echo >> $BOOT_CONTROL_CONFIG
			echo 'host '$TCPIP' {' >> $BOOT_CONTROL_CONFIG
			echo 'hardware ethernet '$MACADDRESS';' >> $BOOT_CONTROL_CONFIG
			echo 'fixed-address '$TCPIP';' >> $BOOT_CONTROL_CONFIG
			echo 'option host-name "'$TCPIP'";' >> $BOOT_CONTROL_CONFIG
			echo 'next-server '$SERVERIP';' >> $BOOT_CONTROL_CONFIG 
			echo 'filename "pxelinux.0";' >> $BOOT_CONTROL_CONFIG
			echo '}' >> $BOOT_CONTROL_CONFIG
			echo >> $BOOT_CONTROL_CONFIG
		done
	fi
fi

}


if [ $ACTION = resetall ]
then
	echo `date`: client_boot_controls2 - resetting all by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	[ -d /opt/karoshi/server_network/dhcp/asset_register/network_install/memtest/ ] && rm -f /opt/karoshi/server_network/dhcp/asset_register/network_install/memtest/*
	[ -d /opt/karoshi/server_network/dhcp/network_install/install/ ] && rm -f /opt/karoshi/server_network/dhcp/network_install/install/*
	restart_dhcp
fi

if [ $ACTION = enableall ]
then
	echo `date`: "client_boot_controls2 - enabling all clients in $LOCATION by $REMOTE_USER from $REMOTE_ADDR" >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE

	#Get details of all of the clients in the location
	for ASSETS in /opt/karoshi/asset_register/locations/$LOCATION/*
	do
		ASSET=`basename $ASSETS`
		source $ASSETS
		LOCATION=`echo $ASSETS | cut -d"/" -f6`
		if [ $ASSETTYPE = 1 ] || [ $ASSETTYPE = 2 ] || [ $ASSETTYPE = 3 ] || [ $ASSETTYPE = 4 ] || [ $ASSETTYPE = 5 ] || [ $ASSETTYPE = 6 ]
		then
			if [ ! -z "$TCPIP1" ] && [ ! -z "$MAC1" ]
			then 
				if [ $TCPIP1 != N.A. ] && [ $MAC1 != N.A. ]
				then
					echo `date`: client_boot_controls2 - setting asset $ASSET to install $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
					echo $TCPIP1,$MAC1,$NETBOOT > /opt/karoshi/server_network/dhcp/network_install/install/$ASSET
					[ -f /opt/karoshi/server_network/dhcp/asset_register/network_install/memtest/$ASSET ] && rm -f /opt/karoshi/server_network/dhcp/asset_register/network_install/memtest/$ASSET
				fi
			fi
		fi
	done
	collate_client_info
	restart_dhcp
fi



if [ $ACTION = activatechanges ]
then
	echo `date`: client_boot_controls2 - activating changes by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	#Check to see if there are any clients to add to the dhcp config file
	collate_client_info
	restart_dhcp
fi


exit


