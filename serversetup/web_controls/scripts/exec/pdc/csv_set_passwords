#!/bin/bash
#Copyright (C) 2007 Paul Sharrad

#This file is part of Karoshi Server.
#
#Karoshi Server is free software: you can redistribute it and/or modify
#it under the terms of the GNU Affero General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#Karoshi Server is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU Affero General Public License for more details.
#
#You should have received a copy of the GNU Affero General Public License
#along with Karoshi Server.  If not, see <http://www.gnu.org/licenses/>.

#
#The Karoshi Team can be contacted at: 
#mpsharrad@karoshi.org.uk
#jsharrad@karoshi.org.uk

#
#Website: http://www.karoshi.org.uk
LOG_DATE=$(date +%F)
########################
#Check md5checksum
########################
if ! test -f /opt/karoshi/web_controls/checksums/admin_checksums/csv_set_passwords_cgi
then
	echo "$(date): csv_set_passwords - No admin MD5Checksum" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi
source /opt/karoshi/web_controls/checksums/admin_checksums/csv_set_passwords_process_cgi
MD5SUM=$(md5sum /var/www/cgi-bin_karoshi/admin/csv_set_passwords.cgi | cut -d' ' -f1)
[ -z "$MD5SUM" ] && MD5SUM=not_set
if [ $MD5SUM'check' != $csv_set_passwords'check' ]
then
	echo "$(date): csv_set_passwords - Incorrect admin MD5Checksum" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi

########################
#Get variables
########################
numArgs=$#
if [ $numArgs != 0 ]
then
	echo "$(date): csv_set_passwords - incorrect number of arguments" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi

read DATA
DATA=$(echo "$DATA" | tr -cd 'A-Za-z0-9\._:\-')
if [ -z "$DATA" ]
then
	echo `date`: csv_set_passwords - no data >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi
REMOTE_USER=$(echo "$DATA" | cut -s -d: -f1)
REMOTE_ADDR=$(echo "$DATA" | cut -s -d: -f2)
REMOTE_MD5=$(echo "$DATA" | cut -s -d: -f3)
CSVMD5=$(echo "$DATA" | cut -s -d: -f4)

########################
#Check data
########################
if [ "$REMOTE_MD5"'check' != "$MD5SUM"'check' ]
then
	echo "$(date): csv_set_passwords - Not called by csv_set_passwords.cgi" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi
if [ -z "$REMOTE_USER" ]
then
	echo "$(date): csv_set_passwords - Blank remote user" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi
if [ -z "$REMOTE_ADDR" ]
then
	echo "$(date): csv_set_passwords - Blank remote tcpip address" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi
if [ -z "$CSVMD5" ]
then
	echo "$(date): csv_set_passwords - Blank remote tcpip address" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi
if [[ $(grep -c ^"$REMOTE_USER:" /opt/karoshi/web_controls/web_access_admin) != 1 ]]
then
	echo "$(date): csv_set_passwords - access denied to $REMOTE_USER from $REMOTE_ADDR" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi

if [ ! -f /var/www/karoshi/bulk_user_creation_enrollment_numbers/karoshi_enrollmentnumbers.csv ]
then
	echo "$(date): csv_set_passwords - No CSV file by $REMOTE_USER from $REMOTE_ADDR" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi
CSVMD52=$(md5sum /var/www/karoshi/bulk_user_creation_enrollment_numbers/karoshi_enrollmentnumbers.csv | cut -d' ' -f1)
if [ "$CSVMD5" != "$CSVMD52" ]
then
	echo "$(date): csv_set_passwords - Incorrect MD5sum for the CSV file by $REMOTE_USER from $REMOTE_ADDR" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi
echo "$(date): csv_set_passwords - by $REMOTE_USER from $REMOTE_ADDR" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
LDAPPASS=$(sed -n 1,1p /etc/ldap.secret)

#Process CSV file
CSVFILE_LINES=`cat /var/www/karoshi/bulk_user_creation_enrollment_numbers/karoshi_enrollmentnumbers.csv | wc -l`
COUNTER=1
while [ $COUNTER -le $CSVFILE_LINES ]
do
	USERNAME=`sed -n $COUNTER,$COUNTER'p' /var/www/karoshi/bulk_user_creation_enrollment_numbers/karoshi_enrollmentnumbers.csv | cut -s -d, -f1 | tr -cd 'A-Za-z0-9-.'`
	ENROLLMENTNUMBER=`sed -n $COUNTER,$COUNTER'p' /var/www/karoshi/bulk_user_creation_enrollment_numbers/karoshi_enrollmentnumbers.csv | cut -s -d, -f2 | tr -cd 'A-Za-z0-9-.'`
	echo $USERNAME - $ENROLLMENTNUMBER'<br>'
	ADD_ENROLLMENT=yes
	if [ -z "$USERNAME" ] || [ -z "$ENROLLMENTNUMBER" ]
	then
		echo Error on line $COUNTER'<br>'
		ADD_ENROLLMENT=no
	fi

	#Check that user exists
	getent passwd $USERNAME 1>/dev/null
	USEREXISTCHECK=`echo $?`
	if [ $USEREXISTCHECK != 0 ]
	then
		echo $"This user does not exist"'<br>'
		ADD_ENROLLMENT=no
	fi

	#Check that enrollment number is not already used
	source /opt/karoshi/server_network/domain_information/domain_name

	DUPLICATECOUNT=`ldapsearch -x -D "CN=Administrator,CN=Users,$LDAPBASE" -b "OU=People,$LDAPBASE" -w $LDAPPASS employeeNumber=$ENROLLMENTNUMBER | grep -c employeeNumber`

	if [ "$DUPLICATECOUNT" != 1 ]
	then
		DUPLICATEENROLLUSER=`ldapsearch -x -D "CN=Administrator,CN=Users,$LDAPBASE" -b "OU=People,$LDAPBASE" -o ldif-wrap=no -w $LDAPPASS employeeNumber=$ENROLLMENTNUMBER | grep ^cn: | sed 's/cn: //g'`
		echo `date`: "csv_set_passwords - Duplicate enrollment number used by $DUPLICATEENROLLUSER for $USERNAME with $ENROLLMENTNUMBER by $REMOTE_USER from $REMOTE_ADDR" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
		echo $"This code is already in use by" $DUPLICATEENROLLUSER'<br>'
		ADD_ENROLLMENT=no
	fi

	if [ "$ADD_ENROLLMENT" = yes ]
	then
		echo `date`: csv_set_passwords - $USERNAME : $ENROLLMENTNUMBER by $REMOTE_USER from $REMOTE_ADDR >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
		USERDN=`ldapsearch -x -D "CN=Administrator,CN=Users,$LDAPBASE" -b "OU=People,$LDAPBASE" -o ldif-wrap=no -w "$LDAPPASS" cn=$USERNAME | grep ^dn:`

		ENROLLMENTCHECK=`ldapsearch -x -D "CN=Administrator,CN=Users,$LDAPBASE" -b "OU=People,$LDAPBASE" -w "$LDAPPASS" cn=$USERNAME | grep -c employeeNumber:`

		if [ $ENROLLMENTCHECK = 0 ]
		then
			LDAPACTION=add
		else
			LDAPACTION=replace
		fi
		echo 
		#Add in employee number if it has been set

		echo -e "$USERDN
changetype: modify
$LDAPACTION: employeeNumber
employeeNumber: $ENROLLMENTNUMBER
-" | ldapmodify -x -D "CN=Administrator,CN=Users,$LDAPBASE" -w $LDAPPASS 1>/dev/null 2>>"/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"

		echo $"Enrolment number or staff code added"'<br>'
	fi
	let COUNTER=$COUNTER+1
done

echo '<br>'$"Bulk User Creation - Import Enrolment Numbers or staff codes" - $"Completed"'<br>'
