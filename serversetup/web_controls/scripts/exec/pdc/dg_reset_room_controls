#!/bin/bash
#Copyright (C) 2012 Paul Sharrad

#This file is part of Karoshi Server.
#
#Karoshi Server is free software: you can redistribute it and/or modify
#it under the terms of the GNU Affero General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#Karoshi Server is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU Affero General Public License for more details.
#
#You should have received a copy of the GNU Affero General Public License
#along with Karoshi Server.  If not, see <http://www.gnu.org/licenses/>.

#
#The Karoshi Team can be contacted at: 
#mpsharrad@karoshi.org.uk
#jsharrad@karoshi.org.uk

#
#Website: http://www.karoshi.org.uk
LOG_DATE=`date +%F`
########################
#Check md5checksum
########################
if ! test -f /opt/karoshi/web_controls/checksums/admin_checksums/dg_reset_room_controls_cgi
then
	echo `date`: dg_reset_room_controls - No admin Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
source /opt/karoshi/web_controls/checksums/admin_checksums/dg_reset_room_controls_cgi
Checksum=`sha256sum /var/www/cgi-bin_karoshi/admin/dg_reset_room_controls.cgi | cut -d' ' -f1`
[ -z "$Checksum" ] && Checksum=not_set
if [ $Checksum'check' != $dg_reset_room_controls_cgi'check' ]
then
	echo `date`: dg_reset_room_controls - Incorrect admin Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi

########################
#Get variables
########################
numArgs=$#
if [ $numArgs != 0 ]
then
	echo `date`: dg_reset_room_controls - incorrect number of arguments >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi

read DATA
DATA=`echo $DATA | tr -cd 'A-Za-z0-9\._:\-%'`
if [ -z "$DATA" ]
then
	echo `date`: dg_reset_room_controls - no data >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
REMOTE_USER=`echo "$DATA" | cut -s -d: -f1`
REMOTE_ADDR=`echo "$DATA" | cut -s -d: -f2`
RemoteCheckSum=`echo "$DATA" | cut -s -d: -f3`
ACTION=`echo "$DATA" | cut -s -d: -f4`
HOURS=`echo "$DATA" | cut -s -d: -f5`
MINUTES=`echo "$DATA" | cut -s -d: -f6`
TIME=`echo "$DATA" | cut -s -d: -f7`
########################
#Check data
########################
if [ "$RemoteCheckSum"'check' != "$Checksum"'check' ] 
then
	echo `date`: dg_reset_room_controls - Not called by dg_reset_room_controls.cgi or bulk_user_creation_create.cgi >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ -z "$REMOTE_USER" ]
then
	echo `date`: dg_reset_room_controls - Blank remote user >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ -z "$REMOTE_ADDR" ]
then
	echo `date`: dg_reset_room_controls - Blank remote tcpip address >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ -z "$ACTION" ]
then
	echo `date`: dg_reset_room_controls - Blank action by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ "$ACTION" = add ]
then
	if [ -z "$HOURS" ]
	then
		echo `date`: dg_reset_room_controls - Blank hours by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
		exit 101
	fi
	if [ -z "$MINUTES" ]
	then
		echo `date`: dg_reset_room_controls - Blank minutes by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
		xit 101
	fi
fi

if [ `grep -c ^$REMOTE_USER: /opt/karoshi/web_controls/web_access_admin` != 1 ]
then
	echo `date`: dg_reset_room_controls - access denied to $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi

if [ "$ACTION" = add ]
then
echo `date`: dg_reset_room_controls - adding room reset at $HOURS:$MINUTES by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE

	[ ! -d /opt/karoshi/server_network/internet_room_controls_reset ] && mkdir -p /opt/karoshi/server_network/internet_room_controls_reset
	touch /opt/karoshi/server_network/internet_room_controls_reset/$HOURS:$MINUTES
fi

if [ $ACTION = delete ]
then
	TIME=`echo $TIME | sed 's/%3A/:/g'`
	echo `date`: dg_reset_room_controls - deleting room reset scheduled "for" $TIME by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	[ -f /opt/karoshi/server_network/internet_room_controls_reset/"$TIME" ] && rm -f /opt/karoshi/server_network/internet_room_controls_reset/"$TIME"
fi

#Create array of times for reset
RESETARRAY=( `ls -1 /opt/karoshi/server_network/internet_room_controls_reset/` )
RESETARRAYCOUNT=${#RESETARRAY[@]}


#Schedule revised reset times
[ ! -d /opt/karoshi/server_network/cronjobs/`hostname-fqdn`/jobs ] && mkdir -p /opt/karoshi/server_network/cronjobs/`hostname-fqdn`/jobs
[ -f /opt/karoshi/server_network/cronjobs/`hostname-fqdn`/jobs/reset_room_controls.cron ] && rm -f /opt/karoshi/server_network/cronjobs/`hostname-fqdn`/jobs/reset_room_controls.cron

if [ $RESETARRAYCOUNT -gt 0 ]
then
COUNTER=0
while [ $COUNTER -lt $RESETARRAYCOUNT ]
do
	RESETTIME=${RESETARRAY[$COUNTER]}
	MINUTES=`echo $RESETTIME | cut -d: -f2`
	HOURS=`echo $RESETTIME | cut -d: -f1`
	echo $MINUTES $HOURS "*" "*" "*" /opt/karoshi/web_controls/exec/dg_reset_rooms >> /opt/karoshi/server_network/cronjobs/`hostname-fqdn`/jobs/reset_room_controls.cron
	let COUNTER=$COUNTER+1
done
fi

/opt/karoshi/serversetup/all/"useful scripts"/refreshcronjobs 1>/dev/null
exit

