#!/bin/bash
#Copyright (C) 2012 Paul Sharrad

#This file is part of Karoshi Server.
#
#Karoshi Server is free software: you can redistribute it and/or modify
#it under the terms of the GNU Affero General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#Karoshi Server is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU Affero General Public License for more details.
#
#You should have received a copy of the GNU Affero General Public License
#along with Karoshi Server.  If not, see <http://www.gnu.org/licenses/>.

#
#The Karoshi Team can be contacted at: 
#mpsharrad@karoshi.org.uk
#jsharrad@karoshi.org.uk

#
#Website: http://www.karoshi.org.uk
LOG_DATE=`date +%F`
########################
#Check md5checksum
########################
if ! test -f /opt/karoshi/web_controls/checksums/admin_checksums/dg_room_controls_cgi
then
	echo `date`: dg_room_controls - No admin Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
source /opt/karoshi/web_controls/checksums/admin_checksums/dg_room_controls2_cgi
Checksum=`sha256sum /var/www/cgi-bin_karoshi/admin/dg_room_controls2.cgi | cut -d' ' -f1`
[ -z "$Checksum" ] && Checksum=not_set
if [ $Checksum'check' != $dg_room_controls2_cgi'check' ]
then
	echo `date`: dg_room_controls - Incorrect admin Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi

if ! test -f /opt/karoshi/web_controls/checksums/tech_checksums/dg_room_controls2_cgi
then
	echo `date`: dg_room_controls - No tech Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
source /opt/karoshi/web_controls/checksums/tech_checksums/dg_room_controls2_cgi
Checksum2=`sha256sum /var/www/cgi-bin_karoshi/tech/dg_room_controls2.cgi | cut -d' ' -f1`
[ -z "$Checksum2" ] && Checksum2=not_set
if [ $Checksum2'check' != $dg_room_controls2_cgi'check' ]
then
	echo `date`: dg_room_controls - Incorrect tech Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi

if ! test -f /opt/karoshi/web_controls/checksums/staff_checksums/dg_room_controls2_cgi
then
	echo `date`: dg_room_controls - No staff MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
source /opt/karoshi/web_controls/checksums/staff_checksums/dg_room_controls2_cgi
Checksum3=`sha256sum /var/www/cgi-bin_karoshi/staff/dg_room_controls2.cgi | cut -d' ' -f1`
[ -z "$Checksum3" ] && Checksum3=not_set
if [ $Checksum3'check' != $dg_room_controls2_cgi'check' ]
then
	echo `date`: dg_room_controls - Incorrect staff MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi

########################
#Get variables
########################
numArgs=$#
if [ $numArgs != 0 ]
then
	echo `date`: dg_room_controls - incorrect number of arguments >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi

read DATA
DATA=`echo $DATA | tr -cd 'A-Za-z0-9\._:\-'`
if [ -z "$DATA" ]
then
	echo `date`: dg_room_controls - no data >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
REMOTE_USER=`echo "$DATA" | cut -s -d: -f1`
REMOTE_ADDR=`echo "$DATA" | cut -s -d: -f2`
RemoteCheckSum=`echo "$DATA" | cut -s -d: -f3`
LOCATION=`echo "$DATA" | cut -s -d: -f4`
ACTION=`echo "$DATA" | cut -s -d: -f5`
ASSET=`echo "$DATA" | cut -s -d: -f6`
########################
#Check data
########################
if [ $RemoteCheckSum'check' != $Checksum'check' ] && [ $RemoteCheckSum'check' != $Checksum2'check' ] && [ $RemoteCheckSum'check' != $Checksum3'check' ]
then
	echo `date`: dg_room_controls - Not called by dg_room_controls.cgi >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ -z "$REMOTE_USER" ]
then
	echo `date`: dg_room_controls - Blank remote user >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ -z "$REMOTE_ADDR" ]
then
	echo `date`: dg_room_controls - Blank remote tcpip address >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ -z "$LOCATION" ]
then
	echo `date`: dg_room_controls - Blank location by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ -z "$ACTION" ]
then
	echo `date`: dg_room_controls - Blank action by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ -z "$ASSET" ]
then
	echo `date`: dg_room_controls - Blank asset by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi

echo `date`: dg_room_controls - action: $ACTION asset: $ASSET location: $LOCATION by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE


PROXYSERVER=`sed -n 1,1p /opt/karoshi/server_network/proxyserver`

[ ! -d /opt/karoshi/server_network/internet_room_controls/$LOCATION ] && mkdir -p /opt/karoshi/server_network/internet_room_controls/$LOCATION
[ ! -d /opt/karoshi/server_network/internet_media_room_controls/$LOCATION ] && mkdir -p /opt/karoshi/server_network/internet_media_room_controls/$LOCATION

function reload_squid {
if [ "$PROXYSERVER" = `hostname-fqdn` ]
then
	source /opt/karoshi/serversetup/variables/distro
	/opt/karoshi/serversetup/distro/ubuntu/scripts/control_services/squid_reload 1>/dev/null 2>/dev/null
else
ssh -x -o PasswordAuthentication=no $PROXYSERVER '
	source /opt/karoshi/serversetup/variables/distro
	/opt/karoshi/serversetup/distro/ubuntu/scripts/control_services/squid_reload 1>/dev/null 2>/dev/null
'
fi
}

function activate_changes {

if [ -d /opt/karoshi/server_network/proxyservers/ ]
then
	for PROXYSERVER in `ls -1 /opt/karoshi/server_network/proxyservers`
	do
		reload_squid
	done
else 
	reload_squid
fi
}

function get_asset_info {
source /opt/karoshi/asset_register/locations/$LOCATION/$ASSET
}

function remove_firewall_rule {
if [ "$PROXYSERVER" = `hostname-fqdn` ]
then
	#Allow tcpip
	if [ ! -z $TCPIP1 ]
	then
		RULECOUNT=`iptables -nL dynamic | grep -c -w $TCPIP1`
		if [ $RULECOUNT -gt 0 ]
		then
			iptables -D dynamic -p tcp --dport 3128 -s $TCPIP1 -j DROP
		fi
	fi
	#Allow mac1
	if [ ! -z "$MAC1" ]
	then
		RULECOUNT=`iptables -nL dynamic | grep -i -c -w $MAC1`
		if [ $RULECOUNT -gt 0 ]
		then
			iptables -D dynamic -p tcp --dport 3128 -m mac --mac-source $MAC1 -j DROP
		fi
	fi
else
ssh -o PasswordAuthentication=no -o ConnectTimeout=3 $PROXYSERVER '
	#Allow tcpip
	if [ ! -z "'$TCPIP1'" ]
	then
		RULECOUNT=`iptables -nL dynamic | grep -c -w '$TCPIP1'`
		if [ $RULECOUNT -gt 0 ]
		then
			iptables -D dynamic -p tcp --dport 3128 -s '$TCPIP1' -j DROP
		fi
	fi
	#Allow mac1
	if [ ! -z "'$MAC1'" ]
	then
		RULECOUNT=`iptables -nL dynamic | grep -i -c -w '$MAC1'`
		if [ $RULECOUNT -gt 0 ]
		then
			iptables -D dynamic -p tcp --dport 3128 -m mac --mac-source '$MAC1' -j DROP
		fi
	fi
	'
fi
}


function allowasset {
get_asset_info
if [ "$ASSETTYPE" = 1 ] || [ "$ASSETTYPE" = 3 ] || [ "$ASSETTYPE" = 5 ] || [ "$ASSETTYPE" = 7 ] || [ "$ASSETTYPE" = 9 ]
then
	if [ -d /opt/karoshi/server_network/proxyservers/ ]
	then
		for PROXYSERVER in `ls -1 /opt/karoshi/server_network/proxyservers`
		do
			remove_firewall_rule
		done
	else 
		remove_firewall_rule
	fi
	[ -f /opt/karoshi/server_network/internet_room_controls/"$LOCATION"/"$ASSET" ] && rm -f /opt/karoshi/server_network/internet_room_controls/"$LOCATION"/"$ASSET"
fi
}

function remove_media_asset {
if [ "$PROXYSERVER" = `hostname-fqdn` ]
then
	if [ `grep -c $TCPIP1 /etc/squid/location_tcpip.list` -gt 0 ]
	then
		sed -i '/^'$TCPIP1'/d' /etc/squid/location_tcpip.list
	fi
else
	ssh -o PasswordAuthentication=no -o ConnectTimeout=3 $PROXYSERVER '
	if [ `grep -c '$TCPIP1' /etc/squid/location_tcpip.list` -gt 0 ]
	then
		sed -i "/^'$TCPIP1'/d" /etc/squid/location_tcpip.list
	fi
	'
fi
}


function allowmediaasset {
get_asset_info
if [ "$ASSETTYPE" = 1 ] || [ "$ASSETTYPE" = 3 ] || [ "$ASSETTYPE" = 5 ] || [ "$ASSETTYPE" = 7 ] || [ "$ASSETTYPE" = 9 ]
then
	if [ -d /opt/karoshi/server_network/proxyservers/ ]
	then
		for PROXYSERVER in `ls -1 /opt/karoshi/server_network/proxyservers`
		do
			remove_media_asset
		done
	else 
		remove_media_asset
	fi
	[ -f /opt/karoshi/server_network/internet_media_room_controls/$LOCATION/$ASSET"_"media ] && rm -f /opt/karoshi/server_network/internet_media_room_controls/"$LOCATION"/"$ASSET""_"media
fi
}

function add_firewall_rule {
if [ "$PROXYSERVER" = `hostname-fqdn` ]
then
	BAN_FLAG=no
	#Ban mac1
	if [ ! -z "$MAC1" ]
	then
	RULECOUNT=`iptables -nL dynamic | grep -i -c -w $MAC1`
		if [ $RULECOUNT = 0 ]
		then
			iptables -A dynamic -p tcp --dport 3128 -m mac --mac-source $MAC1 -j DROP
			BAN_FLAG=yes
		fi
	fi
	#Ban TCPIP if we dont have the mac address
	if [ ! -z "$TCPIP1" ] && [ $BAN_FLAG = no ]
	then
		RULECOUNT=`iptables -nL dynamic | grep -c -w $TCPIP1`
		if [ $RULECOUNT = 0 ]
		then
			iptables -A dynamic -p tcp --dport 3128 -s $TCPIP1 -j DROP
			BAN_FLAG=yes
		fi
	fi
else
ssh -o PasswordAuthentication=no -o ConnectTimeout=3 $PROXYSERVER '
	BAN_FLAG=no
	#Ban mac1
	if [ ! -z "'$MAC1'" ]
	then
		RULECOUNT=`iptables -nL dynamic | grep -i -c -w '$MAC1'`
		if [ $RULECOUNT = 0 ]
		then
			iptables -A dynamic -p tcp --dport 3128 -m mac --mac-source '$MAC1' -j DROP
			BAN_FLAG=yes
		fi
	fi
	#Ban TCPIP if we dont have the mac address
	if [ ! -z "'$TCPIP1'" ] && [ $BAN_FLAG = no ]
	then
		RULECOUNT=`iptables -nL dynamic | grep -c -w '$TCPIP1'`
		if [ $RULECOUNT = 0 ]
		then
			iptables -A dynamic -p tcp --dport 3128 -s '$TCPIP1' -j DROP
			BAN_FLAG=yes
		fi
	fi
	'
fi
}

function denyasset {
get_asset_info
if [ "$ASSETTYPE" = 1 ] || [ "$ASSETTYPE" = 3 ] || [ "$ASSETTYPE" = 5 ] || [ "$ASSETTYPE" = 7 ] || [ "$ASSETTYPE" = 9 ]
then
	if [ -d /opt/karoshi/server_network/proxyservers/ ]
	then
		for PROXYSERVER in `ls -1 /opt/karoshi/server_network/proxyservers`
		do
			add_firewall_rule
		done
	else 
		add_firewall_rule
	fi
	touch /opt/karoshi/server_network/internet_room_controls/$LOCATION/$ASSET
fi
}

function add_media_asset {
if [ $PROXYSERVER = `hostname-fqdn` ]
then
	if [ `grep -c -w ^$TCPIP1 /etc/squid/location_tcpip.list` = 0 ]
	then
		echo $TCPIP1 >> /etc/squid/location_tcpip.list
	fi
else
	ssh -o PasswordAuthentication=no -o ConnectTimeout=3 $PROXYSERVER '
	if [ `grep -c -w ^'$TCPIP1' /etc/squid/location_tcpip.list` = 0 ]
	then
		echo '$TCPIP1' >> /etc/squid/location_tcpip.list
	fi
	'
fi
}

function denymediaasset {
get_asset_info
if [ "$ASSETTYPE" = 1 ] || [ "$ASSETTYPE" = 3 ] || [ "$ASSETTYPE" = 5 ] || [ "$ASSETTYPE" = 7 ] || [ "$ASSETTYPE" = 9 ]
then
	if [ -d /opt/karoshi/server_network/proxyservers/ ]
	then
		for PROXYSERVER in `ls -1 /opt/karoshi/server_network/proxyservers`
		do
			add_media_asset
		done
	else 
		add_media_asset
	fi
	touch /opt/karoshi/server_network/internet_media_room_controls/"$LOCATION"/"$ASSET""_"media
fi
}

if [ "$ACTION" = deny ]
then
	denyasset
fi

if [ "$ACTION" = denymedia ]
then
	denymediaasset
	activate_changes
fi

if [ "$ACTION" = allow ]
then
	allowasset
fi

if [ "$ACTION" = allowmedia ]
then
	allowmediaasset
	activate_changes
fi

if [ "$ACTION" = allowall ] || [ "$ACTION" = denyall ] || [ "$ACTION" = allowallmedia ] || [ "$ACTION" = denyallmedia ]
then
	if [ -d /opt/karoshi/asset_register/locations/"$LOCATION" ]
	then
		if [ `ls -1 /opt/karoshi/asset_register/locations/"$LOCATION" | wc -l` -gt 0 ]
		then
			for ASSETS in /opt/karoshi/asset_register/locations/"$LOCATION"/*
			do
				ASSET=`basename $ASSETS`
				if [ "$ACTION" = allowall ]
				then
					allowasset
				fi
				if [ "$ACTION" = denyall ]
				then
					denyasset
				fi
				if [ "$ACTION" = allowallmedia ]
				then
					allowmediaasset
				fi
				if [ "$ACTION" = denyallmedia ]
				then
					denymediaasset
				fi
			done
		fi
	fi
fi

if [ "$ACTION" = allowallmedia ] || [ "$ACTION" = denyallmedia ]
then
	activate_changes
fi

