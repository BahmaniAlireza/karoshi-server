#!/bin/bash
#Copyright (C) 2008 Paul Sharrad

#This file is part of Karoshi Server.
#
#Karoshi Server is free software: you can redistribute it and/or modify
#it under the terms of the GNU Affero General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#Karoshi Server is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU Affero General Public License for more details.
#
#You should have received a copy of the GNU Affero General Public License
#along with Karoshi Server.  If not, see <http://www.gnu.org/licenses/>.

#
#The Karoshi Team can be contacted at: 
#mpsharrad@karoshi.org.uk
#jsharrad@karoshi.org.uk

#
#Website: http://www.karoshi.org.uk
LOG_DATE=$(date +%F)
########################
#Check md5checksum
########################
if ! test -f /opt/karoshi/web_controls/checksums/admin_checksums/dg_view_site_logs_cgi
then
	echo "$(date): dg_view_site_logs - No MD5Checksum" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi
source /opt/karoshi/web_controls/checksums/admin_checksums/dg_view_site_logs_cgi
Checksum=$(sha256sum /var/www/cgi-bin_karoshi/admin/dg_view_site_logs.cgi | cut -d' ' -f1)
[ -z "$Checksum" ] && Checksum=not_set
if [ "$Checksum"'check' != "$dg_view_site_logs_cgi"'check' ]
then
	echo "$(date): dg_view_site_logs - Incorrect MD5Checksum" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi

if ! test -f /opt/karoshi/web_controls/checksums/tech_checksums/dg_view_site_logs_cgi
then
	echo "$(date): dg_view_site_logs - No MD5Checksum" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi
source /opt/karoshi/web_controls/checksums/tech_checksums/dg_view_site_logs_cgi
Checksum2=$(sha256sum /var/www/cgi-bin_karoshi/tech/dg_view_site_logs.cgi | cut -d' ' -f1)
[ -z "$Checksum2" ] && Checksum2=not_set
if [ "$Checksum2"'check' != "$dg_view_site_logs_cgi"'check' ]
then
	echo "$(date): dg_view_site_logs - Incorrect MD5Checksum" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi
########################
#Get variables
########################
numArgs="$#"
if [ "$numArgs" != 0 ]
then
	echo "$(date): dg_view_site_logs - incorrect number of arguments" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi

read DATA
DATA=$(echo "$DATA" | tr -cd 'A-Za-z0-9\._:\-')
if [ -z "$DATA" ]
then
	echo "$(date): dg_view_site_logs - no data" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi
REMOTE_USER=$(echo "$DATA" | cut -s -d: -f1)
REMOTE_ADDR=$(echo "$DATA" | cut -s -d: -f2)
RemoteCheckSum=$(echo "$DATA" | cut -s -d: -f3)
SEARCH=$(echo "$DATA" | cut -s -d: -f4)
DAY=$(echo "$DATA" | cut -s -d: -f5)
MONTH=$(echo "$DATA" | cut -s -d: -f6)
YEAR=$(echo "$DATA" | cut -s -d: -f7)
MOBILE=$(echo "$DATA" | cut -s -d: -f8)
########################
#Check data
########################
if [ "$RemoteCheckSum"'check' != "$Checksum"'check' ] && [ "$RemoteCheckSum"'check' != "$Checksum2"'check' ]
then
	echo "$(date): dg_view_site_logs - Not called by dg_view_site_logs.cgi" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi
if [ -z "$REMOTE_USER" ]
then
	echo "$(date): dg_view_site_logs - Blank remote user" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi
if [ -z "$REMOTE_ADDR" ]
then
	echo "$(date): dg_view_site_logs - Blank remote tcpip address" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi
if [ -z "$SEARCH" ]
then
	echo "$(date): dg_view_site_logs - Blank alphabet by $REMOTE_USER from $REMOTE_ADDR" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit
fi
if [ -z "$DAY" ]
then
	echo "$(date): dg_view_site_logs - Blank day by $REMOTE_USER from $REMOTE_ADDR" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit
fi
if [ -z "$MONTH" ]
then
	echo "$(date): dg_view_site_logs - Blank month by $REMOTE_USER from $REMOTE_ADDR" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit
fi
if [ -z "$YEAR" ]
then
	echo "$(date): dg_view_site_logs - Blank year by $REMOTE_USER from $REMOTE_ADDR" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi

if [[ $(grep -c ^"$REMOTE_USER:" /opt/karoshi/web_controls/web_access_admin) != 1 ]] && [[ $(grep -c ^"$REMOTE_USER:" /opt/karoshi/web_controls/web_access_tech) != 1 ]]
then
	echo "$(date): dg_view_site_logs - access denied to $REMOTE_USER from $REMOTE_ADDR" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
exit 101
fi

echo "$(date): dg_view_site_logs - Viewing logs for $DAY-$MONTH-$YEAR - $SEARCH by $REMOTE_USER from $REMOTE_ADDR" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
#View logs

TABLECLASS=standard
MAXCOUNT=3
WIDTH1=100
WIDTH2=300
WIDTH3=120
ICON1=/images/submenus/internet/normal_logs.png
ICON2=/images/submenus/internet/banned_sites.png
ICON3=/images/submenus/internet/allowed_sites.png

if [ "$MOBILE" = yes ]
then
	MAXCOUNT=2
	TABLECLASS=mobilestandard
	WIDTH1=90
	WIDTH2=150
	WIDTH3=100
	ICON1=/images/submenus/internet/normal_logsm.png
	ICON2=/images/submenus/internet/banned_sitesm.png
	ICON3=/images/submenus/internet/allowed_sitesm.png
fi

function create_search_list {
SEARCH1=$(echo "$SEARCH" | tr '[:upper:]' '[:lower:]')
if [[ "$PROXYSERVER" = $(hostname-fqdn) ]]
then
	[ -d /opt/karoshi/logs/internetlogs/"$DAY-$MONTH-$YEAR"/sites/denied ] && ls -1 /opt/karoshi/logs/internetlogs/"$DAY-$MONTH-$YEAR"/sites/denied/ | grep "$SEARCH1" >> /opt/karoshi/.tempdata/searchlistdenied."$$"
	[ -d /opt/karoshi/logs/internetlogs/"$DAY-$MONTH-$YEAR"/sites/allowed ] && ls -1 /opt/karoshi/logs/internetlogs/"$DAY-$MONTH-$YEAR"/sites/allowed/ | grep "$SEARCH1" >>  /opt/karoshi/.tempdata/searchlistallowed."$$"

	[ -f /opt/karoshi/logs/internetlogs/"$DAY-$MONTH-$YEAR"/sites/denied.tar.gz ] && tar tzf /opt/karoshi/logs/internetlogs/"$DAY-$MONTH-$YEAR"/sites/denied.tar.gz | sed "s%^denied/%%g" | grep "$SEARCH1" >> /opt/karoshi/.tempdata/searchlistdenied."$$"
	[ -f /opt/karoshi/logs/internetlogs/"$DAY-$MONTH-$YEAR"/sites/allowed.tar.gz ] && tar tzf /opt/karoshi/logs/internetlogs/"$DAY-$MONTH-$YEAR"/sites/allowed.tar.gz | sed "s%^allowed/%%g" | grep "$SEARCH1" >> /opt/karoshi/.tempdata/searchlistallowed."$$"

else
	ssh "$PROXYSERVER" ' [ -d /opt/karoshi/logs/internetlogs/'"$DAY"'-'"$MONTH"'-'"$YEAR"'/sites/denied ] && ls -1 /opt/karoshi/logs/internetlogs/'"$DAY"'-'"$MONTH"'-'"$YEAR"'/sites/denied/ | grep '"$SEARCH1"' ' >> /opt/karoshi/.tempdata/searchlistdenied."$$"
	ssh "$PROXYSERVER" ' [ -d /opt/karoshi/logs/internetlogs/'"$DAY"'-'"$MONTH"'-'"$YEAR"'/sites/allowed ] && ls -1 /opt/karoshi/logs/internetlogs/'"$DAY"'-'"$MONTH"'-'"$YEAR"'/sites/allowed/ | grep '"$SEARCH1"' ' >> /opt/karoshi/.tempdata/searchlistallowed."$$"
	ssh "$PROXYSERVER" '[ -f /opt/karoshi/logs/internetlogs/'"$DAY"'-'"$MONTH"'-'"$YEAR"'/sites/denied.tar.gz ] && tar tzf /opt/karoshi/logs/internetlogs/'"$DAY"'-'"$MONTH"'-'"$YEAR"'/sites/denied.tar.gz | sed "s%^denied/%%g" | grep "'"$SEARCH1"'"' >> /opt/karoshi/.tempdata/searchlistdenied."$$"
	ssh "$PROXYSERVER" '[ -f /opt/karoshi/logs/internetlogs/'"$DAY"'-'"$MONTH"'-'"$YEAR"'/sites/allowed.tar.gz ] && tar tzf /opt/karoshi/logs/internetlogs/'"$DAY"'-'"$MONTH"'-'"$YEAR"'/sites/allowed.tar.gz | sed "s%^allowed/%%g" | grep "'"$SEARCH1"'"' >> /opt/karoshi/.tempdata/searchlistallowed."$$"

fi
}

function viewsearchlist {

#Create table
echo '<table id="myTable" class="tablesorter"><thead><tr><th style="width:'"$WIDTH1"'px"><b>'$"Status"'</b></th><th style="width:'"$WIDTH2"'px">'$"Website"'</th><th style="width:'"$WIDTH3"'px">'$"View Logs"'</th></tr></thead><tbody>'

for WEBSITE in $(sort -u < /opt/karoshi/.tempdata/searchlistdenied."$$")
do
	WEBSITE2=$(basename "$WEBSITE" | sed "s/.tar.gz$//g")

	echo '<tr><td>

		<button class="info" name="_WEBSITE_" value="'"$WEBSITE2"'">
				<img src="'$ICON2'" alt="'$"Denied"'">
				<span>'$"Denied"'</span><br>
			</button>

		</td><td>'"$WEBSITE2"'</td><td>

			<button class="info" name="_WEBSITE_" value="'"$WEBSITE2"'">
				<img src="'$ICON1'" alt="'$"View Logs"'">
				<span>'$"View the logs for this website."'</span><br>
			</button>

		</td></tr>'
done

for WEBSITE in $(sort -u < /opt/karoshi/.tempdata/searchlistallowed."$$")
do
	WEBSITE2=$(basename "$WEBSITE" | sed "s/.tar.gz$//g")

	echo '<tr><td>

			<button class="info" name="_WEBSITE_" value="'"$WEBSITE2"'">
				<img src="'$ICON3'" alt="'$"Allowed"'">
				<span>'$"Allowed"'</span><br>
			</button>

		</td><td>'"$WEBSITE2"'</td><td>

			<button class="info" name="_WEBSITE_" value="'"$WEBSITE2"'">
				<img src="'$ICON1'" alt="'$"View Logs"'">
				<span>'$"View the logs for this website."'</span><br>
			</button>

		</td></tr>'
done
echo '</tbody></table>'

[ -f /opt/karoshi/.tempdata/searchlistdenied."$$" ] && rm -f /opt/karoshi/.tempdata/searchlistdenied."$$"
[ -f /opt/karoshi/.tempdata/searchlistallowed."$$" ] && rm -f /opt/karoshi/.tempdata/searchlistallowed."$$"
}

#Get squid server name
[ ! -f /opt/karoshi/server_network/proxyserver ] && exit 101

if [ -d /opt/karoshi/server_network/proxyservers/ ]
then
	for PROXYSERVER in $(ls -1 /opt/karoshi/server_network/proxyservers)
	do
		create_search_list
	done
	viewsearchlist
else 
	PROXYSERVER=$(sed -n 1,1p /opt/karoshi/server_network/proxyserver)
	create_search_list
	viewsearchlist
fi
exit


