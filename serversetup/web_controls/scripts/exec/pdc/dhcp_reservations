#!/bin/bash
#Copyright (C) 2014 Paul Sharrad

#This file is part of Karoshi Server.
#
#Karoshi Server is free software: you can redistribute it and/or modify
#it under the terms of the GNU Affero General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#Karoshi Server is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU Affero General Public License for more details.
#
#You should have received a copy of the GNU Affero General Public License
#along with Karoshi Server.  If not, see <http://www.gnu.org/licenses/>.

#
#The Karoshi Team can be contacted at: 
#mpsharrad@karoshi.org.uk
#jsharrad@karoshi.org.uk

#
#Website: http://www.karoshi.org.uk
LOG_DATE=`date +%F`
FAILED_SERVER=no
########################
#Check md5checksum
########################
if ! test -f /opt/karoshi/web_controls/checksums/admin_checksums/dhcp_reservations_cgi
then
	echo `date`: dhcp_reservations - No admin MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
source /opt/karoshi/web_controls/checksums/admin_checksums/dhcp_reservations_cgi
MD5SUM=`md5sum /var/www/cgi-bin_karoshi/admin/dhcp_reservations.cgi | cut -d' ' -f1`
[ -z "$MD5SUM" ] && MD5SUM=not_set
if [ $MD5SUM'check' != $dhcp_reservations_cgi'check' ]
	then
	echo `date`: dhcp_reservations - Incorrect admin MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi

########################
#Get variables
########################
numArgs=$#
if [ $numArgs != 0 ]
then
	echo `date`: dhcp_reservations - incorrect number of arguments >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi

read DATA
DATA=`echo "$DATA" | tr -cd 'A-Za-z0-9\._:\-%+'`
if [ -z "$DATA" ]
then
	echo `date`: dhcp_reservations - no data >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
REMOTE_USER=`echo "$DATA" | cut -s -d: -f1`
REMOTE_ADDR=`echo "$DATA" | cut -s -d: -f2`
REMOTE_MD5=`echo "$DATA" | cut -s -d: -f3`
ACTION=`echo "$DATA" | cut -s -d: -f4`
CLIENTHOSTNAME=`echo "$DATA" | cut -s -d: -f5 | sed 's/+/-/g' | tr -cd 'A-Za-z0-9\._\-'`
MACADDRESS=`echo "$DATA" | cut -s -d: -f6 | sed 's/%3A/:/g'`
TCPIPADDRESS=`echo "$DATA" | cut -s -d: -f7`

########################
#Check data
########################
if [ $REMOTE_MD5'check' != $MD5SUM'check' ] 
then
	echo `date`: dhcp_reservations - Not called by dhcp_reservations.cgi or bulk_user_creation_create.cgi >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ -z "$REMOTE_USER" ]
then
	echo `date`: dhcp_reservations - Blank remote user >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ -z "$REMOTE_ADDR" ]
then
	echo `date`: dhcp_reservations - Blank remote tcpip address >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ -z "$ACTION" ]
then
	echo `date`: dhcp_reservations - Blank action by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ $ACTION != reallydelete ] && [ $ACTION != restartdhcp ]
then
	if [ -z "$CLIENTHOSTNAME" ]
	then
		echo `date`: dhcp_reservations - Blank "client hostname" by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
		exit 101
	fi
fi
if [ "$ACTION" = reallyadd ] || [ "$ACTION" = reallyedit ] || [ "$ACTION" = import ]
then
	if [ -z "$MACADDRESS" ]
	then
		echo `date`: dhcp_reservations - Blank mac address by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
		exit 101
	fi
	if [ -z "$TCPIPADDRESS" ]
	then
		echo `date`: dhcp_reservations - Blank tcpip  address by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
		exit 101
	fi
fi

source /opt/karoshi/server_network/domain_information/domain_name


function add_dns {
#Add dns
LDAPPASS=`sed -n 1,1p /etc/ldap.secret`
echo `date`: dhcp_reservations - checking "if" "$CLIENTHOSTNAME" is "in" the dns records by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
samba-tool dns query 127.0.0.1 $REALM $CLIENTHOSTNAME A --username=Administrator --password=$LDAPPASS 1>> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE 2>> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
if [ $? != 0 ]
then
	echo `date`: dhcp_reservations - adding "$CLIENTHOSTNAME" $TCPIPNUMBER to the dns records by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	samba-tool dns add 127.0.0.1 $REALM $CLIENTHOSTNAME A $TCPIPADDRESS --username=Administrator --password=$LDAPPASS 1>> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE 2>> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
fi
}

function delete_dns {
LDAPPASS=`sed -n 1,1p /etc/ldap.secret`
echo `date`: dhcp_reservations - checking "if" $CLIENTHOSTNAME is "in" the dns records by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
samba-tool dns query 127.0.0.1 $REALM $CLIENTHOSTNAME A --username=Administrator --password=$LDAPPASS 1>> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE 2>> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
if [ $? = 0 ]
then
	echo `date`: dhcp_reservations - deleting $CLIENTHOSTNAME $TCPIPADDRESS  by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	samba-tool dns delete 127.0.0.1 $REALM $CLIENTHOSTNAME A $TCPIPADDRESS --username=Administrator --password=$LDAPPASS 1>> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE 2>> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
fi
}


function restartdhcp {
echo "$REMOTE_USER:$REMOTE_ADDR:" | /opt/karoshi/web_controls/exec/dhcp_restart
}

function updatedhcpconf {

#Create config file

[ -f /opt/karoshi/server_network/dhcp/reservation_list ] && rm -f /opt/karoshi/server_network/dhcp/reservation_list
touch /opt/karoshi/server_network/dhcp/reservation_list
if [ `ls -1 /opt/karoshi/server_network/dhcp/reservations | wc -l` -gt 0 ]
then
	for RESERVATIONS in /opt/karoshi/server_network/dhcp/reservations/*
	do
		source $RESERVATIONS
		RESERVATION=`basename $RESERVATIONS`
		echo -e '\nhost '$RESERVATION' {\n\thardware ethernet '$MACADDRESS';\n\tfixed-address '$TCPIPADDRESS';\n}' >> /opt/karoshi/server_network/dhcp/reservation_list
	done
	echo >> /opt/karoshi/server_network/dhcp/reservation_list
fi


#Cat reservation list  into dhcpd.conf
cat /opt/karoshi/server_network/dhcp/reservation_list > /etc/dhcp/dhcpd_reservations.conf

#Sync config file to failover server
if [ -d /opt/karoshi/server_network/dhcp_servers ]
then
	for DHCPSERVER in `ls -1 /opt/karoshi/server_network/dhcp_servers`
	do
		if [ "$DHCPSERVER" != `hostname-fqdn` ]
		then
			scp /etc/dhcp/dhcpd_reservations.conf root@$DHCPSERVER:/etc/dhcp/
		fi
	done
fi
#Create flag file to alert that the dhcp service needs restarting
touch /opt/karoshi/server_network/dhcp/restart_required
}

if [ "$ACTION" = restartdhcp ]
then
	restartdhcp
fi

if [ "$ACTION" = reallyadd ] || [ "$ACTION" = reallyedit ]
then
	#Add dhcp reservation and restart dhcp
	echo `date`: dhcp_reservations - adding $CLIENTHOSTNAME - mac address: $MACADDRESS tpcip: $TCPIPADDRESS by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	[ ! -d /opt/karoshi/server_network/dhcp/reservations ] && mkdir -p /opt/karoshi/server_network/dhcp/reservations
	echo -e "MACADDRESS=$MACADDRESS\nTCPIPADDRESS=$TCPIPADDRESS" > /opt/karoshi/server_network/dhcp/reservations/$CLIENTHOSTNAME
	add_dns
	updatedhcpconf
fi

if [ "$ACTION" = import ]
then
	#Add dhcp reservation
	echo `date`: dhcp_reservations - adding $CLIENTHOSTNAME - mac address: $MACADDRESS tpcip: $TCPIPADDRESS by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	[ ! -d /opt/karoshi/server_network/dhcp/reservations ] && mkdir -p /opt/karoshi/server_network/dhcp/reservations
	echo -e "MACADDRESS=$MACADDRESS\nTCPIPADDRESS=$TCPIPADDRESS" > /opt/karoshi/server_network/dhcp/reservations/"$CLIENTHOSTNAME"
	add_dns
fi

if [ "$ACTION" = activateimport ]
then
	#Add dhcp reservation and restart dhcp
	echo `date`: dhcp_reservations - activating import by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	updatedhcpconf
fi

if [ "$ACTION" = delete ]
then
	if [ -f /opt/karoshi/server_network/dhcp/reservations/"$CLIENTHOSTNAME" ]
	then
		echo `date`: dhcp_reservations - deleting $CLIENTHOSTNAME by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
		[ ! -d /opt/karoshi/server_network/dhcp/reservations_delete ] && mkdir -p /opt/karoshi/server_network/dhcp/reservations_delete
		cp -f /opt/karoshi/server_network/dhcp/reservations/"$CLIENTHOSTNAME" /opt/karoshi/server_network/dhcp/reservations_delete/"$CLIENTHOSTNAME"
	fi
fi

if [ "$ACTION" = deleteall ]
then
	[ ! -d /opt/karoshi/server_network/dhcp/reservations_delete ] && mkdir -p /opt/karoshi/server_network/dhcp/reservations_delete
	for CLIENTHOSTNAME in $(ls -1 /opt/karoshi/server_network/dhcp/reservations/)
	do
		echo `date`: dhcp_reservations - deleting $CLIENTHOSTNAME by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
		cp -f /opt/karoshi/server_network/dhcp/reservations/"$CLIENTHOSTNAME" /opt/karoshi/server_network/dhcp/reservations_delete/"$CLIENTHOSTNAME"
	done
fi

if [ "$ACTION" = clearall ]
then
	echo `date`: dhcp_reservations - clearing all reservations by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	rm -f -R /opt/karoshi/server_network/dhcp/reservations_delete
fi

if [ "$ACTION" = canceldelete ]
then
	echo `date`: dhcp_reservations - canceling deleting $CLIENTHOSTNAME by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	if [ -f /opt/karoshi/server_network/dhcp/reservations_delete/"$CLIENTHOSTNAME" ]
	then
		rm -f /opt/karoshi/server_network/dhcp/reservations_delete/"$CLIENTHOSTNAME"
	fi
	#Delete folder if it is empty so that delete reservations button no longer shows
	if [ $(ls -1 /opt/karoshi/server_network/dhcp/reservations_delete | wc -l) = 0 ]
	then
		rm -f -R /opt/karoshi/server_network/dhcp/reservations_delete
	fi
fi

if [ "$ACTION" = reallydelete ]
then
	[ ! -d /opt/karoshi/server_network/dhcp/reservations_delete ] && mkdir -p /opt/karoshi/server_network/dhcp/reservations_delete
	for CLIENTHOSTNAME in $(ls -1 /opt/karoshi/server_network/dhcp/reservations_delete/)
	do
		echo `date`: dhcp_reservations - really deleting $CLIENTHOSTNAME by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
		#Get tcpip address
		source /opt/karoshi/server_network/dhcp/reservations/"$CLIENTHOSTNAME"
		rm -f -R /opt/karoshi/server_network/dhcp/reservations_delete
		delete_dns
		rm -f /opt/karoshi/server_network/dhcp/reservations_delete/"$CLIENTHOSTNAME"
		rm -f /opt/karoshi/server_network/dhcp/reservations/"$CLIENTHOSTNAME"
	done
	updatedhcpconf
	restartdhcp
fi

if [ "$ACTION" = activatechanges ]
then
	updatedhcpconf
fi

exit





