#!/bin/bash
#Copyright (C) 2012 Paul Sharrad

#This file is part of Karoshi Server.
#
#Karoshi Server is free software: you can redistribute it and/or modify
#it under the terms of the GNU Affero General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#Karoshi Server is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU Affero General Public License for more details.
#
#You should have received a copy of the GNU Affero General Public License
#along with Karoshi Server.  If not, see <http://www.gnu.org/licenses/>.

#
#The Karoshi Team can be contacted at: 
#mpsharrad@karoshi.org.uk
#jsharrad@karoshi.org.uk

#
#Website: http://www.karoshi.org.uk
LOG_DATE=`date +%F`
[ $LOG_DATE'null' = null ] && exit

########################
#Check md5checksum
########################
if ! test -f /opt/karoshi/web_controls/checksums/admin_checksums/disaster_recovery_cgi
then
echo `date`: disaster_recovery - No MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
source /opt/karoshi/web_controls/checksums/admin_checksums/disaster_recovery_cgi
MD5SUM=`md5sum /var/www/cgi-bin_karoshi/admin/disaster_recovery.cgi | cut -d' ' -f1`
[ $MD5SUM'null' = null ] && MD5SUM=not_set
if [ $MD5SUM'check' != $disaster_recovery_cgi'check' ]
then
echo `date`: disaster_recovery - Incorrect MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
########################
#Get variables
########################
numArgs=$#
if [ $numArgs != 0 ]
then
echo `date`: disaster_recovery - incorrect number of arguments >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
read DATA
DATA=`echo $DATA | tr -cd 'A-Za-z0-9\._:%\n-+'`
if [ $DATA'null' = null ]
then
echo `date`: disaster_recovery - no data >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
REMOTE_USER=`echo "$DATA" | cut -d: -f1`
REMOTE_ADDR=`echo "$DATA" | cut -d: -f2`
REMOTE_MD5=`echo "$DATA" | cut -d: -f3`
SERVERNAME=`echo "$DATA" | cut -s -d: -f4`
SERVERTYPE=`echo "$DATA" | cut -s -d: -f5`
SERVERMASTER=`echo "$DATA" | cut -s -d: -f6`

########################
#Check data
########################
if [ $REMOTE_MD5'check' != $MD5SUM'check' ]
then
echo `date`: disaster_recovery - Not called by disaster_recovery.cgi >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
if [ $REMOTE_USER'null' = null ]
then
echo `date`: disaster_recovery - Blank remote user >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
if [ $REMOTE_ADDR'null' = null ]
then
echo `date`: disaster_recovery - Blank remote tcpip address >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi

if [ $SERVERNAME'null' = null ]
then
echo `date`: disaster_recovery - Blank server by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
if [ $SERVERTYPE'null' = null ]
then
echo `date`: disaster_recovery - Blank servertype by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
if [ $SERVERTYPE = federatedslave ]
then
if [ $SERVERMASTER'null' = null ]
then
echo `date`: disaster_recovery - Blank servermaster by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
fi
if [ `grep -c ^$REMOTE_USER: /opt/karoshi/web_controls/web_access_admin` != 1 ]
then
echo `date`: disaster_recovery - access denied to $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi

############################
#Language
############################

[ -f /opt/karoshi/web_controls/user_prefs/$REMOTE_USER/language_choice ] && source /opt/karoshi/web_controls/user_prefs/$REMOTE_USER/language_choice
TEXTDOMAIN=karoshi-server


TABLECLASS=standard
[ $MOBILE = yes ] && TABLECLASS=mobilestandard


#Check that a backup server has been assigned for the selected server.
if [ ! -f /opt/karoshi/server_network/backup_servers/backup_settings/$SERVERNAME/backupserver ]
then
echo $SERVERNAME - $"A backup server has not been assigned for this server."
exit
fi

#Check backup server and generate list of options for the restore.

BACKUPSERVER=`sed -n 1,1p /opt/karoshi/server_network/backup_servers/backup_settings/$SERVERNAME/backupserver`

RESTOREOPTIONS=$(ssh -x -o PasswordAuthentication=no -o ConnectTimeout=3 $"Back"UPSERVER '

RESTOREOPTIONS=""

#server_network?

#inbox
if [ -d /home/backups/'$SERVERNAME'/mail/current/mail ]
then
if [ `ls -1 /home/backups/'$SERVERNAME'/mail/current/mail | wc -l` -gt 1 ]
then
RESTOREOPTIONS=`echo $RESTOREOPTIONS,inbox`
fi
fi

#ldap
[ -f /home/backups/'$SERVERNAME'/karoshi/current/karoshi/server_network/ldap/master.ldif ] && RESTOREOPTIONS=`echo $RESTOREOPTIONS,ldap` 
#Profiles
[ -d /home/backups/'$SERVERNAME'/applications/current/applications ] && RESTOREOPTIONS=`echo $RESTOREOPTIONS,profiles`
#Netlogon
[ -d /home/backups/'$SERVERNAME'/netlogon/current/netlogon ] && RESTOREOPTIONS=`echo $RESTOREOPTIONS,netlogon`
#Home areas
SHOWhomefolders=no
[ -d /home/backups/'$SERVERNAME'/nonteachingstaff/current/nonteachingstaff ] && SHOWhomefolders=yes
[ -d /home/backups/'$SERVERNAME'/officestaff/current/officestaff ] && SHOWhomefolders=yes
[ -d /home/backups/'$SERVERNAME'/staff/current/staff ] && SHOWhomefolders=yes
[ -d /home/backups/'$SERVERNAME'/studentstaff/current/studentstaff ] && SHOWhomefolders=yes
[ -d /home/backups/'$SERVERNAME'/techstaff/current/techstaff ] && SHOWhomefolders=yes
[ -d /home/backups/'$SERVERNAME'/itadminstaff/current/itadminstaff ] && SHOWhomefolders=yes

COUNTER=2002
ENDYEAR=2100

while [ $COUNTER -lt $ENDYEAR ]
do
[ -d /home/backups/'$SERVERNAME'/yr$COUNTER/current/yr$COUNTER ] && SHOWhomefolders=yes
let COUNTER=$COUNTER+1
done

[ $SHOWhomefolders = yes ] && RESTOREOPTIONS=`echo $RESTOREOPTIONS,homefolders`

[ -d /home/backups/'$SERVERNAME'/itadminshare/current/itadminshare ] && RESTOREOPTIONS=`echo $RESTOREOPTIONS,itadminshare`
[ -d /home/backups/'$SERVERNAME'/subjects/current/subjects ] && RESTOREOPTIONS=`echo $RESTOREOPTIONS,subjects`
[ -d /home/backups/'$SERVERNAME'/staffshare/current/staffshare ] && RESTOREOPTIONS=`echo $RESTOREOPTIONS,staffshare`
[ -d /home/backups/'$SERVERNAME'/staffshare/current/officeshare ] && RESTOREOPTIONS=`echo $RESTOREOPTIONS,officeshare`

#Cups
if [ -f /home/backups/'$SERVERNAME'/etc/current/etc/cups/printers.conf ]
then
RESTOREOPTIONS=`echo $RESTOREOPTIONS,cups`
fi

#mysql
if [ -d /home/backups/'$SERVERNAME'/mysql/current/mysql ]
then
if [ `ls -l /home/backups/'$SERVERNAME'/mysql/current/mysql | grep ^d | wc -l` -gt 1 ]
then
RESTOREOPTIONS=`echo $RESTOREOPTIONS,mysql`
fi
fi

#html
if [ -d /home/backups/'$SERVERNAME'/html/current/html ]
then
if [ `ls -l /home/backups/'$SERVERNAME'/html/current/html | grep ^d | wc -l` -gt 1 ]
then
RESTOREOPTIONS=`echo $RESTOREOPTIONS,html`
fi
fi

echo $RESTOREOPTIONS
')

#Show recovery options

echo '
<table class="standard" style="text-align: left;" border="0" cellpadding="2" cellspacing="2">
<tbody>
<tr><td style="width: 180px;"><b>'$"Recovery Option"'</b></td><td><b>'$"Select"'</b></td></tr>'

#inbox
if [ `echo $RESTOREOPTIONS | grep -c inbox` -gt 0 ]
then
echo '<tr><td>'$"E-Mail - User Inboxes"'</td><td><input name="_RESTOREOPTIONS_" value="inbox" type="checkbox"></td></tr>'
fi
#ldap
if [ `echo $RESTOREOPTIONS | grep -c -w ldap` -gt 0 ]
then
echo '<tr><td>'$"Ldap - User and Machine Data"'</td><td><input name="_RESTOREOPTIONS_" value="ldap" type="checkbox"></td></tr>'
fi
#Home folders
if [ `echo $RESTOREOPTIONS | grep -c -w homefolders` -gt 0 ]
then
echo '<tr><td>'$"Home Folders"'</td><td><input name="_RESTOREOPTIONS_" value="homefolders" type="checkbox"></td></tr>'
fi

#Subjects
if [ `echo $RESTOREOPTIONS | grep -c -w subjects` -gt 0 ]
then
echo '<tr><td>'$"Subjects Share"'</td><td><input name="_RESTOREOPTIONS_" value="subjects" type="checkbox"></td></tr>'
fi
#Staffshare
if [ `echo $RESTOREOPTIONS | grep -c -w staffshare` -gt 0 ]
then
echo '<tr><td>'$"Staff Share"'</td><td><input name="_RESTOREOPTIONS_" value="staffshare" type="checkbox"></td></tr>'
fi
#Officeshare
if [ `echo $RESTOREOPTIONS | grep -c -w officeshare` -gt 0 ]
then
echo '<tr><td>'$"Office Share"'</td><td><input name="_RESTOREOPTIONS_" value="officeshare" type="checkbox"></td></tr>'
fi
#itadminshare
if [ `echo $RESTOREOPTIONS | grep -c -w itadminshare` -gt 0 ]
then
echo '<tr><td>'$"Itadmin Share"'</td><td><input name="_RESTOREOPTIONS_" value="itadminshare" type="checkbox"></td></tr>'
fi
#Cups
if [ `echo $RESTOREOPTIONS | grep -c -w cups` -gt 0 ]
then
echo '<tr><td>'$"Cups Printing"'</td><td><input name="_RESTOREOPTIONS_" value="cups" type="checkbox"></td></tr>'
fi
#html
if [ `echo $RESTOREOPTIONS | grep -c -w html` -gt 0 ]
then
echo '<tr><td>'$"Web Sites"'</td><td><input name="_RESTOREOPTIONS_" value="html" type="checkbox"></td></tr>'
fi
#mysql
if [ `echo $RESTOREOPTIONS | grep -c -w mysql` -gt 0 ]
then
echo '<tr><td>'$"Mysql Databases"'</td><td><input name="_RESTOREOPTIONS_" value="mysql" type="checkbox"></td></tr>'
fi
#Profiles
if [ `echo $RESTOREOPTIONS | grep -c -w profiles` -gt 0 ]
then
echo '<tr><td>'$"Windows Profiles"'</td><td><input name="_RESTOREOPTIONS_" value="profiles" type="checkbox"></td></tr>'
fi
#Netlogon
if [ `echo $RESTOREOPTIONS | grep -c -w netlogon` -gt 0 ]
then
echo '<tr><td>'$"Netlogon Folder"'</td><td><input name="_RESTOREOPTIONS_" value="netlogon" type="checkbox"></td></tr>'
fi
echo '</tbody></table>'

