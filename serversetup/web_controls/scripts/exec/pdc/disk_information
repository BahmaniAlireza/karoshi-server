#!/bin/bash
#Copyright (C) 2007 Paul Sharrad

#This file is part of Karoshi Server.
#
#Karoshi Server is free software: you can redistribute it and/or modify
#it under the terms of the GNU Affero General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#Karoshi Server is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU Affero General Public License for more details.
#
#You should have received a copy of the GNU Affero General Public License
#along with Karoshi Server.  If not, see <http://www.gnu.org/licenses/>.

#
#The Karoshi Team can be contacted at: 
#mpsharrad@karoshi.org.uk
#jsharrad@karoshi.org.uk

#
#Website: http://www.karoshi.org.uk
LOG_DATE=$(date +%F)
[ -z "$LOG_DATE" ] && exit

########################
#Check md5checksum
########################
if ! test -f /opt/karoshi/web_controls/checksums/admin_checksums/disk_information_cgi
then
	echo "$(date): disk_information - No MD5Checksum" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi
source /opt/karoshi/web_controls/checksums/admin_checksums/disk_information_cgi
MD5SUM=$(md5sum /var/www/cgi-bin_karoshi/admin/disk_information.cgi | cut -d' ' -f1)
[ -z "$MD5SUM" ] && MD5SUM=not_set1
if [ "$MD5SUM"'check' != "$disk_information_cgi"'check' ]
then
	echo "$(date): disk_information - Incorrect MD5Checksum" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi
########################
#Get variables
########################
numArgs=$#
if [ "$numArgs" != 1 ]
then
	echo "$(date): disk_information - incorrect number of arguments" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi
REMOTE_USER=$(echo $* | tr -cd 'A-Za-z0-9\._:\-' | cut -s -d: -f1)
REMOTE_ADDR=$(echo $* | tr -cd 'A-Za-z0-9\._:\-' | cut -s -d: -f2)
REMOTE_MD5=$(echo $* | tr -cd 'A-Za-z0-9\._:\-' | cut -s -d: -f3)
SERVER=$(echo $* | tr -cd 'A-Za-z0-9\._:\-' | cut -s -d: -f4)
SERVERTYPE=$(echo $* | tr -cd 'A-Za-z0-9\._:\-' | cut -s -d: -f5)
SERVERMASTER=$(echo $* | tr -cd 'A-Za-z0-9\._:\-' | cut -s -d: -f6)
MOBILE=$(echo $* | tr -cd 'A-Za-z0-9\._:\-' | cut -s -d: -f7)
########################
#Check data
########################
if [ $REMOTE_MD5'check' != $MD5SUM'check' ]
then
	echo "$(date): disk_information - Not called by disk_information.cgi" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi
if [ -z "$REMOTE_USER" ]
then
	echo "$(date): disk_information - Blank remote user" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi
if [ -z "$REMOTE_ADDR" ]
then
	echo "$(date): disk_information - Blank remote tcpip address" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi

if [ $(grep -c ^"$REMOTE_USER": /opt/karoshi/web_controls/web_access_admin) != 1 ]
then
	echo "$(date): disk_information - access denied to $REMOTE_USER from $REMOTE_ADDR" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi

if [ -z "$SERVER" ]
then
	echo "$(date): disk_information - Blank server by $REMOTE_USER from $REMOTE_ADDR" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi

if [ -z "$SERVERTYPE" ]
then
	echo "$(date): disk_information - Blank servertype by $REMOTE_USER from $REMOTE_ADDR" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi

if [ "$SERVERTYPE" != network ] && [ "$SERVERTYPE" != federated ] && [ "$SERVERTYPE" != federatedslave ]
then
	echo "$(date): disk_information - Incorrect servertype by $REMOTE_USER from $REMOTE_ADDR" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi

if [ "$SERVERTYPE" = federatedslave ]
then
	if [ -z "$SERVERMASTER" ]
	then
		echo "$(date): disk_information - Blank servermaster by $REMOTE_USER from $REMOTE_ADDR" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
		exit 101
	fi
fi

############################
#Language
############################

STYLESHEET=defaultstyle.css
[ -f /opt/karoshi/web_controls/user_prefs/"$REMOTE_USER" ] && source /opt/karoshi/web_controls/user_prefs/"$REMOTE_USER"
export TEXTDOMAIN=karoshi-server


KAROSHI_SERVER=$SERVER

if [ "$MOBILE" = yes ]
then
	MULTI=1
	WIDTH1=100
	WIDTH2=40
	WIDTH3=100
	WIDTH4=250
	TABLECLASS=tablesorter
else
	MULTI=5
	WIDTH1=180
	WIDTH2=86
	WIDTH3=180
	WIDTH4=500
	TABLECLASS=tablesorter
fi
echo "$(date): disk_information - checking $INFO for $KAROSHI_SERVER by $REMOTE_USER from $REMOTE_ADDR" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"

#Clear any smart warning messages.
if [ -f /opt/karoshi/web_controls/warnings/messages/smart_warning_"$KAROSHI_SERVER" ]
then
	/opt/karoshi/serversetup/web_controls/scripts/web_management_warn delete smart_warning_"$KAROSHI_SERVER"
fi

if [[ "$KAROSHI_SERVER" = $(hostname-fqdn) ]]
then
	#Show free space

	#Get partition info
	DISKINFO=$(df -h -l | sed 1d | sed "s/ * / /g" | sort -b -k5n,5)
	MOUNTCOUNT=$(echo -e "$DISKINFO" | wc -l)
	echo "<table class=\"$TABLECLASS\" style=\"text-align: left;\"><tbody>
	<tr><td style=\"width: $WIDTH1"px";\"><b>Mount point</b></td>"
	[ "$MOBILE" = no ] && echo '<td style="width: '"$WIDTH2"'px;"><b>File System</b></td><td><b>Size</b></td><td><b>Used</b></td>'
	echo "<td><b>Avail</b></td><td><b>%Use</b></td><td></td></tr>"
	COUNTER=1
	while [ "$COUNTER" -le "$MOUNTCOUNT" ]
	do
		MOUNTDATA=$(echo -e "$DISKINFO" | sed -n $COUNTER,$COUNTER"p")
		FILESYSTEM=$(echo $MOUNTDATA | cut -d" " -f1)
		SIZE=$(echo $MOUNTDATA | cut -d" " -f2)
		USED=$(echo $MOUNTDATA | cut -d" " -f3)
		AVAIL=$(echo $MOUNTDATA | cut -d" " -f4)
		USE=$(echo $MOUNTDATA | cut -d" " -f5)
		USE2=$(echo $USE | sed "s/%//g")
		MOUNTPOINT=$(echo $MOUNTDATA | cut -d" " -f6)
		if [ "$MOBILE" = no ]
		then
			MOUNTPOINT="${MOUNTPOINT:0:50}"
		else
			MOUNTPOINT="${MOUNTPOINT:0:15}"
		fi
		if [ "$USE2" -gt 90 ]
		then
			ALERTCOL=red
			BARCOL=red
		elif [ "$USE2" -gt 70 ]
		then
			ALERTCOL=orange
			BARCOL=orange
		else
			ALERTCOL=green
			BARCOL=green
		fi
		let USE2="$USE2"*"$MULTI"
		echo "<tr><td style=\"color:$ALERTCOL\">$MOUNTPOINT</td>"
		[ $MOBILE = no ] && echo "<td style=\"color:$ALERTCOL\">$FILESYSTEM</td><td style=\"color:$ALERTCOL\">$SIZE</td><td style=\"color:$ALERTCOL\">$USED</td>"
		echo "<td style=\"color:$ALERTCOL\">$AVAIL</td><td style=\"color:$ALERTCOL\">$USE</td><td class=\"BarFull\"><img src=\"/images/disk_usage/$BARCOL.png\" height=\"12\" alt=\"$USE2\" width=\"$USE2\"></td></tr>"

		let COUNTER="$COUNTER"+1
	done
	echo "</tbody></table><br>"

	#Get list of disks
	DISKLIST=$(fdisk -l 2>/dev/null | grep ^"Disk /dev/s" | cut -d: -f1 | sed "s/^Disk //g")
	for DISK in $DISKLIST
	do
	echo "<img src=\"/images/submenus/system/disk_drive.png\" alt=\"Disk Drive\"> <b>"$DISK"</b><br>"

	#Enable smart
	smartctl --smart=on "$DISK" 1>/dev/null 2>>"/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"

	#Get Disk information
	UUID=
	SMARTINFO=$(smartctl -i $DISK | tr -cd "A-Za-z0-9:=,/\n ")
	MODELFAMILY=$(echo -e "$SMARTINFO" | grep ^Model | cut -d: -f2 | sed "s/^ * //g")
	DEVICEMODEL=$(echo -e "$SMARTINFO" | grep ^Device | cut -d: -f2 | sed "s/^ * //g")
	SERIALNO=$(echo -e "$SMARTINFO" | grep ^Serial | cut -d: -f2 | sed "s/^ * //g")
	FIRMWARE=$(echo -e "$SMARTINFO" | grep ^Firmware | cut -d: -f2 | sed "s/^ * //g")
	CAPACITYBYTES=$(echo -e "$SMARTINFO" | grep ^User | cut -d: -f2 | sed "s/^ * //g" | cut -d" " -f1 | tr -cd "0-9")
	SMARTENABLED=$(echo -e "$SMARTINFO" | grep ^SMART | cut -d: -f2 | sed "s/^ * //g")
	SMARTSTATUS=$(smartctl -H $DISK | sed 1,4d)
	EXTRASMARTINFO=$(smartctl -a $DISK)
	SSD_LIFE_LEFT=$(echo -e "$EXTRASMARTINFO" | grep SSD_Life_Left | sed "s/ * / /g" | cut -d" " -f4)
	DISKTEMP=$(echo -e "$EXTRASMARTINFO" | grep Temperature_Celsius | sed "s/ * / /g" | cut -d" " -f10)
	PENDINGSECTORS=$(echo -e "$EXTRASMARTINFO" | grep Current_Pending_Sector | sed "s/ * / /g" | cut -d" " -f10)
	DISK_AGE=$(echo -e "$EXTRASMARTINFO" | grep -w Power_On_Hours | sed "s/ * / /g" | sed "s/^ //g" | cut -d" " -f10)
	if [ -z "$DISK_AGE" ]
	then
		DISK_AGE=$(echo -e "$EXTRASMARTINFO" | grep -w Power_On_Hours_and_Msec | sed "s/ * / /g" | cut -d" " -f11 | cut -d"+" -f1 | tr -cd "0-9\n")
	fi
	#Convert disk age to days
	DISK_AGE=$(echo "scale=0; $DISK_AGE/24" | bc)
	DISK_AGE_UNIT=$"Days"

	#If disk age is stupidly big reset it to 0 show a wrong value
	if [ "$DISK_AGE" -gt 7300 ]
	then
		DISK_AGE=0
	fi

	#Check disk age
	DISK_AGE_WARN=0
	if [ "$DISK_AGE" -gt 1460 ]
	then
		DISK_AGE_WARN=1
	fi

	if [ "$DISK_AGE" -gt 1825 ]
	then
		DISK_AGE_WARN=2
	fi

	#Convert disk age to years
	if [ "$DISK_AGE" -gt 365 ]
	then
		DISK_AGE=`echo "scale=2; "$DISK_AGE"/365" | bc`
		DISK_AGE_UNIT=$"Years"
	fi

	#Convert capacity to gigabytes
	CAPACITY=$(echo "scale=2; $CAPACITYBYTES/1024/1024/1024" | bc)
	DRIVESCALE=GB
	if [[ "$CAPACITY" > 1000 ]]
	then
		#Covert capacity to terabytes
		CAPACITY=$(echo "scale=2; $CAPACITY/1024" | bc)
		DRIVESCALE=TB
	fi

	echo '<table class="'"$TABLECLASS"'" style="text-align: left;" ><tbody>
	<tr><td style="width: '"$WIDTH3"'px;">'$"Model Family"'</td><td style="width: '"$WIDTH4"'px;">'"$MODELFAMILY"'</td></tr>
	<tr><td>'$"Device Model"'</td><td>'"$DEVICEMODEL"'</td></tr>
	<tr><td>'$"Serial Number"'</td><td>'"$SERIALNO"'</td></tr>
	<tr><td>'$"Firmware Version"'</td><td>'"$FIRMWARE"'</td></tr>
	<tr><td>'$"Capacity"'</td><td>'"$CAPACITY $DRIVESCALE"'</td></tr>'


	if [[ "$DISK_AGE_WARN" = 2 ]]
	then
		echo '<tr><td style="color:red"><b>'$"Disk Age"'</b></td><td style="color:red"><b>'"$DISK_AGE $DISK_AGE_UNIT"'</b></td></tr>'
	elif [[ "$DISK_AGE_WARN" = 1 ]]
	then
		echo '<tr><td style="color:orange">'$"Disk Age"'</b></td><td style="color:orange">'"$DISK_AGE $DISK_AGE_UNIT"'</b></td></tr>'
	else
		echo '<tr><td>'$"Disk Age"'</td><td>'"$DISK_AGE $DISK_AGE_UNIT"'</td></tr>'
	fi

	#Show SSD life left if we have the data
	if [ ! -z "$SSD_LIFE_LEFT" ]
	then
		if [[ "$SSD_LIFE_LEFT" -lt 11 ]]
		then
			echo '<tr><td style="color:red"><b>'$"SSD life left"'</b></td><td style="color:red"><b>'"$SSD_LIFE_LEFT"'%</b></td></tr>'
		elif [[ "$SSD_LIFE_LEFT" -lt 30 ]]
			echo '<tr><td style="color:orange"><b>'$"SSD life left"'</b></td><td style="color:orange"><b>'"$SSD_LIFE_LEFT"'%</b></td></tr>'
		else
			echo '<tr><td>'$"SSD life left"'</td><td>'"$SSD_LIFE_LEFT"'%</td></tr>'
		fi
	fi

	echo '<tr><td>'$"Smart Enabled"'</td><td>'"$SMARTENABLED"'</td></tr>
	<tr><td>'$"Smart Status"'</td><td>'"$SMARTSTATUS"'</td></tr>'

	if [ ! -z "$PENDINGSECTORS" ]
	then
		if [ "$PENDINGSECTORS" -gt 0 ]
		then
			echo '<tr><td style="color:red"><b>'$"Pending Sectors"'</b></td><td style="color:red"><b>'"$PENDINGSECTORS"'</b></td></tr>'
		else
			echo '<tr><td>'$"Pending Sectors"'</td><td>'"$PENDINGSECTORS"'</td></tr>'
		fi
	fi

	if [[ "$DISKTEMP" > 50 ]]
	then
		echo '<tr><td style="color:red"><b>'$"Disk temperature"'</b></td><td style="color:red"><b>'"$DISKTEMP"' <sup>o</sup>C</b></td></tr>'
	elif [[ "$DISKTEMP" > 40 ]]
	then
		echo '<tr><td style="color:orange">'$"Disk temperature"'</td><td style="color:orange">'"$DISKTEMP"' <sup>o</sup>C</td></tr>'
	else
		echo '<tr><td>'$"Disk temperature"'</td><td>'"$DISKTEMP"' <sup>o</sup>C</td></tr>'
	fi

	echo "</tbody></table><br>"

	done

	#Show software raid information
	if [[ $(grep -c ^"#Software raid" /etc/fstab) -gt 0 ]]
	then
		RAIDMOUNTPOINT=$(mdadm --detail --scan 2>/dev/null | cut -d" " -f2)
		echo '<img src="/images/submenus/system/raid.png" alt="Software Raid"> <b>'$"Software Raid"'</b><br>'

		MDADMDATA=$(mdadm --detail $RAIDMOUNTPOINT)
		ACTIVE_RAID_DISKS=$(echo -e "$MDADMDATA" | grep "active sync" | sed "s/ * / /g" | cut -d" " -f8)
		REBUILDING_RAID_DISKS=$(echo -e "$MDADMDATA" | grep "spare rebuilding " | sed "s/ * / /g" | cut -d" " -f8)
		SPARE_RAID_DISKS=$(echo -e "$MDADMDATA" | sed "s/ * / /g" | grep "\- spare" | cut -d" " -f7)
		REBUILDSTATUS=$(echo -e "$MDADMDATA" | grep "Rebuild Status :" | cut -d: -f2 | sed "s/^ //g")
		RAIDLEVEL=$(echo -e "$MDADMDATA" | grep "Raid Level :" | cut -d: -f2 | sed "s/^ //g")
		ARRAYSIZE=$(echo -e "$MDADMDATA" | grep "Array Size :" | cut -d: -f2 | sed "s/^ //g")
		USEDSIZE=$(echo -e "$MDADMDATA" | grep "Used Dev Size :" | cut -d: -f2 | sed "s/^ //g")
		RAIDDEVICES=$(echo -e "$MDADMDATA" | grep "Raid Devices :" | cut -d: -f2 | sed "s/^ //g")
		TOTALDEVICES=$(echo -e "$MDADMDATA" | grep "Total Devices :" | cut -d: -f2 | sed "s/^ //g")
		RAIDSTATUS=$(echo -e "$MDADMDATA" | grep "State :" | cut -d: -f2 | sed "s/^ //g")
		ACTIVEDEVICES=$(echo -e "$MDADMDATA" | grep "Active Devices :" | cut -d: -f2 | sed "s/^ //g")
		WORKINGDEVICES=$(echo -e "$MDADMDATA" | grep "Working Devices :" | cut -d: -f2 | sed "s/^ //g")
		FAILEDDEVICES=$(echo -e "$MDADMDATA" | grep "Failed Devices :" | cut -d: -f2 | sed "s/^ //g")
		SPAREDEVICES=$(echo -e "$MDADMDATA" | grep "Spare Devices :" | cut -d: -f2 | sed "s/^ //g")
		LAYOUT=$(echo -e "$MDADMDATA" | grep "Layout :" | cut -d: -f2 | sed "s/^ //g")
		CHUNKSIZE=$(echo -e "$MDADMDATA" | grep "Chunk Size :" | cut -d: -f2 | sed "s/^ //g")
		UUID=$(echo -e "$MDADMDATA" | grep "UUID :" | cut -d: -f2- | sed "s/^ //g")

		echo '<table class="'"$TABLECLASS"'" style="text-align: left;" ><tbody>
		<tr><td style="width: '"$WIDTH3"'"px";">'$"Raid Level"'</td><td>'"$RAIDLEVEL"'</td></tr>
		<tr><td>'$"Raid Size"'</td><td>'"$ARRAYSIZE"'</td></tr>
		<tr><td>'$"Used Size"'</td><td>'"$USEDSIZE"'</td></tr>
		<tr><td>'$"Raid Status"'</td><td>'"$RAIDSTATUS"'</td></tr>'
		[ ! -z "$REBUILDSTATUS" ] && echo '<tr><td>'$"Rebuild Status"'</td><td>'$REBUILDSTATUS'</td></tr>'
		echo '<tr><td>'$"Raid Drives"'</td><td>'"$RAIDDEVICES"'</td></tr>
		<tr><td>'$"Used Drives"'</td><td>'"$TOTALDEVICES"'</td></tr>
		<tr><td>'$"Active Devices"'</td><td>'"$ACTIVEDEVICES"'</td></tr>
		<tr><td>'$"Working Devices"'</td><td>'"$WORKINGDEVICES"'</td></tr>
		<tr><td>'$"Failed Devices"'</td><td>'"$FAILEDDEVICES"'</td></tr>
		<tr><td>'$"Spare Devices"'</td><td>'"$SPAREDEVICES"'</td></tr>
		<tr><td>'$"Layout"'</td><td>'"$LAYOUT"'</td></tr>
		<tr><td>'$"Chunk Size"'</td><td>'"$CHUNKSIZE"'</td></tr>
		<tr><td>'$"Active Disks"'</td><td>'"$ACTIVE_RAID_DISKS"'</td></tr>
		<tr><td>'$"Rebuilding Disks"'</td><td>'"$REBUILDING_RAID_DISKS"'</td></tr>
		<tr><td>'$"Spare Disks"'</td><td>'"$SPARE_RAID_DISKS"'</td></tr>
		<tr><td>UUID</td><td>'"$UUID"'</td></tr>
		</tbody></table>'
	fi
fi


if [[ "$KAROSHI_SERVER" != $(hostname-fqdn) ]] && [ "$SERVERTYPE" = network ] || [ "$SERVERTYPE" = federated ]
then
	ssh -o PasswordAuthentication=no -o ConnectTimeout=3 "$KAROSHI_SERVER" '
	#Show free space

	#Get partition info
	DISKINFO=`df -h -l | sed 1d | sed "s/ * / /g" | sort -b -k5n,5`
	MOUNTCOUNT=`echo -e "$DISKINFO" | wc -l`
	echo "<table class=\"'$TABLECLASS'\" style=\"text-align: left;\"><tbody>
	<tr><td style=\"width: '$WIDTH1'px;\"><b>Mount point</b></td>"
	[ '$MOBILE' = no ] && echo "<td style=\"width: '$WIDTH2'px;\"><b>File System</b></td><td><b>Size</b></td><td><b>Used</b></td>"
	echo "<td><b>Avail</b></td><td><b>%Use</b></td><td></td></tr>"
	COUNTER=1
	while [ $COUNTER -le $MOUNTCOUNT ]
	do
	MOUNTDATA=`echo -e "$DISKINFO" | sed -n $COUNTER,$COUNTER"p"`
	FILESYSTEM=`echo $MOUNTDATA | cut -d" " -f1`
	SIZE=`echo $MOUNTDATA | cut -d" " -f2`
	USED=`echo $MOUNTDATA | cut -d" " -f3`
	AVAIL=`echo $MOUNTDATA | cut -d" " -f4`
	USE=`echo $MOUNTDATA | cut -d" " -f5`
	USE2=`echo $USE | sed "s/%//g"`

	MOUNTPOINT=`echo $MOUNTDATA | cut -d" " -f6`
	if [ "'$MOBILE'" = no ]
	then
		MOUNTPOINT="${MOUNTPOINT:0:50}"
	else
		MOUNTPOINT="${MOUNTPOINT:0:15}"
	fi

	if [ $USE2 -gt 90 ]
	then
	ALERTCOL=red
	BARCOL=red
	elif [ $USE2 -gt 70 ]
	then
	ALERTCOL=orange
	BARCOL=orange
	else
	ALERTCOL=green
	BARCOL=green
	fi
	let USE2=$USE2*'$MULTI'
	echo "<tr><td style=\"color:$ALERTCOL\">$MOUNTPOINT</td>"
	[ '$MOBILE' = no ] && echo "<td style=\"color:$ALERTCOL\">$FILESYSTEM</td><td style=\"color:$ALERTCOL\">$SIZE</td><td style=\"color:$ALERTCOL\">$USED</td>"
	echo "<td style=\"color:$ALERTCOL\">$AVAIL</td><td style=\"color:$ALERTCOL\">$USE</td><td class=\"BarFull\"><img src=\"/images/disk_usage/$BARCOL.png\" height=\"12\" alt=\"$USE2\" width=\"$USE2\"></td></tr>"

	let COUNTER=$COUNTER+1
	done
	echo "</tbody></table><br>"

	#Get list of disks
	DISKLIST=`fdisk -l 2>/dev/null | grep ^"Disk /dev/s" | cut -d: -f1 | sed "s/^Disk //g"`
	for DISK in $DISKLIST
	do
	echo "<img src=\"/images/submenus/system/disk_drive.png\" alt=\"Disk Drive\"> <b>"$DISK"</b><br>"

	#Enable smart
	smartctl --smart=on $DISK 1>/dev/null 2>>/dev/null

	#Get Disk information
	UUID=
	SMARTINFO=`smartctl -i $DISK | tr -cd "A-Za-z0-9:=,/\n "`
	MODELFAMILY=`echo -e "$SMARTINFO" | grep ^Model | cut -d: -f2 | sed "s/^ * //g"`
	DEVICEMODEL=`echo -e "$SMARTINFO" | grep ^Device | cut -d: -f2 | sed "s/^ * //g"`
	SERIALNO=`echo -e "$SMARTINFO" | grep ^Serial | cut -d: -f2 | sed "s/^ * //g"`
	FIRMWARE=`echo -e "$SMARTINFO" | grep ^Firmware | cut -d: -f2 | sed "s/^ * //g"`
	CAPACITYBYTES=`echo -e "$SMARTINFO" | grep ^User | cut -d: -f2 | sed "s/^ * //g" | cut -d" " -f1 | tr -cd "0-9"`
	SMARTENABLED=`echo -e "$SMARTINFO" | grep ^SMART | cut -d: -f2 | sed "s/^ * //g"`
	SMARTSTATUS=$(smartctl -H $DISK | sed 1,4d)
	EXTRASMARTINFO=$(smartctl -a $DISK)
	SSD_LIFE_LEFT=$(echo -e "$EXTRASMARTINFO" | grep SSD_Life_Left | sed "s/ * / /g" | cut -d" " -f4)
	DISKTEMP=`echo -e "$EXTRASMARTINFO" | grep Temperature_Celsius | sed "s/ * / /g" | cut -d" " -f10`
	PENDINGSECTORS=`echo -e "$EXTRASMARTINFO" | grep Current_Pending_Sector | sed "s/ * / /g" | cut -d" " -f10`
	DISK_AGE=`echo -e "$EXTRASMARTINFO" | grep -w Power_On_Hours | sed "s/ * / /g" | sed "s/^ //g" | cut -d" " -f10`

	if [ -z "$DISK_AGE" ]
	then
		DISK_AGE=`echo -e "$EXTRASMARTINFO" | grep -w Power_On_Hours_and_Msec | sed "s/ * / /g" | cut -d" " -f11 | cut -d"+" -f1 | tr -cd "0-9\n"`
	fi

	#Convert disk age to days
	DISK_AGE=`echo "scale=0; $DISK_AGE/24" | bc`
	DISK_AGE_UNIT=$"Days"

	#If disk age is stupidly big reset it to 0 show a wrong value
	if [ $DISK_AGE -gt 7300 ]
	then
		DISK_AGE=0
	fi

	#Check disk age
	DISK_AGE_WARN=0
	if [ $DISK_AGE -gt 1460 ]
	then
		DISK_AGE_WARN=1
	fi

	if [ $DISK_AGE -gt 1825 ]
	then
		DISK_AGE_WARN=2
	fi

	#Convert disk age to years
	if [ "$DISK_AGE" -gt 365 ]
	then
		DISK_AGE=`echo "scale=2; "$DISK_AGE"/365" | bc`
		DISK_AGE_UNIT=$"Years"
	fi

	#Convert capacity to gigabytes
	CAPACITY=`echo "scale=2; $CAPACITYBYTES/1024/1024/1024" | bc`
	DRIVESCALE=GB
	if [[ $CAPACITY > 1000 ]]
	then
	#Covert capacity to terabytes
	CAPACITY=`echo "scale=2; $CAPACITY/1024" | bc`
	DRIVESCALE=TB
	fi

	echo "<table class=\"'$TABLECLASS'\" style=\"text-align: left;\"><tbody>
	<tr><td style=\"width: '$WIDTH3'px;\">'$"Model Family"'</td><td style=\"width: '$WIDTH4'px;\">$MODELFAMILY</td></tr>
	<tr><td>'$"Device Model"'</td><td>$DEVICEMODEL</td></tr>
	<tr><td>'$"Serial Number"'</td><td>$SERIALNO</td></tr>
	<tr><td>'$"Firmware Version"'</td><td>$FIRMWARE</td></tr>"

	if [[ $DISK_AGE_WARN = 2 ]]
	then
		echo "<tr><td style=\"color:red\"><b>'$"Disk Age"'</b></td><td style=\"color:red\"><b>$DISK_AGE $DISK_AGE_UNIT</b></td></tr>"
	elif [[ $DISK_AGE_WARN = 1 ]]
	then
		echo "<tr><td style=\"color:orange\">'$"Disk Age"'</b></td><td style=\"color:orange\">$DISK_AGE $DISK_AGE_UNIT</b></td></tr>"
	else
		echo "<tr><td>'$"Disk Age"'</td><td>$DISK_AGE $DISK_AGE_UNIT</td></tr>"
	fi

	#Show SSD life left if we have the data
	if [ ! -z "$SSD_LIFE_LEFT" ]
	then
		if [[ "$SSD_LIFE_LEFT" -lt 11 ]]
		then
			echo "<tr><td style=\"color:red\"><b>'$"SSD life left"'</b></td><td style="color:red"><b>$SSD_LIFE_LEFT%</b></td></tr>"
		elif [[ "$SSD_LIFE_LEFT" -lt 30 ]]
			echo "<tr><td style=\"color:orange\"><b>'$"SSD life left"'</b></td><td style="color:orange"><b>$SSD_LIFE_LEFT%</b></td></tr>"
		else
			echo "<tr><td>'$"SSD life left"'</td><td>$SSD_LIFE_LEFT%</td></tr>"
		fi
	fi

	echo "<tr><td>'$"Capacity"'</td><td>$CAPACITY $DRIVESCALE</td></tr>
	<tr><td>'$"Smart Enabled"'</td><td>$SMARTENABLED</td></tr>
	<tr><td>'$"Smart Status"'</td><td>$SMARTSTATUS</td></tr>"

	if [ ! -z "$PENDINGSECTORS" ]
	then
	if [ $PENDINGSECTORS -gt 0 ]
	then
	echo "<tr><td style=\"color:red\"><b>'$"Pending Sectors"'</b></td><td style=\"color:red\"><b>$PENDINGSECTORS</b></td></tr>"
	else
	echo "<tr><td>'$"Pending Sectors"'</td><td>$PENDINGSECTORS</td></tr>"
	fi
	fi

	if [[ $DISKTEMP > 50 ]]
	then
	echo "<tr><td style=\"color:red\"><b>'$"Disk temperature"'</b></td><td style=\"color:red\"><b>$DISKTEMP <sup>o</sup>C</b></td></tr>"
	elif [[ $DISKTEMP > 40 ]]
	then
	echo "<tr><td style=\"color:orange\">'$"Disk temperature"'</td><td style=\"color:orange\">$DISKTEMP <sup>o</sup>C</td></tr>"
	else
	echo "<tr><td>'$"Disk temperature"'</td><td>$DISKTEMP <sup>o</sup>C</td></tr>"
	fi

	echo "</tbody></table><br>"

	done

	#Show software raid information
	if [ `grep -c ^"#Software raid" /etc/fstab` -gt 0 ]
	then
	RAIDMOUNTPOINT=`mdadm --detail --scan 2>/dev/null | cut -d" " -f2`
	echo "<img src=\"/images/submenus/system/raid.png\" alt=\"Software Raid\"> <b>'$"Software Raid"'</b><br>"

	MDADMDATA=`mdadm --detail $RAIDMOUNTPOINT`
	ACTIVE_RAID_DISKS=`echo -e "$MDADMDATA" | grep "active sync" | sed "s/ * / /g" | cut -d" " -f8`
	REBUILDING_RAID_DISKS=`echo -e "$MDADMDATA" | grep "spare rebuilding " | sed "s/ * / /g" | cut -d" " -f8`
	SPARE_RAID_DISKS=`echo -e "$MDADMDATA" | sed "s/ * / /g" | grep "\- spare" | cut -d" " -f7`
	REBUILDSTATUS=`echo -e "$MDADMDATA" | grep "Rebuild Status :" | cut -d: -f2 | sed "s/^ //g"`
	RAIDLEVEL=`echo -e "$MDADMDATA" | grep "Raid Level :" | cut -d: -f2 | sed "s/^ //g"`
	ARRAYSIZE=`echo -e "$MDADMDATA" | grep "Array Size :" | cut -d: -f2 | sed "s/^ //g"`
	USEDSIZE=`echo -e "$MDADMDATA" | grep "Used Dev Size :" | cut -d: -f2 | sed "s/^ //g"`
	RAIDDEVICES=`echo -e "$MDADMDATA" | grep "Raid Devices :" | cut -d: -f2 | sed "s/^ //g"`
	TOTALDEVICES=`echo -e "$MDADMDATA" | grep "Total Devices :" | cut -d: -f2 | sed "s/^ //g"`
	RAIDSTATUS=`echo -e "$MDADMDATA" | grep "State :" | cut -d: -f2 | sed "s/^ //g"`
	ACTIVEDEVICES=`echo -e "$MDADMDATA" | grep "Active Devices :" | cut -d: -f2 | sed "s/^ //g"`
	WORKINGDEVICES=`echo -e "$MDADMDATA" | grep "Working Devices :" | cut -d: -f2 | sed "s/^ //g"`
	FAILEDDEVICES=`echo -e "$MDADMDATA" | grep "Failed Devices :" | cut -d: -f2 | sed "s/^ //g"`
	SPAREDEVICES=`echo -e "$MDADMDATA" | grep "Spare Devices :" | cut -d: -f2 | sed "s/^ //g"`
	LAYOUT=`echo -e "$MDADMDATA" | grep "Layout :" | cut -d: -f2 | sed "s/^ //g"`
	CHUNKSIZE=`echo -e "$MDADMDATA" | grep "Chunk Size :" | cut -d: -f2 | sed "s/^ //g"`
	UUID=`echo -e "$MDADMDATA" | grep "UUID :" | cut -d: -f2- | sed "s/^ //g"`

	echo "<table class=\"'$TABLECLASS'\" style=\"text-align: left;\"><tbody>
	<tr><td style=\"width: '$WIDTH3'px;\">'$"Raid Level"'</td><td>$RAIDLEVEL</td></tr>
	<tr><td>'$"Raid Size"'</td><td>$ARRAYSIZE</td></tr>
	<tr><td>'$"Used Size"'</td><td>$USEDSIZE</td></tr>
	<tr><td>'$"Raid Status"'</td><td>$RAIDSTATUS</td></tr>"
	[ ! -z "$REBUILDSTATUS" ] && echo "<tr><td>Rebuild Status</td><td>$REBUILDSTATUS</td></tr>"
	echo "<tr><td>'$"Raid Drives"'</td><td>$RAIDDEVICES</td></tr>
	<tr><td>'$"Used Drives"'</td><td>$TOTALDEVICES</td></tr>
	<tr><td>'$"Active Devices"'</td><td>$ACTIVEDEVICES</td></tr>
	<tr><td>'$"Working Devices"'</td><td>$WORKINGDEVICES</td></tr>
	<tr><td>'$"Failed Devices"'</td><td>$FAILEDDEVICES</td></tr>
	<tr><td>'$"Spare Devices"'</td><td>$SPAREDEVICES</td></tr>
	<tr><td>'$"Layout"'</td><td>$LAYOUT</td></tr>
	<tr><td>'$"Chunk Size"'</td><td>$CHUNKSIZE</td></tr>
	<tr><td>'$"Active Disks"'</td><td>$ACTIVE_RAID_DISKS</td></tr>
	<tr><td>'$"Rebuilding Disks"'</td><td>$REBUILDING_RAID_DISKS</td></tr>
	<tr><td>'$"Spare Disks"'</td><td>$SPARE_RAID_DISKS</td></tr>
	<tr><td>UUID</td><td>$UUID</td></tr>
	</tbody></table>"
	fi
'

fi

if [ $SERVERTYPE = federatedslave ]
then
ssh -o PasswordAuthentication=no -o ConnectTimeout=3 $SERVERMASTER '
ssh -o PasswordAuthentication=no -o ConnectTimeout=3 '$KAROSHI_SERVER' '\''
#Show free space

#Get partition info
DISKINFO=`df -h -l | sed 1d | sed "s/ * / /g" | sort -b -k5n,5`
MOUNTCOUNT=`echo -e "$DISKINFO" | wc -l`
echo "<table class=\"$TABLECLASS\" style=\"text-align: left;\"><tbody>
<tr><td style=\"width: '$WIDTH1'px;\"><b>Mount point</b></td>"
[ '$MOBILE' = no ] && echo "<td style=\"width: '$WIDTH2'px;\"><b>File System</b></td><td><b>Size</b></td><td><b>Used</b></td>"
echo "<td><b>Avail</b></td><td><b>%Use</b></td><td></td></tr>"
COUNTER=1
while [ $COUNTER -le $MOUNTCOUNT ]
do
MOUNTDATA=`echo -e "$DISKINFO" | sed -n $COUNTER,$COUNTER"p"`
FILESYSTEM=`echo $MOUNTDATA | cut -d" " -f1`
SIZE=`echo $MOUNTDATA | cut -d" " -f2`
USED=`echo $MOUNTDATA | cut -d" " -f3`
AVAIL=`echo $MOUNTDATA | cut -d" " -f4`
USE=`echo $MOUNTDATA | cut -d" " -f5`
USE2=`echo $USE | sed "s/%//g"`

MOUNTPOINT=`echo $MOUNTDATA | cut -d" " -f6`
if [ "$MOBILE" = no ]
then
	MOUNTPOINT="${MOUNTPOINT:0:50}"
else
	MOUNTPOINT="${MOUNTPOINT:0:15}"
fi

if [ $USE2 -gt 90 ]
then
ALERTCOL=red
BARCOL=red
elif [ $USE2 -gt 70 ]
then
ALERTCOL=orange
BARCOL=orange
else
ALERTCOL=green
BARCOL=green
fi
let USE2=$USE2*'$MULTI'
echo "<tr><td style=\"color:$ALERTCOL\">$MOUNTPOINT</td>"
[ '$MOBILE' = no ] && echo "<td style=\"color:$ALERTCOL\">$FILESYSTEM</td><td style=\"color:$ALERTCOL\">$SIZE</td><td style=\"color:$ALERTCOL\">$USED</td>"
echo "<td style=\"color:$ALERTCOL\">$AVAIL</td><td style=\"color:$ALERTCOL\">$USE</td><td class=\"BarFull\"><img src=\"/images/disk_usage/$BARCOL.png\" height=\"12\" alt=\"$USE2\" width=\"$USE2\"></td></tr>"
let COUNTER=$COUNTER+1
done
echo "</tbody></table><br>"

#Get list of disks
DISKLIST=`fdisk -l 2>/dev/null | grep ^"Disk /dev/s" | cut -d: -f1 | sed "s/^Disk //g"`
for DISK in $DISKLIST
do
echo "<img src=\"/images/submenus/system/disk_drive.png\" alt=\"Disk Drive\"> <b>"$DISK"</b><br>"

#Enable smart
smartctl --smart=on $DISK 1>/dev/null 2>>/dev/null

#Get Disk information
UUID=
SMARTINFO=`smartctl -i $DISK | tr -cd "A-Za-z0-9:=,/\n "`
MODELFAMILY=`echo -e "$SMARTINFO" | grep ^Model | cut -d: -f2 | sed "s/^ * //g"`
DEVICEMODEL=`echo -e "$SMARTINFO" | grep ^Device | cut -d: -f2 | sed "s/^ * //g"`
SERIALNO=`echo -e "$SMARTINFO" | grep ^Serial | cut -d: -f2 | sed "s/^ * //g"`
FIRMWARE=`echo -e "$SMARTINFO" | grep ^Firmware | cut -d: -f2 | sed "s/^ * //g"`
CAPACITYBYTES=`echo -e "$SMARTINFO" | grep ^User | cut -d: -f2 | sed "s/^ * //g" | cut -d" " -f1 | tr -cd "0-9"`
SMARTENABLED=`echo -e "$SMARTINFO" | grep ^SMART | cut -d: -f2 | sed "s/^ * //g"`
SMARTSTATUS=`smartctl -H $DISK | sed 1,4d`
EXTRASMARTINFO=`smartctl -a $DISK`
COLOUR=white
DISKTEMP=`echo -e "$EXTRASMARTINFO" | grep Temperature_Celsius | sed "s/ * / /g" | cut -d" " -f10`
[[ $DISKTEMP > 40 ]] && COLOUR=orange
[[ $DISKTEMP > 50 ]] && COLOUR=red
SECTORCOLOUR=white
PENDINGSECTORS=`echo -e "$EXTRASMARTINFO" | grep Current_Pending_Sector | sed "s/ * / /g" | cut -d" " -f10`
[ $PENDINGSECTORS -gt 0 ] && SECTORCOLOUR=red
#Convert capacity to gigabytes
CAPACITY=`echo "scale=0; $CAPACITYBYTES/1024/1024/1024" | bc`
DRIVESCALE=GB
if [[ $CAPACITY > 1000 ]]
then
#Covert capacity to terabytes
CAPACITY=`echo "scale=0; $CAPACITY/1024" | bc`
DRIVESCALE=TB
fi

echo "<table class=\"'$TABLECLASS'\" style=\"text-align: left;\"><tbody>
<tr><td style=\"width: 180px;\">'$"Model Family"'</td><td>$MODELFAMILY</td></tr>
<tr><td style=\"width: 180px;\">'$"Device Model"'</td><td>$DEVICEMODEL</td></tr>
<tr><td style=\"width: 180px;\">'$"Serial Number"'</td><td>$SERIALNO</td></tr>
<tr><td style=\"width: 180px;\">'$"Firmware Version"'</td><td>$FIRMWARE</td></tr>
<tr><td style=\"width: 180px;\">'$"Capacity"'</td><td>$CAPACITY $DRIVESCALE</td></tr>
<tr><td style=\"width: 180px;\">'$"Smart Enabled"'</td><td>$SMARTENABLED</td></tr>
<tr><td style=\"width: 180px;\">'$"Smart Status"'</td><td>$SMARTSTATUS</td></tr>"

if [ ! -z "$PENDINGSECTORS" ]
then
if [ $PENDINGSECTORS -gt 0 ]
then
echo "<tr><td style=\"color:red\"><b>'$"Pending Sectors"'</b></td><td style=\"color:red\"><b>$PENDINGSECTORS</b></td></tr>"
else
echo "<tr><td>'$"Pending Sectors"'</td><td>$PENDINGSECTORS</td></tr>"
fi
fi

if [[ $DISKTEMP > 50 ]]
then
echo "<tr><td style=\"color:red\"><b>'$"Disk temperature"'</b></td><td style=\"color:red\"><b>$DISKTEMP <sup>o</sup>C</b></td></tr>"
elif [[ $DISKTEMP > 40 ]]
then
echo "<tr><td style=\"color:orange\">'$"Disk temperature"'</td><td style=\"color:orange\">$DISKTEMP <sup>o</sup>C</td></tr>"
else
echo "<tr><td>'$"Disk temperature"'</td><td>$DISKTEMP <sup>o</sup>C</td></tr>"
fi

echo "</tbody></table><br>"

done

#Show software raid information
if [ `grep -c ^"#Software raid" /etc/fstab` -gt 0 ]
then
RAIDMOUNTPOINT=`mdadm --detail --scan 2>/dev/null | cut -d" " -f2`
echo "<img src=\"/images/submenus/system/raid.png\" alt=\"Software Raid\"> <b>'$"Software Raid"'</b><br>"

MDADMDATA=`mdadm --detail $RAIDMOUNTPOINT`
ACTIVE_RAID_DISKS=`echo -e "$MDADMDATA" | grep "active sync" | sed "s/ * / /g" | cut -d" " -f8`
REBUILDING_RAID_DISKS=`echo -e "$MDADMDATA" | grep "spare rebuilding " | sed "s/ * / /g" | cut -d" " -f8`
SPARE_RAID_DISKS=`echo -e "$MDADMDATA" | sed "s/ * / /g" | grep "\- spare" | cut -d" " -f7`
REBUILDSTATUS=`echo -e "$MDADMDATA" | grep "Rebuild Status :" | cut -d: -f2 | sed "s/^ //g"`
RAIDLEVEL=`echo -e "$MDADMDATA" | grep "Raid Level :" | cut -d: -f2 | sed "s/^ //g"`
ARRAYSIZE=`echo -e "$MDADMDATA" | grep "Array Size :" | cut -d: -f2 | sed "s/^ //g"`
USEDSIZE=`echo -e "$MDADMDATA" | grep "Used Dev Size :" | cut -d: -f2 | sed "s/^ //g"`
RAIDDEVICES=`echo -e "$MDADMDATA" | grep "Raid Devices :" | cut -d: -f2 | sed "s/^ //g"`
TOTALDEVICES=`echo -e "$MDADMDATA" | grep "Total Devices :" | cut -d: -f2 | sed "s/^ //g"`
RAIDSTATUS=`echo -e "$MDADMDATA" | grep "State :" | cut -d: -f2 | sed "s/^ //g"`
ACTIVEDEVICES=`echo -e "$MDADMDATA" | grep "Active Devices :" | cut -d: -f2 | sed "s/^ //g"`
WORKINGDEVICES=`echo -e "$MDADMDATA" | grep "Working Devices :" | cut -d: -f2 | sed "s/^ //g"`
FAILEDDEVICES=`echo -e "$MDADMDATA" | grep "Failed Devices :" | cut -d: -f2 | sed "s/^ //g"`
SPAREDEVICES=`echo -e "$MDADMDATA" | grep "Spare Devices :" | cut -d: -f2 | sed "s/^ //g"`
LAYOUT=`echo -e "$MDADMDATA" | grep "Layout :" | cut -d: -f2 | sed "s/^ //g"`
CHUNKSIZE=`echo -e "$MDADMDATA" | grep "Chunk Size :" | cut -d: -f2 | sed "s/^ //g"`
UUID=`echo -e "$MDADMDATA" | grep "UUID :" | cut -d: -f2- | sed "s/^ //g"`

echo "<table class=\"'$TABLECLASS'\" style=\"text-align: left;\"><tbody>
<tr><td style=\"width: '$WIDTH3'px;\">'$"Raid Level"'</td><td>$RAIDLEVEL</td></tr>
<tr><td>'$"Raid Size"'</td><td>$ARRAYSIZE</td></tr>
<tr><td>'$"Used Size"'</td><td>$USEDSIZE</td></tr>
<tr><td>'$"Raid Status"'</td><td>$RAIDSTATUS</td></tr>"
[ ! -z "$REBUILDSTATUS" ] && echo "<tr><td>Rebuild Status</td><td>$REBUILDSTATUS</td></tr>"
echo "<tr><td>'$"Raid Drives"'</td><td>$RAIDDEVICES</td></tr>
<tr><td>'$"Used Drives"'</td><td>$TOTALDEVICES</td></tr>
<tr><td>'$"Active Devices"'</td><td>$ACTIVEDEVICES</td></tr>
<tr><td>'$"Working Devices"'</td><td>$WORKINGDEVICES</td></tr>
<tr><td>'$"Failed Devices"'</td><td>$FAILEDDEVICES</td></tr>
<tr><td>'$"Spare Devices"'</td><td>$SPAREDEVICES</td></tr>
<tr><td>'$"Layout"'</td><td>$LAYOUT</td></tr>
<tr><td>'$"Chunk Size"'</td><td>$CHUNKSIZE</td></tr>
<tr><td>'$"Active Disks"'</td><td>$ACTIVE_RAID_DISKS</td></tr>
<tr><td>'$"Rebuilding Disks"'</td><td>$REBUILDING_RAID_DISKS</td></tr>
<tr><td>'$"Spare Disks"'</td><td>$SPARE_RAID_DISKS</td></tr>
<tr><td>UUID</td><td>$UUID</td></tr>
</tbody></table>"
fi
'\''
'

fi

exit

