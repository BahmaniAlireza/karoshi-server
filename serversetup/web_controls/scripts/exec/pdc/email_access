#!/bin/bash
#Copyright (C) 2012 Paul Sharrad

#This file is part of Karoshi Server.
#
#Karoshi Server is free software: you can redistribute it and/or modify
#it under the terms of the GNU Affero General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#Karoshi Server is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU Affero General Public License for more details.
#
#You should have received a copy of the GNU Affero General Public License
#along with Karoshi Server.  If not, see <http://www.gnu.org/licenses/>.

#
#The Karoshi Team can be contacted at: 
#mpsharrad@karoshi.org.uk
#jsharrad@karoshi.org.uk

#
#Website: http://www.karoshi.org.uk
LOG_DATE=`date +%F`
########################
#Check md5checksum
########################
if ! test -f /opt/karoshi/web_controls/checksums/admin_checksums/email_access_cgi
then
	echo `date`: email_access - No admin MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
source /opt/karoshi/web_controls/checksums/admin_checksums/email_access_cgi
MD5SUM=`md5sum /var/www/cgi-bin_karoshi/admin/email_access.cgi | cut -d' ' -f1`
[ -z "$MD5SUM" ] && MD5SUM=not_set
if [ $MD5SUM'check' != $email_access_cgi'check' ]
then
	echo `date`: email_access - Incorrect admin MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi

########################
#Get variables
########################
numArgs=$#
if [ $numArgs != 0 ]
then
	echo `date`: email_access - incorrect number of arguments >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi

read DATA
DATA=`echo $DATA | tr -cd 'A-Za-z0-9\._:\-'`
if [ -z "$DATA" ]
then
	echo `date`: email_access - no data >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
REMOTE_USER=`echo "$DATA" | cut -s -d: -f1`
REMOTE_ADDR=`echo "$DATA" | cut -s -d: -f2`
REMOTE_MD5=`echo "$DATA" | cut -s -d: -f3`
ACTION=`echo "$DATA" | cut -s -d: -f4`
USERSELECT=`echo "$DATA" | cut -s -d: -f5`
ACCESSLEVEL=`echo "$DATA" | cut -s -d: -f6`
GROUP=`echo "$DATA" | cut -s -d: -f7`
MOBILE=`echo "$DATA" | cut -s -d: -f8`
CALLEDBY=`echo "$DATA" | cut -s -d: -f9`

TABLECLASS=standard
ICON1=/images/submenus/email/email_delete.png
WIDTH1=180
WIDTH2=200
WIDTH3=180
HEIGHT1=25
if [ "$MOBILE" = yes ]
then
	ICON1=/images/submenus/email/email_deletem.png
	TABLECLASS=mobilestandard
	WIDTH1=120
	WIDTH2=140
	WIDTH3=250
	HEIGHT1=30
fi

########################
#Check data
########################
if [ $REMOTE_MD5'check' != $MD5SUM'check' ]
then
	echo `date`: email_access - Not called by email_access.cgi >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ -z "$REMOTE_USER" ]
then
	echo `date`: email_access - Blank remote user >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ -z "$REMOTE_ADDR" ]
then
	echo `date`: email_access - Blank remote tcpip address >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ `grep -c ^$REMOTE_USER: /opt/karoshi/web_controls/web_access_admin` != 1 ]
then
	echo `date`: email_access - access denied to $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi



##########################
#Language
##########################

STYLESHEET=defaultstyle.css
[ -f /opt/karoshi/web_controls/user_prefs/$REMOTE_USER ] && source /opt/karoshi/web_controls/user_prefs/$REMOTE_USER
TEXTDOMAIN=karoshi-server


#Get email server details
if [ ! -f /opt/karoshi/server_network/emailserver ]
then
	echo `date`: email_access - No email server has been declared by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi

source /opt/karoshi/server_network/domain_information/domain_name
EMAILSERVER=`sed -n 1,1p /opt/karoshi/server_network/emailserver`


function check_user {
#Check to see if the userdata is for a user or a group.
getent group $USERSELECT 1>/dev/null
if [ $? = 0 ]
then
	DATATYPE=group
else
	DATATYPE=user
fi
}

if [ $ACTION = addrestricteddomain ]
then
	#Make sure the domain is lower case.
	USERSELECT=$(echo $USERSELECT | tr 'A-Z' 'a-z')

	#Make sure that the entry is a proper domain.
	if [ $(echo "$USERSELECT" | grep -c "\.") -gt 0 ]
	then 
		#Add entry to /etc/postfix/restricted_domains
		echo `date`: "email_access - adding $USERSELECT to the restriction list by $REMOTE_USER from $REMOTE_ADDR" >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
		if [ $EMAILSERVER = $(hostname-fqdn) ]
		then
			if [ $(grep -c -w ^$USERSELECT /etc/postfix/restricted_domains) = 0 ]
			then
				echo "$USERSELECT	OK" >> /etc/postfix/restricted_domains
				#Sort the list
				sort /etc/postfix/restricted_domains > /etc/postfix/restricted_domains2
				rm /etc/postfix/restricted_domains
				mv /etc/postfix/restricted_domains2 /etc/postfix/restricted_domains
				#Activate the revised file
				postmap hash:/etc/postfix/restricted_domains
			fi
		else
			ssh -o PasswordAuthentication=no -o ConnectTimeout=3 $EMAILSERVER '
			if [ $(grep -c -w ^'$USERSELECT' /etc/postfix/restricted_domains) = 0 ]
			then
				echo "'$USERSELECT'	OK" >> /etc/postfix/restricted_domains
				#Sort the list
				sort /etc/postfix/restricted_domains > /etc/postfix/restricted_domains2
				rm /etc/postfix/restricted_domains
				mv /etc/postfix/restricted_domains2 /etc/postfix/restricted_domains
				#Activate the revised file
				postmap hash:/etc/postfix/restricted_domains
			fi
			'
		fi
	else
		echo `date`: "email_access - $USERSELECT is not a domain name by $REMOTE_USER from $REMOTE_ADDR" >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	fi
	ACTION=viewrestrictionlist
fi

if [ $ACTION = reallydeleterestricteddomain ]
then
	#Delete entry from /etc/postfix/restricted_domains
	echo `date`: "email_access - deleting $USERSELECT from the restriction list by $REMOTE_USER from $REMOTE_ADDR" >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	if [ $EMAILSERVER = $(hostname-fqdn) ]
	then
		sed -i "/^$USERSELECT	/d" /etc/postfix/restricted_domains
		postmap hash:/etc/postfix/restricted_domains
	else
		ssh -o PasswordAuthentication=no -o ConnectTimeout=3 $EMAILSERVER '
		sed -i "/^'$USERSELECT'	/d" /etc/postfix/restricted_domains
		postmap hash:/etc/postfix/restricted_domains
		'
	fi
	#Show the revised list
	ACTION=viewrestrictionlist	
fi

if [ $ACTION = deleterestricteddomain ]
then
	#Ask for confirmation before removing the domain from the list.
	echo '<form action="/cgi-bin/admin/email_access.cgi" method="post"><input type="hidden" name="_ACTION_" value="reallydeleterestricteddomain"><input type="hidden" name="_USERSELECT_" value="'$USERSELECT'">
	<b>'$"Domain"'</b>: '$USERSELECT'<br><br>
	'$"Remove this domain from the restriction list?"'<br><br><br>
	<input value="'$"Submit"'" class="button" type="submit"></form>
'
fi

if [ $ACTION = viewrestrictionlist ]
then
	#Show add domain
	echo '<form action="/cgi-bin/admin/email_access.cgi" method="post"><input type="hidden" name="_ACTION_" value="addrestricteddomain"><table class="'$TABLECLASS'" style="text-align: left;" border="0" cellpadding="2" cellspacing="2"><tbody>
	<tr><td style="width: '$WIDTH1'px;"><b>'$"Add Domain"'</b></td><td><input type="text" name="_USERSELECT_" style="width: '$WIDTH2'px; height: '$HEIGHT1'px;" value="" size="10"></td><td valign="middle"><a class="info" target="_blank" href="http://www.linuxschools.com/karoshi/documentation/wiki/index.php?title=E-Mail_Access_Controls"><img class="images" alt="" src="/images/help/info.png"><span>'$"Enter in a domain that you want to add to the restricted list."'<br><br>'$"Users with restricted E-Mail access can only send and receive E-Mails from domains listed in the restriction list."'</span></a></td></tr></tbody></table><br><input value="'$"Submit"'" class="button" type="submit"></form><br>
	
	'

	#Show the contents of /etc/postfix/restricted_domains
	echo '<form action="/cgi-bin/admin/email_access.cgi" method="post"><table class="'$TABLECLASS'" style="text-align: left;" border="0" cellpadding="2" cellspacing="2"><tbody>
	<tr><td style="width: '$WIDTH3'px;"><b>'$"Allowed Domains"'</b></td><td></td></tr>'
	if [ $EMAILSERVER = $(hostname-fqdn) ]
	then
		RESTRICTED_DOMAIN_LIST=$(cat /etc/postfix/restricted_domains | cut -f1)
	else
		RESTRICTED_DOMAIN_LIST=$(ssh -o PasswordAuthentication=no -o ConnectTimeout=3 $EMAILSERVER '
		cat /etc/postfix/restricted_domains | cut -f1
		')
	fi

	for RESTRICTED_DOMAIN in $RESTRICTED_DOMAIN_LIST
	do
		echo "<tr><td>$RESTRICTED_DOMAIN</td>"
		if [ $RESTRICTED_DOMAIN != $REALM ]
		then
			echo '<td><a class="info" href="javascript:void(0)"><input name="_ACTION_deleterestricteddomain_USERSELECT_'$RESTRICTED_DOMAIN'_" type="image" class="images" src="'$ICON1'" value=""><span>'$"Delete"'<br>'$FILENAME'</span></a></td>'
		fi
		echo "</tr>"
	done
	echo '</tbody></table></form>'
fi

if [ $ACTION = change ]
then
	function set_access {
	echo `date`: "email_access - setting E-Mail level to $ACCESSLEVEL for $USERSELECT by $REMOTE_USER from $REMOTE_ADDR" >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	if [ $EMAILSERVER = `hostname-fqdn` ]
	then
		#Remove the username from all restriction lists and then add into the correct lists as needed.
		if [ $(grep -c -w ^$USERSELECT /etc/postfix/restricted_accounts) -gt 0 ]
		then
			sed -i "/^$USERSELECT@/d" /etc/postfix/restricted_accounts
		fi

		if [ $(grep -c -w ^$USERSELECT /etc/postfix/deny_sending) -gt 0 ]
		then
			sed -i "/^$USERSELECT@/d" /etc/postfix/deny_sending
		fi

		if [ $(grep -c -w ^$USERSELECT /etc/postfix/deny_receiving) -gt 0 ]
		then
			sed -i "/^$USERSELECT@/d" /etc/postfix/deny_receiving
		fi

		if [ "$ACCESSLEVEL" = 2 ] || [ "$ACCESSLEVEL" = 4 ] || [ "$ACCESSLEVEL" = 6 ]
		then
			#Add the user to the restricted list
			echo "$USERSELECT@$REALM	restricted_domains" >> /etc/postfix/restricted_accounts
		fi

		if [ "$ACCESSLEVEL" = 3 ] || [ "$ACCESSLEVEL" = 4 ] || [ "$ACCESSLEVEL" = 7 ]
		then
			#Add the user to the deny sending list
			echo "$USERSELECT@$REALM REJECT" >> /etc/postfix/deny_sending
		fi

		if [ "$ACCESSLEVEL" = 5 ] || [ "$ACCESSLEVEL" = 6 ] || [ "$ACCESSLEVEL" = 7 ]
		then
			#Add the user to the deny receiving list
			echo "$USERSELECT@$REALM REJECT" >> /etc/postfix/deny_receiving
		fi
	
		#Activate changes
		postmap hash:/etc/postfix/restricted_accounts
		postmap hash:/etc/postfix/deny_sending
		postmap hash:/etc/postfix/deny_receiving
	else
		ssh -o PasswordAuthentication=no -o ConnectTimeout=3 $EMAILSERVER '
		#Remove the username from all restriction lists and then add into the correct lists as needed.
		if [ $(grep -c -w ^'$USERSELECT' /etc/postfix/restricted_accounts) -gt 0 ]
		then
			sed -i "/^'$USERSELECT'@/d" /etc/postfix/restricted_accounts
		fi

		if [ $(grep -c -w ^'$USERSELECT' /etc/postfix/deny_sending) -gt 0 ]
		then
			sed -i "/^'$USERSELECT'@/d" /etc/postfix/deny_sending
		fi

		if [ $(grep -c -w ^'$USERSELECT' /etc/postfix/deny_receiving) -gt 0 ]
		then
			sed -i "/^'$USERSELECT'@/d" /etc/postfix/deny_receiving
		fi

		if [ "'$ACCESSLEVEL'" = 2 ] || [ "'$ACCESSLEVEL'" = 4 ] || [ "'$ACCESSLEVEL'" = 6 ]
		then
			#Add the user to the restricted list
			echo "'$USERSELECT'@'$REALM'	restricted_domains" >> /etc/postfix/restricted_accounts
		fi

		if [ "'$ACCESSLEVEL'" = 3 ] || [ "'$ACCESSLEVEL'" = 4 ] || [ "'$ACCESSLEVEL'" = 7 ]
		then
			#Add the user to the deny sending list
			echo "'$USERSELECT'@'$REALM' REJECT" >> /etc/postfix/deny_sending
		fi

		if [ "'$ACCESSLEVEL'" = 5 ] || [ "'$ACCESSLEVEL'" = 6 ] || [ "'$ACCESSLEVEL'" = 7 ]
		then
			#Add the user to the deny receiving list
			echo "'$USERSELECT'@'$REALM' REJECT" >> /etc/postfix/deny_receiving
		fi
	
		#Activate changes
		postmap hash:/etc/postfix/restricted_accounts
		postmap hash:/etc/postfix/deny_sending
		postmap hash:/etc/postfix/deny_receiving
		'
	fi
	}

	#Check to see if we are making a change for a user or a group
	check_user
	if [ $DATATYPE = user ]
	then
		set_access
	else

		#Set access level for the group
		set_access

		#Get a list of all users in the group only if this is a primary group

		#Set E-mail level for the group
		if [ -f /opt/karoshi/server_network/group_information/"$USERSELECT" ]
		then
			if [ $(grep -c ^EMAIL_LEVEL /opt/karoshi/server_network/group_information/"$USERSELECT") -gt 0 ]
			then
				sed -i "/^EMAIL_LEVEL/d" /opt/karoshi/server_network/group_information/"$USERSELECT"	
			fi
			echo "EMAIL_LEVEL=$ACCESSLEVEL" >> /opt/karoshi/server_network/group_information/"$USERSELECT"
			source /opt/karoshi/server_network/group_information/"$USERSELECT"
			for USERNAME in $(getent passwd | grep "$HOMEPATH" | cut -d: -f1)
			do
				USERSELECT="$USERNAME"
				set_access
			done
		fi
	fi

	#Exit the script if it has been called by add user, groups or dynamic_groups.
	if [ "$CALLEDBY" = "add_user" ] || [ "$CALLEDBY" = "groups" ] || [ "$CALLEDBY" = "dynamic_groups" ]
	then
		exit
	fi

	#Show the changes
	if [ ! -z "$GROUP" ]
	then
		USERSELECT="$GROUP"
	fi
	ACTION=view		
fi

if [ $ACTION = view ]
then
	function showdata {
	echo '<tr><td valign="top">'$USERNAME'</td><td><form id="'$USERNAME'" name="viewdata" action="/cgi-bin/admin/email_access.cgi" method="post"><input type="hidden" name="_ACTION_" value="change"><input type="hidden" name="_USERSELECT_" value="'$USERNAME'"><input type="hidden" name="_GROUP_" value="'$GROUP'">
	<select name="_ACCESSLEVEL_" style="width: '$WIDTH2'px; height: '$HEIGHT1'px;" onchange="'$USERNAME'.submit()">
	<option value="1" '$SELECT1'>'$"Full access"'</option>
  	<option value="2" '$SELECT2'>'$"Restricted"'</option>
  	<option value="3" '$SELECT3'>'$"Receive only"'</option>
	<option value="4" '$SELECT4'>'$"Receive only and restricted"'</option>
	<option value="5" '$SELECT5'>'$"Send only"'</option>
	<option value="6" '$SELECT6'>'$"Send only and restricted"'</option>
  	<option value="7" '$SELECT7'>'$"No access"'</option>
	</select></form>
	</td></tr>'
	}

	#Show the email access status for the selected group or user.

	#Check to see if the data is for a username or a group.
	check_user
	GROUP="$USERSELECT"

	if [ $DATATYPE = group ]
	then
		source /opt/karoshi/server_network/group_information/"$GROUP"
		GROUPCOUNT=$(getent passwd | grep -c -w "$HOMEPATH")

		[ -z "$EMAIL_LEVEL" ] && EMAIL_LEVEL=1 
		[ $EMAIL_LEVEL = 2 ] && SELECT2="selected"
		[ $EMAIL_LEVEL = 3 ] && SELECT3="selected"
		[ $EMAIL_LEVEL = 4 ] && SELECT4="selected"
		[ $EMAIL_LEVEL = 5 ] && SELECT5="selected"
		[ $EMAIL_LEVEL = 6 ] && SELECT6="selected"
		[ $EMAIL_LEVEL = 7 ] && SELECT7="selected"

		echo '<table class="'$TABLECLASS'" style="text-align: left;" border="0" cellpadding="2" cellspacing="2"><tbody>
	<tr><td style="width: '$WIDTH1'px;"><b>'$"Group"'</b></td><td><b>'$"Change Status"'</b></td></tr>'
		#Show an option to change the status of all of the users in the group
		USERNAME=$USERSELECT
		showdata
		echo '</tbody></table><br>'
	fi

	#If this is for a group then dont show any info is the group is empty
	if [ $DATATYPE = group ] && [ $GROUPCOUNT = 0 ]
	then
		exit
	fi

	echo '<table class="'$TABLECLASS'" style="text-align: left;" border="0" cellpadding="2" cellspacing="2"><tbody>
	<tr><td style="width: '$WIDTH1'px;"><b>'$"Username"'</b></td><td><b>'$"Status"'</b></td></tr>'

	#Get restricted lists

	if [ $EMAILSERVER = `hostname-fqdn` ]
	then
		#Get list of users on the restricted list
		RESTRICTED_USERS=$(cat /etc/postfix/restricted_accounts | sed "s/	restricted_domains/,/g" | sed "s/@$REALM//g")
		#Get list of users on the deny_sending list
		DENIED_SENDING=$(cat /etc/postfix/deny_sending | sed "s/ REJECT/,/g" | sed "s/@$REALM//g")
		#Get list of users on the deny_receiving list
		DENIED_RECEIVING=$(cat /etc/postfix/deny_receiving | sed "s/ REJECT/,/g" | sed "s/@$REALM//g")
	else
		RESTRICTED_USERS=`ssh -o PasswordAuthentication=no -o ConnectTimeout=3 $EMAILSERVER '
		cat /etc/postfix/restricted_accounts | sed "s/	restricted_domains/,/g" | sed "s/@'$REALM'//g"
		'`
		DENIED_SENDING=`ssh -o PasswordAuthentication=no -o ConnectTimeout=3 $EMAILSERVER '
		cat /etc/postfix/deny_sending | sed "s/ REJECT/,/g" | sed "s/@'$REALM'//g"	
		'`
		DENIED_RECEIVING=`ssh -o PasswordAuthentication=no -o ConnectTimeout=3 $EMAILSERVER '
		cat /etc/postfix/deny_receiving | sed "s/ REJECT/,/g" | sed "s/'@$REALM'//g"	
		'`
	fi
	

	function getuserstatus {
	RESTRICTED=no
	DENYSENDING=no
	DENYRECEIVING=no
	SELECT1="selected"
	SELECT2=""
	SELECT3=""
	SELECT4=""
	SELECT5=""
	SELECT6=""
	SELECT7=""

	#Check if the user is on the restricted list
	if [ $(echo "$RESTRICTED_USERS" | grep -c -w $USERNAME) -gt 0 ]
	then
		RESTRICTED=yes
		SELECT1=""
		SELECT2="selected"
		SELECT3=""
		SELECT4=""
		SELECT5=""
		SELECT6=""
		SELECT7=""
	fi

	#Check if the user is on the deny_sending list
	if [ $(echo "$DENIED_SENDING" | grep -c -w $USERNAME) -gt 0 ]
	then
		DENYSENDING=yes
		if [ $RESTRICTED = no ]
		then
			SELECT1=""
			SELECT2=""
			SELECT3="selected"
			SELECT4=""
			SELECT5=""
			SELECT6=""
			SELECT7=""
		else
			SELECT1=""
			SELECT2=""
			SELECT3=""
			SELECT4="selected"
			SELECT5=""
			SELECT6=""
			SELECT7=""
		fi
	fi

	#Check if the user is on the deny_receiving list
	if [ $(echo "$DENIED_RECEIVING" | grep -c -w $USERNAME) -gt 0 ]
	then
		DENYRECEIVING=yes
		if [ $RESTRICTED = no ] && [ $DENYSENDING = no ]
		then
			SELECT1=""
			SELECT2=""
			SELECT3=""
			SELECT4=""
			SELECT5="selected"
			SELECT6=""
			SELECT7=""
		fi
		if [ $RESTRICTED = yes ] && [ $DENYSENDING = no ]
		then
			SELECT1=""
			SELECT2=""
			SELECT3=""
			SELECT4=""
			SELECT5=""
			SELECT6="selected"
			SELECT7=""
		fi
		if [ $DENYSENDING = yes ]
		then
			SELECT1=""
			SELECT2=""
			SELECT3=""
			SELECT4=""
			SELECT5=""
			SELECT7="selected"
		fi
	fi

	
	}

	if [ $DATATYPE = user ]
	then
		USERNAME="$USERSELECT"
		getuserstatus
		showdata
	else
		#Get a list of all users in the group
		source /opt/karoshi/server_network/group_information/"$USERSELECT"
		for USERNAME in $(getent passwd | grep "$HOMEPATH" | cut -d: -f1 | sort)
		do
			getuserstatus
			showdata
		done
	fi
	
	echo '</tbody></table>'
fi

if [ $ACTION = getchoice ]
then
	#Show the user a choice of username or group to select.
	echo '<form id="form1" name="combobox" action="/cgi-bin/admin/email_access.cgi" method="post"><input type="hidden" name="_ACTION_" value="view"> <table class="'$TABLECLASS'" style="text-align: left;" border="0" cellpadding="2" cellspacing="2"><tbody>
	<tr><td style="width: '$WIDTH1'px;">'$"Username"' / '$"Group"'</td><td><div id="suggestions"></div>
	<input type="text" name="_USERSELECT_" id="inputString" onkeyup="lookup(this.value);" style="width: '$WIDTH2'px; height: '$HEIGHT1'px;" value="" size="10"></td><td valign="middle"><a class="info" target="_blank" href="http://www.linuxschools.com/karoshi/documentation/wiki/index.php?title=E-Mail_Access_Controls"><img class="images" alt="" src="/images/help/info.png"><span>'$"Enter in a username or choose a group from the dropdown list."'</span></a></td></tr>
<tr><td></td><td><select name="_USERSELECTLIST_" style="width: '$WIDTH2'px; height: '$HEIGHT1'px;" size="1" onchange="document.combobox._USERSELECT_.value = document.combobox._USERSELECTLIST_.options[document.combobox._USERSELECTLIST_.selectedIndex].value;document.combobox._USERSELECTLIST_.value=&#39;&#39;">'

/opt/karoshi/web_controls/group_dropdown_list | sed 's/<select name="_GROUP_" style="width: 200px;">//g'


echo '</td></tr></tbody></table><br><br>
	<input value="'$"Submit"'" class="button" type="submit"> <input value="'$"Reset"'" class="button" type="reset"></form>'
fi

