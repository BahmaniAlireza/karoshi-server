#!/bin/bash
#Copyright (C) 2015 Paul Sharrad

#This file is part of Karoshi Server.
#
#Karoshi Server is free software: you can redistribute it and/or modify
#it under the terms of the GNU Affero General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#Karoshi Server is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU Affero General Public License for more details.
#
#You should have received a copy of the GNU Affero General Public License
#along with Karoshi Server.  If not, see <http://www.gnu.org/licenses/>.

#
#The Karoshi Team can be contacted at: 
#mpsharrad@karoshi.org.uk
#jsharrad@karoshi.org.uk

#
#Website: http://www.karoshi.org.uk
LOG_DATE=`date +%F`
[ -z "$LOG_DATE" ] && exit
########################
#Check md5checksum
########################
if ! test -f /opt/karoshi/web_controls/checksums/admin_checksums/email_authentication_cgi
then
	echo `date`: email_authentication - No admin MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
source /opt/karoshi/web_controls/checksums/admin_checksums/email_authentication_cgi
MD5SUM=`md5sum /var/www/cgi-bin_karoshi/admin/email_authentication.cgi | cut -d' ' -f1`
[ -z "$MD5SUM" ] && MD5SUM=not_set
if [ $MD5SUM'check' != $email_authentication_cgi'check' ]
then
	echo `date`: email_authentication - Incorrect admin MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi

########################
#Get variables
########################
numArgs=$#
if [ $numArgs != 0 ]
then
	echo `date`: email_authentication - incorrect number of arguments >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi

read DATA
DATA=`echo $DATA | tr -cd 'A-Za-z0-9\._:%\n-+-' | sed 's/REPLACEUNDERSCORE/_/g'`
if [ -z "$DATA" ]
then
	echo `date`: email_authentication - no data >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
REMOTE_USER=`echo "$DATA" | cut -s -d: -f1`
REMOTE_ADDR=`echo "$DATA" | cut -s -d: -f2`
REMOTE_MD5=`echo "$DATA" | cut -s -d: -f3`
ACTION=`echo "$DATA" | cut -s -d: -f4`
TCPIP=`echo "$DATA" | cut -s -d: -f5`
COMMENT=`echo "$DATA" | cut -s -d: -f6 | sed 's/+/ /g' | sed 's/%2C/,/g' | sed 's/%3A/:/g' | sed 's/%26/\&/g'`
MOBILE=`echo "$DATA" | cut -s -d: -f7`

#Add in some default comments
[ ! -d /opt/karoshi/server_network/email/no_auth_addresses ] && mkdir -p /opt/karoshi/server_network/email/no_auth_addresses
if [ ! -f "/opt/karoshi/server_network/email/no_auth_addresses/127.0.0.1" ]
then
	echo "Sogo Web E-Mail" > /opt/karoshi/server_network/email/no_auth_addresses/127.0.0.1
fi

########################
#Check data
########################
if [ $REMOTE_MD5'check' != $MD5SUM'check' ]
then
	echo `date`: email_authentication - Not called by email_authentication.cgi >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ -z "$REMOTE_USER" ]
then
	echo `date`: email_authentication - Blank remote user >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ -z "$REMOTE_ADDR" ]
then
	echo `date`: email_authentication - Blank remote tcpip address >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ -z "$ACTION" ]
then
	echo `date`: email_authentication - Blank action by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit
fi
if [ $ACTION = reallyadd ] || [ $ACTION = reallydelete ]
then
	if [ -z "$TCPIP" ]
	then
		echo `date`: email_authentication - Blank TCPIP by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
		exit
	fi
fi

if [ "$MOBILE" = no ]
then
	ICON1=/images/submenus/email/email_delete.png
	TABLECLASS=standard
	WIDTH1=150
	WIDTH2=250
	WIDTH3=200
else
	ICON1=/images/submenus/email/email_deletem.png
	TABLECLASS=mobilestandard
	WIDTH1=120
	WIDTH2=170
	WIDTH3=140
fi

EMAILSERVER=$(sed -n 1,1p /opt/karoshi/server_network/emailserver)

if [ $ACTION = reallydelete ]
then
	echo `date`: email_authentication - removing $TCPIP by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	#Remove any comments
	[ -f /opt/karoshi/server_network/email/no_auth_addresses/$TCPIP ] && rm -f /opt/karoshi/server_network/email/no_auth_addresses/$TCPIP

	if [ $EMAILSERVER = `hostname-fqdn` ]
	then
		#Edit main.cf
		if [ $(grep -c -w "$TCPIP" /etc/postfix/main.cf) -gt 0 ]
		then
			MYNETWORKS=$(grep ^mynetworks /etc/postfix/main.cf)
			MYNETWORKS=$(echo "$MYNETWORKS" | sed "s/ $TCPIP //g" | sed "s/ //g" | sed "s/,$//g" | sed "s/,,/,/g" | sed "s/,/ , /g")	
			sed -i "/^mynetworks/c\\$MYNETWORKS" /etc/postfix/main.cf

			#Restart postfix
			source /opt/karoshi/serversetup/variables/distro
			/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/postfix_stop 1>/dev/null 2>/dev/null
			sleep 1
			/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/postfix_start 1>/dev/null 2>/dev/null
		fi
	else
		ssh -o PasswordAuthentication=no -o ConnectTimeout=3 $EMAILSERVER '
		#Edit main.cf
		if [ $(grep -c -w "'$TCPIP'" /etc/postfix/main.cf) -gt 0 ]
		then
			MYNETWORKS=$(grep ^mynetworks /etc/postfix/main.cf)
			MYNETWORKS=$(echo "$MYNETWORKS" | sed "s/ '$TCPIP' //g" | sed "s/ //g" | sed "s/,$//g" | sed "s/,,/,/g" | sed "s/,/ , /g")	
			sed -i "/^mynetworks/c\\$MYNETWORKS" /etc/postfix/main.cf

			#Restart postfix
			source /opt/karoshi/serversetup/variables/distro
			/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/postfix_stop 1>/dev/null 2>/dev/null
			sleep 1
			/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/postfix_start 1>/dev/null 2>/dev/null
		fi
		'
	fi
	ACTION=view
fi

if [ $ACTION = delete ]
then
	echo '<form action="/cgi-bin/admin/email_authentication.cgi" method="post"><table class="'$TABLECLASS'" style="text-align: left;" border="0" cellpadding="2" cellspacing="2"><tbody><tr><td style="width: '$WIDTH1'px;"><b>'$"TCPIP"'</b></td><td style="width: '$WIDTH2'px;"><b>'$"Comment"'</td></td></tr>
<tr><td>'$TCPIP'</td><td>'$COMMENT'</td><td></tr>
</tbody></table><br>'$"Remove this TCPIP address?"'<br><br>
<input type="hidden" name="____ACTION____" value="reallydelete">
<input type="hidden" name="____TCPIP____" value="'$TCPIP'">
<input value='$"Submit"' class="button" type="submit"></form>
'

fi

if [ $ACTION = reallyadd ]
then
	echo `date`: email_authentication - adding $TCPIP by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE

	#Add save comment
	echo "$COMMENT" > /opt/karoshi/server_network/email/no_auth_addresses/"$TCPIP"

	if [ $EMAILSERVER = `hostname-fqdn` ]
	then
		#Add entry to main.cf if the entry is not already there
		if [ $(grep -c -w "$TCPIP" /etc/postfix/main.cf) = 0 ]
		then
			MYNETWORKS=$(grep ^mynetworks /etc/postfix/main.cf)
			MYNETWORKS="$MYNETWORKS , $TCPIP"
			sed -i "/^mynetworks/c\\$MYNETWORKS" /etc/postfix/main.cf

			#Restart postfix
			source /opt/karoshi/serversetup/variables/distro
			/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/postfix_stop 1>/dev/null 2>/dev/null
			sleep 1
			/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/postfix_start 1>/dev/null 2>/dev/null
		fi
	else
		ssh -o PasswordAuthentication=no -o ConnectTimeout=3 $EMAILSERVER '
		#Add entry to main.cf if the entry is not already there
		if [ $(grep -c -w "'$TCPIP'" /etc/postfix/main.cf) = 0 ]
		then
			MYNETWORKS=$(grep ^mynetworks /etc/postfix/main.cf)
			MYNETWORKS="$MYNETWORKS , '$TCPIP'"
			sed -i "/^mynetworks/c\\$MYNETWORKS" /etc/postfix/main.cf

			#Restart postfix
			source /opt/karoshi/serversetup/variables/distro
			/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/postfix_stop 1>/dev/null 2>/dev/null
			sleep 1
			/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/postfix_start 1>/dev/null 2>/dev/null
		fi
		'
	fi
	#Show list of allowed TCPIP addresses
	ACTION=view
fi


if [ $ACTION = add ]
then
	echo '<form action="/cgi-bin/admin/email_authentication.cgi" method="post"><table class="'$TABLECLASS'" style="text-align: left;" border="0" cellpadding="2" cellspacing="2"><tbody>
	<tr><td style="width: '$WIDTH1'px;">'$"TCPIP"'</td><td><input tabindex= "1" value="'$TCPIP'" name="____TCPIP____" style="width: '$WIDTH3'px;" size="20" type="text"></td><td><a class="info" target="_blank" href="http://www.linuxschools.com/karoshi/documentation/wiki/index.php?title=E-Mail_Authentication"><img class="images" alt="" src="/images/help/info.png"><span>'$"Enter in the TCPIP address of a device that you want to be able to send E-Mail from without having to authenticate."'</span></a></td></tr><tr><td>'$"Comment"'</td><td><input tabindex= "2" value="'$COMMENT'" name="____COMMENT____" style="width: '$WIDTH3'px;" size="60" type="text"></td><td><a class="info" target="_blank" href="http://www.linuxschools.com/karoshi/documentation/wiki/index.php?title=E-Mail_Authentication"><img class="images" alt="" src="/images/help/info.png"><span>'$"Enter in a comment for the TCPIP address."'</span></a></td></tr></tbody></table><br><br><input type="hidden" name="____ACTION____" value="reallyadd"> <input value="'$"Submit"'" class="button" type="submit"></form>'
fi

if [ $ACTION = view ]
then
	#Get a list of allowed tcpip addresses
	if [ $EMAILSERVER = `hostname-fqdn` ]
	then
		ALLOWED_LIST=$(grep ^mynetworks /etc/postfix/main.cf | cut -d"=" -f2 | sed "s/,/ /g" | sed "s/ * / /g" | sed "s/^ //g")
	else
		ALLOWED_LIST=$(ssh -o PasswordAuthentication=no -o ConnectTimeout=3 $EMAILSERVER '
		grep ^mynetworks /etc/postfix/main.cf | cut -d"=" -f2 | sed "s/,/ /g" | sed "s/ * / /g" | sed "s/^ //g"
		')
	fi
	
	echo '<form action="/cgi-bin/admin/email_authentication.cgi" method="post">'

	echo "<table class="$TABLECLASS" style=\"text-align: left;\" border=\"0\" cellpadding=\"2\" cellspacing=\"2\"><tbody>
	<tr><td style=\"width: $WIDTH1\px;\"><b>"$"TCPIP""</b></td><td style=\"width: $WIDTH2\px;\"><b>"$"Comment""</td></td></tr>"
	#Show all allowed tcpip addresses
	for ALLOWED in $ALLOWED_LIST
	do
		if [ -f /opt/karoshi/server_network/email/no_auth_addresses/$ALLOWED ]
		then
			COMMENT=$(cat /opt/karoshi/server_network/email/no_auth_addresses/$ALLOWED)
		else
			COMMENT=""
		fi
		echo '<tr><td>'$ALLOWED'</td><td>'$COMMENT'</td>'
		if [ $ALLOWED != 127.0.0.1 ]
		then
			echo '<td><a class="info" href="javascript:void(0)"><input name="____ACTION____delete____TCPIP____'$ALLOWED'____COMMENT____'$COMMENT'____" type="image" class="images" src="'$ICON1'" value=""><span>'$"Remove"'<br>'$ALLOWED'</span></a></td>'
		fi
		echo '</tr>'
	done
	echo "</tbody></table>"

	echo '</form>'

fi


