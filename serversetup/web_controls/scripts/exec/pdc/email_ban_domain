#!/bin/bash
#Copyright (C) 2011 Paul Sharrad

#This file is part of Karoshi Server.
#
#Karoshi Server is free software: you can redistribute it and/or modify
#it under the terms of the GNU Affero General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#Karoshi Server is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU Affero General Public License for more details.
#
#You should have received a copy of the GNU Affero General Public License
#along with Karoshi Server.  If not, see <http://www.gnu.org/licenses/>.

#
#The Karoshi Team can be contacted at: 
#mpsharrad@karoshi.org.uk
#jsharrad@karoshi.org.uk

#
#Website: http://www.karoshi.org.uk
LOG_DATE=`date +%F`
########################
#Check md5checksum
########################
if ! test -f /opt/karoshi/web_controls/checksums/admin_checksums/email_ban_domain_cgi
then
echo `date`: email_ban_domain - No admin MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
source /opt/karoshi/web_controls/checksums/admin_checksums/email_ban_domain_cgi
MD5SUM=`md5sum /var/www/cgi-bin_karoshi/admin/email_ban_domain.cgi | cut -d' ' -f1`
[ $MD5SUM'null' = null ] && MD5SUM=not_set
if [ $MD5SUM'check' != $email_ban_domain_cgi'check' ]
then
echo `date`: email_ban_domain - Incorrect admin MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi

########################
#Get variables
########################
numArgs=$#
if [ $numArgs != 0 ]
then
echo `date`: email_ban_domain - incorrect number of arguments >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi

read DATA
DATA=`echo $DATA | tr -cd 'A-Za-z0-9\._:\-'`
if [ $DATA'null' = null ]
then
echo `date`: email_ban_domain - no data >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
REMOTE_USER=`echo "$DATA" | cut -s -d: -f1`
REMOTE_ADDR=`echo "$DATA" | cut -s -d: -f2`
REMOTE_MD5=`echo "$DATA" | cut -s -d: -f3`
EMAILDOMAIN=`echo "$DATA" | cut -s -d: -f4`
DROPTYPE=`echo "$DATA" | cut -s -d: -f5`

########################
#Check data
########################
if [ $REMOTE_MD5'check' != $MD5SUM'check' ]
then
echo `date`: email_ban_domain - Not called by email_ban_domain.cgi or bulk_user_creation_create.cgi >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
if [ -z $REMOTE_USER ]
then
echo `date`: email_ban_domain - Blank remote user >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
if [ -z $REMOTE_ADDR ]
then
echo `date`: email_ban_domain - Blank remote tcpip address >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
if [ -z $EMAILDOMAIN ]
then
echo `date`: email_ban_domain - Blank email domain by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi

if [ -z $DROPTYPE ]
then
echo `date`: email_ban_domain - Blank email droptype by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi

if [ `grep -c ^$REMOTE_USER: /opt/karoshi/web_controls/web_access_admin` != 1 ]
then
echo `date`: email_ban_domain - access denied to $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi

if [ ! -f /opt/karoshi/server_network/emailserver ]
then
echo `date`: email_ban_domain -no email server by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi

EMAILSERVER=`sed -n 1,1p /opt/karoshi/server_network/emailserver`

echo `date`: email_ban_domain -banning $EMAILDOMAIN $DROPTYPE by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE

if [ $EMAILSERVER = `hostname-fqdn` ]
then
if [ `grep -c ^$EMAILDOMAIN /etc/postfix/access` = 0 ]
then
echo $EMAILDOMAIN"	"$DROPTYPE >> /etc/postfix/access
#Sort access file
sort /etc/postfix/access > /etc/postfix/access.$$
rm -f /etc/postfix/access
mv /etc/postfix/access.$$ /etc/postfix/access
#Refress access db
postmap hash:/etc/postfix/access
#Reload Postfix
service postfix reload 1>/dev/null
fi
else

ssh -o PasswordAuthentication=no -o ConnectTimeout=3 -o ConnectTimeout=2 $EMAILSERVER '
if [ `grep -c ^'$EMAILDOMAIN' /etc/postfix/access` = 0 ]
then
echo '$EMAILDOMAIN'"	"'$DROPTYPE' >> /etc/postfix/access
#Sort access file
sort /etc/postfix/access > /etc/postfix/access.$$
rm -f /etc/postfix/access
mv /etc/postfix/access.$$ /etc/postfix/access
#Refress access db
postmap hash:/etc/postfix/access
#Reload Postfix
service postfix reload 1>/dev/null
fi
'
fi

exit

