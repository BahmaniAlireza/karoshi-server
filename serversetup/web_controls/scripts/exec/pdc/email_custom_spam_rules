#!/bin/bash
#Copyright (C) 2017  Paul Sharrad

#This file is part of Karoshi Server.
#
#Karoshi Server is free software: you can redistribute it and/or modify
#it under the terms of the GNU Affero General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#Karoshi Server is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU Affero General Public License for more details.
#
#You should have received a copy of the GNU Affero General Public License
#along with Karoshi Server.  If not, see <http://www.gnu.org/licenses/>.

#
#The Karoshi Team can be contacted at: 
#mpsharrad@karoshi.org.uk
#jsharrad@karoshi.org.uk

#
#Website: http://www.karoshi.org.uk
LOG_DATE=$(date +%F)
[ -z "$LOG_DATE" ] && exit

########################
#Check md5checksum
########################
if ! test -f /opt/karoshi/web_controls/checksums/admin_checksums/email_custom_spam_rules_cgi
then
	echo "$(date): email_custom_spam_rules - No admin MD5Checksum" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi
source /opt/karoshi/web_controls/checksums/admin_checksums/email_custom_spam_rules_cgi
MD5SUM=$(md5sum /var/www/cgi-bin_karoshi/admin/email_custom_spam_rules.cgi | cut -d' ' -f1)
[ -z "$MD5SUM" ] && MD5SUM=not_set
if [ "$MD5SUM" != "$email_custom_spam_rules_cgi" ]
then
	echo "$(date): email_custom_spam_rules - Incorrect admin MD5Checksum" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi

########################
#Get variables
########################
numArgs=$#
if [ "$numArgs" != 0 ]
then
	echo "$(date): email_custom_spam_rules - incorrect number of arguments" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi

read DATA
DATA=$(echo "$DATA" | tr -cd 'A-Za-z0-9\._:\-')
if [ -z "$DATA" ]
then
	echo "$(date): email_custom_spam_rules - no data" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi
REMOTE_USER=$(echo "$DATA" | cut -s -d: -f1)
REMOTE_ADDR=$(echo "$DATA" | cut -s -d: -f2)
REMOTE_MD5=$(echo "$DATA" | cut -s -d: -f3)
ACTION=$(echo "$DATA" | cut -s -d: -f4)
RULEDATA=$(echo "$DATA" | cut -s -d: -f5)
RULEDATA2=$(echo "$DATA" | cut -s -d: -f6)
RULESCORE=$(echo "$DATA" | cut -s -d: -f7)
MOBILE=$(echo "$DATA" | cut -s -d: -f8)
########################
#Check data
########################
if [ "$REMOTE_MD5" != "$MD5SUM" ]
then
	echo "$(date): email_custom_spam_rules - Not called by email_custom_spam_rules.cgi" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi
if [ -z "$REMOTE_USER" ]
then
	echo "$(date): email_custom_spam_rules - Blank remote user" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi
if [ -z "$REMOTE_ADDR" ]
then
	echo "$(date): email_custom_spam_rules - Blank remote tcpip address" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi
if [[ $(grep -c ^"$REMOTE_USER": /opt/karoshi/web_controls/web_access_admin) != 1 ]]
then
	echo "$(date): email_custom_spam_rules - access denied to $REMOTE_USER from $REMOTE_ADDR" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi
if [ -z "$ACTION" ]
then
	ACTION=view
fi

############################
#Language
############################

[ -f "/opt/karoshi/web_controls/user_prefs/$REMOTE_USER" ] && source "/opt/karoshi/web_controls/user_prefs/$REMOTE_USER"
export TEXTDOMAIN=karoshi-server
source /opt/karoshi/server_network/domain_information/domain_name

if [ "$MOBILE" = no ]
then
	TABLECLASS=standard
	WIDTH1=300
	WIDTH2=80
	WIDTH3=80
	WIDTH4=200
	ICON1="/images/submenus/file/edit.png"
	ICON2="/images/submenus/file/delete.png"
else
	TABLECLASS=mobilestandard
	WIDTH1=80
	WIDTH2=60
	WIDTH3=70
	WIDTH4=100
	ICON1="/images/submenus/file/editm.png"
	ICON2="/images/submenus/file/deletem.png"
fi

input="/opt/karoshi/server_network/email/custom_spam_rules"
output="/opt/karoshi/server_network/email/custom_spam_rules.cf"

function refreshpage {
#Reload the page

echo '<form id="refreshpage" action="/cgi-bin/admin/email_custom_spam_rules.cgi" method="post"><script type="text/javascript">
document.getElementById("refreshpage").submit(); // SUBMIT FORM
</script></form>'
}

if [ "$ACTION" = activatechanges ]
then
	EMAILSERVER=$(sed -n 1,1p /opt/karoshi/server_network/emailserver)
	echo '<ul><li>'"$EMAILSERVER"' - '$"Restarting MailScanner"'</li></ul>'
	#Copy rule to spamassassin folder
	if [[ "$EMAILSERVER" = $(hostname-fqdn) ]]
	then
		cp "$output" /etc/spamassassin/
		#At the moment spamasssin only seems to see new rules if we completely restart mailscanner
		service mailscanner restart 1>/dev/null
	else
		scp "$output" root@"$EMAILSERVER":/etc/spamassassin/
		ssh -o PasswordAuthentication=no -o ConnectTimeout=3 "$EMAILSERVER" '
		#At the moment spamasssin only seems to see new rules if we completely restart mailscanner
		service mailscanner restart 1>/dev/null
		'
	fi
	[ -f /opt/karoshi/server_network/email/activate_spam_rule_changes ] && rm -f /opt/karoshi/server_network/email/activate_spam_rule_changes
	ACTION=view
	refreshpage
fi

function create_spam_assassin_file {
[ -f "$output" ] && rm -f "$output"
if [ -f "$input" ]
then
	i=1
	while IFS= read -r data
	do
		if [ ! -z "$data" ]
		then
			RDATA=$(echo "$data" | cut -d, -f1)
			RSCORE=$(echo "$data" | cut -d, -f2)
			#Make sure we have no dots in the rule name
			RNAME=${RDATA//./}
			echo "body	rule""$i""_$RNAME	/\\b$RDATA\\b/i" >> "$output"
			echo -e "score	rule""$i""_$RNAME	$RSCORE\n" >> "$output"
			((i++))
		fi
	done < "$input"
else
	touch "$output"
fi
#Create activate changes flag file
touch /opt/karoshi/server_network/email/activate_spam_rule_changes
}

if [ "$ACTION" = reallydelete ]
then
	echo "$(date): email_custom_spam_rules - deleting $RULEDATA by $REMOTE_USER from $REMOTE_ADDR" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	sed -i '/^'"$RULEDATA"',/d' "$input"
	#Check to see if we have any lines left
	if [[ $(wc -c < "$input") = 0 ]]
	then
		rm -f "$input"
	fi
	create_spam_assassin_file
	refreshpage
fi

if [ "$ACTION" = delete ]
then
	#Confirm delete request
	echo '
	<form style="display: inline;" action="/cgi-bin/admin/email_custom_spam_rules.cgi" method="post">
	<input type="hidden" name="_ACTION_" value="reallydelete">
	<input type="hidden" name="_RULEDATA_" value="'"$RULEDATA"'">
	<table id="myTable" class="tablesorter" style="text-align: left;" ><thead><tr><th style="width: '"$WIDTH1"'px;"><b>'$"Criteria"'</b></th><th style="width: '"$WIDTH2"'px;"><b>'$"Score"'</b></th></thead><tbody>
	<tr><td>'"$RULEDATA"'</td><td>'"$RULESCORE"'</td></tr>
	</tbody></table><br>
	'$"Are you sure that you want to delete this rule?"'
	<br><br>
	<input value="'$"Delete"'" class="button" type="submit"></form>
	<form style="display: inline;" action="/cgi-bin/admin/email_custom_spam_rules.cgi" method="post"><input value="'$"Cancel"'" class="button" type="submit"></form>'
fi

if [ "$ACTION" = reallyadd ] || [ "$ACTION" = reallyedit ]
then
	echo "$(date): email_custom_spam_rules - adding $RULEDATA with score $RULESCORE by $REMOTE_USER from $REMOTE_ADDR" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	[ ! -d /opt/karoshi/server_network/email/ ] && mkdir /opt/karoshi/server_network/email/
	touch "$input"

	if [ ! -z "$RULEDATA2" ]
	then
		sed -i '/^'"$RULEDATA2"',/d' "$input"
	fi

	if [[ $(grep -c ^"$RULEDATA," "$input") = 0 ]]
	then
		echo "$RULEDATA,$RULESCORE" >> "$input"
		sort "$input" > "$input".$$
		rm -f "$input"
		mv "$input".$$ "$input"
		create_spam_assassin_file
	fi
	refreshpage
fi

if [ "$ACTION" = add ] || [ "$ACTION" = edit ]
then

	ACTION2=reallyadd
	BUTTONTEXT=$"Add"
	if [ "$ACTION" = edit ]
	then
		ACTION2=reallyedit
		BUTTONTEXT=$"Edit"
	fi
	echo '<form style="display: inline;" action="/cgi-bin/admin/email_custom_spam_rules.cgi" method="post"><input name="_ACTION_" value="'$ACTION2'" type="hidden">'

	[ "$ACTION" = edit ] && echo '<input name="_RULEDATA2_" value="'"$RULEDATA"'" type="hidden">'

	echo '<table class="'"$TABLECLASS"'" style="text-align: left;" >
	<tbody><tr><td style="width: '$WIDTH4'px;">'$"Criteria"'</td>
	<td><input tabindex= "1" name="_RULEDATA_" style="width: '"$WIDTH4"'px;" value="'"$RULEDATA"'" size="20" type="text"></td><td>
	<a class="info" target="_blank" href="http://www.linuxschools.com/karoshi/documentation/wiki/index.php?title=E-Mail_Custom_Spam_Rules"><img class="images" alt="" src="/images/help/info.png"><span>'$"Enter in the search criteria for this rule. Be careful not to cause false positives."'<br><br>'$"Use a . as a wildcard letter."'<br><br>'$"This is not case sensitive."'</span></a>
	</td></tr>
	<tr><td>'$"Score"'</td><td>
	<select name="_RULESCORE_" style="width: '"$WIDTH4"'px;">'

	if [ ! -z "$RULESCORE" ]
	then 
		echo '<option value="'"$RULESCORE"'">'"$RULESCORE"'</option>
		<option disabled>----------------</option>'

	fi
	for i in $(seq 1 15)
	do
		echo '<option value="'"$i"'">'"$i"'</option>'
	done
	echo '</select> 
	</td><td><a class="info" target="_blank" href="http://www.linuxschools.com/karoshi/documentation/wiki/index.php?title=E-Mail_Custom_Spam_Rules"><img class="images" alt="" src="/images/help/info.png"><span>'$"Choose the spam score that you want for this rule."'</span></a></td></tr></tbody></table><br><br>
	<input value="'$BUTTONTEXT'" class="button" type="submit"></form>
	<form style="display: inline;" action="/cgi-bin/admin/email_custom_spam_rules.cgi" method="post"><input value="'$"Cancel"'" class="button" type="submit"></form>'
fi

#View custom spam rules
if [ "$ACTION" = view ]
then
	if [ -f "$input" ]
	then
		echo '<form action="/cgi-bin/admin/email_custom_spam_rules.cgi" method="post"><table id="myTable" class="tablesorter" style="text-align: left;" ><thead><tr><th style="width: '"$WIDTH1"'px;"><b>'$"Criteria"'</b></th><th style="width: '"$WIDTH2"'px;"><b>'$"Score"'</b></th><th style="width: '"$WIDTH3"'px;"><b>'$"Edit"'</b></th><th style="width: '"$WIDTH3"'px;"><b>'$"Delete"'</b></th></tr></thead><tbody>'

		while IFS= read -r data
		do
			if [ ! -z "$data" ]
			then
				RULEDATA=$(echo "$data" | cut -d, -f1)
				SCORE=$(echo "$data" | cut -d, -f2)
				echo '<tr><td>'"$RULEDATA"'</td><td>'"$SCORE"'</td><td>
				<button class="info" name="_Edit" value="_ACTION_edit_RULEDATA_'"$RULEDATA"'_RULESCORE_'"$SCORE"'_">
				<img src="'$ICON1'" alt="'$"Edit"'">
				<span>'$"Edit"'<br>'"$RULEDATA"'</span>
				</button>
				</td><td>
				<button class="info" name="_Delete" value="_ACTION_delete_RULEDATA_'"$RULEDATA"'_RULESCORE_'"$SCORE"'_">
				<img src="'"$ICON2"'" alt="'$"Delete"'">
				<span>'$"Delete"'<br>'"$RULEDATA"'</span>
				</button>
				</td></tr>'
			fi
		done < "$input"
		echo '</tbody></table></form>'
	else
		echo $"No custom spam rules have been added."
	fi
fi

exit

