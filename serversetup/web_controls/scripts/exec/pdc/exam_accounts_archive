#!/bin/bash
#Copyright (C) 2007 Paul Sharrad

#This file is part of Karoshi Server.
#
#Karoshi Server is free software: you can redistribute it and/or modify
#it under the terms of the GNU Affero General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#Karoshi Server is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU Affero General Public License for more details.
#
#You should have received a copy of the GNU Affero General Public License
#along with Karoshi Server.  If not, see <http://www.gnu.org/licenses/>.

#
#The Karoshi Team can be contacted at: 
#mpsharrad@karoshi.org.uk
#jsharrad@karoshi.org.uk

#
#Website: http://www.karoshi.org.uk
LOG_DATE=$(date +%F)
[ -z "$LOG_DATE" ] && exit
########################
#Check md5checksum
########################
if ! test -f /opt/karoshi/web_controls/checksums/admin_checksums/exam_accounts_archive_cgi
then
	echo "$(date): exam_accounts_archive - No MD5Checksum" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi
source /opt/karoshi/web_controls/checksums/admin_checksums/exam_accounts_archive_cgi
MD5Sum=$(md5sum /var/www/cgi-bin_karoshi/admin/exam_accounts_archive.cgi | cut -d' ' -f1)
[ -z "$MD5Sum" ] && MD5Sum=not_set
if [ "$MD5Sum"'check' != "$exam_accounts_archive_cgi"'check' ]
then
	echo "$(date): exam_accounts_archive - Incorrect MD5Checksum" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi
########################
#Get variables
########################
numArgs=$#
if [ "$numArgs" != 0 ]
then
	echo "$(date): exam_accounts_archive - incorrect number of arguments" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi

read DATA
DATA=$(echo "$DATA" | tr -cd 'A-Za-z0-9\._:%\n-+-')

RemoteUser=$(echo "$DATA" | cut -s -d: -f1)
RemoteAddress=$(echo "$DATA" | cut -s -d: -f2)
RemoteMD5=$(echo "$DATA" | cut -s -d: -f3)
UserName=$(echo "$DATA" | cut -s -d: -f4)
Group=$(echo "$DATA" | cut -s -d: -f5)
Server=$(echo "$DATA" | cut -s -d: -f6)
Share=$(echo "$DATA" | cut -s -d: -f7)
Exceptionlist=$(echo "$DATA" | cut -s -d: -f8)
Delete=$(echo "$DATA" | cut -s -d: -f9)

########################
#Check data
########################
if [ "$RemoteMD5"'check' != "$MD5Sum"'check' ]
then
	echo "$(date): exam_accounts_archive - Not called by exam_accounts_archive.cgi" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi
if [ -z "$RemoteUser" ]
then
	echo "$(date): exam_accounts_archive - Blank remote user" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi
if [ -z "$RemoteAddress" ]
then
	echo "$(date): exam_accounts_archive - Blank remote tcpip address" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi
if [[ $(grep -c ^"$RemoteUser:" /opt/karoshi/web_controls/web_access_admin) != 1 ]]
then
	echo "$(date): exam_accounts_archive - access denied to $RemoteUser from $RemoteAddress" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi

if [ -z "$Server" ]
then
	echo "$(date): exam_accounts_archive - blank server" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi

if [ -z "$Share" ]
then
	echo "$(date): exam_accounts_archive - blank network share" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi

if [ -z "$UserName" ] &&  [ -z "$Group" ]
then
	echo "$(date): exam_accounts_archive - no username or group specified" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi

[ -z "$Delete" ] && Delete=no

[ -z "$UserName" ] && UserName=root
[ -z "$Group" ] && Group=root

DAY=$(date +%d)
MONTH=$(date +%b)
TIME=$(date +%T)
YEAR=$(date +%Y)
ArchiveFolder=$(echo "$DAY""-$MONTH""-$YEAR"".$TIME")

if [ -z "$Exceptionlist" ]
then
	echo "$(date): exam_accounts_archive - Archiving exam accounts to $Server://$Share by $RemoteUser from $RemoteAddress" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
else
	echo "$(date): exam_accounts_archive - Archiving exam accounts apart from to $Server://$Share by $Exceptionlist by $RemoteUser from $RemoteAddress" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
fi

#Get the network share path
source "/opt/karoshi/server_network/network_shares/$Server/$Share"

#Create the archive folder
if [[ "$Server" = $(hostname-fqdn) ]]
then
	if [ ! -d "$SHAREPATH/examfiles/$ArchiveFolder" ]
	then
		mkdir -p "$SHAREPATH/examfiles/$ArchiveFolder"
		chown $UserName.$Group "$SHAREPATH/examfiles/$ArchiveFolder"
		chmod 0770 "$SHAREPATH/examfiles/$ArchiveFolder"
		chmod 0755 "$SHAREPATH/examfiles"
	fi
else
	ssh -o PasswordAuthentication=no -o ConnectTimeout=3 "$Server" '
	if [ ! -d "'"$SHAREPATH"'/examfiles/'"$ArchiveFolder"'" ]
	then
		mkdir -p "'"$SHAREPATH"'/examfiles/'"$ArchiveFolder"'"
		chown '"$UserName"'.'"$Group"' "'"$SHAREPATH"'/examfiles/'"$ArchiveFolder"'"
		chmod 0770 "'"$SHAREPATH"'/examfiles/'"$ArchiveFolder"'"
		chmod 0755 "'"$SHAREPATH"'/examfiles"
	fi
	'
fi

#Copy the exam account home areas to the archive folder
ExamCount=$(ls -1 /home/users/exams/ | wc -l)
Counter=1
while [ "$Counter" -le "$ExamCount" ]
do
	if [[ $(echo "$Exceptionlist" | grep -c -w exam"$Counter") = 0 ]]
	then 
		echo '<ul><li>'$"Archiving"' exam'"$Counter"'</li></ul>'
		if [[ "$Server" = $(hostname-fqdn) ]]
		then
			cp -f -R /home/users/exams/exam"$Counter" "$SHAREPATH/examfiles/$ArchiveFolder"/	
		else
			scp -r /home/users/exams/exam"$Counter" root@"$Server:/$SHAREPATH/examfiles/$ArchiveFolder"
		fi
		#Don't delete the exam account home area if there was a problem archiving the files
		if [ "$?" = 0 ]
		then
			if [ "$Delete" = yes ]
			then
				echo '<ul><li>'$"Clearing"' exam'"$Counter"'</li></ul>'
				rm -R -f /home/users/exams/exam"$Counter"
				mkdir /home/users/exams/exam"$Counter"
				chmod 0700 /home/users/exams/exam"$Counter"
				chown exam"$Counter".exams /home/users/exams/exam"$Counter"
			fi
		else
			echo "<ul><li>There was a problem archiving exam$Counter</li></ul>"
		fi
	fi
	let Counter="$Counter"+1
done

#Set the permissions on the archive folder
if [[ "$Server" = $(hostname-fqdn) ]]
then
	chown -R "$UserName"."$Group" "$SHAREPATH/examfiles/$ArchiveFolder"
	chmod -R 0660 "$SHAREPATH/examfiles/$ArchiveFolder"
	chmod -R u+X,g+X "$SHAREPATH/examfiles/$ArchiveFolder"
else
	ssh -o PasswordAuthentication=no -o ConnectTimeout=3 "$Server" '
	chown -R "'"$UserName"'.'"$Group"'" "'"$SHAREPATH"'/examfiles/'"$ArchiveFolder"'"
	chmod -R 0660 "'"$SHAREPATH"'/examfiles/'"$ArchiveFolder"'"
	chmod -R u+X,g+X "'"$SHAREPATH"'/examfiles/'"$ArchiveFolder"'"
	'
fi
exit
