#!/bin/bash
#Copyright (C) 2009 Paul Sharrad

#This file is part of Karoshi SERVERNAME.
#
#Karoshi SERVERNAME is free software: you can redistribute it and/or modify
#it under the terms of the GNU Affero General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#Karoshi SERVERNAME is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU Affero General Public License for more details.
#
#You should have received a copy of the GNU Affero General Public License
#along with Karoshi SERVERNAME.  If not, see <http://www.gnu.org/licenses/>.

#
#The Karoshi Team can be contacted at: 
#mpsharrad@karoshi.org.uk
#jsharrad@karoshi.org.uk

#
#Website: http://www.karoshi.org.uk
LOG_DATE=$(date +%F)
########################
#Check md5checksum
########################
if ! test -f /opt/karoshi/web_controls/checksums/admin_checksums/file_manager_cgi
then
	echo "$(date): file_manager - No admin MD5Checksum" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi
source /opt/karoshi/web_controls/checksums/admin_checksums/file_manager_cgi
MD5SUM=$(md5sum /var/www/cgi-bin_karoshi/admin/file_manager.cgi | cut -d' ' -f1)
[ -z "$MD5SUM" ] && MD5SUM=not_set
if [ "$MD5SUM"'check' != "$file_manager_cgi"'check' ]
then
	echo "$(date): file_manager - Incorrect admin MD5Checksum" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi

########################
#Get variables
########################
numArgs=$#
if [ "$numArgs" != 0 ]
then
	echo "$(date): file_manager - incorrect number of arguments" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi

read DATA
DATA=$(echo "$DATA" | tr -cd 'A-Za-z0-9\._,:\-+/%')
#echo $DATA"<br>"
if [ -z "$DATA" ]
then
	echo "$(date): file_manager - no data" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi

REMOTE_USER=$(echo "$DATA" | cut -s -d: -f1)
REMOTE_ADDR=$(echo "$DATA" | cut -s -d: -f2)
REMOTE_MD5=$(echo "$DATA" | cut -s -d: -f3)
MOBILE=$(echo "$DATA" | cut -s -d: -f4)
SERVERNAME=$(echo "$DATA" | cut -s -d: -f5)
SERVERTYPE=$(echo "$DATA" | cut -s -d: -f6)
SERVERMASTER=$(echo "$DATA" | cut -s -d: -f7)
LOCATION=$(echo "$DATA" | cut -s -d: -f8)
FILENAME=$(echo "$DATA" | cut -s -d: -f9)
ACTION=$(echo "$DATA" | cut -s -d: -f10)
PERMISSIONS=$(echo "$DATA" | cut -s -d: -f11)
ITEMMOVE=$(echo "$DATA" | cut -s -d: -f14 | sed "s/_/Z%%%%%Z/g")
NEWFOLDER=$(echo "$DATA" | cut -s -d: -f15)

########################
#Check data
########################
if [ "$REMOTE_MD5"'check' != "$MD5SUM"'check' ] && [ "$REMOTE_MD5"'check' != "$MD5SUM2"'check' ]
then
	echo "$(date): file_manager - Not called by file_manager.cgi" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi
if [ -z "$REMOTE_USER" ]
then
	echo "$(date): file_manager - Blank remote user" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi
if [ -z "$REMOTE_ADDR" ]
then
	echo "$(date): file_manager - Blank remote tcpip address" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi

if [ -z "$LOCATION" ]
then
	LOCATION=""
fi

if [ -z "$SERVERNAME" ]
then
	SERVERNAME=notset
fi

if [ -z "$ACTION" ]
then
	ACTION=notset
fi

ifnotset ] && [ "$ACTION" != DELETEACLPERMS ] && [ "$ACTION" != REALLYDELETEACLPERMS ] && [ "$ACTION" != ADDACLPERMS ] && [ "$ACTION" != REALLYADDACLPERMS ]
then
	echo "$(date): file_manager - incorrect action by $REMOTE_USER from $REMOTE_ADDR" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi

if [[ $(grep -c ^"$REMOTE_USER": /opt/karoshi/web_controls/web_access_admin) != 1 ]]
then
	echo "$(date): file_manager - access denied to $REMOTE_USER from $REMOTE_ADDR" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi

[ -f /opt/karoshi/web_controls/user_prefs/"$REMOTE_USER" ] && source /opt/karoshi/web_controls/user_prefs/"$REMOTE_USER"
export TEXTDOMAIN=karoshi-server
SHOWMOVE=no
MOVECHECK=yes
#icons
if [ "$MOBILE" = no ]
then
	TABLECLASS=standard
	ROWCOUNT=6
	WIDTH=90
	WIDTH2=120
	WIDTH3=370
	WIDTH4=60
	WIDTH5=90
	WIDTH6=140
	WIDTH7=70
	WIDTH8=100

	COLSIZE=95
	ROWSIZE=28
	SERVERICON="/images/submenus/system/computer.png"
	SERVERICON2="/images/submenus/system/all_computers.png"
	ICON2=/images/submenus/file/show_info.png
	ICON3=/images/submenus/file/rename.png
	ICON4=/images/submenus/file/copy.png
	ICON5=/images/submenus/file/delete.png
	ICON6=/images/submenus/file/up.png
	ICON7=/images/submenus/file/home.png
	ICON8=/images/submenus/file/stop.png
	ICON9=/images/submenus/file/move.png
	ICON10=/images/submenus/file/edit.png
	ICON11=/images/submenus/file/newfolder.png
	ICON12=/images/submenus/file/restore.png
	ICON13=/images/submenus/file/reload.png
	ICON14=/images/submenus/file/create.png
	ICON15=/images/submenus/file/file.png
	ICON16=/images/submenus/file/folder.png
	ICON17=/images/submenus/file/search.png
	ICON18=/images/submenus/system/computer.png
	COLSPAN=5
	COLSPAN2=6
	COLWIDTH=22
	VIEWWIDTH1=35
	VIEWWIDTH2=520
	VIEWWIDTH3=80
	VIEWHEIGHT1=36
	INFOCLASS1="info"
else
	ROWCOUNT=3
	WIDTH=70
	WIDTH2=90
	WIDTH3=100
	WIDTH4=50
	WIDTH5=60
	WIDTH6=100
	WIDTH7=70
	WIDTH8=90
	COLSIZE=36
	ROWSIZE=26
	TABLECLASS=mobilestandard
	SERVERICON="/images/submenus/system/computerm.png"
	SERVERICON2="/images/submenus/system/all_computersm.png"
	ICON2=/images/submenus/file/show_infom.png
	ICON3=/images/submenus/file/renamem.png
	ICON4=/images/submenus/file/copym.png
	ICON5=/images/submenus/file/deletem.png
	ICON6=/images/submenus/file/upm.png
	ICON7=/images/submenus/file/homem.png
	ICON8=/images/submenus/file/stop.png
	ICON9=/images/submenus/file/movem.png
	ICON10=/images/submenus/file/editm.png
	ICON11=/images/submenus/file/newfolderm.png
	ICON12=/images/submenus/file/restorem.png
	ICON13=/images/submenus/file/reloadm.png
	ICON14=/images/submenus/file/createm.png
	ICON15=/images/submenus/file/filem.png
	ICON16=/images/submenus/file/folderm.png
	ICON17=/images/submenus/file/searchm.png
	ICON18=/images/submenus/system/computerm.png
	COLSPAN=5
	COLSPAN2=4
	COLWIDTH=32
	VIEWWIDTH1=50
	VIEWWIDTH2=520
	VIEWWIDTH3=50
	VIEWHEIGHT1=35
	INFOCLASS1="info infoleft"
fi

LINECOLOUR1="#A0A0A0"
LINECOLOUR2="#DCDCDC"

#Show SERVERNAME choice
if [ "$SERVERNAME" = notset ]
then
	if [ ! -z "$ITEMMOVE" ]
	then
		echo '<input name="_ITEMMOVE_" value="'$ITEMMOVE'" type="hidden">'
	fi
	#Show list of servers
	if [ "$MOBILE" = no ]
	then
		echo '<div id="titlebox">
		<div class="sectiontitle">'$"File Manager"' <a class="info" target="_blank" href="http://www.linuxschools.com/karoshi/documentation/wiki/index.php?title=File_Manager"><img class="images" alt="" src="/images/help/info.png"><span>'$"File Manager"'</span></a></div></div><div id="infobox">

	'
	fi

	/opt/karoshi/web_controls/show_servers "$MOBILE" servers $"Enter" ENTER
fi

#This list is used to declare areas that cannot me deleted or moved
LOCATION_LIST="/ /bin /boot /dev /etc /media /mnt /home /home/applications /home/itadminshare /home/staffshare /home/subjects /home/officeshare /home/users /home/users/guests /home/users/exams /home/users/profileuser /home/users/nonteachingstaff /home/users/studentstaff /home/users/staff /home/users/students /home/users/itadminstaff /home/users/officestaff /home/users/techstaff /initrd /lib /root /opt /opt/karoshi /opt/karoshi/serversetup /opt/karoshi/karoshi_user /usr /usr/bin /proc /sbin /sys /var /var/www /var/www/html /var/www/html_karoshi /var/www/cgi-bin /var/www/cgi-bin_karoshi /tmp"
#This list is used to recursivly declare areas that cannot me deleted or moved
LOCATION_LIST2=( /opt/karoshi/logs /opt/karoshi/web_management /var/www/cgi-bin_karoshi )

function show_title {

if [ "$ACTION" = notset ]
then
	SERVER2=""
else
	if [ $MOBILE = yes ]
	then
		SERVER2=$(echo "- ${SERVERNAME:0:9}" | cut -d. -f1)
	else
		SERVER2="- $SERVERNAME"
	fi
fi

UPICON="$ICON6"
UPMESG1=$"Up"
UPMESG2=$"Go up one directory."

if [ "$ACTION" = EDIT ] || [ "$ACTION" = DELETE ] || [ "$ACTION" = RENAME ] || [ "$ACTION" = SETPERMS ]
then
	UPICON="$ICON9"
	UPMESG1=$"Back"
	UPMESG2=$"Go back to the previous folder."
fi

[ "$MOBILE" = no ] && echo '<div id="titlebox"><div class="sectiontitle">'$"File Manager"' '"$SERVER2"' <a class="info" target="_blank" href="http://www.linuxschools.com/karoshi/documentation/wiki/index.php?title=File_Manager"><img class="images" alt="" src="/images/help/info.png"><span>'$"File Manager"'</span></a></div>' 

echo '
<table class="tablesorter"><tbody><tr>

	<td style="vertical-align: top; height: 30px; white-space: nowrap; min-width: '"$WIDTH8"'px; text-align:center;">
		<button class="info infonavbutton" name="_" value="_">
			<img src="'"$ICON18"'" alt="'$"Select Server"'">
			<span>'$"Select another server."'</span><br>
			'$"Select Server"'
		</button>
	</td>

	<td style="vertical-align: top; height: 30px; white-space: nowrap; min-width: '"$WIDTH8"'px; text-align:center;">
		<button class="info infonavbutton" name="_Top_" value="_ACTION_ENTER_SERVERTYPE_'"$SERVERTYPE"'_SERVERMASTER_'"$SERVERMASTER"'_SERVERNAME_'"$SERVERNAME"'_">
			<img src="'"$ICON16"'" alt="'$"Top Directory"'">
			<span>'$"Go to the top level of the file system."'</span><br>
			'$"Top Directory"'
		</button>
	</td>

	<td style="vertical-align: top; height: 30px; white-space: nowrap; min-width: '"$WIDTH8"'px; text-align:center;">
		<button class="info infonavbutton" name="_Up_" value="_ACTION_ENTER_SERVERTYPE_'"$SERVERTYPE"'_SERVERMASTER_'"$SERVERMASTER"'_SERVERNAME_'"$SERVERNAME"'_LOCATION_'"$LASTLOCATION"'_">
			<img src="'"$UPICON"'" alt="'"$UPMESG1"'">
			<span>'"$UPMESG2"'</span><br>
			'"$UPMESG1"'
		</button>
	</td>
'

if [ "$ACTION" = ENTER ] || [ "$ACTION" = CANCELCOPY ] || [ "$ACTION" = REALLYCREATEDIR ] || [ "$ACTION" = REALLYCREATEFILE ] || [ "$ACTION" = REALLYSETPERMS ] || [ "$ACTION" = REALLYDELETEACLPERMS ] || [ "$ACTION" = REALLYADDACLPERMS ] || [ "$ACTION" = REALLYRENAME ] || [ "$ACTION" = REALLYRESTORE ] || [ "$ACTION" = REALLYDELETE ]
then
	[ "$MOBILE" = yes ] && echo '</tr><tr>'
	echo '
	<td style="vertical-align: top; height: 30px; white-space: nowrap; min-width: '$WIDTH8'px; text-align:center;">
		<button class="info infonavbutton" name="_NewFolder_" value="_ACTION_CREATEDIR_SERVERTYPE_'$SERVERTYPE'_SERVERMASTER_'$SERVERMASTER'_SERVERNAME_'$SERVERNAME'_LOCATION_'$LOCATION2'_">
			<img src="'"$ICON11"'" alt="'$"New Folder"'">
			<span>'$"Create a new folder."'</span><br>
			'$"New Folder"'
		</button>
	</td>

	<td style="vertical-align: top; height: 30px; white-space: nowrap; min-width: '$WIDTH8'px; text-align:center;">
		<button class="info infonavbutton" name="_NewFile_" value="_ACTION_CREATEFILE_SERVERTYPE_'$SERVERTYPE'_SERVERMASTER_'$SERVERMASTER'_SERVERNAME_'$SERVERNAME'_LOCATION_'$LOCATION2'_">
			<img src="'"$ICON15"'" alt="'$"New File"'">
			<span>'$"Create a new file."'</span><br>
			'$"New File"'
		</button>
	</td>

	<td style="vertical-align: top; height: 30px; white-space: nowrap; min-width: '$WIDTH8'px; text-align:center;">
		<button class="info infonavbutton" name="_Refresh_" value="_ACTION_ENTER_SERVERTYPE_'$SERVERTYPE'_SERVERMASTER_'$SERVERMASTER'_SERVERNAME_'$SERVERNAME'_LOCATION_'$LOCATION2'_">
			<img src="'"$ICON13"'" alt="'$"Refresh"'">
			<span>'$"Refresh the folder."'</span><br>
			'$"Refresh"'
		</button>
	</td>

	'
fi



if [ "$SHOWMOVE" = yes ]
then
	echo '</tr><tr><td colspan="'"$COLSPAN2"'">'"$COPYSERVERNAME"':'"$ITEMMOVE2"'</td></tr><tr>'
	if [ "$MOVECHECK" = yes ]
	then 

		echo '
		<td style="vertical-align: top; height: 30px; white-space: nowrap; min-width: '$WIDTH8'px; text-align:center;">
			<button class="info infonavbutton" name="_MoveFile_" value="_ACTION_REALLYMOVE_SERVERTYPE_'$SERVERTYPE'_SERVERMASTER_'$SERVERMASTER'_SERVERNAME_'$SERVERNAME'_ITEMMOVE_'$ITEMMOVE'_LOCATION_'$LOCATION2'_">
				<img src="'"$ICON9"'" alt="'$"Move here?"'">
				<span>'$"Move to this location?"'</span><br>
				'$"Move here?"'
			</button>
		</td>

		<td style="vertical-align: top; height: 30px; white-space: nowrap; min-width: '$WIDTH8'px; text-align:center;">
			<button class="info infonavbutton" name="_CopyFile_" value="_ACTION_REALLYCOPY_SERVERTYPE_'$SERVERTYPE'_SERVERMASTER_'$SERVERMASTER'_SERVERNAME_'$SERVERNAME'_ITEMMOVE_'$ITEMMOVE'_LOCATION_'$LOCATION2'_">
				<img src="'"$ICON4"'" alt="'$"Copy here?"'">
				<span>'$"Copy to this location?"'</span><br>
				'$"Copy here?"'
			</button>

		<td style="vertical-align: top; height: 30px; white-space: nowrap; min-width: '$WIDTH8'px; text-align:center;">
			<button class="info infonavbutton" name="_CancelCopy_" value="_ACTION_CANCELCOPY_SERVERTYPE_'$SERVERTYPE'_SERVERMASTER_'$SERVERMASTER'_SERVERNAME_'$SERVERNAME'_LOCATION_'$LOCATION2'_">
				<img src="'"$ICON13"'" alt="'$"Cancel"'">
				<span>'$"Cancel copying this item."'</span><br>
				'$"Cancel"'
			</button>
		</td>
		'
		[ "$MOBILE" = no ] && echo '<td></td><td></td><td></td>'

	else
		echo '<tr><td>'$"This item is protected and cannot be moved or copied."'</td></tr>'
	fi
fi

if [ "$SHOWRESTORESEARCH" = yes ]
then
	[ "$MOBILE" = yes ] && echo '</tr><tr>'

	echo '
	<td style="vertical-align: top; height: 30px; white-space: nowrap; min-width: '$WIDTH8'px; text-align:center;">
		<button class="info infonavbutton" name="_Search_" value="_ACTION_SEARCHBACKUP_SERVERTYPE_'$SERVERTYPE'_SERVERMASTER_'$SERVERMASTER'_SERVERNAME_'$SERVERNAME'_LOCATION_'$LOCATION2'_">
			<img src="'"$ICON13"'" alt="'$"Search Backup"'">
			<span>'$"Search the backup for an item."'</span><br>
			'$"Search Backup"'
		</button>
	</td>
	'

	[ "$MOBILE" = yes ] && echo '</td><td></td><td>'	
fi

echo '</tr></tbody></table>'

[ "$MOBILE" = no ] && echo '</div><div id="infobox">
'
}

function check_recursive {
ENTER=yes
[ $(echo "$LOCATION_LIST" | grep -c -w "$FILE") -gt 0 ] && ENTER=no
COUNTER=0
LOCATIONLIST2COUNT=${#LOCATION_LIST2[@]}
while [ $COUNTER -lt $LOCATIONLIST2COUNT ]
do
	LOCATION_ENTRY=${LOCATION_LIST2[$COUNTER]}
	[ `echo $FILE | grep -c $LOCATION_ENTRY` -gt 0 ] && ENTER=no
	let COUNTER=$COUNTER+1
done
}

function getlastlocation {
LOCATIONFOLDER=$(basename "$LOCATION")
LASTLOCATION=$(echo "$LOCATION" | sed "s/\/$LOCATIONFOLDER$//g" | sed "s/_/Z%%%%%Z/g")
}


function show_directory {

if [ ! -z "$LOCATION" ]
then
	convert_special_chars
	LOCATION=$(echo "$LOCATION" | sed 's/+/ /g')
	getlastlocation
	LOCATION2=$(echo "$LOCATION" | sed "s/_/Z%%%%%Z/g")
fi

if [ ! -z "$ITEMMOVE" ]
then
	convert_special_chars2
	ITEMMOVE2=$(echo "$ITEMMOVE" | sed "s/Z%%%%%Z/_/g")
	COPYSERVERNAME=$(echo "$ITEMMOVE2" | cut -d: -f1)
	ITEMMOVE2=$(echo "$ITEMMOVE2" | cut -d: -f4 | sed 's/+/ /g')
	#Check that file is not in a banned path
	if [[ $(echo "${LOCATION_LIST[@]:0}" | grep -c -w "$ITEMMOVE2") -gt 0 ]]
	then
		MOVECHECK=no
	fi
	for PATHCHECK in $(echo "${LOCATION_LIST2[@]:0}")
	do
		if [[ $(echo "$ITEMMOVE2" | grep -c "$PATHCHECK") -gt 0 ]]
		then
			MOVECHECK=no
		fi
	done

	if [ "$MOVECHECK" = yes ]
	then
		SHOWMOVE=yes
		echo '<input name="_ITEMMOVE_" value="'$ITEMMOVE'" type="hidden">'
	fi
fi
if [ -z "$LOCATION" ]
then
	DISPLOCATION=/
else
	DISPLOCATION="$LOCATION"
fi

SHOWRESTORE=no
SHOWRESTORESEARCH=no
if [ $(echo "$LOCATION" | grep -c /home/backups) -gt 0 ]
then

	SUBCOUNT=$(echo "$LOCATION" | sed "s/\//\n/g" | wc -l)

	if [ "$SUBCOUNT" -gt 4 ]
	then
		SHOWRESTORESEARCH=yes
	fi

	if [ "$SUBCOUNT" -gt 5 ]
	then
		SHOWRESTORE=yes
		let COLSPAN="$COLSPAN"+1
	fi
fi

DISPLOCATIONLENGTH=${#DISPLOCATION}
MAXPATHLENTH=70
if [ $MOBILE = yes ]
then
	MAXPATHLENTH=30
fi

if [ "$DISPLOCATIONLENGTH" -gt $MAXPATHLENTH ]
then
	let STARTPOINT=$DISPLOCATIONLENGTH-$MAXPATHLENTH
	DISPLOCATION="...${DISPLOCATION:$STARTPOINT:$DISPLOCATIONLENGTH}"
fi

show_title

if [ $MOBILE = yes ]
then
	echo "$DISPLOCATION<br>"
fi

echo '<table id="myTable" class="tablesorter" style="text-align: left;"><thead><tr><th style="height: 20px; width: '$VIEWWIDTH1'px;"></th><th style="width: '$VIEWWIDTH1'px;"></th><th style="width: '$VIEWWIDTH1'px;"></th><th style="width: '$VIEWWIDTH1'px;"></th><th style="width: '$VIEWWIDTH1'px;"></th>'

if [ $MOBILE = no ]
then

	echo '<th style="word-wrap:break-word; width: '$VIEWWIDTH2'px;"><b>'$DISPLOCATION'</b></th>'
	[ "$SHOWRESTORE" = yes ] && echo '<th style="width: '$VIEWWIDTH3'px;">'$"Search"'</th><th style="width: '$VIEWWIDTH3'px;">'$"Restore"'</th>'
else
		[ "$SHOWRESTORE" = yes ] && echo '<th style="width: '$VIEWWIDTH3'px;"></th><th style="width: '$VIEWWIDTH3'px;"></th>'
fi

echo '</tr></thead><tbody>'

#Log Browse Actions
echo `date`: file_manager - browsing  "$LOCATION" on $SERVERNAME by $REMOTE_USER from $REMOTE_ADDR >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
LINECOLOUR=$LINECOLOUR1
if [ $SERVERNAME = `hostname-fqdn` ]
then
	if [ `ls -1 -a "$LOCATION"/ | wc -l` -gt 2 ]
	then
		GLOBIGNORE=yes
		for FILE in "$LOCATION"/*
		do

			FILENAME=$(basename "$FILE")
			FILE2=$(echo "$FILE" | sed "s/_/Z%%%%%Z/g")
			LOCATION2=$(echo "$LOCATION" | sed "s/_/Z%%%%%Z/g")

			ICON1="$ICON15"
			FILEACTION=DOWNLOAD
			if [ -d "$FILE" ]
			then
				ICON1="$ICON16"
				FILEACTION=ENTER
			fi

			if [ "$MOBILE" = yes ]
			then
				if [ "$LINECOLOUR" = "$LINECOLOUR1" ]
				then
					LINECOLOUR="$LINECOLOUR2"
				else
					LINECOLOUR="$LINECOLOUR1"
				fi
				echo '<tr style="background-color:'"$LINECOLOUR"'"><td colspan="'"$COLSPAN"'">'"$FILENAME"'</td></tr><tr style="background-color:'"$LINECOLOUR"'">'
			else
				echo '<tr style="height: '"$VIEWHEIGHT1"'px;">'
			fi

			echo '
			<td>
			<button class="info" name="_Rename_" value="_ACTION_RENAME_SERVERTYPE_'"$SERVERTYPE"'_SERVERNAME_'"$SERVERNAME"'_LOCATION_'"$FILE2"'_">
			<img src="'$ICON3'" alt="'$"Rename"'">
			<span>'$"Rename"'<br>'"$FILENAME"'</span>
			</button>
			</td>
			<td>
			<button class="info" name="_Move_" value="_ACTION_ENTER_SERVERTYPE_'"$SERVERTYPE"'_SERVERNAME_'"$SERVERNAME"'_ITEMMOVE_'"$SERVERNAME:$SERVERTYPE:$SERVERMASTER:$FILE2"'_LOCATION_'"$LOCATION2"'_">
			<img src="'"$ICON4"'" alt="'$"Move/Copy"'">
			<span>'$"Move/Copy"'<br>'"$FILENAME"'</span>
			</button>
			</td>
			<td>
			<button class="info" name="_Delete_" value="_ACTION_DELETE_SERVERTYPE_'"$SERVERTYPE"'_SERVERNAME_'"$SERVERNAME"'_LOCATION_'"$FILE2"'_">
			<img src="'"$ICON5"'" alt="'$"Delete"'">
			<span>'$"Delete"'<br>'"$FILENAME"'</span>
			</button>
			</td>
			'
			echo '<td>
			<button class="'"$INFOCLASS1"'" name="_Properties_" value="_ACTION_SETPERMS_SERVERTYPE_'"$SERVERTYPE"'_SERVERNAME_'"$SERVERNAME"'_LOCATION_'"$FILE2"'_">
			<img src="'"$ICON2"'" alt="'$"Properties"'">
			<span>'$"Properties"'<br>'"$FILENAME"'</span>
			</button>
			</td><td>'

			if [ "$FILEACTION" = ENTER ]
			then
				echo '<button class="'$INFOCLASS1'" name="_Enter_" value="_ACTION_ENTER_SERVERTYPE_'$SERVERTYPE'_SERVERNAME_'$SERVERNAME'_LOCATION_'$FILE2'_"><img src="'$ICON1'" alt="'$"Enter"'"><span>'$"Enter"'<br>'$FILENAME'<br></span></button>'
			else
				echo '<button class="'$INFOCLASS1'" name="_Edit_" value="_ACTION_EDIT_SERVERTYPE_'$SERVERTYPE'_SERVERNAME_'$SERVERNAME'_LOCATION_'$FILE2'_"><img src="'$ICON10'" alt="'$"Edit"'"><span>'$"Edit"'<br>'$FILENAME'<br></span></button>'
			fi
			if [ $MOBILE = no ]
			then
				echo '</td><td>'$FILENAME'</td>'
			else
				echo '</td>'
			fi
			echo '</tr>'
		done
	fi
fi

if [ $SERVERTYPE = network ] && [ $SERVERNAME != `hostname-fqdn` ] || [ $SERVERTYPE = federated ]
then
ssh -o PasswordAuthentication=no -o ConnectTimeout=3 $SERVERNAME '

if [ `ls -1 -a "'$LOCATION'"/ | wc -l` -gt 2 ]
then
	GLOBIGNORE=yes
	LINECOLOUR='$LINECOLOUR1'

	for FILE in "'$LOCATION'"/*
	do
		FILENAME=`basename "$FILE"`
		#FILEINFO=`ls -l -h -d "$FILE"`
		#PERMS=`echo $FILEINFO | cut -d" " -f1`
		#OWNER=`echo $FILEINFO | cut -d" " -f3-4`
		#SIZE=`echo $FILEINFO | cut -d" " -f5`
		#LASTMOD=`echo $FILEINFO | cut -d" " -f6-8`
		FILE2=`echo "$FILE" | sed "s/_/Z%%%%%Z/g"`
		LOCATION2=`echo "'$LOCATION'" | sed "s/_/Z%%%%%Z/g"`

		ICON1='$ICON15'
		FILEACTION=DOWNLOAD
		if [ -d "$FILE" ]
		then
			ICON1='$ICON16'
			FILEACTION=ENTER
		fi

		if [ '$MOBILE' = yes ]
		then
			if [ $LINECOLOUR = "'$LINECOLOUR1'" ]
			then
				LINECOLOUR='$LINECOLOUR2'
			else
				LINECOLOUR='$LINECOLOUR1'
			fi

			echo "<tr style=\"background-color:$LINECOLOUR\"><td colspan=\"'$COLSPAN'\">$FILENAME</td></tr><tr style=\"background-color:$LINECOLOUR\">"
		else
			echo "<tr style=\"height: '$VIEWHEIGHT1'px;\">"
		fi

		echo "<td>
		<button class=\"info\" name=\"_Rename_\" value=\"_ACTION_RENAME_SERVERTYPE_'$SERVERTYPE'_SERVERNAME_'$SERVERNAME'_LOCATION_$FILE2"_"\">
		<img src=\"'$ICON3'\" alt=\"'$"Rename"'\">
		<span>'$"Rename"'<br>$FILENAME</span>
		</button>
		</td>
		<td>
		<button class=\"info\" name=\"_Move_\" value=\"_ACTION_ENTER_SERVERTYPE_'$SERVERTYPE'_SERVERNAME_'$SERVERNAME'_ITEMMOVE_'"$SERVERNAME"':'"$SERVERTYPE"':'"$SERVERMASTER"':$FILE2"_"LOCATION_$LOCATION2"_"\">
		<img src=\"'$ICON4'\" alt=\"'$"Move/Copy"'\">
		<span>'$"Move/Copy"'<br>$FILENAME</span>
		</button>
		</td>
		<td>
		<button class=\"info\" name=\"_Delete_\" value=\"_ACTION_DELETE_SERVERTYPE_'$SERVERTYPE'_SERVERNAME_'$SERVERNAME'_LOCATION_$FILE2"_"\">
		<img src=\"'$ICON5'\" alt=\"'$"Delete"'\">
		<span>'$"Delete"'<br>$FILENAME</span>
		</button>
		</td>"

		echo "<td><button class=\"'$INFOCLASS1'\" name=\"_Properties_\" value=\"_ACTION_SETPERMS_SERVERTYPE_'$SERVERTYPE'_SERVERNAME_'$SERVERNAME'_LOCATION_$FILE2"_"\"><img src=\"'$ICON2'\" alt=\"'$"Properties"'\"><span>'$"Properties"'<br>$FILENAME</span></button></td><td>"

		if [ $FILEACTION = ENTER ]
		then
			echo "<button class=\"'$INFOCLASS1'\" name=\"_Enter_\" value=\"_ACTION_ENTER_SERVERTYPE_'$SERVERTYPE'_SERVERNAME_'$SERVERNAME'_LOCATION_$FILE2"_"\"><img src=\"$ICON1\" alt=\"'$"Enter"'\"><span>'$"Enter"'<br>$FILENAME<br></span></button>"
		else
			echo "<button class=\"'$INFOCLASS1'\" name=\"_Edit_\" value=\"_ACTION_EDIT_SERVERTYPE_'$SERVERTYPE'_SERVERNAME_'$SERVERNAME'_LOCATION_$FILE2"_"\"><img src=\"'$ICON10'\" alt=\"'$"Edit"'\"><span>'$"Edit"'<br>$FILENAME<br></span></button>"
		fi


		if [ '$MOBILE' = no ]
		then
			echo "</td><td style=\"text-align: left;\">$FILENAME</td>"
		else
			echo "</td>"
		fi
		if [ '$SHOWRESTORE' = yes ]
		then
			SEARCH=$(basename "$FILENAME" | sed "s/_/Z%%%%%Z/g")
			echo "<td><button class=\"'$INFOCLASS1'\" name=\"_DoSearch_\" value=\"_ACTION_REALLYSEARCHBACKUP_SERVERTYPE_'$SERVERTYPE'_SERVERMASTER_'$SERVERMASTER'_SERVERNAME_'$SERVERNAME'_LOCATION"_"$FILE2"_"SEARCH_$SEARCH"_"\"><img src=\"'$ICON17'\" alt=\"'$"Restore"'\"><span>'$"Search"'<br>$FILENAME<br></span></button></td><td><button class=\"'$INFOCLASS1'\" name=\"_DoRestore_\" value=\"_ACTION_RESTORE_SERVERTYPE_'$SERVERTYPE'_SERVERNAME_'$SERVERNAME'_LOCATION_$FILE2"_"\"><img src=\"'$ICON12'\" alt=\"'$"Restore"'\"><span>'$"Restore"'<br>$FILENAME<br></span></button></td>"
		fi
		echo "</tr>"
		done
fi
'
fi

if [ $SERVERTYPE = federatedslave ]
then
ssh -o PasswordAuthentication=no -o ConnectTimeout=3 $SERVERMASTER '
ssh -o PasswordAuthentication=no -o ConnectTimeout=3 '$SERVERNAME' '\''

if [ `ls -1 -a "'$LOCATION'"/ | wc -l` -gt 2 ]
then
	GLOBIGNORE=yes

	LINECOLOUR='$LINECOLOUR1'

	for FILE in "'$LOCATION'"/*
	do
		FILENAME=`basename "$FILE"`
		#FILEINFO=`ls -l -h -d "$FILE"`
		#PERMS=`echo $FILEINFO | cut -d" " -f1`
		#OWNER=`echo $FILEINFO | cut -d" " -f3-4`
		#SIZE=`echo $FILEINFO | cut -d" " -f5`
		#LASTMOD=`echo $FILEINFO | cut -d" " -f6-8`
		FILE2=`echo "$FILE" | sed "s/_/Z%%%%%Z/g"`
		LOCATION2=`echo "'$LOCATION'" | sed "s/_/Z%%%%%Z/g"`

		ICON1='$ICON15'
		FILEACTION=DOWNLOAD
		if [ -d "$FILE" ]
		then
			ICON1='$ICON16'
			FILEACTION=ENTER
		fi

		if [ '$MOBILE' = yes ]
		then
			if [ $LINECOLOUR = "'$LINECOLOUR1'" ]
			then
				LINECOLOUR='$LINECOLOUR2'
			else
				LINECOLOUR='$LINECOLOUR1'
			fi

			echo "<tr style=\"background-color:$LINECOLOUR\"><td colspan=\"'$COLSPAN'\">$FILENAME</td></tr><tr style=\"background-color:$LINECOLOUR\">"
		else
			echo "<tr>"
		fi

		echo "<td>
		<button class=\"info\" name=\"_Rename_\" value=\"_ACTION_RENAME_SERVERTYPE_'$SERVERTYPE'_SERVERNAME_'$SERVERNAME'_LOCATION_$FILE2"_"\">
		<img src=\"'$ICON3'\" alt=\"'$"Rename"'\">
		<span>'$"Rename"'<br>$FILENAME</span>
		</button>
		</td>
		<td>
		<button class=\"info\" name=\"_Move_\" value=\"_ACTION_ENTER_SERVERTYPE_'$SERVERTYPE'_SERVERNAME_'$SERVERNAME'_ITEMMOVE_'"$SERVERNAME"':'"$SERVERTYPE"':'"$SERVERMASTER"':$FILE2"_"LOCATION_$LOCATION2"_"\">
		<img src=\"'$ICON4'\" alt=\"'$"Move/Copy"'\">
		<span>'$"Move/Copy"'<br>$FILENAME</span>
		</button>
		</td>
		<td>
		<button class=\"info\" name=\"_Delete_\" value=\"_ACTION_DELETE_SERVERTYPE_'$SERVERTYPE'_SERVERNAME_'$SERVERNAME'_LOCATION_$FILE2"_"\">
		<img src=\"'$ICON5'\" alt=\"'$"Delete"'\">
		<span>'$"Delete"'<br>$FILENAME</span>
		</button>
		</td>"

		echo "<td><button class=\"'$INFOCLASS1'\" name=\"_Properties_\" value=\"_ACTION_SETPERMS_SERVERTYPE_'$SERVERTYPE'_SERVERNAME_'$SERVERNAME'_LOCATION_$FILE2"_"\"><img src=\"'$ICON2'\" alt=\"'$"Properties"'\"><span>'$"Properties"'<br>$FILENAME</span></button></td><td>"

		if [ $FILEACTION = ENTER ]
		then
			echo "<button class=\"'$INFOCLASS1'\" name=\"_Enter_\" value=\"_ACTION_ENTER_SERVERTYPE_'$SERVERTYPE'_SERVERNAME_'$SERVERNAME'_LOCATION_$FILE2"_"\"><img src=\"$ICON1\" alt=\"'$"Enter"'\"><span>'$"Enter"'<br>$FILENAME<br></span></button>"
		else
			echo "<button class=\"'$INFOCLASS1'\" name=\"_Edit_\" value=\"_ACTION_EDIT_SERVERTYPE_'$SERVERTYPE'_SERVERNAME_'$SERVERNAME'_LOCATION_$FILE2"_"\"><img src=\"'$ICON10'\" alt=\"'$"Edit"'\"><span>'$"Edit"'<br>$FILENAME<br></span></button>"
		fi
		[ $SHOWRESTORE = yes ] && echo "</td><td><a class=\"info\" href=\"javascript:void(0)\"><input name=\"_ACTION_RESTORE_SERVERTYPE_'$SERVERTYPE'_SERVERNAME_'$SERVERNAME'_LOCATION_$FILE2"_"\" type="image" class=\"images\" src=\"'$ICON12'\" value=\"\"><span>Restore<br>$FILENAME</span></a>"

		if [ '$MOBILE' = no ]
		then
			echo "</td><td style=\"text-align: left;\">$FILENAME</td><td></td></tr>"
		else
			echo "</td>"
			[ $SHOWRESTORE != yes ] && echo "</td><td>"
			echo "</tr>"
		fi

		done
fi
'\''
'
fi
echo '</tbody></table>'
}

function convert_special_chars {
LOCATION=`echo "$LOCATION" |  sed 's/+/ /g' | sed 's/%21/!/g' | sed 's/%25/%/g' | sed 's/%5E/^/g' | sed 's/%28/(/g' | sed 's/%29/)/g' | sed 's/%7E/~/g' | sed 's/%23/#/g' | sed 's/%40/@/g' | sed 's/%7B/{/g'  | sed 's/%7D/}/g' | sed 's/%3E/>/g' | sed 's/%3C/</g' | sed 's/%C2%AC/ﾬ/g' | sed 's/%7C/|/g' | sed 's/%2C/,/g' | sed 's/%3B/;/g' | sed 's/%3A/:/g' | sed 's/%3D/=/g' | sed 's/%2B/+/g' | sed 's/%3F/?/g' | sed 's/%26/\&/g'`
}

function convert_special_chars2 {
ITEMMOVE=`echo "$ITEMMOVE" |  sed 's/%2F/\//g' | sed 's/+/ /g' | sed 's/%21/!/g' | sed 's/%25/%/g' | sed 's/%5E/^/g' | sed 's/%28/(/g' | sed 's/%29/)/g' | sed 's/%7E/~/g' | sed 's/%23/#/g' | sed 's/%40/@/g' | sed 's/%7B/{/g'  | sed 's/%7D/}/g' | sed 's/%3E/>/g' | sed 's/%3C/</g' | sed 's/%C2%AC/ﾬ/g' | sed 's/%7C/|/g' | sed 's/%2C/,/g' | sed 's/%3B/;/g' | sed 's/%3A/:/g' | sed 's/%3D/=/g' | sed 's/%2B/+/g' | sed 's/%3F/?/g' | sed 's/%26/\&/g'`
}

function convert_special_chars3 {
TEXTCONTENT=`echo "$TEXTCONTENT" |  sed 's/%2F/\//g' | sed 's/+/ /g' | sed 's/%21/!/g' | sed 's/%25/%/g' | sed 's/%5E/^/g' | sed 's/%28/(/g' | sed 's/%29/)/g' | sed 's/%7E/~/g' | sed 's/%23/#/g' | sed 's/%40/@/g' | sed 's/%7B/{/g'  | sed 's/%7D/}/g' | sed 's/%3E/>/g' | sed 's/%3C/</g' | sed 's/%C2%AC/ﾬ/g' | sed 's/%7C/|/g' | sed 's/%2C/,/g' | sed 's/%3B/;/g' | sed 's/%3A/:/g' | sed 's/%3D/=/g' | sed 's/%2B/+/g' | sed 's/%3F/?/g' | sed 's/%5B/[/g' | sed 's/%5D/]/g' | sed 's/REPLACEUNDERSCORE/_/g' | sed 's/%99/*/g' | sed 's/%24/$/g' | sed 's/%26/\&/g'`
}

function convert_special_chars4 {
SEARCH=`echo "$SEARCH" |  sed 's/%2F/\//g' | sed 's/+/ /g' | sed 's/%21/!/g' | sed 's/%25/%/g' | sed 's/%5E/^/g' | sed 's/%28/(/g' | sed 's/%29/)/g' | sed 's/%7E/~/g' | sed 's/%23/#/g' | sed 's/%40/@/g' | sed 's/%7B/{/g'  | sed 's/%7D/}/g' | sed 's/%3E/>/g' | sed 's/%3C/</g' | sed 's/%C2%AC/ﾬ/g' | sed 's/%7C/|/g' | sed 's/%2C/,/g' | sed 's/%3B/;/g' | sed 's/%3A/:/g' | sed 's/%3D/=/g' | sed 's/%2B/+/g' | sed 's/%3F/?/g' | sed 's/%5B/[/g' | sed 's/%5D/]/g' | sed 's/REPLACEUNDERSCORE/_/g' | sed 's/%99/*/g' | sed 's/%24/$/g' | sed 's/%26/\&/g' | sed "s/Z%%%%%Z/_/g"`
}


function really_delete_item {
if [ -z "$LOCATION" ]
then
	echo `date`: file_manager - blank location by "for" $SERVERNAME by $REMOTE_USER from $REMOTE_ADDR >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit
fi
if [ `echo ${LOCATION_LIST[@]:0} | grep -c -w "$LOCATION"` -gt 0 ]
then
echo $"This item is protected and cannot be deleted."'<br>'
echo '<A HREF="javascript:history.go(-2)"> <IMG SRC="/images/submenus/file/back.gif" BORDER="0"></A>'
else
#Delete the item
convert_special_chars
LOCATIONFOLDER=`basename "$LOCATION"`
LASTLOCATION=`echo "$LOCATION" | sed "s/\/$LOCATIONFOLDER//g"`
echo `date`: file_manager - deleting "$LOCATION" from $SERVERNAME by $REMOTE_USER from $REMOTE_ADDR >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
if [ $SERVERNAME = `hostname-fqdn` ]
then
rm -f -R "$LOCATION"
fi
if [ $SERVERTYPE = network ] && [ $SERVERNAME != `hostname-fqdn` ] || [ $SERVERTYPE = federated ]
then
ssh -o PasswordAuthentication=no -o ConnectTimeout=3 $SERVERNAME '
[ -d /opt/karoshi/logs/karoshi_web_management/ ] && echo `date`: file_manager \(federated mode\) - deleting "'$LOCATION'" from '$SERVERNAME' by '$REMOTE_USER' from '$REMOTE_ADDR' >> /opt/karoshi/logs/karoshi_web_management/'$LOG_DATE'
rm -f -R "'$LOCATION'"
'
fi
if [ $SERVERTYPE = federatedslave ]
then
ssh -o PasswordAuthentication=no -o ConnectTimeout=3 $SERVERMASTER '
echo `date`: file_manager \(federated mode\) - deleting "'$LOCATION'" from '$SERVERNAME' by '$REMOTE_USER' from '$REMOTE_ADDR' >> /opt/karoshi/logs/karoshi_web_management/'$LOG_DATE'
ssh -o PasswordAuthentication=no -o ConnectTimeout=3 '$SERVERNAME' '\''
rm -f -R "'$LOCATION'"
'\''
'
fi


LOCATION="$LASTLOCATION"
show_directory
fi

}

function delete_item {
getlastlocation
show_title
#Check to see that item is not on the protected list
DELETECHECK=yes
#Check that file is not in a banned path
if [ `echo ${LOCATION_LIST[@]:0} | grep -c -w "$LOCATION"` -gt 0 ]
then
	DELETECHECK=no
	EDITERRORMSG='$"Files in this folder are not allowed to be edited."'
fi
for PATHCHECK in `echo ${LOCATION_LIST2[@]:0}`
do
	if [ `echo "$LOCATION" | grep -c $PATHCHECK` -gt 0 ]
	then
		DELETECHECK=no
		EDITERRORMSG='$"Files in this folder are not allowed to be edited."' 
	fi
done

if [ $DELETECHECK = no ]
then
	echo $"Delete" $LOCATION'<br><br>'$"This item is protected and cannot be deleted."'<br><br>
<input name="_ACTION_ENTER_SERVERTYPE_'$SERVERTYPE'_SERVERMASTER_'$SERVERMASTER'_SERVERNAME_'$SERVERNAME'_LOCATION_'$LASTLOCATION'_" type="submit" class="button" value="'$"Back"'">
'
else
	#Confirm deletion of item.
	convert_special_chars
	LOCATION2=`echo "$LOCATION" | sed "s/_/Z%%%%%Z/g"`
	echo $"Delete" $LOCATION'<br><br>'$"Are you sure that you want to delete this item?"'<br><br>'
	echo '<input name="_ACTION_REALLYDELETE_SERVERTYPE_'$SERVERTYPE'_SERVERMASTER_'$SERVERMASTER'_SERVERNAME_'$SERVERNAME'_LOCATION_'$LOCATION2'_" type="submit" class="button" value="'$"Delete"'">
	<input name="_ACTION_ENTER_SERVERTYPE_'$SERVERTYPE'_SERVERMASTER_'$SERVERMASTER'_SERVERNAME_'$SERVERNAME'_LOCATION_'$LASTLOCATION'_" type="submit" class="button" value="'$"Cancel"'">
	'

fi
}

function really_set_perms {

if [ -z "$LOCATION" ]
then
	echo `date`: file_manager - blank location by "for" $SERVERNAME by $REMOTE_USER from $REMOTE_ADDR >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit
fi

OWNER=$(echo "$DATA" | cut -s -d: -f12)
GROUP=$(echo "$DATA" | cut -s -d: -f13)

#Work out permission numbers
USERDIGIT=0
GROUPDIGIT=0
OTHERDIGIT=0
SETUID="no"
SETGID="no"
SETSTICKY="no"
SETRECURSIVE="no"
SETEXECRECURSIVE="no"

[ `echo $PERMISSIONS | grep -c -w USERREAD` = 1 ] && let USERDIGIT=$USERDIGIT+4
[ `echo $PERMISSIONS | grep -c -w USERWRITE` = 1 ] && let USERDIGIT=$USERDIGIT+2
[ `echo $PERMISSIONS | grep -c -w USEREXEC` = 1 ] && let USERDIGIT=$USERDIGIT+1

[ `echo $PERMISSIONS | grep -c -w GROUPREAD` = 1 ] && let GROUPDIGIT=$GROUPDIGIT+4
[ `echo $PERMISSIONS | grep -c -w GROUPWRITE` = 1 ] && let GROUPDIGIT=$GROUPDIGIT+2
[ `echo $PERMISSIONS | grep -c -w GROUPEXEC` = 1 ] && let GROUPDIGIT=$GROUPDIGIT+1

[ `echo $PERMISSIONS | grep -c -w OTHERREAD` = 1 ] && let OTHERDIGIT=$OTHERDIGIT+4
[ `echo $PERMISSIONS | grep -c -w OTHERWRITE` = 1 ] && let OTHERDIGIT=$OTHERDIGIT+2
[ `echo $PERMISSIONS | grep -c -w OTHEREXEC` = 1 ] && let OTHERDIGIT=$OTHERDIGIT+1

[ `echo $PERMISSIONS | grep -c -w SETUID` = 1 ] && SETUID=yes
[ `echo $PERMISSIONS | grep -c -w SETGID` = 1 ] && SETGID=yes
[ `echo $PERMISSIONS | grep -c -w STICKY` = 1 ] && SETSTICKY=yes
[ `echo $PERMISSIONS | grep -c -w RECURSIVE` = 1 ] && SETRECURSIVE="-R"
[ `echo $PERMISSIONS | grep -c -w EXECRECURSE` = 1 ] && SETEXECRECURSIVE="yes"

OCTALPERMS=`echo $USERDIGIT$GROUPDIGIT$OTHERDIGIT`
convert_special_chars
echo `date`: file_manager - setting ownership of "$LOCATION" to $OWNER $GROUP from $SERVERNAME by $REMOTE_USER from $REMOTE_ADDR >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
#change ownership
[ $SETRECURSIVE = -R ] && SETRECURSIVE2=-R
if [ $SERVERNAME = `hostname-fqdn` ]
then
	chown $SETRECURSIVE2 $OWNER:$GROUP "$LOCATION"
fi

if [ $SERVERTYPE = network ] && [ $SERVERNAME != `hostname-fqdn` ] || [ $SERVERTYPE = federated ]
then
	ssh -o PasswordAuthentication=no -o ConnectTimeout=3 $SERVERNAME '
[ -d /opt/karoshi/logs/karoshi_web_management/ ] && echo `date`: file_manager \(federated mode\) - setting ownership of "'$LOCATION'" to '$OWNER' '$GROUP' from '$SERVERNAME' by '$REMOTE_USER' from '$REMOTE_ADDR' >> /opt/karoshi/logs/karoshi_web_management/'$LOG_DATE'
chown '$SETRECURSIVE2' '$OWNER':'$GROUP' "'$LOCATION'"
'
fi

if [ $SERVERTYPE = federatedslave ]
then
	ssh -o PasswordAuthentication=no -o ConnectTimeout=3 $SERVERMASTER '
echo `date`: file_manager \(federated mode\) - setting ownership of "'$LOCATION'" to '$OWNER' '$GROUP' from '$SERVERNAME' by '$REMOTE_USER' from '$REMOTE_ADDR' >> /opt/karoshi/logs/karoshi_web_management/'$LOG_DATE'
ssh -o PasswordAuthentication=no -o ConnectTimeout=3 '$SERVERNAME' '\''
chown '$SETRECURSIVE2' '$OWNER':'$GROUP' "'$LOCATION'"
'\''
'
fi


#Change file permissions
echo `date`: file_manager - setting permissions of "$LOCATION" to $OCTALPERMS from $SERVERNAME by $REMOTE_USER from $REMOTE_ADDR >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
#Apply permissions
if [ $SERVERNAME = `hostname-fqdn` ]
then
chmod $OCTALPERMS "$LOCATION"
fi

if [ $SERVERTYPE = network ] && [ $SERVERNAME != `hostname-fqdn` ] || [ $SERVERTYPE = federated ]
then
ssh -o PasswordAuthentication=no -o ConnectTimeout=3 $SERVERNAME '
[ -d /opt/karoshi/logs/karoshi_web_management/ ] && echo `date`: file_manager \(federated mode\) - setting permissions of "'$LOCATION'" to '$OCTALPERMS' from '$SERVERNAME' by '$REMOTE_USER' from '$REMOTE_ADDR' >> /opt/karoshi/logs/karoshi_web_management/'$LOG_DATE'
chmod '$OCTALPERMS' "'$LOCATION'"
'
fi

if [ $SERVERTYPE = federatedslave ]
then
ssh -o PasswordAuthentication=no -o ConnectTimeout=3 $SERVERMASTER '
echo `date`: file_manager \(federated mode\) - setting permissions of "'$LOCATION'" to '$OCTALPERMS' from '$SERVERNAME' by '$REMOTE_USER' from '$REMOTE_ADDR' >> /opt/karoshi/logs/karoshi_web_management/'$LOG_DATE'
ssh -o PasswordAuthentication=no -o ConnectTimeout=3 '$SERVERNAME' '\''
chmod '$OCTALPERMS' "'$LOCATION'"
'\''
'
fi

#Apply non exec permissions to sub files
if [ $SETRECURSIVE = "-R" ] && [ $SETEXECRECURSIVE != yes ]
then
[ $USERDIGIT = 7 ] && let USERDIGIT=$USERDIGIT-1
[ $USERDIGIT = 5 ] && let USERDIGIT=$USERDIGIT-1
[ $GROUPDIGIT = 7 ] && let GROUPDIGIT=$GROUPDIGIT-1
[ $GROUPDIGIT = 5 ] && let GROUPDIGIT=$GROUPDIGIT-1
[ $OTHERDIGIT = 7 ] && let OTHERDIGIT=$OTHERDIGIT-1
[ $OTHERDIGIT = 5 ] && let OTHERDIGIT=$OTHERDIGIT-1
OCTALPERMS=`echo $USERDIGIT$GROUPDIGIT$OTHERDIGIT`
if [ $SERVERNAME = `hostname-fqdn` ]
then
chmod $OCTALPERMS -R "$LOCATION"/*
[ $USERDIGIT = 6 ] && chmod u+X -R "$LOCATION"/*
[ $USERDIGIT = 4 ] && chmod u+X -R "$LOCATION"/*
[ $GROUPDIGIT = 6 ] && chmod g+X -R "$LOCATION"/*
[ $GROUPDIGIT = 4 ] && chmod g+X -R "$LOCATION"/*
[ $OTHERDIGIT = 6 ] && chmod o+X -R "$LOCATION"/*
[ $OTHERDIGIT = 4 ] && chmod o+X -R "$LOCATION"/*
fi
if [ $SERVERTYPE = network ] && [ $SERVERNAME != `hostname-fqdn` ] || [ $SERVERTYPE = federated ]
then
ssh -o PasswordAuthentication=no -o ConnectTimeout=3 $SERVERNAME '
chmod '$OCTALPERMS' -R "'$LOCATION'"/*
[ '$USERDIGIT' = 6 ] && chmod u+X -R "'$LOCATION'"/*
[ '$USERDIGIT' = 4 ] && chmod u+X -R "'$LOCATION'"/*
[ '$GROUPDIGIT' = 6 ] && chmod g+X -R "'$LOCATION'"/*
[ '$GROUPDIGIT' = 4 ] && chmod g+X -R "'$LOCATION'"/*
[ '$OTHERDIGIT' = 6 ] && chmod o+X -R "'$LOCATION'"/*
[ '$OTHERDIGIT' = 4 ] && chmod o+X -R "'$LOCATION'"/*
'
fi
if [ $SERVERTYPE = federatedslave ]
then
ssh -o PasswordAuthentication=no -o ConnectTimeout=3 $SERVERMASTER '
ssh -o PasswordAuthentication=no -o ConnectTimeout=3 '$SERVERNAME' '\''
chmod '$OCTALPERMS' -R "'$LOCATION'"/*
[ '$USERDIGIT' = 6 ] && chmod u+X -R "'$LOCATION'"/*
[ '$USERDIGIT' = 4 ] && chmod u+X -R "'$LOCATION'"/*
[ '$GROUPDIGIT' = 6 ] && chmod g+X -R "'$LOCATION'"/*
[ '$GROUPDIGIT' = 4 ] && chmod g+X -R "'$LOCATION'"/*
[ '$OTHERDIGIT' = 6 ] && chmod o+X -R "'$LOCATION'"/*
[ '$OTHERDIGIT' = 4 ] && chmod o+X -R "'$LOCATION'"/*
'\''
'
fi
fi
#Apply same permissions to sub files and directories
if [ $SETRECURSIVE = "-R" ] && [ $SETEXECRECURSIVE = yes ]
then
if [ $SERVERNAME = `hostname-fqdn` ]
then
chmod $OCTALPERMS -R "$LOCATION"/*
fi
if [ $SERVERTYPE = network ] && [ $SERVERNAME != `hostname-fqdn` ] || [ $SERVERTYPE = federated ]
then
ssh -o PasswordAuthentication=no -o ConnectTimeout=3 $SERVERNAME '
chmod '$OCTALPERMS' -R "'$LOCATION'"/*
'
fi
if [ $SERVERTYPE = federatedslave ]
then
ssh -o PasswordAuthentication=no -o ConnectTimeout=3 $SERVERMASTER '
ssh -o PasswordAuthentication=no -o ConnectTimeout=3 '$SERVERNAME' '\''
chmod '$OCTALPERMS' -R "'$LOCATION'"/*
'\''
'
fi
fi

#Apply userid
if [ $SETUID = yes ]
then

if [ $SERVERNAME = `hostname-fqdn` ]
then
chmod +s $SETRECURSIVE2 "$LOCATION"
fi

if [ $SERVERTYPE = network ] && [ $SERVERNAME != `hostname-fqdn` ] || [ $SERVERTYPE = federated ]
then
ssh -o PasswordAuthentication=no -o ConnectTimeout=3 $SERVERNAME '
chmod +s '$SETRECURSIVE2' "'$LOCATION'"
'
fi

if [ $SERVERTYPE = federatedslave ]
then
ssh -o PasswordAuthentication=no -o ConnectTimeout=3 $SERVERMASTER '
ssh -o PasswordAuthentication=no -o ConnectTimeout=3 '$SERVERNAME' '\''
chmod +s '$SETRECURSIVE2' "'$LOCATION'"
'\''
'
fi
fi

#Apply groupid
if [ $SETGID = yes ]
then
if [ $SERVERNAME = `hostname-fqdn` ]
then
chmod g+s $SETRECURSIVE2 "$LOCATION"
fi

if [ $SERVERTYPE = network ] && [ $SERVERNAME != `hostname-fqdn` ] || [ $SERVERTYPE = federated ]
then
ssh -o PasswordAuthentication=no -o ConnectTimeout=3 $SERVERNAME '
chmod g+s '$SETRECURSIVE2' "'$LOCATION'"
'
fi

if [ $SERVERTYPE = federatedslave ]
then
ssh -o PasswordAuthentication=no -o ConnectTimeout=3 $SERVERMASTER '
ssh -o PasswordAuthentication=no -o ConnectTimeout=3 '$SERVERNAME' '\''
chmod g+s '$SETRECURSIVE2' "'$LOCATION'"
'\''
'
fi
fi

#Apply sticky
if [ $SETSTICKY = yes ]
then
if [ $SERVERNAME = `hostname-fqdn` ]
then
chmod +t $SETRECURSIVE2 "$LOCATION"
fi

if [ $SERVERTYPE = network ] && [ $SERVERNAME != `hostname-fqdn` ] || [ $SERVERTYPE = federated ]
then
ssh -o PasswordAuthentication=no -o ConnectTimeout=3 $SERVERNAME '
chmod +t '$SETRECURSIVE2' "'$LOCATION'"
'
fi

if [ $SERVERTYPE = federatedslave ]
then
ssh -o PasswordAuthentication=no -o ConnectTimeout=3 $SERVERMASTER '
ssh -o PasswordAuthentication=no -o ConnectTimeout=3 '$SERVERNAME' '\''
chmod +t '$SETRECURSIVE2' "'$LOCATION'"
'\''
'
fi
fi

LOCATIONFOLDER=`basename "$LOCATION"`
LOCATION=`echo "$LOCATION" | sed "s/\/$LOCATIONFOLDER//g"`
show_directory
}

function set_perms {
convert_special_chars


#Get ownership details
getlastlocation
LOCATION2=$(echo "$LOCATION" | sed "s/_/Z%%%%%Z/g")

show_title

if [ "$SERVERNAME" = $(hostname-fqdn) ]
then
	OWNER=$(ls -d -l "$LOCATION" | cut -d" " -f3)
	GROUP=$(ls -d -l "$LOCATION" | cut -d" " -f4)
	#Get current permissions of the item
	CURRENT_PERMS=$(ls -d -l "$LOCATION" | cut -d" " -f1)
	#Get size
	ITEMSIZE=$(du -h -s "$LOCATION" | cut -f1)
	#Get file info
	ITEMTYPE=$(file "$LOCATION" | cut -d: -f2)
	#Basename
	SHORTNAME=$(basename "$LOCATION")
	#Last modified
	LASTMOD=$(stat -c %y "$LOCATION" | cut -d. -f1)
	#Last accessed
	LASTACC=$(stat -c %x "$LOCATION" | cut -d. -f1)

	echo '<b>'$"Information"'</b><br><table class="tablesorter" style="text-align: left; " >
	<tbody>
	<tr><td style="width: '$WIDTH2'px;">'$"Name"'</td><td style="width: '$WIDTH3'px;">'$SHORTNAME'</td></tr>
	<tr><td>'$"Path"'</td><td>'$LOCATION'</td></tr>
	<tr><td>'$"Size"'</td><td>'$ITEMSIZE'</td></tr>
	<tr><td>'$"Type"'</td><td>'$ITEMTYPE'</td></tr>
	<tr><td>'$"Last accessed"'</td><td>'$LASTACC'</td></tr>
	<tr><td>'$"Last modified"'</td><td>'$LASTMOD'</td></tr>
	'

	#Offer to restore sql files
	if [ "${SHORTNAME: -4}" == ".sql" ]
	then
		DatabaseName=$(echo "$SHORTNAME" | cut -d. -f1) 
		echo '
		<tr><td>'$"Database name"'</td><td><input tabindex= "1" name="_DBNAME_" value="'$DatabaseName'" size="20" type="text"> <a class="info" target="_blank" href="http://www.linuxschools.com/karoshi/documentation/wiki/index.php?title=File_Manager"><img class="images" alt="" src="/images/help/info.png"><span>'$"Enter in the database name that you want this file restored to."'<br><br>'$"This will overwrite the data stored in this database if it already exits."'</span></a></td></tr>
		<tr><td>'$"Database Username"'</td><td><input tabindex= "1" name="_DBUSERNAME_" size="20" type="text"> <a class="info" target="_blank" href="http://www.linuxschools.com/karoshi/documentation/wiki/index.php?title=File_Manager"><img class="images" alt="" src="/images/help/info.png"><span>'$"Enter in a mysql username to access the database."' '$"This mysql user will be created if it does not already exist."'<br><br>'$"This field can be left blank to use an existing mysql username and password that has already been set for this database."'</span></a></td></tr>
		<tr><td>'$"Database Password"'</td><td><input tabindex= "1" name="_DBPASSWORD_" size="20" type="password"> <a class="info" target="_blank" href="http://www.linuxschools.com/karoshi/documentation/wiki/index.php?title=File_Manager"><img class="images" alt="" src="/images/help/info.png"><span>'$"Enter in a mysql password to access the database." $"This field can be left blank to use an existing mysql username and password that has already been set for this database."'</span></a></td></tr>
		</tbody></table>
		<input name="_ACTION_SQLRESTORE_SERVERTYPE_'"$SERVERTYPE"'_SERVERNAME_'"$SERVERNAME"'_LOCATION_'"$LOCATION2"'_" type="submit" class="button" value="'$"Restore SQL"'"><br><br>'
	else
		echo '</tbody></table><br>'
	fi

	echo '</form><form action="/cgi-bin/admin/file_manager.cgi" method="post"><b>'$"Basic Permissions"'</b><br><table class="tablesorter" style="text-align: left; " >
	<tbody>
	<tr><td style="width: '$WIDTH2'px;">'$"User"'</td><td style="width: '$WIDTH3'px;"><input tabindex= "1" name="_OWNER_" value="'$OWNER'" size="20" type="text"></td></tr>
	<tr><td>'$"Group"'</td><td><input tabindex= "2" name="_GROUP_" value='"$GROUP"' size="20" type="text"></td></tr>
	</tbody></table>'


	DIRECTORY=no
	[ ${CURRENT_PERMS:0:1} = d ] && DIRECTORY=yes
	[ ${CURRENT_PERMS:1:1} = r ] && USERREAD="checked=checked"
	[ ${CURRENT_PERMS:2:1} = w ] && USERWRITE="checked=checked"
	[ ${CURRENT_PERMS:3:1} = x ] && USEREXEC="checked=checked"
	[ ${CURRENT_PERMS:3:1} = s ] && USEREXEC="checked=checked"
	[ ${CURRENT_PERMS:3:1} = s ] && SETUID="checked=checked"

	[ ${CURRENT_PERMS:4:1} = r ] && GROUPREAD="checked=checked"
	[ ${CURRENT_PERMS:5:1} = w ] && GROUPWRITE="checked=checked"
	[ ${CURRENT_PERMS:6:1} = x ] && GROUPEXEC="checked=checked"
	[ ${CURRENT_PERMS:6:1} = s ] && GROUPEXEC="checked=checked"
	[ ${CURRENT_PERMS:6:1} = s ] && SETGID="checked=checked"

	[ ${CURRENT_PERMS:7:1} = r ] && OTHERREAD="checked=checked"
	[ ${CURRENT_PERMS:8:1} = w ] && OTHERWRITE="checked=checked"
	[ ${CURRENT_PERMS:9:1} = x ] && OTHEREXEC="checked=checked"
	[ ${CURRENT_PERMS:9:1} = t ] && OTHEREXEC="checked=checked"
	[ ${CURRENT_PERMS:9:1} = t ] && STICKY="checked=checked"
	EXECENTERMSG=$"Enter"
	[ $DIRECTORY = no ] && EXECENTERMSG=$"Exec"
	#Show ownership

	echo '<table class="tablesorter" style="text-align: left;" ><tbody>
	<tr><td style="width: '$WIDTH2'px;"></td><td style="width: '$WIDTH4'px;">'$"Read"'</td><td style="width: '$WIDTH4'px;">'$"Write"'</td><td style="width: '$WIDTH4'px;">'$EXECENTERMSG'</td><td style="width: '$WIDTH4'px;">'$"Special"'</td><td style="width: '$WIDTH5'px;"></td></tr>
	<tr><td>'$"User"'</td><td><input name="_USERREAD_" '$USERREAD' value="1" type="checkbox"></td><td><input name="_USERWRITE_" '$USERWRITE' value="1" type="checkbox"></td><td><input name="_USEREXEC_" '$USEREXEC' value="1" type="checkbox"></td><td><input name="_SETUID_" '$SETUID' value="1" type="checkbox"></td><td>'$"Set User ID"'</td></tr>
	<tr><td>'$"Group"'</td><td><input name="_GROUPREAD_" '$GROUPREAD' value="1" type="checkbox"></td><td><input name="_GROUPWRITE_" '$GROUPWRITE' value="1" type="checkbox"></td><td><input name="_GROUPEXEC_" '$GROUPEXEC' value="1" type="checkbox"></td><td><input name="_SETGID_" value="1" type="checkbox"></td><td>'$"Set Group ID"'</td></tr>
	<tr><td>'$"Other"'</td><td><input name="_OTHERREAD_" '$OTHERREAD' value="1" type="checkbox"></td><td><input name="_OTHERWRITE_" '$OTHERWRITE' value="1" type="checkbox"></td><td><input name="_OTHEREXEC_" '$OTHEREXEC' value="1" type="checkbox"></td><td><input name="_STICKY_" '$STICKY' value="1" type="checkbox"></td><td>'$"Sticky"'</td></tr></tbody></table>'

	#Show recursive options if the item is a directory
	if [ $DIRECTORY = yes ]
	then
		echo '<table class="tablesorter" style="text-align: left;" ><tbody>
		<tr><td style="width: '$WIDTH2'px;">'$"Recursive"'</td><td style="width: '$WIDTH3'px;"><input name="_RECURSIVE_" value="1" type="checkbox"></td></tr>
		<tr><td>'$"Exec Files"'</td><td><input name="_EXECRECURSE_" value="1" type="checkbox"></td></tr></tbody></table>'
	fi

	echo '<br><input name="_SERVERTYPE_'$SERVERTYPE'_SERVERMASTER_'$SERVERMASTER'_SERVERNAME_'$SERVERNAME'_LOCATION_'$LOCATION2'_ACTION_REALLYSETPERMS_" type="submit" class="button" value="'$"Submit"'"> <input name="_ACTION_ENTER_SERVERTYPE_'$SERVERTYPE'_SERVERMASTER_'$SERVERMASTER'_SERVERNAME_'$SERVERNAME'_LOCATION_'$LASTLOCATION'_" type="submit" class="button" value="'$"Back"'">'

	echo '</form><form action="/cgi-bin/admin/file_manager.cgi" method="post"><br><b>ACL '$"Permissions"'</b> <button class="button" name="_Addaclperms_" value="_ACTION_ADDACLPERMS_SERVERTYPE_'$SERVERTYPE'_SERVERMASTER_'$SERVERMASTER'_SERVERNAME_'$SERVERNAME'_LOCATION_'$LOCATION'_">
	'$"Add ACL"'
	</button>
	'

	#Show extended permissions
	SHOWTABLEHEADER=yes
	SHOWTABLEFOOTER=no	
	for ACLDATA in $(getfacl --omit-header --skip-base -p -d "$LOCATION" | grep -v '^user::\|^group::\|^other::\|^mask::')
	do
		if [ "$SHOWTABLEHEADER" = yes ]
		then
			echo '<table class="tablesorter" style="text-align: left;" ><tbody>
	<tr><td style="width: '$WIDTH2'px;"><b>'$"User"' / '$"Group"'</b></td><td style="width: '$WIDTH6'px;"><b>'$"Name"'</b></td><td style="width: '$WIDTH6'px;"><b>Access</b></td><td style="width: '$WIDTH7'px;"><b>Delete</b></td></tr>'
			SHOWTABLEHEADER=no
			SHOWTABLEFOOTER=yes
		fi

		ACLTYPE=$(echo $ACLDATA | cut -d: -f1)
		ACLUSER=$(echo $ACLDATA | cut -d: -f2)
		ACLPERMS=$(echo $ACLDATA | cut -d: -f3)
		ACLPERM=$"Read only"
		[ $(echo "$ACLPERMS" | grep -c "w") -gt 0 ] && ACLPERM=$"Read and Write"
		echo '<tr><td>'$ACLTYPE'</td><td>'$ACLUSER'</td><td>'$ACLPERM'</td><td>
		<button class="info infoabove" name="_Delete_" value="_SERVERTYPE_'$SERVERTYPE'_SERVERMASTER_'$SERVERMASTER'_SERVERNAME_'$SERVERNAME'_LOCATION_'$LOCATION2'_ACTION_DELETEACLPERMS_ACLOWNER_'$ACLUSER'_ACLGROUP_'$ACLTYPE'_">
		<img src="'$ICON5'" alt="'$"Delete"'">
		<span>'$"Delete"'<br>'$ACLTYPE' - '$ACLUSER'</span>
		</button>
		</td></tr>'
		
	done
	[ "$SHOWTABLEFOOTER" = yes ] && echo '</tbody></table>'
fi

if [ "$SERVERTYPE" = network ] && [[ "$SERVERNAME" != $(hostname-fqdn) ]] || [ "$SERVERTYPE" = federated ]
then
	ssh -o PasswordAuthentication=no -o ConnectTimeout=3 $SERVERNAME '
	OWNER=`ls -d -l "'$LOCATION'" | cut -d" " -f3`
	GROUP=`ls -d -l "'$LOCATION'" | cut -d" " -f4`
	#Get current permissions of the item
	CURRENT_PERMS=`ls -d -l "'$LOCATION'" | cut -d" " -f1`
	#Get size
	ITEMSIZE=`du -h -s "'$LOCATION'" | cut -f1`
	#Get file info
	ITEMTYPE=`file "'$LOCATION'" | cut -d: -f2`
	#Basename
	SHORTNAME=`basename "'$LOCATION'"`
	#Last modified
	LASTMOD=`stat -c %y "'$LOCATION'" | cut -d. -f1`
	#Last accessed
	LASTACC=`stat -c %x "'$LOCATION'" | cut -d. -f1`

	echo "<b>'$"Information"'</b><br><table class="tablesorter" style=\"text-align: left; \">
	<tbody>
	<tr><td style=\"width: '$WIDTH2'px;\">'$"Name"'</td><td style=\"width: '$WIDTH3'px;\">$SHORTNAME</td></tr>
	<tr><td>'$"Path"'</td><td>'$LOCATION'</td></tr>
	<tr><td>'$"Size"'</td><td>$ITEMSIZE</td></tr>
	<tr><td>'$"Type"'</td><td>$ITEMTYPE</td></tr>
	<tr><td>'$"Last accessed"'</td><td>$LASTACC</td></tr>
	<tr><td>'$"Last modified"'</td><td>$LASTMOD</td></tr>"

	#Offer to restore sql files
	if [ "${SHORTNAME: -4}" == ".sql" ]
	then
		DatabaseName=$(echo "$SHORTNAME" | cut -d. -f1) 
		echo "
		<tr><td>'$"Database name"'</td><td><input tabindex= "1" name=\"_DBNAME_\" value=\"$DatabaseName\" size=\"20\" type=\"text\"> <a class=\"info\" target=\"_blank\" href=\"http://www.linuxschools.com/karoshi/documentation/wiki/index.php?title=File_Manager\"><img class=\"images\" alt=\"\" src=\"/images/help/info.png\"><span>'$"Enter in the database name that you want this file restored to."'<br><br>'$"This will overwrite the data stored in this database if it already exits."'</span></a></td></tr>
		<tr><td>'$"Database Username"'</td><td><input tabindex= \"1\" name=\"_DBUSERNAME_\" size=\"20\" type=\"text\"> <a class=\"info\" target=\"_blank\" href=\"http://www.linuxschools.com/karoshi/documentation/wiki/index.php?title=File_Manager\"><img class=\"images\" alt=\"\" src=\"/images/help/info.png\"><span>'$"Enter in a mysql username to access the database." $"This mysql user will be created if it does not already exist."'<br><br>'$"This field can be left blank to use an existing mysql username and password that has already been set for this database."'</span></a></td></tr>
		<tr><td>'$"Database Password"'</td><td><input tabindex= \"1\" name=\"_DBPASSWORD_\" size=\"20\" type=\"password\"> <a class=\"info\" target=\"_blank\" href=\"http://www.linuxschools.com/karoshi/documentation/wiki/index.php?title=File_Manager\"><img class=\"images\" alt=\"\" src=\"/images/help/info.png\"><span>'$"Enter in a mysql password to access the database."'<br><br>'$"This field can be left blank to use an existing mysql username and password that has already been set for this database."'</span></a></td></tr>
		</tbody></table>
		<input name=\"_ACTION_SQLRESTORE_SERVERTYPE_'"$SERVERTYPE"'_SERVERNAME_'"$SERVERNAME"'_LOCATION_'"$LOCATION2"'_\" type=\"submit\" class=\"button\" value=\"'$"Restore SQL"'\"><br><br>"
	else
		echo "</tbody></table><br>"
	fi

	echo "</tbody></table><br>
	<b>'$"Basic Permissions"'</b><br><table class=\"tablesorter\" style=\"text-align: left; \" >
	<tbody>
	<tr><td style=\"width: '$WIDTH2'px;\">'$"User"'</td><td style=\"width: '$WIDTH3'px;\"><input tabindex= \"1\" name=\"_OWNER_\" value=$OWNER size=\"20\" type=\"text\"></td></tr>
	<tr><td>'$"Group"'</td><td><input tabindex= \"2\" name=\"_GROUP_\" value=$GROUP size=\"20\" type=\"text\"></td></tr>
	</tbody></table>"


	DIRECTORY=no
	[ ${CURRENT_PERMS:0:1} = d ] && DIRECTORY=yes
	[ ${CURRENT_PERMS:1:1} = r ] && USERREAD="checked=checked"
	[ ${CURRENT_PERMS:2:1} = w ] && USERWRITE="checked=checked"
	[ ${CURRENT_PERMS:3:1} = x ] && USEREXEC="checked=checked"
	[ ${CURRENT_PERMS:3:1} = s ] && USEREXEC="checked=checked"
	[ ${CURRENT_PERMS:3:1} = s ] && SETUID="checked=checked"

	[ ${CURRENT_PERMS:4:1} = r ] && GROUPREAD="checked=checked"
	[ ${CURRENT_PERMS:5:1} = w ] && GROUPWRITE="checked=checked"
	[ ${CURRENT_PERMS:6:1} = x ] && GROUPEXEC="checked=checked"
	[ ${CURRENT_PERMS:6:1} = s ] && GROUPEXEC="checked=checked"
	[ ${CURRENT_PERMS:6:1} = s ] && SETGID="checked=checked"

	[ ${CURRENT_PERMS:7:1} = r ] && OTHERREAD="checked=checked"
	[ ${CURRENT_PERMS:8:1} = w ] && OTHERWRITE="checked=checked"
	[ ${CURRENT_PERMS:9:1} = x ] && OTHEREXEC="checked=checked"
	[ ${CURRENT_PERMS:9:1} = t ] && OTHEREXEC="checked=checked"
	[ ${CURRENT_PERMS:9:1} = t ] && STICKY="checked=checked"
	EXECENTERMSG=$"Enter"
	[ $DIRECTORY = no ] && EXECENTERMSG=$"Exec"
	#Show ownership

	echo "<table class=\"tablesorter\" style=\"text-align: left;\" ><tbody>
	<tr><td style=\"width: '$WIDTH2'px;\"></td><td style=\"width: '$WIDTH4'px;\">'$"Read"'</td><td style=\"width: '$WIDTH4'px;\">'$"Write"'</td><td style=\"width: '$WIDTH4'px;\">$EXECENTERMSG</td><td style=\"width: '$WIDTH4'px;\">'$"Special"'</td><td style=\"width: '$WIDTH5'px;\"></td></tr>
	<tr><td>'$"User"'</td><td><input name=\"_USERREAD_\" $USERREAD value=\"1\" type=\"checkbox\"></td><td><input name=\"_USERWRITE_\" $USERWRITE value=\"1\" type=\"checkbox\"></td><td><input name=\"_USEREXEC_\" $USEREXEC value=\"1\" type=\"checkbox\"></td><td><input name=\"_SETUID_\" $SETUID value=\"1\" type=\"checkbox\"></td><td>'$"Set User ID"'</td></tr>
	<tr><td>'$"Group"'</td><td><input name=\"_GROUPREAD_\" $GROUPREAD value=\"1\" type=\"checkbox\"></td><td><input name=\"_GROUPWRITE_\" $GROUPWRITE value=\"1\" type=\"checkbox\"></td><td><input name=\"_GROUPEXEC_\" $GROUPEXEC value=\"1\" type=\"checkbox\"></td><td><input name=\"_SETGID_\" value=\"1\" type=\"checkbox\"></td><td>'$"Set Group ID"'</td></tr>
	<tr><td>'$"Other"'</td><td><input name=\"_OTHERREAD_\" $OTHERREAD value=\"1\" type=\"checkbox\"></td><td><input name=\"_OTHERWRITE_\" $OTHERWRITE value=\"1\" type=\"checkbox\"></td><td><input name=\"_OTHEREXEC_\" $OTHEREXEC value=\"1\" type=\"checkbox\"></td><td><input name=\"_STICKY_\" $STICKY value=\"1\" type=\"checkbox\"></td><td>'$"Sticky"'</td></tr></tbody></table>"

	#Show recursive options if the item is a directory
	if [ $DIRECTORY = yes ]
	then
		echo "<table class=\"tablesorter\" style=\"text-align: left;\" ><tbody>
		<tr><td style=\"width: '$WIDTH2'px;\">'$"Recursive"'</td><td style=\"width: '$WIDTH3'px;\"><input name=\"_RECURSIVE_\" value=\"1\" type="checkbox"></td></tr>
		<tr><td>'$"Exec Files"'</td><td><input name=\"_EXECRECURSE_\" value=\"1\" type=\"checkbox\"></td></tr></tbody></table>"
	fi

	echo "<br><input name=\"_SERVERTYPE_'$SERVERTYPE'_SERVERMASTER_'$SERVERMASTER'_SERVERNAME_'$SERVERNAME'_LOCATION_'$LOCATION2'_ACTION_REALLYSETPERMS_\" type=\"submit\" class=\"button\" value=\"'$"Submit"'\"> <input name=\"_ACTION_ENTER_SERVERTYPE_'$SERVERTYPE'_SERVERMASTER_'$SERVERMASTER'_SERVERNAME_'$SERVERNAME'_LOCATION_'$LASTLOCATION'_\" type=\"submit\" class=\"button\" value=\"'$"Cancel"'\">"

	echo "</form><form action=\"/cgi-bin/admin/file_manager.cgi\" method=\"post\"><br><b>ACL '$"Permissions"'</b> <button class=\"button\" name=\"_Addaclperms_\" value=\"_ACTION_ADDACLPERMS_SERVERTYPE_'$SERVERTYPE'_SERVERMASTER_'$SERVERMASTER'_SERVERNAME_'$SERVERNAME'_LOCATION_'$LOCATION'_\">
	'$"Add ACL"'
	</button>
	"

	#Show extended permissions
	SHOWTABLEHEADER=yes
	SHOWTABLEFOOTER=no	
	for ACLDATA in $(getfacl --omit-header --skip-base -p -d "'$LOCATION'" | grep -v "^user::\|^group::\|^other::\|^mask::")
	do
		if [ "$SHOWTABLEHEADER" = yes ]
		then
			echo "<table class=\"tablesorter\" style=\"text-align: left;\" ><tbody>
	<tr><td style=\"width: '$WIDTH2'px;\"><b>'$"User"' / '$"Group"'</b></td><td style=\"width: '$WIDTH6'px;\"><b>'$"Name"'</b></td><td style=\"width: '$WIDTH6'px;\"><b>Access</b></td><td style=\"width: '$WIDTH7'px;\"><b>'$"Delete"'</b></td></tr>"
			SHOWTABLEHEADER=no
			SHOWTABLEFOOTER=yes
		fi

		ACLTYPE=$(echo $ACLDATA | cut -d: -f1)
		ACLUSER=$(echo $ACLDATA | cut -d: -f2)
		ACLPERMS=$(echo $ACLDATA | cut -d: -f3)
		ACLPERM="'$"Read only"'"
		[ $(echo "$ACLPERMS" | grep -c "w") -gt 0 ] && ACLPERM="'$"Read and Write"'"
		echo "<tr><td>$ACLTYPE</td><td>$ACLUSER</td><td>$ACLPERM</td><td>
		<button class=\"info\" name=\"_Delete_\" value=\"_SERVERTYPE_'$SERVERTYPE'_SERVERMASTER_'$SERVERMASTER'_SERVERNAME_'$SERVERNAME'_LOCATION_'$LOCATION2'_ACTION_DELETEACLPERMS_ACLOWNER_$ACLUSER\_ACLGROUP_$ACLTYPE\_\">
		<img src=\"'$ICON5'\" alt=\"'$"Delete"'\">
		<span>'$"Delete"'<br>'$ACLTYPE' - '$ACLUSER'</span>
		</button>
		</td></tr>"
		
	done
	[ "$SHOWTABLEFOOTER" = yes ] && echo "</tbody></table>"
'
fi


if [ $SERVERTYPE = federatedslave ]
then
ssh -o PasswordAuthentication=no -o ConnectTimeout=3 $SERVERMASTER '
ssh -o PasswordAuthentication=no -o ConnectTimeout=3 '$SERVERNAME' '\''
	OWNER=`ls -d -l "'$LOCATION'" | cut -d" " -f3`
	GROUP=`ls -d -l "'$LOCATION'" | cut -d" " -f4`
	#Get current permissions of the item
	CURRENT_PERMS=`ls -d -l "'$LOCATION'" | cut -d" " -f1`
	#Get size
	ITEMSIZE=`du -h -s "'$LOCATION'" | cut -f1`
	#Get file info
	ITEMTYPE=`file "'$LOCATION'" | cut -d: -f2`
	#Basename
	SHORTNAME=`basename "'$LOCATION'"`
	#Last modified
	LASTMOD=`stat -c %y "'$LOCATION'" | cut -d. -f1`
	#Last accessed
	LASTACC=`stat -c %x "'$LOCATION'" | cut -d. -f1`

	echo "<b>'$"Information"'</b><br><table class="tablesorter" style=\"text-align: left; \">
	<tbody>
	<tr><td style=\"width: '$WIDTH2'px;\">'$"Name"'</td><td style=\"width: '$WIDTH3'px;\">$SHORTNAME</td></tr>
	<tr><td>'$"Path"'</td><td>'$LOCATION'</td></tr>
	<tr><td>'$"Size"'</td><td>$ITEMSIZE</td></tr>
	<tr><td>'$"Type"'</td><td>$ITEMTYPE</td></tr>
	<tr><td>'$"Last accessed"'</td><td>$LASTACC</td></tr>
	<tr><td>'$"Last modified"'</td><td>$LASTMOD</td></tr>
	</tbody></table><br>
	<b>'$"Basic Permissions"'</b><br><table class=\"tablesorter\" style=\"text-align: left; \" >
	<tbody>
	<tr><td style=\"width: '$WIDTH2'px;\">'$"User"'</td><td style=\"width: '$WIDTH3'px;\"><input tabindex= \"1\" name=\"_OWNER_\" value=$OWNER size=\"20\" type=\"text\"></td></tr>
	<tr><td>'$"Group"'</td><td><input tabindex= \"2\" name=\"_GROUP_\" value=$GROUP size=\"20\" type=\"text\"></td></tr>
	</tbody></table>"


	DIRECTORY=no
	[ ${CURRENT_PERMS:0:1} = d ] && DIRECTORY=yes
	[ ${CURRENT_PERMS:1:1} = r ] && USERREAD="checked=checked"
	[ ${CURRENT_PERMS:2:1} = w ] && USERWRITE="checked=checked"
	[ ${CURRENT_PERMS:3:1} = x ] && USEREXEC="checked=checked"
	[ ${CURRENT_PERMS:3:1} = s ] && USEREXEC="checked=checked"
	[ ${CURRENT_PERMS:3:1} = s ] && SETUID="checked=checked"

	[ ${CURRENT_PERMS:4:1} = r ] && GROUPREAD="checked=checked"
	[ ${CURRENT_PERMS:5:1} = w ] && GROUPWRITE="checked=checked"
	[ ${CURRENT_PERMS:6:1} = x ] && GROUPEXEC="checked=checked"
	[ ${CURRENT_PERMS:6:1} = s ] && GROUPEXEC="checked=checked"
	[ ${CURRENT_PERMS:6:1} = s ] && SETGID="checked=checked"

	[ ${CURRENT_PERMS:7:1} = r ] && OTHERREAD="checked=checked"
	[ ${CURRENT_PERMS:8:1} = w ] && OTHERWRITE="checked=checked"
	[ ${CURRENT_PERMS:9:1} = x ] && OTHEREXEC="checked=checked"
	[ ${CURRENT_PERMS:9:1} = t ] && OTHEREXEC="checked=checked"
	[ ${CURRENT_PERMS:9:1} = t ] && STICKY="checked=checked"
	EXECENTERMSG=$"Enter"
	[ $DIRECTORY = no ] && EXECENTERMSG=$"Exec"
	#Show ownership

	echo "<table class=\"tablesorter\" style=\"text-align: left;\" ><tbody>
	<tr><td style=\"width: '$WIDTH2'px;\"></td><td style=\"width: '$WIDTH4'px;\">'$"Read"'</td><td style=\"width: '$WIDTH4'px;\">'$"Write"'</td><td style=\"width: '$WIDTH4'px;\">$EXECENTERMSG</td><td style=\"width: '$WIDTH4'px;\">'$"Special"'</td><td style=\"width: '$WIDTH5'px;\"></td></tr>
	<tr><td>'$"User"'</td><td><input name=\"_USERREAD_\" $USERREAD value=\"1\" type=\"checkbox\"></td><td><input name=\"_USERWRITE_\" $USERWRITE value=\"1\" type=\"checkbox\"></td><td><input name=\"_USEREXEC_\" $USEREXEC value=\"1\" type=\"checkbox\"></td><td><input name=\"_SETUID_\" $SETUID value=\"1\" type=\"checkbox\"></td><td>'$"Set User ID"'</td></tr>
	<tr><td>'$"Group"'</td><td><input name=\"_GROUPREAD_\" $GROUPREAD value=\"1\" type=\"checkbox\"></td><td><input name=\"_GROUPWRITE_\" $GROUPWRITE value=\"1\" type=\"checkbox\"></td><td><input name=\"_GROUPEXEC_\" $GROUPEXEC value=\"1\" type=\"checkbox\"></td><td><input name=\"_SETGID_\" value=\"1\" type=\"checkbox\"></td><td>'$"Set Group ID"'</td></tr>
	<tr><td>'$"Other"'</td><td><input name=\"_OTHERREAD_\" $OTHERREAD value=\"1\" type=\"checkbox\"></td><td><input name=\"_OTHERWRITE_\" $OTHERWRITE value=\"1\" type=\"checkbox\"></td><td><input name=\"_OTHEREXEC_\" $OTHEREXEC value=\"1\" type=\"checkbox\"></td><td><input name=\"_STICKY_\" $STICKY value=\"1\" type=\"checkbox\"></td><td>'$"Sticky"'</td></tr></tbody></table>"

	#Show recursive options if the item is a directory
	if [ $DIRECTORY = yes ]
	then
		echo "<table class=\"tablesorter\" style=\"text-align: left;\" ><tbody>
		<tr><td style=\"width: '$WIDTH2'px;\">'$"Recursive"'</td><td style=\"width: '$WIDTH3'px;\"><input name=\"_RECURSIVE_\" value=\"1\" type="checkbox"></td></tr>
		<tr><td>'$"Exec Files"'</td><td><input name=\"_EXECRECURSE_\" value=\"1\" type=\"checkbox\"></td></tr></tbody></table>"
	fi

	echo "<br><input name=\"_SERVERTYPE_'$SERVERTYPE'_SERVERMASTER_'$SERVERMASTER'_SERVERNAME_'$SERVERNAME'_LOCATION_'$LOCATION2'_ACTION_REALLYSETPERMS_\" type=\"submit\" class=\"button\" value=\"'$"Submit"'\"> <input name=\"_ACTION_ENTER_SERVERTYPE_'$SERVERTYPE'_SERVERMASTER_'$SERVERMASTER'_SERVERNAME_'$SERVERNAME'_LOCATION_'$LASTLOCATION'_\" type=\"submit\" class=\"button\" value=\"'$"Cancel"'\">"

	echo "</form><form action=\"/cgi-bin/admin/file_manager.cgi\" method=\"post\"><br><b>ACL '$"Permissions"'</b> <button class=\"button\" name=\"_Addaclperms_\" value=\"_ACTION_ADDACLPERMS_SERVERTYPE_'$SERVERTYPE'_SERVERMASTER_'$SERVERMASTER'_SERVERNAME_'$SERVERNAME'_LOCATION_'$LOCATION'_\">
	'$"Add ACL"'
	</button>
	"

	#Show extended permissions
	SHOWTABLEHEADER=yes
	SHOWTABLEFOOTER=no	
	for ACLDATA in $(getfacl --omit-header --skip-base -p -d "'$LOCATION'" | grep -v "^user::\|^group::\|^other::\|^mask::")
	do
		if [ "$SHOWTABLEHEADER" = yes ]
		then
			echo "<table class=\"tablesorter\" style=\"text-align: left;\" ><tbody>
	<tr><td style=\"width: '$WIDTH2'px;\"><b>'$"User"' / '$"Group"'</b></td><td style=\"width: '$WIDTH6'px;\"><b>'$"Name"'</b></td><td style=\"width: '$WIDTH6'px;\"><b>Access</b></td><td style=\"width: '$WIDTH7'px;\"><b>'$"Delete"'</b></td></tr>"
			SHOWTABLEHEADER=no
			SHOWTABLEFOOTER=yes
		fi

		ACLTYPE=$(echo $ACLDATA | cut -d: -f1)
		ACLUSER=$(echo $ACLDATA | cut -d: -f2)
		ACLPERMS=$(echo $ACLDATA | cut -d: -f3)
		ACLPERM="'$"Read only"'"
		[ $(echo "$ACLPERMS" | grep -c "w") -gt 0 ] && ACLPERM="'$"Read and Write"'"
		echo "<tr><td>$ACLTYPE</td><td>$ACLUSER</td><td>$ACLPERM</td><td>
		<button class=\"info\" name=\"_Delete_\" value=\"_SERVERTYPE_'$SERVERTYPE'_SERVERMASTER_'$SERVERMASTER'_SERVERNAME_'$SERVERNAME'_LOCATION_'$LOCATION2'_ACTION_DELETEACLPERMS_ACLOWNER_$ACLUSER\_ACLGROUP_$ACLTYPE\_\">
		<img src=\"'$ICON5'\" alt=\"'$"Delete"'\">
		<span>'$"Delete"'<br>'$ACLTYPE' - '$ACLUSER'</span>
		</button>
		</td></tr>"
		
	done
	[ "$SHOWTABLEFOOTER" = yes ] && echo "</tbody></table>"
'
'\''
'
fi
}

function really_copy_item {
convert_special_chars
convert_special_chars2
ITEMMOVE=$(echo "$ITEMMOVE" | sed "s/Z%%%%%Z/_/g")
COPYSERVERNAME=$(echo "$ITEMMOVE" | cut -d: -f1)
COPYSERVERTYPE=$(echo "$ITEMMOVE" | cut -d: -f2)
COPYSERVERMASTER=$(echo "$ITEMMOVE" | cut -d: -f3)
ITEMMOVE=$(echo "$ITEMMOVE" | cut -d: -f4)
FILETOCOPY=$(basename "$ITEMMOVE")
convert_special_chars2

#Copy item
if [ "$ACTION" = REALLYCOPY ]
then
	echo "$(date): file_manager - copying $ITEMMOVE on $COPYSERVERNAME to $LOCATION on $SERVERNAME by $REMOTE_USER from $REMOTE_ADDR" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
else
	echo "$(date): file_manager - moving $ITEMMOVE on $COPYSERVERNAME to $LOCATION on $SERVERNAME by $REMOTE_USER from $REMOTE_ADDR" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"	
fi


if [ "$SERVERNAME" = "$COPYSERVERNAME" ]
then
	#Copy on the main server
	if [[ "$SERVERNAME" = $(hostname-fqdn) ]]
	then

		EVENTFILE=copy-$(date +%F-%H:%M:%S)
		[ ! -d /opt/karoshi/logs/events ] && mkdir -p /opt/karoshi/logs/events		
		nohup bash -c "echo $(date) Copying $ITEMMOVE to $LOCATION/$FILETOCOPY ; rsync --backup --suffix=_old_$(date +%F-%H:%M:%S) --timeout=30 --dirs --recursive --compress --links --times --verbose --perms --executability --owner --group --acls \"$ITEMMOVE\" \"$LOCATION/\" ; if [ \"$ACTION\" = REALLYMOVE ]; then rm -f -R \"$ITEMMOVE\"; fi; echo $(date) Copy completed." 1>> /opt/karoshi/logs/events/"$EVENTFILE" 2>> /opt/karoshi/logs/events/"$EVENTFILE"&
	else
		#Copy on a network or federated server
		if [ "$SERVERTYPE" = network ] || [ "$SERVERTYPE" = federated ]
		then
			ssh -o PasswordAuthentication=no -o ConnectTimeout=3 "$SERVERNAME" '
			[ -d /opt/karoshi/logs/karoshi_web_management/ ] && echo `date`: file_manager \(federated mode\) - copying "'$ITEMMOVE'" to "'$LOCATION'" on '$SERVERNAME' by '$REMOTE_USER' from '$REMOTE_ADDR' >> /opt/karoshi/logs/karoshi_web_management/'$LOG_DATE'
			EXISTCHECK=go
			ITEMMOVE=$(echo "'"$ITEMMOVE"'")
			FILETOCOPY=$(basename "$ITEMMOVE")
			while [ "$EXISTCHECK" = go ]
			do
				if [ -e "'"$LOCATION"'"/"$FILETOCOPY" ]
				then
					FILETOCOPY="$FILETOCOPY"new
				else
					EXISTCHECK=stop
				fi
			done
			if [ -d "'"$LOCATION"'" ] 
			then
				echo "<pre style=\"font-size: 10pt; font-family:Arial, Times, Georgia, serif\">"
				if [ "'"$ACTION"'" = REALLYCOPY ]
				then
					cp -v -f -R "$ITEMMOVE" "'"$LOCATION"'"/"$FILETOCOPY"
				else
					[ -d "'$LOCATION'" ] && mv -f "$ITEMMOVE" "'$LOCATION'"/"$FILETOCOPY"
				fi
				echo "</pre>"
			fi
			'
		fi	

		if [ "$SERVERTYPE" = federatedslave ]
		then
			ssh -o PasswordAuthentication=no -o ConnectTimeout=3 "$SERVERMASTER" '
			echo $(date): file_manager \(federated mode\) - copying "'"$ITEMMOVE"'" to "'"$LOCATION"'" on '"$SERVERNAME"' by '"$REMOTE_USER"' from '"$REMOTE_ADDR"' >> /opt/karoshi/logs/karoshi_web_management/'$LOG_DATE'
			ssh -o PasswordAuthentication=no -o ConnectTimeout=3 '"$SERVERNAME"' '\''
			EXISTCHECK=go
			ITEMMOVE=$(echo '"$ITEMMOVE"')
			FILETOCOPY=$(basename "$ITEMMOVE")
			while [ "$EXISTCHECK" = go ]
			do
				if [ -e "'"$LOCATION"'"/"$FILETOCOPY" ]
				then
					FILETOCOPY="$FILETOCOPY"new
				else
					EXISTCHECK=stop
				fi
			done
			if [ -d "'"$LOCATION"'" ]
			then
				echo "<pre style=\"font-size: 10pt; font-family:Arial, Times, Georgia, serif\">"
				if [ "'"$ACTION"'" = REALLYCOPY ]
				then
					cp -v -f -R "$ITEMMOVE" "'"$LOCATION"'"/"$FILETOCOPY"
				else
					[ -d "'$LOCATION'" ] && mv -f "$ITEMMOVE" "'$LOCATION'"/"$FILETOCOPY"			
				fi
				echo "</pre>"
			fi
			'\''
			'
		fi
	fi
fi

if [ "$SERVERNAME" != "$COPYSERVERNAME" ]
then
	#Copy from the main server to a network server
	if [[ "$SERVERNAME" != $(hostname-fqdn) ]] && [[ "$COPYSERVERNAME" = $(hostname-fqdn) ]] && [ "$SERVERTYPE" = network ] || [ "$SERVERTYPE" = federated ]
	then
		EVENTFILE=copy-$(date +%F-%H:%M:%S)
		LOCATION=$(echo "$LOCATION" | sed 's/ /\\ /g')
		[ ! -d /opt/karoshi/logs/events ] && mkdir -p /opt/karoshi/logs/events
		nohup bash -c "echo $(date) Copying "$COPYSERVERNAME":$ITEMMOVE to $SERVERNAME:$LOCATION ; rsync --backup --suffix=_old_$(date +%F-%H:%M:%S) --timeout=30 --dirs --recursive --compress --links --times --verbose --perms --executability --owner --group --acls \"$ITEMMOVE\" root@$SERVERNAME:\"$LOCATION\"/ ; if [ \"$ACTION\" = REALLYMOVE ]; then rm -f -R \"$ITEMMOVE\"; fi; echo $(date) Copy completed." 1>> /opt/karoshi/logs/events/"$EVENTFILE" 2>> /opt/karoshi/logs/events/"$EVENTFILE"&
		LOCATION=$(echo "$LOCATION" | sed 's/\\ / /g')
	fi

	#Copy from a network server to the main server
	if [[ "$SERVERNAME" = $(hostname-fqdn) ]] && [[ "$COPYSERVERNAME" != $(hostname-fqdn) ]] && [ "$SERVERTYPE" = network ] || [ "$SERVERTYPE" = federated ]
	then
		EVENTFILE=copy-$(date +%F-%H:%M:%S)
		ITEMMOVE=$(echo "$ITEMMOVE" | sed 's/ /\\ /g')
		[ ! -d /opt/karoshi/logs/events ] && mkdir -p /opt/karoshi/logs/events
		nohup bash -c "echo $(date) Copying "$COPYSERVERNAME":$ITEMMOVE to $SERVERNAME:$LOCATION ; rsync --backup --suffix=_old_$(date +%F-%H:%M:%S) --timeout=30 --dirs --recursive --compress --links --times --verbose --perms --executability --owner --group --acls root@$COPYSERVERNAME:\"$ITEMMOVE\" \"$LOCATION\" ; if [ \"$ACTION\" = REALLYMOVE ]; then ssh -o PasswordAuthentication=no -o ConnectTimeout=3 "$COPYSERVERNAME" ' rm -f -R \"$ITEMMOVE\" '; fi; echo $(date) Copy completed." 1>> /opt/karoshi/logs/events/"$EVENTFILE" 2>> /opt/karoshi/logs/events/"$EVENTFILE"&
	fi

	#Copy between network servers
	if [[ "$SERVERNAME" != $(hostname-fqdn) ]] && [[ "$COPYSERVERNAME" != $(hostname-fqdn) ]] && [ "$SERVERTYPE" = network ] || [ "$SERVERTYPE" = federated ]
	then	
		EVENTFILE=copy-$(date +%F-%H:%M:%S)
		BASECOPYFOLDER=$(echo "$ITEMMOVE" | sed 's/'"\/"$FILETOCOPY""'$//g')
		[ ! -d /opt/karoshi/mount/"$SERVERNAME/$LOCATION" ] && mkdir -p "/opt/karoshi/mount/$SERVERNAME/$LOCATION"
		[ ! -d /opt/karoshi/mount/"$COPYSERVERNAME/$BASECOPYFOLDER" ] && mkdir -p "/opt/karoshi/mount/$COPYSERVERNAME$BASECOPYFOLDER"
		sshfs root@"$SERVERNAME:$LOCATION" "/opt/karoshi/mount/$SERVERNAME$LOCATION" 2>> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
		sshfs root@"$COPYSERVERNAME:$BASECOPYFOLDER" "/opt/karoshi/mount/$COPYSERVERNAME$BASECOPYFOLDER" 2>> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
		#rsync --backup --suffix=_old_$(date +%F-%H:%M:%S) --timeout=30 --dirs --recursive --links --compress --times --perms --acls --owner --group "/opt/karoshi/mount/$COPYSERVERNAME/$BASECOPYFOLDER/$FILETOCOPY" "/opt/karoshi/mount/$SERVERNAME/$LOCATION" 2>> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
		nohup bash -c "echo $(date) Copying "$COPYSERVERNAME":$ITEMMOVE to $SERVERNAME:$LOCATION ; rsync --backup --suffix=_old_$(date +%F-%H:%M:%S) --timeout=30 --dirs --recursive --compress --links --times --verbose --perms --executability --owner --group --acls /opt/karoshi/mount/\"$COPYSERVERNAME/$ITEMMOVE\" /opt/karoshi/mount/\"$SERVERNAME/$LOCATION\"; if [ \"$ACTION\" = REALLYMOVE ]; then rm -f -R \"$ITEMMOVE\"; fi; fusermount -u /opt/karoshi/mount/"$SERVERNAME/$LOCATION"; fusermount -u /opt/karoshi/mount/"$COPYSERVERNAME/$BASECOPYFOLDER"; echo $(date) Copy completed." 1>> /opt/karoshi/logs/events/"$EVENTFILE" 2>> /opt/karoshi/logs/events/"$EVENTFILE"&
		LOCATION=$(echo "$LOCATION" | sed 's/\\ / /g')	
	fi	
fi

ITEMMOVE=""
#Display location
sleep 1
show_directory
}

function move_item2b {
convert_special_chars
LOCATION2=`echo "$LOCATION" | sed "s/_/Z%%%%%Z/g"`
ITEMTOCOPY=$LOCATION
FILENAME=`basename "$LOCATION"`
LOCATION=`echo "$LOCATION" | sed "s/\/$FILENAME$//g"`

#Check to see that item is not on the protected list
MOVECHECK=yes

#Check that file is not in a banned path
if [ `echo ${LOCATION_LIST[@]:0} | grep -c -w "$ITEMTOCOPY"` -gt 0 ]
then
	MOVECHECK=no
fi
for PATHCHECK in `echo ${LOCATION_LIST2[@]:0}`
do
	if [ `echo "$ITEMTOCOPY" | grep -c $PATHCHECK` -gt 0 ]
	then
		MOVECHECK=no 
	fi
done

if [ $MOVECHECK = yes ]
then
	echo "$ITEMTOCOPY2" - $"Move here?" '<input type="image" src="'$ICON9'" name="_ACTION_REALLYMOVE_SERVERTYPE_'$SERVERTYPE'_SERVERMASTER_'$SERVERMASTER'_SERVERNAME_'$SERVERNAME'_LOCATION_'$LOCATION2'_ITEMMOVE_'$ITEMTOCOPY'_" value="">'
	echo $"Copy here?" '<input type="image" src="'$ICON4'" name="_ACTION_REALLYCOPY_SERVERTYPE_'$SERVERTYPE'_SERVERMASTER_'$SERVERMASTER'_SERVERNAME_'$SERVERNAME'_LOCATION_'$LOCATION2'_ITEMMOVE_'$ITEMTOCOPY'_" value="">'
	echo $"Cancel" '<input type="image" src="'$ICON8'" name="_ACTION_CANCELCOPY_SERVERTYPE_'$SERVERTYPE'_SERVERMASTER_'$SERVERMASTER'_SERVERNAME_'$SERVERNAME'_LOCATION_'$LOCATION2'_" value=""><br>'
else
	echo $"This item is protected and cannot be moved or copied.""<br>"
fi
#Browse to directory to move to
show_directory
}

function cancel_copy_item {
ITEMMOVE=""
show_directory
}

function really_rename_item {

LOCATION=`echo "$LOCATION" | sed 's/NEWNAME/:/g'`

#Rename the item
convert_special_chars
CURRENTNAME=`basename "$LOCATION"`
CURRENTLOCATION=`echo "$LOCATION" | sed "s/\/$CURRENTNAME$//g"`


NEWNAME="$NEWFOLDER"

ITEMMOVE="$NEWNAME"
convert_special_chars2
NEWNAME="$ITEMMOVE"
ITEMMOVE=""

#Rename the item
echo `date`: file_manager - renaming "$LOCATION" to "$NEWNAME" on $SERVERNAME by $REMOTE_USER from $REMOTE_ADDR >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
if [ $SERVERNAME = `hostname-fqdn` ]
then
	if [ -e "$LOCATION" ]
	then
		if [ ! -e "$CURRENTLOCATION/$NEWNAME" ]
		then
			mv -f "$LOCATION" "$CURRENTLOCATION/$NEWNAME"
		else
			echo ''$"An item with this name already exists."'<br><br><a href="javascript:history.go(-1)"> <img src="/images/submenus/file/back.gif" border="0"></a>'
		exit
		fi
	fi
fi

if [ $SERVERTYPE = network ] && [ $SERVERNAME != `hostname-fqdn` ] || [ $SERVERTYPE = federated ]
then
	ssh -o PasswordAuthentication=no -o ConnectTimeout=3 $SERVERNAME '
	[ -d /opt/karoshi/logs/karoshi_web_management/ ] && echo `date`: file_manager \(federated mode\) - renaming "'$LOCATION'" to "'$NEWNAME'" on '$SERVERNAME' by '$REMOTE_USER' from '$REMOTE_ADDR' >> /opt/karoshi/logs/karoshi_web_management/'$LOG_DATE'
	if [ -e "'$LOCATION'" ]
	then
		if [ ! -e "'$CURRENTLOCATION'/'$NEWNAME'" ]
		then
			mv -f "'$LOCATION'" "'$CURRENTLOCATION'/'$NEWNAME'"
		else
			echo "'$"An item with this name already exists."'<br><br><A HREF=\"javascript:history.go(-1)\"> <IMG SRC=\"/images/submenus/file/back.gif\" BORDER=\"0\"></A>"
		exit 100
		fi
	fi
	'
	[ `echo $?` = 100 ] && exit
fi

if [ $SERVERTYPE = federatedslave ]
then
	ssh -o PasswordAuthentication=no -o ConnectTimeout=3 $SERVERMASTER '
	echo `date`: file_manager \(federated mode\) - renaming "'$LOCATION'" to "'$NEWNAME'" on '$SERVERNAME' by '$REMOTE_USER' from '$REMOTE_ADDR' >> /opt/karoshi/logs/karoshi_web_management/'$LOG_DATE'
	ssh -o PasswordAuthentication=no -o ConnectTimeout=3 '$SERVERNAME' '\''
	if [ -e "'$LOCATION'" ]
	then
	if [ ! -e "'$CURRENTLOCATION'/'$NEWNAME'" ]
	then
		mv -f "'$LOCATION'" "'$CURRENTLOCATION'/'$NEWNAME'"
	else
		echo "'$"An item with this name already exists."'<br><br><A HREF=\"javascript:history.go(-1)\"> <IMG SRC=\"/images/submenus/file/back.gif\" BORDER=\"0\"></A>"
		exit 100
	fi
fi
	'\''
	[ `echo $?` = 100 ] && exit 100
	'
	[ `echo $?` = 100 ] && exit
fi


#Go to current directory
LOCATION="$CURRENTLOCATION"
show_directory
}

function rename_item {
#Check to see that item is not on the protected list
getlastlocation
RENAMECHECK=yes
show_title
#Check that file is not in a banned path
if [ $(echo "${LOCATION_LIST[@]:0}" | grep -c -w "$LOCATION") -gt 0 ]
then
	RENAMECHECK=no
fi
for PATHCHECK in $(echo ${LOCATION_LIST2[@]:0})
do
	if [[ $(echo "$LOCATION" | grep -c $PATHCHECK) -gt 0 ]]
	then
		RENAMECHECK=no 
	fi
done

if [ "$RENAMECHECK" = no ]
then
	echo '<br><br><input name="_ACTION_ENTER_SERVERTYPE_'"$SERVERTYPE"'_SERVERMASTER_'"$SERVERMASTER"'_SERVERNAME_'"$SERVERNAME"'_LOCATION_'"$LASTLOCATION"'_" type="submit" class="button" value="'$"Back"'"><br><br>'$"This item is protected and cannot be renamed."
else
	#Confirm rename of item.
	convert_special_chars
	RENAMEFILE=$(basename "$LOCATION")
	LOCATION2=$(echo "$LOCATION" | sed "s/_/Z%%%%%Z/g")

	echo '<br><table class="tablesorter" style="text-align: left;" ><tbody>
	<tr><td style="height: 25px; width: 180px;"><b>'$"Location"'</b></td>'
	[ "$MOBILE" = yes ] && echo "</tr><tr>" 
	echo '<td>'"$LOCATION"'</td></tr>
	<tr><td style="height: 25px;"><b>'$"Current Name"'</b></td>'
	[ "$MOBILE" = yes ] && echo "</tr><tr>" 
	echo '<td>'"$RENAMEFILE"'</td></tr>
	<tr><td style="height: 25px;"><b>'$"New Name"'</b></td>'
	[ "$MOBILE" = yes ] && echo "</tr><tr>" 
	echo '<td><input name="_NEWFOLDER_" type="text" size="20" value="'"$RENAMEFILE"'"></td></tr>
	</tbody></table><br>
	<input name="_ACTION_REALLYRENAME_SERVERTYPE_'"$SERVERTYPE"'_SERVERMASTER_'"$SERVERMASTER"'_SERVERNAME_'"$SERVERNAME"'_LOCATION_'"$LOCATION2"'_" type="submit" class="button" value="'$"Rename"'"> <input name="_ACTION_ENTER_SERVERTYPE_'"$SERVERTYPE"'_SERVERMASTER_'"$SERVERMASTER"'_SERVERNAME_'"$SERVERNAME"'_LOCATION_'"$LASTLOCATION"'_" type="submit" class="button" value="'$"Cancel"'"><br>'

fi
}

function really_edit_item {
TEXTCONTENT=$(echo "$DATA" | cut -s -d: -f17)
convert_special_chars
#echo location is "$LOCATION"'<br>'
convert_special_chars3
#echo text content is "$TEXTCONTENT"'<br>'

echo "$(date): file_manager - editing "$LOCATION" on $SERVERNAME by $REMOTE_USER from $REMOTE_ADDR" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"

if [ $SERVERNAME = $(hostname-fqdn) ]
then
	if [ -f "$LOCATION" ]
	then
		echo -e "$TEXTCONTENT" | sed 's/%0D%0A/\n/g' > "$LOCATION"
		#replace speech marks
		sed -i 's/%22/"/g' "$LOCATION"
		#replace tabs
		sed -i 's/%09/\t/g' "$LOCATION"
		#Replace quotation marks
		sed -i "s/%27/'/g" "$LOCATION"
		#Replace `
		sed -i "s/%60/\`/g" "$LOCATION"
		#Replace back slash
		sed -i "s/%5C/\\\/g" "$LOCATION"
	fi
fi

if [ "$SERVERTYPE" = network ] && [ "$SERVERNAME" != $(hostname-fqdn) ] || [ "$SERVERTYPE" = federated ]
then
	echo -e "$TEXTCONTENT" | sed 's/%0D%0A/\n/g' > "/opt/karoshi/.tempdata/file_edit.$$"
	#replace speech marks
	sed -i 's/%22/"/g' "/opt/karoshi/.tempdata/file_edit.$$"
	#replace tabs
	sed -i 's/%09/\t/g' "/opt/karoshi/.tempdata/file_edit.$$"
	#Replace quotation marks
	sed -i "s/%27/'/g" "/opt/karoshi/.tempdata/file_edit.$$"
	#Replace `
	sed -i "s/%60/\`/g" "/opt/karoshi/.tempdata/file_edit.$$"
	#Replace back slash
	sed -i "s/%5C/\\\/g" "/opt/karoshi/.tempdata/file_edit.$$"
	#cat file back to correct SERVERNAME
	LOCATION2=$(echo "$LOCATION" | sed 's/ /\\\ /g')
	cat /opt/karoshi/.tempdata/file_edit.$$ | ssh -o PasswordAuthentication=no -o ConnectTimeout=3 $SERVERNAME 'cat - > '$LOCATION2''
	ssh -o PasswordAuthentication=no -o ConnectTimeout=3 $SERVERNAME '
	[ -d /opt/karoshi/logs/karoshi_web_management/ ] && echo `date`: file_manager \(federated mode\) - editing "'$LOCATION'" on '$SERVERNAME' by '$REMOTE_USER' from '$REMOTE_ADDR' >> /opt/karoshi/logs/karoshi_web_management/'$LOG_DATE'
	'
fi

if [ "$SERVERTYPE" = federatedslave ]
then
	echo -e "$TEXTCONTENT" | sed 's/%0D%0A/\n/g' > "/opt/karoshi/.tempdata/file_edit.$$"
	#replace speech marks
	sed -i 's/%22/"/g' "/opt/karoshi/.tempdata/file_edit.$$"
	#replace tabs
	sed -i 's/%09/\t/g' "/opt/karoshi/.tempdata/file_edit.$$"
	#Replace quotation marks
	sed -i "s/%27/'/g" "/opt/karoshi/.tempdata/file_edit.$$"
	#Replace `
	sed -i "s/%60/\`/g" "/opt/karoshi/.tempdata/file_edit.$$"
	#Replace back slash
	sed -i "s/%5C/\\\/g" "/opt/karoshi/.tempdata/file_edit.$$"
	#cat file back to correct SERVERNAME
	LOCATION2=`echo $LOCATION | sed 's/ /\\\ /g'`
	cat /opt/karoshi/.tempdata/file_edit.$$ | ssh -o PasswordAuthentication=no -o ConnectTimeout=3 $SERVERMASTER 'cat - > /opt/karoshi/.tempdata/file_edit.'$$''

	ssh -o PasswordAuthentication=no -o ConnectTimeout=3 $SERVERMASTER '
	[ -d /opt/karoshi/logs/karoshi_web_management/ ] && echo `date`: file_manager \(federated mode\) - editing "'$LOCATION'" on '$SERVERNAME' by '$REMOTE_USER' from '$REMOTE_ADDR' >> /opt/karoshi/logs/karoshi_web_management/'$LOG_DATE'
	cat /opt/karoshi/.tempdata/file_edit.'$$' | ssh -o PasswordAuthentication=no -o ConnectTimeout=3 '$SERVERNAME' '\''cat - > '$LOCATION2''\''
	rm -f /opt/karoshi/.tempdata/file_edit.'$$'
	'
fi

#Check if we are editing a ppd file and copy it to the netlogon share for linux clients
if [ $(echo "$LOCATION" | grep -c /etc/cups/ppd) -gt 0 ]
then
	PPDFILE=$(basename "$LOCATION")
	if [ -f /opt/karoshi/server_network/printserver ]
	then
		PRINTSERVER=$(sed -n 1,1p /opt/karoshi/server_network/printserver)
		if [ "$SERVERNAME" = $(hostname-fqdn) ]
		then
			cp -f "$LOCATION" /opt/karoshi/.tempdata/file_edit."$$"
		fi

		if [ "$PRINTSERVER" = $(hostname-fqdn) ]
		then
			cp /opt/karoshi/.tempdata/file_edit."$$" /var/lib/samba/netlogon/linuxclient/printer_drivers/"$PPDFILE"
		fi
		if [ "$PRINTSERVER" = network ] && [ "$PRINTSERVER" != $(hostname-fqdn) ] || [ "$PRINTSERVER" = federated ]
		then
			scp /opt/karoshi/.tempdata/file_edit."$$" root@"$PRINTSERVER":/var/lib/samba/netlogon/linuxclient/printer_drivers/"$PPDFILE"
		fi
	fi
fi

[ -f /opt/karoshi/.tempdata/file_edit."$$" ] && rm -f rm -f /opt/karoshi/.tempdata/file_edit."$$"

LOCATIONITEM=$(basename "$LOCATION")
LOCATION=$(echo "$LOCATION" | sed "s/\/$LOCATIONITEM//g")
#Go to current directory
show_directory
}

function edit_item {
convert_special_chars
getlastlocation
LOCATION2=$(echo "$LOCATION" | sed "s/_/Z%%%%%Z/g")
show_title
echo $"Edit" $LOCATION'<br><br>'

#Get data from text file
echo "$(date): file_manager - viewing $LOCATION on $SERVERNAME by $REMOTE_USER from $REMOTE_ADDR" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
EDITERRORMSG=$"This is not an editable file."
if [ $SERVERNAME = $(hostname-fqdn) ]
then
	EDITCHECK=ok
	#Check that file is not in a banned edit path
	for PATHCHECK in `echo ${LOCATION_LIST2[@]:0}`
	do
		if [ `echo "$LOCATION" | grep -c $PATHCHECK` -gt 0 ]
		then
			EDITCHECK=no
			EDITERRORMSG=$"Files in this folder are not allowed to be edited." 
		fi
	done

	FILETYPEDATA=`file "$LOCATION"`
	if [ $(echo "$FILETYPEDATA" | grep -c ASCII) -gt 0 ] || [ $(echo "$FILETYPEDATA" | grep -c PPD) -gt 0 ] || [ $(echo "$FILETYPEDATA" | grep -c Bourne-Again) -gt 0 ] || [ $(echo "$FILETYPEDATA" | grep -c PHP) -gt 0 ] || [ $(echo "$FILETYPEDATA" | grep -c XML) -gt 0 ] && [ $EDITCHECK = ok ]
	then
		echo '
	<input name="_ACTION_REALLYEDIT_SERVERTYPE_'$SERVERTYPE'_SERVERMASTER_'$SERVERMASTER'_SERVERNAME_'$SERVERNAME'_LOCATION_'$LOCATION2'_" type="submit" class="button" value="'$"Save"'">
	<input name="_ACTION_ENTER_SERVERTYPE_'$SERVERTYPE'_SERVERMASTER_'$SERVERMASTER'_SERVERNAME_'$SERVERNAME'_LOCATION_'$LASTLOCATION'_" type="submit" class="button" value="'$"Cancel"'">
	' 

		echo "<br><br><textarea cols=\"$COLSIZE\" rows=\"$ROWSIZE\" name=\"_TEXTDATA_\">"
		echo "`cat "$LOCATION" | sed "s/&/&amp/g"`</textarea>"
	else
		echo "<a href=\"javascript:history.go(-1)\"> <img src=\"/images/submenus/file/back.gif\" alt=\"back\" border=\"0\"></a><br><br>"$EDITERRORMSG
	fi
fi

if [ $SERVERTYPE = network ] && [ $SERVERNAME != `hostname-fqdn` ] || [ $SERVERTYPE = federated ]
then
	ssh -o PasswordAuthentication=no -o ConnectTimeout=3 $SERVERNAME '

EDITCHECK=ok
#Check that file is not in a banned edit path
for PATHCHECK in `echo '${LOCATION_LIST2[@]:0}'`
do
if [ `echo "'$LOCATION'" | grep -c $PATHCHECK` -gt 0 ]
then
	EDITCHECK=no
	EDITERRORMSG="'$"Files in this folder are not allowed to be edited."'" 
fi
done

FILETYPEDATA=`file "'$LOCATION'"`
if [ $(echo "$FILETYPEDATA" | grep -c ASCII) -gt 0 ] || [ $(echo "$FILETYPEDATA" | grep -c PPD) -gt 0 ] || [ $(echo "$FILETYPEDATA" | grep -c Bourne-Again) -gt 0 ] || [ $(echo "$FILETYPEDATA" | grep -c PHP) -gt 0 ] || [ $(echo "$FILETYPEDATA" | grep -c XML) -gt 0 ] && [ $EDITCHECK = ok ]
then
echo "<input type=\"image\" src=\"/images/submenus/file/go.gif\" name=\"_ACTION_REALLYEDIT_SERVERTYPE_'$SERVERTYPE'_SERVERMASTER_'$SERVERMASTER'_SERVERNAME_'$SERVERNAME'_LOCATION_'$LOCATION2'_\" value=\"\"><a href=\"javascript:history.go(-1)\"> <img src=\"/images/submenus/file/back.gif\" alt=\"back\" border=\"0\"></a><br><br><textarea cols=\"95\" rows=\"28\" name=\"_TEXTDATA_\">"
[ -d /opt/karoshi/logs/karoshi_web_management/ ] && echo `date`: file_manager \(federated mode\) - viewing "'$LOCATION'" on '$SERVERNAME' by '$REMOTE_USER' from '$REMOTE_ADDR' >> /opt/karoshi/logs/karoshi_web_management/'$LOG_DATE'
echo "`cat "'$LOCATION'" | sed "s/&/&amp/g"`</textarea>"
else
echo "<a href=\"javascript:history.go(-1)\"> <img src=\"/images/submenus/file/back.gif\" alt=\"back\" border=\"0\"></a><br><br>"'$EDITERRORMSG'
fi
'
fi
if [ $SERVERTYPE = federatedslave ]
then
	ssh -o PasswordAuthentication=no -o ConnectTimeout=3 $SERVERMASTER '
echo `date`: file_manager \(federated mode\) - viewing "'$LOCATION'" on '$SERVERNAME' by '$REMOTE_USER' from '$REMOTE_ADDR' >> /opt/karoshi/logs/karoshi_web_management/'$LOG_DATE'
ssh -o PasswordAuthentication=no -o ConnectTimeout=3 '$SERVERNAME' '\''
EDITCHECK=ok
#Check that file is not in a banned edit path
for PATHCHECK in `echo '${LOCATION_LIST2[@]:0}'`
do
if [ `echo "'$LOCATION'" | grep -c $PATHCHECK` -gt 0 ]
then
EDITCHECK=no
EDITERRORMSG="'$"Files in this folder are not allowed to be edited."'"
fi
done
FILETYPEDATA=`file "'$LOCATION'"`
if [ $(echo "$FILETYPEDATA" | grep -c ASCII) -gt 0 ] || [ $(echo "$FILETYPEDATA" | grep -c PPD) -gt 0 ] || [ $(echo "$FILETYPEDATA" | grep -c Bourne-Again) -gt 0 ] || [ $(echo "$FILETYPEDATA" | grep -c PHP) -gt 0 ] || [ $(echo "$FILETYPEDATA" | grep -c XML) -gt 0 ] && [ $EDITCHECK = ok ]
then
echo "<input type=\"image\" src=\"/images/submenus/file/go.gif\" name=\"_ACTION_REALLYEDIT_SERVERTYPE_'$SERVERTYPE'_SERVERMASTER_'$SERVERMASTER'_SERVERNAME_'$SERVERNAME'_LOCATION_'$LOCATION2'_\" value=\"\"><a href=\"javascript:history.go(-1)\"> <img src=\"/images/submenus/file/back.gif\" alt=\"back\" border=\"0\"></a><br><br><textarea cols=\"95\" rows=\"28\" name=\"_TEXTDATA_\">"
echo "`cat "'$LOCATION'" | sed "s/&/&amp/g"`</textarea>"
else
echo "<a href=\"javascript:history.go(-1)\"> <img src=\"/images/submenus/file/back.gif\" alt=\"back\" border=\"0\"></a><br><br>"'$EDITERRORMSG'
fi
'\''
'
fi

}

function really_create_dir {

if [ ! -z "$LOCATION" ] && [ ! -z "$NEWFOLDER" ]
then

	convert_special_chars

	ITEMMOVE="$NEWFOLDER"
	convert_special_chars2
	NEWFOLDER="$ITEMMOVE"
	ITEMMOVE=""
	LOCATION=`echo "$LOCATION" | sed 's/+/ /g'`

	#Create new folder
	echo "$(date): file_manager - creating $LOCATION/$NEWFOLDER on $SERVERNAME by $REMOTE_USER from $REMOTE_ADDR" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"

	if [[ "$SERVERNAME" = $(hostname-fqdn) ]]
	then
		if [ ! -e "$LOCATION"/"$NEWFOLDER" ]
		then
			mkdir "$LOCATION"/"$NEWFOLDER"
		else
			echo ''$"An item with this name already exists."'<br><br> <input name="_ACTION_ENTER_SERVERTYPE_'$SERVERTYPE'_SERVERMASTER_'$SERVERMASTER'_SERVERNAME_'$SERVERNAME'_LOCATION_'$LOCATION'_" type="submit" class="button" value="'$"Back"'">
	'
			exit
		fi
	fi

	if [ "$SERVERTYPE" = network ] && [ "$SERVERNAME" != $(hostname-fqdn) ] || [ "$SERVERTYPE" = federated ]
	then
		ssh -o PasswordAuthentication=no -o ConnectTimeout=3 $SERVERNAME '
		[ -d /opt/karoshi/logs/karoshi_web_management/ ] && echo `date`: file_manager \(federated mode\) - creating "'$LOCATION'"/"'$NEWFOLDER'" on '$SERVERNAME' by '$REMOTE_USER' from '$REMOTE_ADDR' >> /opt/karoshi/logs/karoshi_web_management/'$LOG_DATE'
		if [ ! -e "'$LOCATION'"/"'$NEWFOLDER'" ]
		then
			mkdir "'$LOCATION'"/"'$NEWFOLDER'"
		else
			echo "'$"An item with this name already exists."'<br><br><input name="_ACTION_ENTER_SERVERTYPE_'$SERVERTYPE'_SERVERMASTER_'$SERVERMASTER'_SERVERNAME_'$SERVERNAME'_LOCATION_'$LOCATION'_" type="submit" class="button" value="'$"Back"'">"
			exit 100
		fi
		'
		[ "$?" = 100 ] && exit
	fi
fi

if [ $SERVERTYPE = federatedslave ]
then
	ssh -o PasswordAuthentication=no -o ConnectTimeout=3 $SERVERMASTER '
	echo `date`: file_manager \(federated mode\) - creating "'$LOCATION'"/"'$NEWFOLDER'" on '$SERVERNAME' by '$REMOTE_USER' from '$REMOTE_ADDR' >> /opt/karoshi/logs/karoshi_web_management/'$LOG_DATE'
	ssh -o PasswordAuthentication=no -o ConnectTimeout=3 '$SERVERNAME' '\''
	if [ ! -e "'$LOCATION'"/"'$NEWFOLDER'" ]
	then
		mkdir "'$LOCATION'"/"'$NEWFOLDER'"
	else
		echo "'$"An item with this name already exists."'<br><br><input name="_ACTION_ENTER_SERVERTYPE_'$SERVERTYPE'_SERVERMASTER_'$SERVERMASTER'_SERVERNAME_'$SERVERNAME'_LOCATION_'$LOCATION'_" type="submit" class="button" value="'$"Back"'">"
		exit 100
	fi
	'\''
	[ `echo $?` = 100 ] && exit 100
	'
	[ `echo $?` = 100 ] && exit
fi


convert_special_chars
show_directory
}

function create_dir {
[ -z "$LOCATION" ] && LOCATION=/
LOCATION2=$(echo "$LOCATION" | sed "s/_/Z%%%%%Z/g")
convert_special_chars
getlastlocation
show_title
echo '
<table class="tablesorter" style="text-align: left;" ><tbody>
<tr><td style="width: 180px;"><b>'$"Current Location"'</b></td>'
[ "$MOBILE" = yes ] && echo '</tr><tr>'
echo '<td>'"$LOCATION"'</td></tr>
<tr><td><b>'$"Create Folder"'</b></td>'
[ "$MOBILE" = yes ] && echo '</tr><tr>'
echo '<td><input name="_NEWFOLDER_" type="text" size="20"></td></tr></tbody></table><br>
<input name="_ACTION_REALLYCREATEDIR_SERVERTYPE_'"$SERVERTYPE"'_SERVERMASTER_'"$SERVERMASTER"'_SERVERNAME_'"$SERVERNAME"'_LOCATION_'"$LOCATION2"'_" type="submit" class="button" value="'$"Create Folder"'">
<input name="_ACTION_ENTER_SERVERTYPE_'"$SERVERTYPE"'_SERVERMASTER_'"$SERVERMASTER"'_SERVERNAME_'"$SERVERNAME"'_LOCATION_'"$LOCATION2"'_" type="submit" class="button" value="'$"Cancel"'">
'
}

function really_create_file {

if [ ! -z "$LOCATION" ] && [ ! -z "$NEWFOLDER" ]
then

	convert_special_chars
	ITEMMOVE="$NEWFOLDER"
	convert_special_chars2
	NEWFOLDER="$ITEMMOVE"
	ITEMMOVE=""
	LOCATION=`echo "$LOCATION" | sed 's/+/ /g'`
	#Create new folder
	echo `date`: file_manager - creating "$LOCATION"/"$NEWFOLDER" on $SERVERNAME by $REMOTE_USER from $REMOTE_ADDR >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"

	if [ $SERVERNAME = `hostname-fqdn` ]
	then
		if [ ! -e "$LOCATION"/"$NEWFOLDER" ]
		then
			echo -e "\n" > "$LOCATION"/"$NEWFOLDER"
		else
			echo ''$"An item with this name already exists."'<br><br><input name="_ACTION_ENTER_SERVERTYPE_'$SERVERTYPE'_SERVERMASTER_'$SERVERMASTER'_SERVERNAME_'$SERVERNAME'_LOCATION_'$LOCATION'_" type="submit" class="button" value="'$"Back"'">'
			exit
		fi
	fi

	if [ $SERVERTYPE = network ] && [ $SERVERNAME != `hostname-fqdn` ] || [ $SERVERTYPE = federated ]
	then
		ssh -o PasswordAuthentication=no -o ConnectTimeout=3 $SERVERNAME '
		[ -d /opt/karoshi/logs/karoshi_web_management/ ] && echo `date`: file_manager \(federated mode\) - creating "'$LOCATION'"/"'$NEWFOLDER'" on '$SERVERNAME' by '$REMOTE_USER' from '$REMOTE_ADDR' >> /opt/karoshi/logs/karoshi_web_management/'$LOG_DATE'
		if [ ! -e "'$LOCATION'"/"'$NEWFOLDER'" ]
		then
			echo -e "\n" > "'$LOCATION'"/"'$NEWFOLDER'"
		else
			echo "'$"An item with this name already exists."'<br><br><input name="_ACTION_ENTER_SERVERTYPE_'$SERVERTYPE'_SERVERMASTER_'$SERVERMASTER'_SERVERNAME_'$SERVERNAME'_LOCATION_'$LOCATION'_" type="submit" class="button" value="'$"Back"'">"
			exit 100
		fi
		'
		[ $? = 100 ] && exit
		fi
	fi

	if [ $SERVERTYPE = federatedslave ]
	then
	ssh -o PasswordAuthentication=no -o ConnectTimeout=3 $SERVERMASTER '
	echo `date`: file_manager \(federated mode\) - creating "'$LOCATION'"/"'$NEWFOLDER'" on '$SERVERNAME' by '$REMOTE_USER' from '$REMOTE_ADDR' >> /opt/karoshi/logs/karoshi_web_management/'$LOG_DATE'
	ssh -o PasswordAuthentication=no -o ConnectTimeout=3 '$SERVERNAME' '\''
	if [ ! -e "'$LOCATION'"/"'$NEWFOLDER'" ]
	then
		echo -e "\n" > "'$LOCATION'"/"'$NEWFOLDER'"
	else
		echo "'$"An item with this name already exists."'<br><br><input name="_ACTION_ENTER_SERVERTYPE_'$SERVERTYPE'_SERVERMASTER_'$SERVERMASTER'_SERVERNAME_'$SERVERNAME'_LOCATION_'$LOCATION'_" type="submit" class="button" value="'$"Back"'">"
		exit 100
	fi
	'\''
	[ $? = 100 ] && exit 100
	'
	[ $? = 100 ] && exit
fi

convert_special_chars
show_directory
}



function create_file {

[ -z "$LOCATION" ] && LOCATION=/
LOCATION2=$(echo "$LOCATION" | sed "s/_/Z%%%%%Z/g")
convert_special_chars
getlastlocation
show_title
CREATEFILEMSG="Create File"
echo '
<table class="tablesorter" style="text-align: left;" ><tbody>
<tr><td style="width: 180px;"><b>'$"Current Location"'</b></td>'
[ "$MOBILE" = yes ] && echo '</tr><tr>'
echo '<td>'$LOCATION2'</td></tr>
<tr><td><b>'$"New File"'</b></td>'
[ "$MOBILE" = yes ] && echo '</tr><tr>'
echo '<td><input name="_NEWFOLDER_" type="text" size="20"></td></tr></tbody></table><br>
<input name="_ACTION_REALLYCREATEFILE_SERVERTYPE_'"$SERVERTYPE"'_SERVERMASTER_'"$SERVERMASTER"'_SERVERNAME_'"$SERVERNAME"'_LOCATION_'"$LOCATION2"'_" type="submit" class="button" value="'$"Create File"'">
<input name="_ACTION_ENTER_SERVERTYPE_'"$SERVERTYPE"'_SERVERMASTER_'"$SERVERMASTER"'_SERVERNAME_'"$SERVERNAME"'_LOCATION_'"$LOCATION2"'_" type="submit" class="button" value="'$"Cancel"'">
<br><br>
'

}

function SQLRestore {
if [ -z "$LOCATION" ]
then
	echo "$(date): file_manager - blank location by for $SERVERNAME by $REMOTE_USER from $REMOTE_ADDR" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit
fi
convert_special_chars
echo $DATA"<br>"
SQLFile=$(basename "$LOCATION")
LASTLOCATION=$(echo "$LOCATION" | sed "s/\/$SQLFile$//g" | sed "s/_/Z%%%%%Z/g")
DBName=$(echo "$DATA" | cut -s -d: -f21)
DBUsername=$(echo "$DATA" | cut -s -d: -f22)
DBPass=$(echo "$DATA" | cut -s -d: -f23)

if [ -z "$DBName" ]
then
	echo "$(date): file_manager - blank owner by for $SERVERNAME by $REMOTE_USER from $REMOTE_ADDR" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit
fi

echo "$(date): file_manager - restoring $SQLFile to $DBName by $REMOTE_USER from $REMOTE_ADDR" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
show_title

if [[ "$SERVERNAME" = $(hostname-fqdn) ]]
then
	MYSQLPassword=$(cat /etc/mysql.secret)
	#Drop any existing database
	mysqladmin -f --password="$MYSQLPassword" drop "$DBName" 1>/dev/null 2>/dev/null
	mysqladmin --password="$MYSQLPassword" create "$DBName" 1>/dev/null
	#Restore the database
	mysql --password="$MYSQLPassword" "$DBName" < "$LOCATION" 2>> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
else
	ssh -o PasswordAuthentication=no -o ConnectTimeout=3 "$SERVERNAME" '
	MYSQLPassword=$(cat /etc/mysql.secret)
	#Drop any existing database
	mysqladmin -f --password="$MYSQLPassword" drop "'"$DBName"'" 1>/dev/null 2>/dev/null
	mysqladmin --password="$MYSQLPassword" create "'"$DBName"'" 1>/dev/null
	#Restore the database
	mysql --password="$MYSQLPassword" "'"$DBName"'" < "'"$LOCATION"'"
	' 2>> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
fi

#Set the permissions on the database
if [ ! -z "$DBUsername" ] && [ ! -z "$DBPass" ]
then
	echo "CREATE USER '$DBUsername'@'localhost'  IDENTIFIED BY '$DBPass';" > /"opt/karoshi/.tempdata/mysqlperms1.$$.sql"
	echo "UPDATE mysql.user SET Password=PASSWORD('$DBPass') WHERE User='$DBUsername' AND Host='localhost';" > /"opt/karoshi/.tempdata/mysqlperms2.$$.sql"
	echo "FLUSH PRIVILEGES;" >> "/opt/karoshi/.tempdata/mysqlperms2.$$.sql"
	#Grant mysql permissions to the database
	echo "GRANT ALL PRIVILEGES ON $DBName.* TO '$DBUsername'@'localhost';" >> "/opt/karoshi/.tempdata/mysqlperms2.$$.sql"

	if [[ "$SERVERNAME" = $(hostname-fqdn) ]]
	then	
		mysql --password="$MYSQLPASS" < "/opt/karoshi/.tempdata/mysqlperms1.$$.sql"
		mysql --password="$MYSQLPASS" < "/opt/karoshi/.tempdata/mysqlperms2.$$.sql"
	else
		scp /opt/karoshi/.tempdata/mysqlperms1.$$.sql root@$SERVERNAME:/opt/karoshi/.tempdata/	
		scp /opt/karoshi/.tempdata/mysqlperms2.$$.sql root@$SERVERNAME:/opt/karoshi/.tempdata/

		ssh -o PasswordAuthentication=no -o ConnectTimeout=3 "$SERVERNAME" '
		MYSQLPassword=$(cat /etc/mysql.secret)
		mysql --password="$MYSQLPASS" < "/opt/karoshi/.tempdata/mysqlperms1.'$$'.sql"
		mysql --password="$MYSQLPASS" < "/opt/karoshi/.tempdata/mysqlperms2.'$$'.sql"

		rm -f "/opt/karoshi/.tempdata/mysqlperms1.'$$'.sql"
		rm -f "/opt/karoshi/.tempdata/mysqlperms2.'$$'.sql"
		'	
	fi

	rm -f "/opt/karoshi/.tempdata/mysqlperms1.$$.sql"
	rm -f "/opt/karoshi/.tempdata/mysqlperms2.$$.sql"
fi

echo  $"SQL restore process complete for"" $DBName."
sleep 3
#Reload the page
echo '</form>
<form METHOD=POST ACTION="/cgi-bin/admin/file_manager.cgi" target="_top" name = "frm">
<input type="hidden" name="_ViewLocation" value="_ACTION_ENTER_SERVERTYPE_network_SERVERNAME_'$SERVERNAME'_LOCATION_'$LASTLOCATION'_">
</form><script>document.frm.submit();</script><form>'
}

function restore_check_info {

ENABLE_RESTORE=yes
if [ -z "$BACKUPINFO" ]
then
	ENABLE_RESTORE=no
fi

if [ -z "$RESTOREPATH" ]
then
	echo '<br>'$"Blank restore path."'<br><br>'
	ENABLE_RESTORE=no
fi
}


function restore_item {
#Confirm restore of item.
convert_special_chars
LOCATIONFOLDER2=$(basename "$LOCATION")
LASTLOCATION=$(echo "$LOCATION" | sed "s/\/$LOCATIONFOLDER2$//g")
#Get backup details
RESTOREPATH=$(echo $LOCATION | cut -d/ -f7-)
RESTOREPATH=$(echo /$RESTOREPATH)
DEPTHCOUNT=$(echo -e "$RESTOREPATH" | sed 's/\//\n/g' | wc -l)
let DEPTHCOUNT="$DEPTHCOUNT"-1

if [ $DEPTHCOUNT -gt 0 ]
then
	RESTOREPATH=$(echo "$RESTOREPATH" | cut -d/ -f1-"$DEPTHCOUNT")
else
	RESTOREPATH=""
fi
LOCATION2=`echo "$LOCATION" | sed "s/_/Z%%%%%Z/g"`
LOCATIONFOLDER=$(echo "$LOCATION" | cut -d/ -f6-)
RESTORESERVER=$(echo "$LOCATION" | cut -d/ -f4)
[ -z "$RESTORESERVER" ] && RESTORESERVER=notset
BACKUPNAME=$(echo "$LOCATION" | cut -d/ -f5)
[ -z "$BACKUPNAME" ] && BACKUPNAME=notset
BACKUPINFOPATH="/home/backups/$RESTORESERVER/$BACKUPNAME/backup_information"
#Read info file
BACKUPINFO=$(ssh -o PasswordAuthentication=no -o ConnectTimeout=3 "$SERVERNAME" '
[ -f "'"$BACKUPINFOPATH"'" ] && cat '"$BACKUPINFOPATH"'
')

TOPRESTOREPATH=$(echo -e "$BACKUPINFO" | sed -n 4,4p)
TOPRESTOREPATH2=$(basename "$TOPRESTOREPATH")
TOPRESTOREPATH=$(echo "$TOPRESTOREPATH" | sed "s/\/$TOPRESTOREPATH2$//g")
RESTOREPATH=$(echo "$TOPRESTOREPATH$RESTOREPATH")

show_title
#Check info
restore_check_info



if [ $ENABLE_RESTORE = yes ]
then
	echo '<table class="tablesorter" style="text-align: left;" ><tbody>
	<tr><td style="width: 180px;">'$"Restore"'</td><td>'$LOCATIONFOLDER'</td></tr>
	<tr><td>'$"Restore path"'</td><td>'$RESTOREPATH'</td></tr>
	<tr><td>'$"Server to restore to"'</td><td>'$RESTORESERVER'</td></tr>
	</tbody></table>
	<br>'$"Are you sure that you want to restore this item?"'<br><br>
	<button class="button" name="_DoRestore_" value="_ACTION_REALLYRESTORE_SERVERNAME_'$SERVERNAME'_LOCATION_'$LOCATION2'_">'$"Restore"'</button>'
else
	echo '<br><br>'
fi
echo '<button class="button" name="_GoBack_" value="_ACTION_ENTER_SERVERTYPE_'$SERVERTYPE'_SERVERMASTER_'$SERVERMASTER'_SERVERNAME_'$SERVERNAME'_LOCATION_'$LASTLOCATION'_">'$"Back"'</button>'
}

function really_restore_item {
if [ -z "$LOCATION" ]
then
	echo `date`: file_manager - blank location by "for" $SERVERNAME by $REMOTE_USER from $REMOTE_ADDR >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit
fi
#Restore the item
convert_special_chars
LOCATIONFOLDER2=`basename "$LOCATION"`
LASTLOCATION=`echo "$LOCATION" | sed "s/\/$LOCATIONFOLDER2$//g"`

CURRENTLOCATION=`echo $LOCATION | cut -d/ -f1-6`
RESTOREPATH=`echo $LOCATION | cut -d/ -f7-`
RESTOREPATH=`echo /$RESTOREPATH`

DEPTHCOUNT=`echo -e "$RESTOREPATH" | sed 's/\//\n/g' | wc -l`
let DEPTHCOUNT=$DEPTHCOUNT-1

if [ $DEPTHCOUNT -gt 0 ]
then
	RESTOREPATH=`echo $RESTOREPATH | cut -d/ -f1-$DEPTHCOUNT`
else
	RESTOREPATH=""
fi
LOCATIONFOLDER=`echo $LOCATION | cut -d/ -f6-`
RESTORESERVER=`echo $LOCATION | cut -d/ -f4`
[ -z "$RESTORESERVER" ] && RESTORESERVER=notset
BACKUPNAME=`echo $LOCATION | cut -d/ -f5`
[ -z "$BACKUPNAME" ] && BACKUPNAME=notset
BACKUPINFOPATH=/home/backups/$RESTORESERVER/$BACKUPNAME/backup_information
#Read info file
BACKUPINFO=`ssh -o PasswordAuthentication=no -o ConnectTimeout=3 $SERVERNAME '
[ -f "'$BACKUPINFOPATH'" ] && cat '$BACKUPINFOPATH'
'`

TOPRESTOREPATH=`echo -e "$BACKUPINFO" | sed -n 4,4p`
TOPRESTOREPATH2=`basename "$TOPRESTOREPATH"`
TOPRESTOREPATH=`echo "$TOPRESTOREPATH" | sed "s/\/$TOPRESTOREPATH2$//g"`
RESTOREPATH=`echo "$TOPRESTOREPATH$RESTOREPATH"`

#Convert underscores
LOCATION=`echo "$LOCATION" | sed "s/Z%%%%%Z/_/g"`
RESTOREPATH=`echo "$RESTOREPATH" | sed "s/Z%%%%%Z/_/g"`
show_title
echo `date`: file_manager - restoring "$LOCATIONFOLDER" from $SERVERNAME to $RESTORESERVER $RESTOREPATH by $REMOTE_USER from $REMOTE_ADDR >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"

echo '<table class="'$TABLECLASS'" style="text-align: left; height: 91px;" ><tbody>
<tr><td style="width: 180px;">'$"Restore"'</td><td>'$LOCATIONFOLDER'</td></tr>
<tr><td>'$"Restore path"'</td><td>'$RESTOREPATH'</td></tr>
<tr><td>'$"Server to restore to"'</td><td>'$RESTORESERVER'</td></tr>
</tbody></table>
<br>'$"Restoring - Please wait..."'<br><br>'

restore_check_info

if [ $ENABLE_RESTORE = yes ]
then
	#Sort out spaces for rsync
	LOCATION=$(echo "$LOCATION" | sed 's% %\\ %g')

	if [ $RESTORESERVER = `hostname-fqdn` ]
	then
		echo Restoring "$LOCATION" to $HOSTNAME
		EVENTFILE=restore-$(date +%F-%H:%M:%S)
		#create restore path if it does not exist
		[ ! -d "$RESTOREPATH" ] && mkdir -p "$RESTOREPATH"
		[ ! -d /opt/karoshi/logs/events ] && mkdir -p /opt/karoshi/logs/events
		nohup bash -c "echo `date` Restoring \"$LOCATION\" to \"$RESTOREPATH\" ; rsync --timeout=30 --dirs --recursive --compress --links --times --verbose --perms --executability --owner --group --acls root@$SERVERNAME:\"$LOCATION\" \"$RESTOREPATH\"/ ; echo `date` Restore completed." 1>> /opt/karoshi/logs/events/"$EVENTFILE" 2>> /opt/karoshi/logs/events/"$EVENTFILE"&

	else
		echo Restoring "$LOCATION" to $RESTORESERVER
		ssh -o PasswordAuthentication=no -o ConnectTimeout=3 $RESTORESERVER '
		EVENTFILE=restore-$(date +%F-%H:%M:%S)
		#create restore path if it does not exist
		[ ! -d "'$RESTOREPATH'" ] && mkdir -p "'$RESTOREPATH'"
		nohup bash -c "echo `date` Restoring '$LOCATION' to '$RESTOREPATH' ; rsync --timeout=30 --dirs --recursive --compress --links --times --verbose --perms --executability --owner --group --acls root@\"'$SERVERNAME'\":\"'$LOCATION'\" \"'$RESTOREPATH'\"/ ; echo `date` Restore completed." 1>>/opt/karoshi/logs/events/"$EVENTFILE" 2>>/opt/karoshi/logs/events/"$EVENTFILE"&
	'
	fi
fi
echo '<br>'$"Restore in progress."' '$"Please check the event logs for further information."'<br><br>'
echo '<button class="button" name="_Back_" value="_SERVERTYPE_network_ACTION_ENTER_SERVERNAME_'$SERVERNAME'_LOCATION_'$LASTLOCATION'_">'$"Back"'</button>
<button class="button" formtarget="_blank" formaction="view_logs.cgi" name="_EventLogs_" value="_SERVERNAME_'$RESTORESERVER'_SERVERTYPE_network_SERVERMASTER_notset_ACTION_viewlist_">
'$"Event Logs"'
</button>
'
}


function really_search_backup {
convert_special_chars
getlastlocation
SEARCH=`echo "$DATA" | cut -s -d: -f16`
convert_special_chars4

BACKUPARCHIVE=$(echo "$LOCATION" | cut -d"/" -f5)
BACKUPARCHIVEPATH=$(echo "$LOCATION" | cut -d"/" -f1-5)
SUBFOLDERS=$(echo "$LOCATION" | cut -d"/" -f7-8)

echo '<div id="infobox"><table class="tablesorter" style="text-align: left;" ><tbody>
<tr><td style="width: 180px;"><b>'$"Search Backup"'</b></td><td>'$SEARCH'</td></tr>
<tr><td>'$"Backup Server"'</td><td>'$SERVERNAME'</td></tr>
<tr><td>'$"Backup Archive"'</td><td>'$BACKUPARCHIVE'</td></tr>
</tbody></table><br>'

#Do the search and show the results
echo `date`: "file_manager - searching for $SEARCH at $LOCATION on $SERVERNAME by $REMOTE_USER from $REMOTE_ADDR" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"

RAWSEARCHDATA=$(ssh -o PasswordAuthentication=no -o ConnectTimeout=3 $SERVERNAME '
for BACKUPARCHIVE in $(ls -1 "'$BACKUPARCHIVEPATH'")
do
	if [ -d "'$BACKUPARCHIVEPATH'"/"$BACKUPARCHIVE"/'"$SUBFOLDERS"' ]
	then
		find "'$BACKUPARCHIVEPATH'"/"$BACKUPARCHIVE"/'"$SUBFOLDERS"' -name "'$SEARCH'*" | sed "s% %_____SPACE_____%g"		
	fi
done
')

echo '<table id="myTable" class="tablesorter" style="text-align: left;" ><thead>
<tr><th style="width: 700px;">'$"Backup Path"'</th><th style="width: 80px;">'$"Restore"'</th></tr></thead><tbody>
'
for FILENAME in $(echo "$RAWSEARCHDATA")
do
	FILENAME=$(echo "$FILENAME" | sed "s%_____SPACE_____% %g")
	FILE2=$(echo "$FILENAME" | sed "s/_/Z%%%%%Z/g")
	DISPFILENAME=$(echo "$FILENAME" | cut -d"/" -f6-)
	echo '<tr><td>'$DISPFILENAME'</td><td><button class="'$INFOCLASS1'" name="_DoRestore_" value="_ACTION_RESTORE_SERVERTYPE_'$SERVERTYPE'_SERVERNAME_'$SERVERNAME'_LOCATION_'$FILE2'_"><img src="'$ICON12'" alt="'$"Restore"'"><span>'$"Restore"'<br>'$DISPFILENAME'<br></span></button></td></tr>'
done
echo '</tbody></table><br>
<input name="_ACTION_ENTER_SERVERTYPE_'$SERVERTYPE'_SERVERMASTER_'$SERVERMASTER'_SERVERNAME_'$SERVERNAME'_LOCATION_'$LASTLOCATION'_" type="submit" class="button" value="'$"Back"'">'
}

function search_backup {

convert_special_chars
getlastlocation
LOCATION2=`echo "$LOCATION" | sed "s/_/Z%%%%%Z/g"`
BACKUPARCHIVE=$(echo "$LOCATION" | cut -d"/" -f5)
echo '<div id="titlebox"><input name="_ITEMMOVE_" value="'$ITEMMOVE'" type="hidden">'
#Show form for search

echo '<table class="tablesorter" style="text-align: left;" ><tbody>
<tr><td style="width: 180px;"><b>'$"Search Backup"'</b></td><td></td></tr>
<tr><td>'$"Backup Server"'</td><td>'$SERVERNAME'</td></tr>
<tr><td>'$"Backup Archive"'</td><td>'$BACKUPARCHIVE'</td></tr>
<tr><td>'$"Search"'</td><td><input tabindex="1" style="width: 200px;" name="_SEARCH_"></td></tr>
</tbody></table><br>
'
echo '<input name="_ACTION_REALLYSEARCHBACKUP_SERVERTYPE_'$SERVERTYPE'_SERVERMASTER_'$SERVERMASTER'_SERVERNAME_'$SERVERNAME'_LOCATION_'$LOCATION2'_" type="submit" class="button" value="'$"Search"'"> <input name="_ACTION_ENTER_SERVERTYPE_'$SERVERTYPE'_SERVERMASTER_'$SERVERMASTER'_SERVERNAME_'$SERVERNAME'_LOCATION_'$LOCATION'_" type="submit" class="button" value="'$"Back"'">'

}


function really_delete_acl_perms {
ACLOWNER=`echo "$DATA" | cut -s -d: -f18`
ACLGROUP=`echo "$DATA" | cut -s -d: -f19`
convert_special_chars
getlastlocation
echo `date`: "file_manager - deleting acl for $ACLGROUP : $ACLOWNER at $LOCATION on $SERVERNAME by $REMOTE_USER from $REMOTE_ADDR" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"


if [ $SERVERNAME = $(hostname-fqdn) ]
then
	setfacl -Rx $ACLGROUP:$ACLOWNER,d:$ACLGROUP:$ACLOWNER "$LOCATION" &
fi

if [ $SERVERTYPE = network ] && [ $SERVERNAME != `hostname-fqdn` ] || [ $SERVERTYPE = federated ]
then
	ssh -o PasswordAuthentication=no -o ConnectTimeout=3 $SERVERNAME '
	setfacl -Rx '$ACLGROUP':'$ACLOWNER',d:'$ACLGROUP':'$ACLOWNER' "'$LOCATION'" &
	'
fi

if [ $SERVERTYPE = federatedslave ]
then
	ssh -o PasswordAuthentication=no -o ConnectTimeout=3 $SERVERMASTER '
	echo `date`: file_manager \(federated mode\) - deleting acl for $ACLGROUP : $ACLOWNER at $LOCATION on $SERVERNAME by '$REMOTE_USER' from '$REMOTE_ADDR' >> /opt/karoshi/logs/karoshi_web_management/'$LOG_DATE'
	ssh -o PasswordAuthentication=no -o ConnectTimeout=3 '$SERVERNAME' '\''
	setfacl -Rx '$ACLGROUP':'$ACLOWNER',d:'$ACLGROUP':'$ACLOWNER' "'$LOCATION'" &
	'\''
	'
fi

#Reload the page to show the new permissions
echo '</form>
<form METHOD=POST ACTION="/cgi-bin/admin/file_manager.cgi" target="_top" name = "frm">
<input type="hidden" name="_Properties" value="_ACTION_SETPERMS_SERVERTYPE_network_SERVERNAME_'$SERVERNAME'_LOCATION_'$LOCATION'_">
</form><script>document.frm.submit();</script><form>
'
}

function delete_acl_perms {
ACLOWNER=`echo "$DATA" | cut -s -d: -f18`
ACLGROUP=`echo "$DATA" | cut -s -d: -f19`
#Confirm deletion of acl permissions.
convert_special_chars
getlastlocation
LOCATION2=`echo "$LOCATION" | sed "s/_/Z%%%%%Z/g"`

echo '<b>'$"Delete ACL"'</b><br><table class="tablesorter" style="text-align: left;" ><tbody>
<tr><td style="width: 180px;">'$ACLGROUP'</td><td>'$ACLOWNER'</td></tr>
<tr><td>'$"Location"'</td><td>'$LOCATION'</td></tr>
</tbody></table>
'$"Are you sure that you want to delete this acl?"'<br><br>
<input name="_ACTION_REALLYDELETEACLPERMS_SERVERTYPE_'$SERVERTYPE'_SERVERMASTER_'$SERVERMASTER'_SERVERNAME_'$SERVERNAME'_LOCATION_'$LOCATION2'_ACLOWNER_'$ACLOWNER'_ACLGROUP_'$ACLGROUP'_" type="submit" class="button" value="'$"Delete"'">
<input name="_ACTION_SETPERMS_SERVERTYPE_network_SERVERNAME_'$SERVERNAME'_LOCATION_'$LOCATION'_" type="submit" class="button" value="'$"Cancel"'">
'
}


function really_add_acl_perms {
ACLOWNERS=$(echo "$DATA" | cut -s -d: -f18)
ACLPERMISSIONS=$(echo "$DATA" | cut -s -d: -f20)
convert_special_chars
getlastlocation
for ACLOWNER in $(echo "$ACLOWNERS" | sed 's/+/ /g')
do
	getent passwd "$ACLOWNER" 1>/dev/null
	if [ "$?" = 0 ]
	then
		ACLGROUP=u
	fi

	getent group "$ACLOWNER" 1>/dev/null
	if [ "$?" = 0 ]
	then
		ACLGROUP=g
	fi

	if [ ! -z $ACLGROUP ]
	then
		echo "$(date): file_manager - adding $ACLOWNER: $ACLPERMISSIONS on $LOCATION by $REMOTE_USER from $REMOTE_ADDR" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"

		if [[ "$SERVERNAME" = $(hostname-fqdn) ]]
		then
			#Check if there are any existing acls
			if [ $(getfacl --omit-header --skip-base -p -d "$LOCATION" | wc -l) = 0 ]
			then
				#This location currently has no acls set so remove all file permissions before the acls are set.
				echo `date`: "file_manager - no ACLS have been set on $LOCATION by $REMOTE_USER from $REMOTE_ADDR" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
				echo `date`: "file_manager - setting owner and group to root and permissions to 0000 on $LOCATION by $REMOTE_USER from $REMOTE_ADDR" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
				chown root.root -R "$LOCATION"
				chmod 0000 -R "$LOCATION"
			fi

		 	setfacl -Rm d:"$ACLGROUP":"$ACLOWNER":"$ACLPERMISSIONS","$ACLGROUP":"$ACLOWNER":"$ACLPERMISSIONS" "$LOCATION" &
		fi

		if [ "$SERVERTYPE" = network ] && [[ "$SERVERNAME" != $(hostname-fqdn) ]] || [ "$SERVERTYPE" = federated ]
		then
			ssh -o PasswordAuthentication=no -o ConnectTimeout=3 $SERVERNAME '
			#Check if there are any existing acls
			if [ $(getfacl --omit-header --skip-base -p -d "'$LOCATION'" | wc -l) = 0 ]
			then
				chown root.root -R "'$LOCATION'"
				chmod 0000 -R "'$LOCATION'"
			fi
			setfacl -Rm d:"'$ACLGROUP'":"'$ACLOWNER'":"'$ACLPERMISSIONS'","'$ACLGROUP'":"'$ACLOWNER'":"'$ACLPERMISSIONS'" "'$LOCATION'" &
			'
		fi

		if [ "$SERVERTYPE" = federatedslave ]
		then
			ssh -o PasswordAuthentication=no -o ConnectTimeout=3 $SERVERMASTER '
			echo `date`: file_manager \(federated mode\) - adding '$ACLOWNER': '$ACLPERMISSIONS' on '$LOCATION' by '$REMOTE_USER' from '$REMOTE_ADDR' >> /opt/karoshi/logs/karoshi_web_management/'$LOG_DATE'
			ssh -o PasswordAuthentication=no -o ConnectTimeout=3 '$SERVERNAME' '\''
			#Check if there are any existing acls
			if [ $(getfacl --omit-header --skip-base -p -d "'$LOCATION'" | wc -l) = 0 ]
			then
				chown root.root -R "'$LOCATION'"
				chmod 0000 -R "'$LOCATION'"
			fi
			setfacl -Rm d:"'$ACLGROUP'":"'$ACLOWNER'":"'$ACLPERMISSIONS'","'$ACLGROUP'":"'$ACLOWNER'":"'$ACLPERMISSIONS'" "'$LOCATION'" &
			'\''
			'
		fi


	else
		echo `date`: "file_manager - $ACLOWNER does not exist as a user or a group by $REMOTE_USER from $REMOTE_ADDR" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"	
	fi
done
#Reload the page to show the new permissions
echo '</form>
<form METHOD=POST ACTION="/cgi-bin/admin/file_manager.cgi" target="_top" name = "frm">
<input type="hidden" name="_Properties" value="_ACTION_SETPERMS_SERVERTYPE_network_SERVERNAME_'$SERVERNAME'_LOCATION_'$LOCATION'_">
</form><script>document.frm.submit();</script><form>
'
}

function add_acl_perms {
convert_special_chars
getlastlocation
LOCATION2=`echo "$LOCATION" | sed "s/_/Z%%%%%Z/g"`
show_title
echo '<b>'$"Add ACL"'</b><br><table class="tablesorter"><tbody>
<tr><td style="width: 180px;">'$"Location"'</td><td>'$LOCATION'</td></tr>
<tr><td>'$"Username"' / '$"Groupname"'</td><td><input tabindex= "1" name="_ACLOWNER_" style="width: 200px" size="20" type="text"> <a class="info" target="_blank" href="http://www.linuxschools.com/karoshi/documentation/wiki/index.php?title=File_Manager"><img style="vertical-align: text-top;" class="images" align="middle" alt="" src="/images/help/info.png"><span>'$"Enter in the username or a groupname that you want to add an ACL for."'<br><br>'$"Use spaces for additional usernames / groupnames."'</span></a></td></tr>
<tr><td>'$"Permissions"'</td><td>
<select name="_ACLPERMISSIONS_" style="width: 200px;">
<option value="rwx">'$"Read and write"'</option>
<option value="r-x">'$"Read only"'</option>
</select>
</td></tr>
</tbody></table>
<br>
<input name="_ACTION_REALLYADDACLPERMS_SERVERTYPE_'$SERVERTYPE'_SERVERMASTER_'$SERVERMASTER'_SERVERNAME_'$SERVERNAME'_LOCATION_'$LOCATION2'_ACLOWNER_'$ACLOWNER'_ACLGROUP_'$ACLGROUP'_" type="submit" class="button" value="'$"Add"'">
<input name="_ACTION_SETPERMS_SERVERTYPE_network_SERVERNAME_'$SERVERNAME'_LOCATION_'$LOCATION'_" type="submit" class="button" value="'$"Cancel"'">
'
}

[ $ACTION = ENTER ] && show_directory #converted to federated_mode
[ $ACTION = DELETE ] && delete_item #converted to federated_mode
[ $ACTION = ADDACLPERMS ] && add_acl_perms
[ $ACTION = REALLYADDACLPERMS ] && really_add_acl_perms
[ $ACTION = DELETEACLPERMS ] && delete_acl_perms
[ $ACTION = REALLYDELETEACLPERMS ] && really_delete_acl_perms
[ $ACTION = REALLYDELETE ] && really_delete_item #converted to federated_mode
[ $ACTION = SETPERMS ] && set_perms #converted to federated_mode
[ $ACTION = REALLYSETPERMS ] && really_set_perms #converted to federated_mode
[ $ACTION = MOVE ] && move_item #converted to federated_mode
[ $ACTION = REALLYMOVE ] || [ $ACTION = REALLYCOPY ] && really_copy_item #converted to federated_mode
[ $ACTION = CANCELCOPY ] && cancel_copy_item #converted to federated_mode
[ $ACTION = RENAME ] && rename_item #converted to federated_mode
[ $ACTION = REALLYRENAME ] && really_rename_item #converted to federated_mode
[ $ACTION = EDIT ] && edit_item #converted to federated_mode
[ $ACTION = REALLYEDIT ] && really_edit_item #converted to federated_mode
[ $ACTION = CREATEDIR ] && create_dir #converted to federated_mode
[ $ACTION = REALLYCREATEDIR ] && really_create_dir #converted to federated_mode
[ $ACTION = SQLRESTORE ] && SQLRestore
[ $ACTION = RESTORE ] && restore_item
[ $ACTION = REALLYRESTORE ] && really_restore_item
[ $ACTION = CREATEFILE ] && create_file
[ $ACTION = REALLYCREATEFILE ] && really_create_file
[ $ACTION = SEARCHBACKUP ] && search_backup
[ $ACTION = REALLYSEARCHBACKUP ] && really_search_backup

exit
