#!/bin/bash
#Copyright (C) 2012 Paul Sharrad

#This file is part of Karoshi Server.
#
#Karoshi Server is free software: you can redistribute it and/or modify
#it under the terms of the GNU Affero General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#Karoshi Server is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU Affero General Public License for more details.
#
#You should have received a copy of the GNU Affero General Public License
#along with Karoshi Server.  If not, see <http://www.gnu.org/licenses/>.

#
#The Karoshi Team can be contacted at: 
#mpsharrad@karoshi.org.uk
#jsharrad@karoshi.org.uk

#
#Website: http://www.karoshi.org.uk
LOG_DATE=`date +%F`
[ -z "$LOG_DATE" ] && exit
########################
#Check md5checksum
########################
if ! test -f /opt/karoshi/web_controls/checksums/admin_checksums/group_membership_cgi
then
	echo `date`: group_membership - No MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
source /opt/karoshi/web_controls/checksums/admin_checksums/group_membership_cgi
MD5SUM=`md5sum /var/www/cgi-bin_karoshi/admin/group_membership.cgi | cut -d' ' -f1`
[ -z "$MD5SUM" ] && MD5SUM=not_set
if [ $MD5SUM'check' != $group_membership_cgi'check' ]
then
	echo `date`: group_membership - Incorrect MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi

########################
#Get variables
########################
numArgs=$#
if [ $numArgs != 0 ]
then
	echo `date`: group_membership - incorrect number of arguments >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi

read DATA
DATA=`echo $DATA | tr -cd 'A-Za-z0-9\._:%\n-+-' | sed 's/REPLACEUNDERSCORE/_/g'`
if [ -z "$DATA" ]
then
	echo `date`: group_membership - no data >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
REMOTE_USER=`echo "$DATA" | cut -s -d: -f1`
REMOTE_ADDR=`echo "$DATA" | cut -s -d: -f2`
REMOTE_MD5=`echo "$DATA" | cut -s -d: -f3`
USERNAME=`echo "$DATA" | cut -s -d: -f4`
MOBILE=`echo "$DATA" | cut -s -d: -f5`
########################
#Check data
########################
if [ $REMOTE_MD5'check' != $MD5SUM'check' ] && [ $REMOTE_MD5'check' != $MD5SUM2'check' ]
then
	echo `date`: group_membership - Not called by group_membership.cgi >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ -z "$REMOTE_USER" ]
then
	echo `date`: group_membership - Blank remote user >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ -z "$REMOTE_ADDR" ]
then
	echo `date`: group_membership - Blank remote tcpip address >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ -z "$USERNAME" ]
then
	echo `date`: group_membership - Blank username by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit
fi

if [ `grep -c ^$REMOTE_USER: /opt/karoshi/web_controls/web_access_admin` != 1 ]
then
	echo `date`: group_membership - access denied to $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi

echo `date`: group_membership - showing group information "for" $USERNAME by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE

if [ $MOBILE = no ]
then
	ICON1=/images/submenus/user/group_yes.png
	ICON2=/images/submenus/user/group_no.png
else
	ICON1=/images/submenus/user/group_yes_m.png
	ICON2=/images/submenus/user/group_no_m.png
fi


WIDTH1=180
WIDTH2=70
if [ $MOBILE = yes ]
then
	WIDTH1=140
	WIDTH2=70
fi

function check_group_membership {
if [ `echo "$CURRENTGROUPS" | grep -c -w "$GROUPNAME"` -gt 0 ]
then
	[ $USERGROUPS = yes ] && echo '<tr><td>'$GROUPNAME'</td><td>'$GROUPID'</td><td>
	<button class="info" name="___Remove___" value="___ACTION___REMOVE___GROUP___'$GROUPNAME'___USERNAME___'$USERNAME'___">
	<img src="'$ICON1'" alt="'$"Remove"'">
	<span>'$"Remove"'<br>'$USERNAME'</span>
	</button>
	</td></tr>'
else
	[ $AVAILABLEGROUPS = yes ] && echo '<tr><td>'$GROUPNAME'</td><td>'$GROUPID'</td><td>
	<button class="info" name="___Remove___" value="___ACTION___ADD___GROUP___'$GROUPNAME'___USERNAME___'$USERNAME'___">
	<img src="'$ICON2'" alt="'$"Add"'">
	<span>'$"Add"'<br>'$USERNAME'</span>
	</button>
	</td></tr>'
fi
}

#Language

STYLESHEET=defaultstyle.css
[ -f /opt/karoshi/web_controls/user_prefs/$REMOTE_USER ] && source /opt/karoshi/web_controls/user_prefs/$REMOTE_USER
TEXTDOMAIN=karoshi-server


#Get existing group information
CURRENTGROUPS=`id -G -n $USERNAME`
echo '<form action="/cgi-bin/admin/group_membership2.cgi" method="post">'
echo  '<table class="tablesorter" style="text-align: left;" >
<thead><tr><th style="width: '$WIDTH1'px;"><b>'$"Group"'</b></th><th style="width: '$WIDTH2'px;"><b>'$"Group ID"'</b></th><th style="width: '$WIDTH2'px;"><b>'$"Status"'</b></th></tr></thead><tbody>'




#GROUPLIST=( `ldapsearch -x -w $LDAPPASS -D "cn=admin,dc=karoshi,dc=local" objectclass=posixGroup | grep ^cn: | cut -d' ' -f2-| sed 's/ /____/g' | sort` )


function check_groups {
COUNTER=0
while [ $COUNTER -lt $GROUPCOUNT ]
do
	GROUPNAME=`echo ${GROUPLIST[$COUNTER]} | sed 's/____/ /g'`
	if [ `echo "$DYNAMIC_GROUP_LIST" | grep -c "$GROUPNAME"` = 0 ]
	then
		#Get the group id
		GROUPID=`getent group "$GROUPNAME" | cut -d: -f3`
		check_group_membership
	fi
	let COUNTER=$COUNTER+1
done
}
#Show groups that the user is a member of
USERGROUPS=yes
AVAILABLEGROUPS=no
GROUPLIST=( $CURRENTGROUPS )
GROUPCOUNT=${#GROUPLIST[@]}
check_groups
#Show potential groups
USERGROUPS=no
AVAILABLEGROUPS=yes
GROUPLIST=( `ls -1 /opt/karoshi/server_network/group_information` `ls -1 /opt/karoshi/server_network/group_information_secondary` )
GROUPCOUNT=${#GROUPLIST[@]}
check_groups
echo '</tbody></table></form>'
exit
