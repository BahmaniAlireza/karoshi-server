#!/bin/bash
#Copyright (C) 2010 Paul Sharrad

#This file is part of Karoshi Server.
#
#Karoshi Server is free software: you can redistribute it and/or modify
#it under the terms of the GNU Affero General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#Karoshi Server is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU Affero General Public License for more details.
#
#You should have received a copy of the GNU Affero General Public License
#along with Karoshi Server.  If not, see <http://www.gnu.org/licenses/>.

#
#The Karoshi Team can be contacted at: 
#mpsharrad@karoshi.org.uk
#jharris@karoshi.org.uk
#aball@karoshi.org.uk
#
#Website: http://www.karoshi.org.uk
LOG_DATE=`date +%F`
########################
#Check md5checksum
########################
if ! test -f /opt/karoshi/web_controls/checksums/admin_checksums/home_folders2_cgi
then
echo `date`: home_folders - No admin MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
source /opt/karoshi/web_controls/checksums/admin_checksums/home_folders2_cgi
MD5SUM=`md5sum /var/www/cgi-bin_karoshi/admin/home_folders2.cgi | cut -d' ' -f1`
[ $MD5SUM'null' = null ] && MD5SUM=not_set
if [ $MD5SUM'check' != $home_folders2_cgi'check' ]
then
echo `date`: home_folders - Incorrect admin MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi

########################
#Get variables
########################
numArgs=$#
if [ $numArgs != 0 ]
then
echo `date`: home_folders - incorrect number of arguments >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi

read DATA
DATA=`echo $DATA | tr -cd 'A-Za-z0-9\._:\-'`
if [ $DATA'null' = null ]
then
echo `date`: home_folders - no data >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
REMOTE_USER=`echo "$DATA" | cut -s -d: -f1`
REMOTE_ADDR=`echo "$DATA" | cut -s -d: -f2`
REMOTE_MD5=`echo "$DATA" | cut -s -d: -f3`
CURRENTSERVER=`echo "$DATA" | cut -s -d: -f4`
NEWSERVER=`echo "$DATA" | cut -s -d: -f5`
PRIGROUP=`echo "$DATA" | cut -s -d: -f6`
COPYHOMEAREAS=`echo "$DATA" | cut -s -d: -f7`
########################
#Check data
########################
if [ $REMOTE_MD5'check' != $MD5SUM'check' ]
then
echo `date`: home_folders - Not called by home_folders.cgi >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
if [ -z "$REMOTE_USER" ]
then
echo `date`: home_folders - Blank remote user >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
if [ -z "$REMOTE_ADDR" ]
then
echo `date`: home_folders - Blank remote tcpip address >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
if [ -z "$CURRENTSERVER" ]
then
echo `date`: home_folders - Blank current server by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit
fi
if [ -z "$NEWSERVER" ]
then
echo `date`: home_folders - Blank new server by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit
fi
if [ -z "$PRIGROUP" ]
then
echo `date`: home_folders - Blank primary group by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit
fi
if [ ! -f /opt/karoshi/server_network/group_information/$PRIGROUP ]
then
echo `date`: home_folders - No primary group information 'for' $PRIGROUP by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit
fi
if [ `grep -c ^$REMOTE_USER: /opt/karoshi/web_controls/web_access_admin` != 1 ]
then
echo `date`: home_folders - access denied to $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi

echo `date`: home_folders - Changing $PRIGROUP from $CURRENTSERVER to $NEWSERVER by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE

##########################
#Language
##########################
LANGCHOICE=englishuk
STYLESHEET=defaultstyle.css
[ -f /opt/karoshi/web_controls/user_prefs/$REMOTE_USER ] && source /opt/karoshi/web_controls/user_prefs/$REMOTE_USER
[ -f /opt/karoshi/web_controls/language/$LANGCHOICE/system/home_folders ] || LANGCHOICE=englishuk
source /opt/karoshi/web_controls/language/$LANGCHOICE/system/home_folders
[ -f /opt/karoshi/web_controls/language/$LANGCHOICE/all ] || LANGCHOICE=englishuk
source /opt/karoshi/web_controls/language/$LANGCHOICE/all


###########################
#Modify group information for web management
###########################
sed -i 1cSERVER=$NEWSERVER /opt/karoshi/server_network/group_information/$PRIGROUP
#Copy server information to the home access server
if [ -f /opt/karoshi/server_network/home_access_server ]
then
HOMEACCESS=`sed -n 1,1p /opt/karoshi/server_network/home_access_server`
#Copy group information to the home access server
scp -p -r /opt/karoshi/server_network/group_information root@$HOMEACCESS:/opt/karoshi/server_network/ 1> /dev/null
fi

###########################
#Edit kixtart groups.txt
###########################
#Delete current group line
KIXLINENO=`grep -n -w ^$PRIGROUP /var/lib/samba/netlogon/groups.txt | cut -d: -f1`
[ $KIXLINENO'null' != null ] && sed -i $KIXLINENO'd' /var/lib/samba/netlogon/groups.txt
#Delete any blank lines
sed -i '/^$/d' /var/lib/samba/netlogon/groups.txt
#Add group info
echo $PRIGROUP,$NEWSERVER >> /var/lib/samba/netlogon/groups.txt
sort /var/lib/samba/netlogon/groups.txt > /var/lib/samba/netlogon/groups.txt.$$
rm -f /var/lib/samba/netlogon/groups.txt
mv /var/lib/samba/netlogon/groups.txt.$$ /var/lib/samba/netlogon/groups.txt
echo >> /var/lib/samba/netlogon/groups.txt

#Create pam_mount.conf.xml
/opt/karoshi/serversetup/pdc/"useful scripts"/generate_pam_mount

function set_perms {
if [ -f /opt/karoshi/server_network/group_information/$PRIGROUP ]
then
source /opt/karoshi/server_network/group_information/$PRIGROUP
if [ $NEWSERVER = `hostname-fqdn` ]
then
for USERFOLDERS in $HOMEPATH/*
do
USERFOLDER=`basename $USERFOLDERS`
echo "<li>"$USERFOLDER: Setting Permissions"</li><br>"
#chmod 0600 -R $HOMEPATH/$USERFOLDER
#chmod u+X -R $HOMEPATH/$USERFOLDER
chown -R $USERFOLDER.$PRIGROUP $HOMEPATH/$USERFOLDER
done
else
ssh -x -o PasswordAuthentication=no $NEWSERVER '
for USERFOLDERS in '$HOMEPATH'/*
do
USERFOLDER=`basename $USERFOLDERS`
echo "<li>"$USERFOLDER: Setting Permissions"</li><br>"
#chmod 0600 -R '$HOMEPATH'/$USERFOLDER
#chmod u+X -R '$HOMEPATH'/$USERFOLDER
chown -R $USERFOLDER.'$PRIGROUP' '$HOMEPATH'/$USERFOLDER
done
'
fi
sleep 4
fi
}

#Get group information
source /opt/karoshi/server_network/group_information/$PRIGROUP
DESTFOLDERPATH=`echo $HOMEPATH | sed 's/'$PRIGROUP'$//g'`
USERLIST=( `getent passwd | grep /$PRIGROUP/ | cut -d: -f1 | sort` )
USERLISTCOUNT=${#USERLIST[@]}

LDAPPASS=`sed -n 1,1p /etc/ldap.secret`
source /opt/karoshi/server_network/domain_information/domain_name

#Set windows home path in samba4
COUNTER=0
while  [ $COUNTER -lt $USERLISTCOUNT ]
do
USERNAME=${USERLIST[$COUNTER]}
echo -e 'dn: CN='$USERNAME',OU='$PRIGROUP',OU='$SUBUNIT',OU=People,'$LDAPBASE'
changetype: modify
replace: homeDirectory
homeDirectory: \\\\'$SERVER'\\'$USERNAME'
-' | ldapmodify -x -D "CN=Administrator,CN=Users,$LDAPBASE" -w $LDAPPASS 1>/dev/null 2>>/opt/karoshi/logs/karoshi_web_management/$LOG_DATE
let COUNTER=$COUNTER+1
done

###########################
#Copy home areas
###########################
if [ $COPYHOMEAREAS'null' != null ]
then
if [ $COPYHOMEAREAS = yes ]
then

if [ ! -d /home/transfer ]
then
mkdir /home/transfer
chown 0700 /home/transfer
fi

echo $COPYHOMEAREASMSG2'<br><br>'
echo '
<table class="standard" style="text-align: left;" border="0" cellpadding="2" cellspacing="2"><tbody>
<tr><td style="width: 180px;">'$PRIGROUPMSG'</td><td>'$PRIGROUP'</td></tr>
<tr><td style="width: 180px;">'$CURRENTSERVERMSG'</td><td>'$CURRENTSERVER'</td></tr>
<tr><td style="width: 180px;">'$NEWSERVERMSG'</td><td>'$NEWSERVER'</td></tr>
</tbody></table><br><br>
'

#Scroll the page
echo "    <script type = \"text/javascript\" >

    var x;
    function autoscroll(){
    self.scrollBy(0,x)
    }

    function playautoscroll(){
    x = 5;
    setInterval('autoscroll()',0.01);
    stop();}

    function onetozero(){
    x=0;
    }

    function stop(){
    setTimeout (\"onetozero()\",600000000);
    }
    window.onload=playautoscroll

    </script>"



COUNTER=0
if [ $NEWSERVER = `hostname-fqdn` ]
then
#Copy work back to this server
if [ $USERLISTCOUNT -gt 0 ]
then
echo "<li>"$USERLISTCOUNT home folders. Please wait"</li><br>"
while  [ $COUNTER -lt $USERLISTCOUNT ]
do
USERNAME=${USERLIST[$COUNTER]}
echo "<li>"$(($COUNTER+1))/$USERLISTCOUNT: Copying $USERNAME"</li><br>"

#rsync user folder to the pdc
echo `date`: home_folders - Copying $USERNAME from $CURRENTSERVER to $HOSTNAME by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
rsync --timeout=30 --dirs --recursive --links --compress --times --perms --acls --owner --group  root@$CURRENTSERVER:/$HOMEPATH/$USERNAME "$DESTFOLDERPATH$PRIGROUP"/ 2>> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
let COUNTER=$COUNTER+1
done
set_perms
fi
fi

if [ $CURRENTSERVER = `hostname-fqdn` ]
then
#Copy from this server to a new server

if [ $USERLISTCOUNT -gt 0 ]
then
echo "<li>"$USERLISTCOUNT home folders. Please wait"</li><br>"
while  [ $COUNTER -lt $USERLISTCOUNT ]
do

USERNAME=${USERLIST[$COUNTER]}
echo "<li>"$(($COUNTER+1))/$USERLISTCOUNT: Copying $USERNAME"</li><br>"

#rsync user folders to the new server
echo `date`: home_folders - Copying $USERNAME from $HOSTNAME to $NEWSERVER by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
rsync --timeout=30 --dirs --recursive --links --compress --times --perms --acls --owner --group "$HOMEPATH"/"$USERFOLDER" root@$NEWSERVER:/$DESTFOLDERPATH$PRIGROUP/ 2>> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
let COUNTER=$COUNTER+1
done
set_perms
fi
fi

if [ $NEWSERVER != `hostname-fqdn` ] && [ $CURRENTSERVER != `hostname-fqdn` ]
then
ssh -x -o PasswordAuthentication=no $NEWSERVER '
[ ! -d '$HOMEPATH' ] && mkdir -p '$HOMEPATH'
'
#Copy work between two karoshi servers

if [ $USERLISTCOUNT -gt 0 ]
then
echo "<li>"$USERLISTCOUNT home folders. Please wait"</li><br>"
while  [ $COUNTER -lt $USERLISTCOUNT ]
do

USERNAME=${USERLIST[$COUNTER]}
echo "<li>"$(($COUNTER+1))/$USERLISTCOUNT: Copying $USERNAME"</li><br>"

#rsync user folder to the pdc
echo `date`: home_folders - Copying $HOMEPATH/$USERNAME from $CURRENTSERVER to /home/transfer by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
rsync --timeout=30 --dirs --recursive --links --compress --times --perms --acls --owner --group  root@$CURRENTSERVER:/$HOMEPATH/$USERNAME /home/transfer/ 2>> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
#rsync to new server
if [ -d /home/transfer/$USERNAME ]
then
echo "<li>"Transfering $USERNAME to $NEWSERVER"</li><br>"
echo `date`: home_folders - Copying $USERNAME from /home/transfer to $NEWSERVER by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
rsync --timeout=30 --dirs --recursive --links --compress --times --perms --acls --owner --group  /home/transfer/$USERNAME root@$NEWSERVER:/$DESTFOLDERPATH$PRIGROUP/ 2>> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
#Remove temp folder
rm -f -R /home/transfer/$USERNAME
fi
let COUNTER=$COUNTER+1
done
set_perms
fi
fi
fi
fi

if [ $COPYHOMEAREAS'null' != null ]
then
if [ $COPYHOMEAREAS = yes ]
then
#Move backup folder to the new server if it is on the same backup server
[ ! -f /opt/karoshi/server_network/backup_servers/backup_settings/$CURRENTSERVER/backupserver ] && exit
CURRENTBACKUPSERVER=`sed -n 1,1p /opt/karoshi/server_network/backup_servers/backup_settings/$CURRENTSERVER/backupserver`
[ ! -f /opt/karoshi/server_network/backup_servers/backup_settings/$NEWSERVER/backupserver ] && exit
NEWBACKUPSERVER=`sed -n 1,1p /opt/karoshi/server_network/backup_servers/backup_settings/$NEWSERVER/backupserver`

if [ $CURRENTBACKUPSERVER = $NEWBACKUPSERVER ]
then
ssh -x -o PasswordAuthentication=no $NEWBACKUPSERVER '

if [ -d /home/backups/'$CURRENTSERVER'/'$PRIGROUP' ] && [ ! -d /home/backups/'$NEWSERVER'/'$PRIGROUP' ]
then
[ ! -d /home/backups/'$NEWSERVER' ] && mkdir -p /home/backups/'$NEWSERVER'
mv /home/backups/'$CURRENTSERVER'/'$PRIGROUP' /home/backups/'$NEWSERVER'/'$PRIGROUP'
fi
'
fi
fi
fi


#Make sure that there is a home folder for all users in the current group on the selected server
if [ $NEWSERVER != `hostname-fqdn` ]
then
ssh -x -o PasswordAuthentication=no $NEWSERVER '
for PRIGROUPUSER in `getent passwd | grep "/'$PRIGROUP'/" | cut -d: -f1`
do
if [ ! -d '$HOMEPATH'/$PRIGROUPUSER ]
then
mkdir -p '$HOMEPATH'/$PRIGROUPUSER
chown $PRIGROUPUSER '$HOMEPATH'/$PRIGROUPUSER
fi
done
'
else
for PRIGROUPUSER in `getent passwd | grep "/$PRIGROUP/" | cut -d: -f1`
do
if [ ! -d $HOMEPATH/$PRIGROUPUSER ]
then
mkdir -p $HOMEPATH/$PRIGROUPUSER
chown $PRIGROUPUSER $HOMEPATH/$PRIGROUPUSER
fi
done
fi
exit

