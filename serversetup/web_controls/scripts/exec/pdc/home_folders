#!/bin/bash
#Copyright (C) 2010 Paul Sharrad

#This file is part of Karoshi Server.
#
#Karoshi Server is free software: you can redistribute it and/or modify
#it under the terms of the GNU Affero General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#Karoshi Server is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU Affero General Public License for more details.
#
#You should have received a copy of the GNU Affero General Public License
#along with Karoshi Server.  If not, see <http://www.gnu.org/licenses/>.

#
#The Karoshi Team can be contacted at: 
#mpsharrad@karoshi.org.uk
#jsharrad@karoshi.org.uk
#
#Website: http://www.karoshi.org.uk
LOG_DATE=`date +%F`
########################
#Check md5checksum
########################
if ! test -f /opt/karoshi/web_controls/checksums/admin_checksums/home_folders2_cgi
then
	echo `date`: home_folders - No admin MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
source /opt/karoshi/web_controls/checksums/admin_checksums/home_folders2_cgi
MD5SUM=`md5sum /var/www/cgi-bin_karoshi/admin/home_folders2.cgi | cut -d' ' -f1`
[ -z "$MD5SUM" ] && MD5SUM=not_set

if [ $MD5SUM'check' != $home_folders2_cgi'check' ]
then
	echo `date`: home_folders - Incorrect admin MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi

########################
#Get variables
########################
numArgs=$#
if [ $numArgs != 0 ]
then
	echo `date`: home_folders - incorrect number of arguments >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi

read DATA
DATA=`echo $DATA | tr -cd 'A-Za-z0-9\._:\-'`
if [ -z "$DATA" ]
then
	echo `date`: home_folders - no data >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
REMOTE_USER=`echo "$DATA" | cut -s -d: -f1`
REMOTE_ADDR=`echo "$DATA" | cut -s -d: -f2`
REMOTE_MD5=`echo "$DATA" | cut -s -d: -f3`
CURRENTSERVER=`echo "$DATA" | cut -s -d: -f4`
NEWSERVER=`echo "$DATA" | cut -s -d: -f5`
PRIGROUP=`echo "$DATA" | cut -s -d: -f6`
COPYHOMEAREAS=`echo "$DATA" | cut -s -d: -f7`
GLUSTER=`echo "$DATA" | cut -s -d: -f8`

[ -z "$COPYHOMEAREAS" ] && COPYHOMEAREAS=no

########################
#Check data
########################
if [ $REMOTE_MD5'check' != $MD5SUM'check' ]
then
	echo `date`: home_folders - Not called by home_folders.cgi >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ -z "$REMOTE_USER" ]
then
	echo `date`: home_folders - Blank remote user >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ -z "$REMOTE_ADDR" ]
then
	echo `date`: home_folders - Blank remote tcpip address >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ -z "$CURRENTSERVER" ]
then
	echo `date`: home_folders - Blank current server by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit
fi
if [ -z "$NEWSERVER" ]
then
	echo `date`: home_folders - Blank new server by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit
fi
if [ -z "$PRIGROUP" ]
then
	echo `date`: home_folders - Blank primary group by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit
fi
if [ ! -f /opt/karoshi/server_network/group_information/$PRIGROUP ]
then
	echo `date`: home_folders - No primary group information 'for' $PRIGROUP by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit
fi
if [ `grep -c ^$REMOTE_USER: /opt/karoshi/web_controls/web_access_admin` != 1 ]
then
	echo `date`: home_folders - access denied to $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi

[ -z "$GLUSTER" ] && GLUSTER=no

echo `date`: home_folders - Changing $PRIGROUP from $CURRENTSERVER to $NEWSERVER by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE

##########################
#Language
##########################

STYLESHEET=defaultstyle.css
[ -f /opt/karoshi/web_controls/user_prefs/$REMOTE_USER ] && source /opt/karoshi/web_controls/user_prefs/$REMOTE_USER
TEXTDOMAIN=karoshi-server

###########################
#Modify group information for web management
###########################
sed -i 1cSERVER=$NEWSERVER /opt/karoshi/server_network/group_information/$PRIGROUP
#Copy server information to the home access server
if [ -f /opt/karoshi/server_network/home_access_server ]
then
	HOMEACCESS=`sed -n 1,1p /opt/karoshi/server_network/home_access_server`
	#Copy group information to the home access server
	scp -p -r /opt/karoshi/server_network/group_information root@$HOMEACCESS:/opt/karoshi/server_network/ 1> /dev/null
fi

###########################
#Edit kixtart groups.txt
###########################
#Delete current group line
KIXLINENO=`grep -n -w ^$PRIGROUP /var/lib/samba/netlogon/groups.txt | cut -d: -f1`
[ ! -z "$KIXLINENO" ] && sed -i $KIXLINENO'd' /var/lib/samba/netlogon/groups.txt
#Delete any blank lines
sed -i '/^$/d' /var/lib/samba/netlogon/groups.txt
#Add group info
echo $PRIGROUP,$NEWSERVER >> /var/lib/samba/netlogon/groups.txt
sort /var/lib/samba/netlogon/groups.txt > /var/lib/samba/netlogon/groups.txt.$$
rm -f /var/lib/samba/netlogon/groups.txt
mv /var/lib/samba/netlogon/groups.txt.$$ /var/lib/samba/netlogon/groups.txt
echo >> /var/lib/samba/netlogon/groups.txt

#Create pam_mount.conf.xml
/opt/karoshi/serversetup/pdc/"useful scripts"/generate_pam_mount

function set_perms {
if [ -f /opt/karoshi/server_network/group_information/$PRIGROUP ]
	then
	source /opt/karoshi/server_network/group_information/$PRIGROUP
	if [ $NEWSERVER = `hostname-fqdn` ] && [ `echo $NEWSERVER | cut -d. -f2-` != `hostname-fqdn` ]
	then
		for USERFOLDER in `getent passwd | grep ":$HOMEPATH/" | cut -d: -f1`
		do
			echo "<li>"$USERFOLDER: Setting Permissions"</li><br>"
			[ ! -d $HOMEPATH/$USERFOLDER ] && mkdir -p $HOMEPATH/$USERFOLDER
			#chmod 0600 -R $HOMEPATH/$USERFOLDER
			#chmod u+X -R $HOMEPATH/$USERFOLDER
			chown -R $USERFOLDER $HOMEPATH/$USERFOLDER
		done
		else
		ssh -x -o PasswordAuthentication=no $NEWSERVER '
		for USERFOLDER in `getent passwd | grep ":'$HOMEPATH'/" | cut -d: -f1`
		do
			echo "<li>"$USERFOLDER: Setting Permissions"</li><br>"
			[ ! -d '$HOMEPATH'/$USERFOLDER ] && mkdir -p '$HOMEPATH'/$USERFOLDER
			#chmod 0600 -R '$HOMEPATH'/$USERFOLDER
			#chmod u+X -R '$HOMEPATH'/$USERFOLDER
			chown -R $USERFOLDER '$HOMEPATH'/$USERFOLDER
		done
		'
	fi
	sleep 4
fi
}

#Get group information
source /opt/karoshi/server_network/group_information/$PRIGROUP

USERLIST=( `getent passwd | grep $HOMEPATH/ | cut -d: -f1 | sort` )
USERLISTCOUNT=${#USERLIST[@]}

LDAPPASS=`sed -n 1,1p /etc/ldap.secret`
source /opt/karoshi/server_network/domain_information/domain_name

#Set windows home path in samba4
COUNTER=0
while  [ $COUNTER -lt $USERLISTCOUNT ]
do
	USERNAME=${USERLIST[$COUNTER]}
	echo -e 'dn: CN='$USERNAME',OU='$PRIGROUP',OU='$SUBUNIT',OU=People,'$LDAPBASE'
	changetype: modify
	replace: homeDirectory
	homeDirectory: \\\\'$SERVER'\\'$USERNAME'
	-' | ldapmodify -x -D "CN=Administrator,CN=Users,$LDAPBASE" -w $LDAPPASS 1>/dev/null 2>>/opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	let COUNTER=$COUNTER+1
done

#Enable Gluster Volume
if [ "$GLUSTER" = yes ]
then
	VOLUME=`echo $NEWSERVER | cut -d. -f1`
	for SERVERS in /opt/karoshi/server_network/gluster-volumes/"$VOLUME"/servers/*
	do
		GLUSTERSERVER=`basename $SERVERS`
		/opt/karoshi/serversetup/modules/glusterfs/scripts/populate_gluster_volume "$GLUSTERSERVER" "$HOMEPATH" "$VOLUME" copydata
	done

fi
###########################
#Copy home areas
###########################

showdots() {
DOTCOUNT=1
SHOWDOTS=yes
while [[ $SHOWDOTS = yes ]]
do
	echo "." 
	sleep 1
	let DOTCOUNT=$DOTCOUNT+1
	if [ $DOTCOUNT = 80 ]
	then
		echo "<br>"
		DOTCOUNT=1
	fi
done
}

if [ $COPYHOMEAREAS = yes ]
then
	echo $"Copying Home Areas"'<br><br>'
	echo '
	<table class="standard" style="text-align: left;" border="0" cellpadding="2" cellspacing="2"><tbody>
	<tr><td style="width: 180px;">'$"Primary Group"'</td><td>'$PRIGROUP'</td></tr>
	<tr><td style="width: 180px;">'$"Current Server"'</td><td>'$CURRENTSERVER'</td></tr>
	<tr><td style="width: 180px;">'$"New Server"'</td><td>'$NEWSERVER'</td></tr>
	</tbody></table><br><br>
	'

	#Scroll the page
	echo "    <script type = \"text/javascript\" >

	    var x;
	    function autoscroll(){
	    self.scrollBy(0,x)
	    }

	    function playautoscroll(){
	    x = 5;
	    setInterval('autoscroll()',0.01);
	    stop();}

	    function onetozero(){
	    x=0;
	    }

	    function stop(){
	    setTimeout (\"onetozero()\",600000000);
	    }
	    window.onload=playautoscroll

	    </script>"

	COUNTER=0

	if [ $NEWSERVER = `hostname-fqdn` ] || [ `echo $NEWSERVER | cut -d. -f2-` = `hostname-fqdn` ]
	then
		#Copy work back to this server
		if [ $USERLISTCOUNT -gt 0 ]
		then
			echo "<li>"$USERLISTCOUNT home folders. Please wait"</li><br>"
			while  [ $COUNTER -lt $USERLISTCOUNT ]
			do
				USERNAME=${USERLIST[$COUNTER]}
				echo "<li>"$(($COUNTER+1))/$USERLISTCOUNT: Copying $USERNAME

				#rsync user folder to the pdc
				echo `date`: home_folders - Copying $USERNAME from $CURRENTSERVER to $HOSTNAME by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
				showdots &
				PID1=$!
				rsync --timeout=30 --dirs --recursive --links --compress --times --perms --acls --owner --group  root@$CURRENTSERVER:/$HOMEPATH/$USERNAME "$HOMEPATH/" 2>> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
				kill $PID1
				echo "</li><br>"
				let COUNTER=$COUNTER+1
			done
		fi
	fi

	if [ $CURRENTSERVER = `hostname-fqdn` ] || [ `echo $CURRENTSERVER | cut -d. -f2-` = `hostname-fqdn` ]
	then
		#Copy from this server to a new server

		if [ $USERLISTCOUNT -gt 0 ]
		then
			echo "<li>"$USERLISTCOUNT home folders. Please wait"</li><br>"
			while  [ $COUNTER -lt $USERLISTCOUNT ]
			do

				USERNAME=${USERLIST[$COUNTER]}
				echo "<li>"$(($COUNTER+1))/$USERLISTCOUNT: Copying $USERNAME""

				#rsync user folders to the new server
				echo `date`: home_folders - Copying $USERNAME from $HOSTNAME to $NEWSERVER by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE

				showdots &
				PID1=$!
				rsync --timeout=30 --dirs --recursive --links --compress --times --perms --acls --owner --group "$HOMEPATH"/"$USERNAME" root@$NEWSERVER:/$HOMEPATH/ 2>> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
				kill $PID1
				echo "</li><br>"
				let COUNTER=$COUNTER+1
			done
		fi
	fi

	if [ $NEWSERVER != `hostname-fqdn` ]  && [ $CURRENTSERVER != `hostname-fqdn` ]
	then
		if [ `echo $NEWSERVER | cut -d. -f2-` != `hostname-fqdn` ] && [ `echo $CURRENTSERVER | cut -d. -f2-` != `hostname-fqdn` ]
		then		
			ssh -x -o PasswordAuthentication=no $NEWSERVER '
			[ ! -d '$HOMEPATH' ] && mkdir -p '$HOMEPATH'
			'
			#Copy work between two karoshi servers

			#Make sure that sshfs is installed
			which sshfs 1>/dev/null
			if [ $? != 0 ]
				then
				echo "<pre style=\"font-size: 10pt; font-family:Arial, Times, Georgia, serif\">"
				echo "<li>"$HOSTNAME - Updating repository lists"</li>"
				apt-get update
				echo "<li>"$HOSTNAME - Installing sshfs"</li>"
				apt-get install -y sshfs
				echo "</pre>"
			fi

			#Mount /home as sshfs on both servers

			[ ! -d /opt/karoshi/mount/$CURRENTSERVER/home ] && mkdir -p /opt/karoshi/mount/$CURRENTSERVER/home
			[ ! -d /opt/karoshi/mount/$NEWSERVER/home ] && mkdir -p /opt/karoshi/mount/$NEWSERVER/home
			sshfs root@$CURRENTSERVER:/home /opt/karoshi/mount/$CURRENTSERVER/home 2>> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
			sshfs root@$NEWSERVER:/home /opt/karoshi/mount/$NEWSERVER/home 2>> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE

			if [ $USERLISTCOUNT -gt 0 ]
			then
				echo "<li>"$USERLISTCOUNT home folders. Please wait"</li><br>"
				while  [ $COUNTER -lt $USERLISTCOUNT ]
				do
					USERNAME=${USERLIST[$COUNTER]}
					echo "<li>"$(($COUNTER+1))/$USERLISTCOUNT: Copying $USERNAME

					echo `date`: home_folders - Copying $HOMEPATH/$USERNAME from $CURRENTSERVER to $NEWSERVER by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE

					showdots &
					PID1=$!
					rsync --timeout=30 --dirs --recursive --links --compress --times --perms --acls --owner --group /opt/karoshi/mount/$CURRENTSERVER"$HOMEPATH"/"$USERNAME" /opt/karoshi/mount/$NEWSERVER"$HOMEPATH"/ 2>> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
					kill $PID1
					echo "</li><br>"
					let COUNTER=$COUNTER+1
				done
				#Unmount sshfs shares
				fusermount -u /opt/karoshi/mount/$CURRENTSERVER/home 2>> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
				fusermount -u /opt/karoshi/mount/$NEWSERVER/home 2>> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
			fi

		fi
	fi
fi

set_perms

if [ "$COPYHOMEAREAS" = yes ]
then
	#Move backup folder to the new server if it is on the same backup server
	[ ! -f /opt/karoshi/server_network/backup_servers/backup_settings/$CURRENTSERVER/backupserver ] && exit
	CURRENTBACKUPSERVER=`sed -n 1,1p /opt/karoshi/server_network/backup_servers/backup_settings/$CURRENTSERVER/backupserver`
	[ ! -f /opt/karoshi/server_network/backup_servers/backup_settings/$NEWSERVER/backupserver ] && exit
	NEWBACKUPSERVER=`sed -n 1,1p /opt/karoshi/server_network/backup_servers/backup_settings/$NEWSERVER/backupserver`

	if [ $CURRENTBACKUPSERVER = $NEWBACKUPSERVER ]
	then
		ssh -x -o PasswordAuthentication=no $NEWBACKUPSERVER '

		if [ -d /home/backups/'$CURRENTSERVER'/'$PRIGROUP' ] && [ ! -d /home/backups/'$NEWSERVER'/'$PRIGROUP' ]
		then
		[ ! -d /home/backups/'$NEWSERVER' ] && mkdir -p /home/backups/'$NEWSERVER'
		mv /home/backups/'$CURRENTSERVER'/'$PRIGROUP' /home/backups/'$NEWSERVER'/'$PRIGROUP'
		fi
		'
	fi
fi


exit

