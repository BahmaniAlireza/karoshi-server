#!/bin/bash
#Copyright (C) 2008 Paul Sharrad

#This file is part of Karoshi Server.
#
#Karoshi Server is free software: you can redistribute it and/or modify
#it under the terms of the GNU Affero General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#Karoshi Server is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU Affero General Public License for more details.
#
#You should have received a copy of the GNU Affero General Public License
#along with Karoshi Server.  If not, see <http://www.gnu.org/licenses/>.

#
#The Karoshi Team can be contacted at: 
#mpsharrad@karoshi.org.uk
#jharris@karoshi.org.uk
#aball@karoshi.org.uk
#
#Website: http://www.karoshi.org.uk
LOG_DATE=`date +%F`
########################
#Check md5checksum
########################
if ! test -f /opt/karoshi/web_controls/checksums/admin_checksums/internet_access_controls2_cgi
then
echo `date`: internet_access_controls2 - No Admin MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
source /opt/karoshi/web_controls/checksums/admin_checksums/internet_access_controls2_cgi
MD5SUM=`md5sum /var/www/cgi-bin_karoshi/admin/internet_access_controls2.cgi | cut -d' ' -f1`
[ $MD5SUM'null' = null ] && MD5SUM=not_set
if [ $MD5SUM'check' != $internet_access_controls2_cgi'check' ]
then
echo `date`: internet_access_controls2 - Incorrect Admin MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi


function notinuse {
if ! test -f /opt/karoshi/web_controls/checksums/tech_checksums/internet_access_controls2_cgi
then
echo `date`: internet_access_controls2 - No Tech MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
source /opt/karoshi/web_controls/checksums/tech_checksums/internet_access_controls2_cgi
MD5SUM2=`md5sum /var/www/cgi-bin_karoshi/tech/internet_access_controls2.cgi | cut -d' ' -f1`
[ $MD5SUM2'null' = null ] && MD5SUM2=not_set
if [ $MD5SUM2'check' != $internet_access_controls2_cgi'check' ]
then
echo `date`: internet_access_controls2 - Incorrect Tech MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi

if ! test -f /opt/karoshi/web_controls/checksums/staff_checksums/internet_access_controls2_cgi
then
echo `date`: internet_access_controls2 - No Staff MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
source /opt/karoshi/web_controls/checksums/staff_checksums/internet_access_controls2_cgi
MD5SUM3=`md5sum /var/www/cgi-bin_karoshi/staff/internet_access_controls2.cgi | cut -d' ' -f1`
[ $MD5SUM3'null' = null ] && MD5SUM3=not_set
if [ $MD5SUM3'check' != $internet_access_controls2_cgi'check' ]
then
echo `date`: internet_access_controls2 - Incorrect Staff MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
}
########################
#Get variables
########################
numArgs=$#
if [ $numArgs != 0 ]
then
echo `date`: internet_access_controls2 - incorrect number of arguments >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi

read DATA
DATA=`echo $DATA | tr -cd 'A-Za-z0-9\._:%\n-+'`
if [ $DATA'null' = null ]
then
echo `date`: internet_access_controls2 - no data >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
REMOTE_USER=`echo "$DATA" | cut -s -d: -f1`
REMOTE_ADDR=`echo "$DATA" | cut -s -d: -f2`
REMOTE_MD5=`echo "$DATA" | cut -s -d: -f3`
ASSET=`echo "$DATA" | cut -s -d: -f4`
ACTION=`echo "$DATA" | cut -s -d: -f5`
TCPIP=`echo "$DATA" | cut -s -d: -f6`
MACADDRESS=`echo "$DATA" | cut -s -d: -f7`
########################
#Check data
########################
function notinuse2 {
if [ $REMOTE_MD5'check' != $MD5SUM'check' ] && [ $REMOTE_MD5'check' != $MD5SUM2'check' ] && [ $REMOTE_MD5'check' != $MD5SUM3'check' ]
then
echo `date`: internet_access_controls2 - Not called by internet_access_controls2.cgi >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
}
if [ $REMOTE_USER'null' = null ]
then
echo `date`: internet_access_controls2 - Blank remote user >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
if [ $REMOTE_ADDR'null' = null ]
then
echo `date`: internet_access_controls2 - Blank remote tcpip address >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
if [ $ASSET'null' = null ]
then
echo `date`: internet_access_controls2 - Blank asset by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
if [ $ACTION'null' = null ]
then
echo `date`: internet_access_controls2 - Blank action by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi


echo `date`: internet_access_controls2 - Banning internet access "for" $ASSET by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE

echo "<br><br>"
echo Asset $ASSET"<br>"
echo Action $ACTION"<br>"
echo tcpip $TCPIP"<br>"
echo Mac $MACADDRESS"<br>"

exit

#Check that data file exists for the location
if [ ! -f /opt/karoshi/internet_controls/location_data/$LOCATION ]
then
echo `date`: internet_access_controls2 - No data "for" $LOCATION by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 105
fi
#Check that the data file is not empty
if [ `cat /opt/karoshi/internet_controls/location_data/$LOCATION | wc -l` = 0 ]
then
echo `date`: internet_access_controls2 - Empty data file "for" $LOCATION by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 106
fi
#Create folders
if [ ! -d /opt/karoshi/internet_controls/banned_locations/$LOCATION ]
then
mkdir -p /opt/karoshi/internet_controls/banned_locations/$LOCATION
chmod 0750 /opt/karoshi/internet_controls/
chown root.apache_karoshi /opt/karoshi/internet_controls/
chmod 0750 /opt/karoshi/internet_controls/banned_locations/
chown root.apache_karoshi /opt/karoshi/internet_controls/banned_locations/
chmod 0750 /opt/karoshi/internet_controls/banned_locations/$LOCATION
chown root.apache_karoshi /opt/karoshi/internet_controls/banned_locations/$LOCATION
fi

#Set BAN_COUNT
BAN_COUNT=0

#Assign data to an array
LOCATION_DATA=( `cat /opt/karoshi/internet_controls/location_data/$LOCATION | sed 's/,/ /g'` )
LOCATION_DATA_COUNT=${#LOCATION_DATA[@]}
#Get squid server name
[ ! -f /opt/karoshi/server_network/proxyserver ] && exit 101
PROXYSERVER=`sed -n 1,1p /opt/karoshi/server_network/proxyserver`

echo '<table class="standard" style="text-align: left;" border="0" cellpadding="2" cellspacing="2"><tr><td style="width: 180px;"><b>Computer Name</b></td><td><b>MAC/TCPIP</b></td></tr>'

if [ $PROXYSERVER != `hostname-fqdn` ]
then
ssh -x -o PasswordAuthentication=no $PROXYSERVER '
#Create folders
if [ ! -d /opt/karoshi/internet_controls/banned_locations/'$LOCATION' ]
then
mkdir -p /opt/karoshi/internet_controls/banned_locations/'$LOCATION'
chmod 0700 /opt/karoshi/internet_controls/
chown root.root /opt/karoshi/internet_controls/
chmod 0700 /opt/karoshi/internet_controls/banned_locations/
chown root.root /opt/karoshi/internet_controls/banned_locations/
chmod 0700 /opt/karoshi/internet_controls/banned_locations/'$LOCATION'
chown root.root /opt/karoshi/internet_controls/banned_locations/'$LOCATION'
fi
LOCATION_DATA=( `echo '${LOCATION_DATA[@]}'` )
LOCATION_DATA_COUNT=${#LOCATION_DATA[@]}
COUNTER=0

while [ $COUNTER -lt $LOCATION_DATA_COUNT ]
do
NAME=${LOCATION_DATA[$COUNTER]}
let COUNTER=$COUNTER+1
TCPIP=${LOCATION_DATA[$COUNTER]}
let COUNTER=$COUNTER+1
MAC1=${LOCATION_DATA[$COUNTER]}
let COUNTER=$COUNTER+1
MAC2=${LOCATION_DATA[$COUNTER]}
let COUNTER=$COUNTER+1
BAN_FLAG=no
#Ban TCPIP address
if [ ! -f /opt/karoshi/internet_controls/banned_locations/'$LOCATION'/$NAME ]
then
if [ $TCPIP != null ]
then
RULECOUNT=`iptables -nL dynamic | grep -c -w $TCPIP`
if [ $RULECOUNT = 0 ]
then
echo "<tr><td>$NAME</td><td>$TCPIP</td></tr>"
iptables -A dynamic -p tcp --dport 3128 -s $TCPIP -j DROP
BAN_FLAG=yes
fi
fi
#Ban mac1
if [ $MAC1 != null ] && [ $BAN_FLAG = no ]
then
RULECOUNT=`iptables -nL dynamic | grep -c -w $MAC1`
if [ $RULECOUNT = 0 ]
then
echo "<tr><td>$NAME</td><td>$MAC1</td></tr>"
iptables -A dynamic -p tcp --dport 3128 -m mac --mac-source $MAC1 -j DROP
BAN_FLAG=yes
fi
fi
#Ban mac2
if [ $MAC2 != null ] && [ $BAN_FLAG = no ]
then
RULECOUNT=`iptables -nL dynamic | grep -c -w $MAC2`
if [ $RULECOUNT = 0 ]
then
echo "<tr><td>$NAME</td><td>$MAC2</td></tr>"
iptables -A dynamic -p tcp --dport 3128 -m mac --mac-source $MAC2 -j DROP
BAN_FLAG=yes
fi
fi
if [ $BAN_FLAG = yes ]
then
#Create unban data
echo $NAME,$TCPIP,$MAC1,$MAC2 > /opt/karoshi/internet_controls/banned_locations/'$LOCATION'/$NAME
fi
fi
done
'
SSHSTATUS=yes
else
SSHSTATUS=no
fi

COUNTER=0

while [ $COUNTER -lt $LOCATION_DATA_COUNT ]
do
NAME=${LOCATION_DATA[$COUNTER]}
let COUNTER=$COUNTER+1
TCPIP=${LOCATION_DATA[$COUNTER]}
let COUNTER=$COUNTER+1
MAC1=${LOCATION_DATA[$COUNTER]}
let COUNTER=$COUNTER+1
MAC2=${LOCATION_DATA[$COUNTER]}
let COUNTER=$COUNTER+1
BAN_FLAG=no
#Ban TCPIP address
if [ ! -f /opt/karoshi/internet_controls/banned_locations/$LOCATION/$NAME ]
then
if [ $TCPIP != null ]
then
if [ $SSHSTATUS = no ]
then
RULECOUNT=`iptables -nL dynamic | grep -c -w $TCPIP`
if [ $RULECOUNT = 0 ]
then
echo "<tr><td>$NAME</td><td>$TCPIP</td></tr>"
iptables -A dynamic -p tcp --dport 3128 -s $TCPIP -j DROP
BAN_FLAG=yes
fi
fi
fi
#Ban mac1
if [ $MAC1 != null ] && [ $BAN_FLAG = no ]
then
if [ $SSHSTATUS = no ]
then
RULECOUNT=`iptables -nL dynamic | grep -c -w $MAC1`
if [ $RULECOUNT = 0 ]
then
echo "<tr><td>$NAME</td><td>$MAC1</td></tr>"
iptables -A dynamic -p tcp --dport 3128 -m mac --mac-source $MAC1 -j DROP
BAN_FLAG=yes
fi
fi
fi
#Ban mac2
if [ $MAC2 != null ] && [ $BAN_FLAG = no ]
then
if [ $SSHSTATUS = no ]
then
RULECOUNT=`iptables -nL dynamic | grep -c -w $MAC2`
if [ $RULECOUNT = 0 ]
then
echo "<tr><td>$NAME</td><td>$MAC2</td></tr>"
iptables -A dynamic -p tcp --dport 3128 -m mac --mac-source $MAC2 -j DROP
BAN_FLAG=yes
fi
fi
fi
if [ $BAN_FLAG = yes ]
then
#Create unban data
echo $NAME,$TCPIP,$MAC1,$MAC2 > /opt/karoshi/internet_controls/banned_locations/$LOCATION/$NAME
fi
fi
done
echo '</tbody></table>'
exit

