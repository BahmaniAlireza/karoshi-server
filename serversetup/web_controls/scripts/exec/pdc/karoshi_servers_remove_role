#!/bin/bash
#Copyright (C) 2007 Paul Sharrad

#This file is part of Karoshi Server.
#
#Karoshi Server is free software: you can redistribute it and/or modify
#it under the terms of the GNU Affero General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#Karoshi Server is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU Affero General Public License for more details.
#
#You should have received a copy of the GNU Affero General Public License
#along with Karoshi Server.  If not, see <http://www.gnu.org/licenses/>.

#
#The Karoshi Team can be contacted at: 
#mpsharrad@karoshi.org.uk
#jsharrad@karoshi.org.uk

#
#Website: http://www.karoshi.org.uk
LOG_DATE=`date +%F`
########################
#Check md5checksum
########################
if ! test -f /opt/karoshi/web_controls/checksums/admin_checksums/karoshi_servers_remove_role_cgi
then
	echo `date`: karoshi_servers_remove_role - No admin MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
source /opt/karoshi/web_controls/checksums/admin_checksums/karoshi_servers_remove_role_cgi
MD5SUM=`md5sum /var/www/cgi-bin_karoshi/admin/karoshi_servers_remove_role.cgi | cut -d' ' -f1`
[ -z "$MD5SUM" ] && MD5SUM=not_set
if [ $MD5SUM'check' != $karoshi_servers_remove_role_cgi'check' ]
then
	echo `date`: karoshi_servers_remove_role - Incorrect admin MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi

########################
#Get variables
########################
numArgs=$#
if [ $numArgs != 0 ]
then
	echo `date`: karoshi_servers_remove_role - incorrect number of arguments >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi

read DATA
DATA=`echo $DATA | tr -cd 'A-Za-z0-9\._:\-%'`
if [ -z "$DATA" ]
then
	echo `date`: karoshi_servers_remove_role - no data >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
REMOTE_USER=`echo "$DATA" | cut -s -d: -f1`
REMOTE_ADDR=`echo "$DATA" | cut -s -d: -f2`
REMOTE_MD5=`echo "$DATA" | cut -s -d: -f3`
SERVERNAME=`echo "$DATA" | cut -s -d: -f4`
MODULE=`echo "$DATA" | cut -s -d: -f5 | sed 's/%2B/+/g'`

########################
#Check data
########################
if [ $REMOTE_MD5'check' != $MD5SUM'check' ] && [ $REMOTE_MD5'check' != $MD5SUM2'check' ]
then
	echo `date`: karoshi_servers_remove_role - Not called by karoshi_servers_remove_role.cgi >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ -z "$REMOTE_USER" ]
then
	echo `date`: karoshi_servers_remove_role - Blank remote user >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ -z "$REMOTE_ADDR" ]
then
	echo `date`: karoshi_servers_remove_role - Blank remote tcpip address >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ -z "$SERVERNAME" ]
then
	echo `date`: karoshi_servers_remove_role - Blank servername by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ -z "$MODULE" ]
then
	echo `date`: karoshi_servers_remove_role - Blank module by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ `grep -c ^$REMOTE_USER: /opt/karoshi/web_controls/web_access_admin` != 1 ]
then
	echo `date`: karoshi_servers_remove_role - access denied to $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi

##########################
#Language
##########################

STYLESHEET=defaultstyle.css
[ -f /opt/karoshi/web_controls/user_prefs/$REMOTE_USER ] && source /opt/karoshi/web_controls/user_prefs/$REMOTE_USER
TEXTDOMAIN=karoshi-server

source /opt/karoshi/serversetup/variables/distro
source /opt/karoshi/serversetup/distro/$DISTROCHOICE/all/software

echo `date`: karoshi_servers_remove_role - removing $MODULE on $SERVERNAME by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE

function completed {
################################
#Show completed message
################################
if [ $MODULE != REMOVESERVER ] && [ $MODULE != federated_server ]
then
	if [ `ls -1 /opt/karoshi/server_network/servers/$SERVERNAME/ | wc -l` = 0 ]
	then
		[ ! -f /opt/karoshi/server_network/servers/$SERVERNAME/no_role ] && echo No Role > /opt/karoshi/server_network/servers/$SERVERNAME/no_role
	fi
fi

echo "<li>"$SERVERNAME: $"The module has been removed.""</li><br>"
sleep 5
exit
}

##########################
#apachereverseproxyserver
#Unflags this server as an Apache reverse proxy server. Disables proxy module and restarts apache.
##########################
if [ $MODULE = apachereverseproxyserver ]
then
	#Remove any listed reverse proxies
	[  -d /opt/karoshi/server_network/reverseproxy/sites ] && rm -f /opt/karoshi/server_network/reverseproxy/sites

	if [ $SERVERNAME = `hostname-fqdn` ]
	then
		APACHECONFIG=/etc/httpd/conf/httpd.conf
		APACHEPATH=/etc/httpd
		if [ -f /etc/apache2/apache2.conf ]
		then
			APACHECONFIG=/etc/apache2/apache2.conf
			APACHEPATH=/etc/apache2
		fi
		echo > $APACHEPATH/conf/reverseproxyrules.conf
		#Restart apache
		/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/apache_stop
		sleep 0.5
		/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/apache_start
	else
	ssh -x -o PasswordAuthentication=no $SERVERNAME '
	APACHECONFIG=/etc/httpd/conf/httpd.conf
	APACHEPATH=/etc/httpd
	if [ -f /etc/apache2/apache2.conf ]
	then
		APACHECONFIG=/etc/apache2/apache2.conf
		APACHEPATH=/etc/apache2
	fi
	echo > $APACHEPATH/conf/reverseproxyrules.conf
	#Restart apache
	source /opt/karoshi/serversetup/variables/distro
	source /opt/karoshi/serversetup/distro/$DISTROCHOICE/all/software
	/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/apache_stop
	sleep 0.5
	/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/apache_start
	'
	fi
	echo "<li>"$SERVERNAME: $"Reverse Proxy Server" - $"Designation removed.""</li><br>"
	[ -f /opt/karoshi/server_network/servers/$SERVERNAME/apachereverseproxyserver ] && rm -f /opt/karoshi/server_network/servers/$SERVERNAME/apachereverseproxyserver
	completed
fi

##########################
#apacheserver
#Unflags this server as an Apache server.
##########################
if [ $MODULE = apacheserver ]
then
	echo "<li>"$SERVERNAME: $"Web Server" - $"Designation removed.""</li><br>"
	[ -f /opt/karoshi/server_network/servers/$SERVERNAME/apacheserver ] && rm -f /opt/karoshi/server_network/servers/$SERVERNAME/apacheserver
	completed
fi

##########################
#Distributionserver
#Unflags this server as a distributionserver.
##########################
if [ $MODULE = distributionserver ]
then

	if [ $SERVERNAME = `hostname-fqdn` ]
	then
		source /opt/karoshi/serversetup/variables/distro

		#Close shorewall ports
		RESTART_SHOREWALL=no
		MODCHECK=`grep -c "#tftp_server_rule" /etc/shorewall/rules`
		if [ $MODCHECK -gt 0 ]
		then
			RESTART_SHOREWALL=yes
			LINENUM=`grep -n "#tftp_server_rule" /etc/shorewall/rules | cut -d: -f1 | sed -n 1,1p`
			sed -i $LINENUM"d" /etc/shorewall/rules
		fi

		MODCHECK=`grep -c "#nfs_server_rule" /etc/shorewall/rules`
		if [ $MODCHECK -gt 0 ]
		then
			RESTART_SHOREWALL=yes
			LINENUM=`grep -n "#nfs_server_rule" /etc/shorewall/rules | cut -d: -f1 | sed -n 1,1p`
			sed -i $LINENUM"d" /etc/shorewall/rules
		fi

		MODCHECK=`grep -c "#portmap_server_rule" /etc/shorewall/rules`
		if [ $MODCHECK -gt 0 ]
		then
			RESTART_SHOREWALL=yes
			LINENUM=`grep -n "#portmap_server_rule" /etc/shorewall/rules | cut -d: -f1 | sed -n 1,1p`
			sed -i $LINENUM"d" /etc/shorewall/rules
		fi

		MODCHECK=`grep -c "#mountd_server_rule" /etc/shorewall/rules`
		if [ $MODCHECK -gt 0 ]
		then
			RESTART_SHOREWALL=yes
			LINENUM=`grep -n "#mountd_server_rule" /etc/shorewall/rules | cut -d: -f1 | sed -n 1,1p`
			sed -i $LINENUM"d" /etc/shorewall/rules
		fi

		#Restart shorewall
		if [ $RESTART_SHOREWALL = yes ]
		then
			echo '<br><li>'$"Restarting"' shorewall</li><br>'
			/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/shorewall_stop 1>/dev/null
			echo "<br>"
			/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/shorewall_start 1>/dev/null
			echo "<br><br>"
		fi

		#Stop services
		/opt/karoshi/serversetup/distro/ubuntu/scripts/control_services/nfs_stop 1>/dev/null
		/opt/karoshi/serversetup/distro/ubuntu/scripts/control_services/tftpd_stop 1>/dev/null
		/opt/karoshi/serversetup/distro/ubuntu/scripts/control_services/rpcbind_stop 1>/dev/null


		/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/stoponboot/nfs
		/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/stoponboot/tftpd
		/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/stoponboot/rpcbind
	else
		ssh -x -o PasswordAuthentication=no $SERVERNAME '
		source /opt/karoshi/serversetup/variables/distro

		#Close shorewall ports
		RESTART_SHOREWALL=no
		MODCHECK=`grep -c "#tftp_server_rule" /etc/shorewall/rules`
		if [ $MODCHECK -gt 0 ]
		then
			RESTART_SHOREWALL=yes
			LINENUM=`grep -n "#tftp_server_rule" /etc/shorewall/rules | cut -d: -f1 | sed -n 1,1p`
			sed -i $LINENUM"d" /etc/shorewall/rules
		fi

		MODCHECK=`grep -c "#nfs_server_rule" /etc/shorewall/rules`
		if [ $MODCHECK -gt 0 ]
		then
			RESTART_SHOREWALL=yes
			LINENUM=`grep -n "#nfs_server_rule" /etc/shorewall/rules | cut -d: -f1 | sed -n 1,1p`
			sed -i $LINENUM"d" /etc/shorewall/rules
		fi

		MODCHECK=`grep -c "#portmap_server_rule" /etc/shorewall/rules`
		if [ $MODCHECK -gt 0 ]
		then
			RESTART_SHOREWALL=yes
			LINENUM=`grep -n "#portmap_server_rule" /etc/shorewall/rules | cut -d: -f1 | sed -n 1,1p`
			sed -i $LINENUM"d" /etc/shorewall/rules
		fi

		MODCHECK=`grep -c "#mountd_server_rule" /etc/shorewall/rules`
		if [ $MODCHECK -gt 0 ]
		then
			RESTART_SHOREWALL=yes
			LINENUM=`grep -n "#mountd_server_rule" /etc/shorewall/rules | cut -d: -f1 | sed -n 1,1p`
			sed -i $LINENUM"d" /etc/shorewall/rules
		fi

		#Restart shorewall
		if [ $RESTART_SHOREWALL = yes ]
		then
			echo "<li>'$"Restarting"' shorewall</li>"
			/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/shorewall_stop 1>/dev/null
			/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/shorewall_start 1>/dev/null
		fi

		#Stop services
		/opt/karoshi/serversetup/distro/ubuntu/scripts/control_services/nfs_stop 1>/dev/null
		/opt/karoshi/serversetup/distro/ubuntu/scripts/control_services/tftpd_stop 1>/dev/null
		/opt/karoshi/serversetup/distro/ubuntu/scripts/control_services/rpcbind_stop 1>/dev/null

		/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/stoponboot/nfs 
		/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/stoponboot/tftpd
		/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/stoponboot/rpcbind
		'
	fi

	echo "<li>"$SERVERNAME: $"Distribution Server" - $"Designation removed.""</li><br>"
	[ -f /opt/karoshi/server_network/servers/$SERVERNAME/distributionserver ] && rm -f /opt/karoshi/server_network/servers/$SERVERNAME/distributionserver
	completed
fi

##########################
#Federated Server
#Unflags this server as a federated_server.
##########################
if [ $MODULE = federated_server ]
then
	echo "<li>"$SERVERNAME: $"Removing federated server.""</li><br>"

	ssh -x -o PasswordAuthentication=no $SERVERNAME '
	#Remove federated server flag
	[ -f /opt/karoshi/server_network/servers/'$SERVERNAME'/federated_server ] && rm -f /opt/karoshi/server_network/servers/'$SERVERNAME'/federated_server
	#Delete any ldif files waiting to be synced
	[ -d /opt/karoshi/server_network/password_sync ] && rm -f -R /opt/karoshi/server_network/password_sync
	#Change web management menus to show user creation
	sed -i 's/ADDUSERCTRL=no/ADDUSERCTRL=yes/g' /opt/karoshi/web_controls/generate_navbar_admin
	sed -i 's/ADDUSERCTRL=no/ADDUSERCTRL=yes/g' /opt/karoshi/web_controls/generate_navbar_tech
	'
	#Remove password sync cron job
	if [ -f /opt/karoshi/server_network/cronjobs/$SERVERNAME/jobs/federated_password_sync.cron ]
	then
		rm -f /opt/karoshi/server_network/cronjobs/$SERVERNAME/jobs/federated_password_sync.cron
		/opt/karoshi/serversetup/all/"useful scripts"/refreshcronjobs
		echo "<br><br>"
	fi

	#Unflag server
	echo "<li>"$SERVERNAME: $"Federated Server" - $"Designation removed.""</li><br>"
	[ -d /opt/karoshi/server_network/federated_ldap_servers/$SERVERNAME ] && rm -f -R /opt/karoshi/server_network/federated_ldap_servers/$SERVERNAME
	completed
fi

##########################
#backupserver
#Unflags this server as a backup server. Stops all backups to this server.
##########################
if [ $MODULE = backupserver ]
then
	#Unflag backup server
	echo "<li>"$SERVERNAME: $"Backup Server" - $"Designation removed.""</li><br>"
	[ -f /opt/karoshi/server_network/servers/$SERVERNAME/backupserver ] && rm -f /opt/karoshi/server_network/servers/$SERVERNAME/backupserver
	[ -f /opt/karoshi/server_network/backup_servers/servers/$SERVERNAME ] && rm -f /opt/karoshi/server_network/backup_servers/servers/$SERVERNAME
	#Check to see if any other servers are backing up to this server
	if [ -d /opt/karoshi/server_network/backup_servers/backup_settings/ ]
	then
		if [ `grep -l -w $SERVERNAME -R /opt/karoshi/server_network/backup_servers/backup_settings/* | wc -l` -gt 0 ]
		then
			for BACKUP_CLIENTS in `grep -l -w $SERVERNAME -R /opt/karoshi/server_network/backup_servers/backup_settings`
			do
				BACKUP_CLIENT=`echo $BACKUP_CLIENTS | cut -d/ -f7`
				rm -f $BACKUP_CLIENTS
				echo '<li>'$BACKUP_CLIENT': '$"Backup disabled"'</li><br>'

				echo `date`: karoshi_servers_remove_role - $BACKUP_CLIENT backup disabled by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
			done
		fi
	fi
	completed
fi

##########################
#Home Access 
#Unflags this server as a Home Access Server. Deletes the home access files.
##########################
if [ $MODULE = homeaccess ]
then

	if [ $SERVERNAME = `hostname-fqdn` ]
	then
		[ -d /var/www/smbwebclient-data ] && rm -f -R /var/www/smbwebclient-data
		[ -d /var/www/html/smbwebclient ] && rm -f -R /var/www/html/smbwebclient

	else
		ssh -x -o PasswordAuthentication=no $SERVERNAME '
		[ -d /var/www/smbwebclient-data ] && rm -f -R /var/www/smbwebclient-data
		[ -d /var/www/html/smbwebclient ] && rm -f -R /var/www/html/smbwebclient
		'
	fi
	echo "<li>"$SERVERNAME: $"Home Access Server" - $"Designation removed.""</li><br>"
	[ -f /opt/karoshi/server_network/servers/$SERVERNAME/homeaccess ] && rm -f /opt/karoshi/server_network/servers/$SERVERNAME/homeaccess
	[ -f /opt/karoshi/server_network/homeaccess ] && rm -f /opt/karoshi/server_network/homeaccess
	completed
fi


##########################
#dhcp_server
#Unflags this server as a DHCP server. Stops the dhcp service from running on this server.
##########################
if [ $MODULE = dhcp_server ]
then
	echo "<li>"$SERVERNAME: $"DHCP Server" - $"Designation removed.""</li><br>"
	[ -f /opt/karoshi/server_network/servers/$SERVERNAME/dhcp_server ] && rm -f /opt/karoshi/server_network/servers/$SERVERNAME/dhcp_server
	[ -f /opt/karoshi/server_network/dhcp_server ] && rm -f /opt/karoshi/server_network/dhcp_server
	#Stop dhcpd
	/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/dhcp_stop 1>/dev/null
	/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/stoponboot/dhcp
	#Remove dhcp item from the web management menu
	sed -i 's/DHCPCTRL=yes/DHCPCTRL=no/g' /opt/karoshi/web_controls/generate_navbar_admin
	completed
fi

##########################
#emailserver
#Unflags this server as an E-Mail server. Removes Squirrelmail and egroupware, and stops Mailscanner from running on the server.
##########################
if [ $MODULE = emailserver ]
then
	if [ $SERVERNAME = `hostname-fqdn` ]
	then
		echo "<li>"$SERVERNAME: $"Removing E-Mail Module.""</li><br>"

		[ -f /opt/karoshi/server_network/cronjobs/$SERVERNAME/jobs/postfixstats.cron ] && rm -f /opt/karoshi/server_network/cronjobs/$SERVERNAME/jobs/postfixstats.cron
		[ -f /opt/karoshi/server_network/cronjobs/$SERVERNAME/jobs/tidyrootmail.cron ] && rm -f /opt/karoshi/server_network/cronjobs/$SERVERNAME/jobs/tidyrootmail.cron
		/opt/karoshi/serversetup/all/"useful scripts"/refreshcronjobs 1>/dev/null

		echo "<li>"$SERVERNAME: $"E-Mail Server" - $"Stopping Mailscanner""</li><br>"
		/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/mailscanner_stop 1>/dev/null
		/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/stoponboot/mailscanner
		[ -f /etc/default/mailscanner ] && echo run_mailscanner=0 >> /etc/default/mailscanner

		echo "<li>"$SERVERNAME: $"E-Mail Server" - $"Stopping Postfix""</li><br>"
		/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/postfix_stop
		/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/stoponboot/postfix

		echo "<li>"$SERVERNAME: $"E-Mail Server" - $"Stopping Dovecot""</li><br>"
		/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/dovecot_stop
		/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/stoponboot/dovecot

		echo "<li>"$SERVERNAME: $"E-Mail Server" - $"Stopping Sogo""</li><br>"
		/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/sogo_stop
		/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/stoponboot/sogo

		echo "<li>"$SERVERNAME: $"E-Mail Server" - $"Stopping Memcached""</li><br>"
		/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/memcached_stop
		/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/stoponboot/memcached

		#Get root mysql password
		MYSQLPASS=$(cat /etc/mysql.secret)
		mysqladmin -f --password=$MYSQLPASS drop sogo 1>/dev/null 2>/dev/null

		#Change firewall rules to stop email access
		RESTART_SHOREWALL=no
		while  [ $(grep -c email_server_rule /etc/shorewall/rules) != 0 ]
		do
			LINENUM=`grep -n "#email_server_rule" /etc/shorewall/rules | cut -d: -f1 | sed -n 1,1p`
			sed -i $LINENUM"d" /etc/shorewall/rules
			RESTART_SHOREWALL=yes
		done

		if [ $RESTART_SHOREWALL = yes ]
		then
			#Restart shorewall
			source /opt/karoshi/serversetup/variables/distro
			/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/shorewall_stop
			sleep 0.5
			/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/shorewall_start
		fi
	else
		ssh -x -o PasswordAuthentication=no $SERVERNAME '
		source /opt/karoshi/serversetup/variables/distro

		[ -f /opt/karoshi/server_network/cronjobs/'$SERVERNAME'/jobs/postfixstats.cron ] && rm -f /opt/karoshi/server_network/cronjobs/'$SERVERNAME'/jobs/postfixstats.cron
		[ -f /opt/karoshi/server_network/cronjobs/'$SERVERNAME'/jobs/tidyrootmail.cron ] && rm -f /opt/karoshi/server_network/cronjobs/'$SERVERNAME'/jobs/tidyrootmail.cron
		/opt/karoshi/serversetup/all/"useful scripts"/refreshcronjobs 1>/dev/null

		echo "<li>"'$SERVERNAME': '$"E-Mail Server"' - '$"Stopping Mailscanner"'"</li><br>"
		/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/mailscanner_stop 1>/dev/null
		/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/stoponboot/mailscanner
		[ -f /etc/default/mailscanner ] && echo run_mailscanner=0 >> /etc/default/mailscanner

		echo "<li>"'$SERVERNAME': '$"E-Mail Server"' - '$"Stopping Postfix"'"</li><br>"
		/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/postfix_stop
		/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/stoponboot/postfix

		echo "<li>"'$SERVERNAME': '$"E-Mail Server"' - '$"Stopping Dovecot"'"</li><br>"
		/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/dovecot_stop
		/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/stoponboot/dovecot

		echo "<li>"'$SERVERNAME': '$"E-Mail Server" - $"Stopping Sogo"'"</li><br>"
		/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/sogo_stop
		/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/stoponboot/sogo

		echo "<li>"$SERVERNAME: $"E-Mail Server" - $"Stopping Memcached""</li><br>"
		/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/memcached_stop
		/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/stoponboot/memcached

		#Get root mysql password
		MYSQLPASS=$(cat /etc/mysql.secret)
		mysqladmin -f --password=$MYSQLPASS drop sogo 1>/dev/null 2>/dev/null

		#Change firewall rules to stop email access
		RESTART_SHOREWALL=no
		while  [ $(grep -c email_server_rule /etc/shorewall/rules) != 0 ]
		do
			LINENUM=`grep -n "#email_server_rule" /etc/shorewall/rules | cut -d: -f1 | sed -n 1,1p`
			sed -i $LINENUM"d" /etc/shorewall/rules
			RESTART_SHOREWALL=yes
		done

		if [ $RESTART_SHOREWALL = yes ]
		then
			#Restart shorewall
			source /opt/karoshi/serversetup/variables/distro
			/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/shorewall_stop
			sleep 0.5
			/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/shorewall_start
		fi

		'
	fi

	#Unflag server
	echo "<li>"$SERVERNAME: $"E-Mail Server" - $"Designation removed.""</li><br>"
	[ -f /opt/karoshi/server_network/servers/$SERVERNAME/emailserver ] && rm -f /opt/karoshi/server_network/servers/$SERVERNAME/emailserver
	[ -f /opt/karoshi/server_network/emailserver ] && rm -f /opt/karoshi/server_network/emailserver
	completed
fi

##########################
#joomlaserver
#Unflags this server from using joomla. Deletes all joomla files and the joomla database.
##########################

if [ $MODULE = joomlaserver ]
then
	echo "<li>"$SERVERNAME: $"Removing Joomla.""</li><br>"
	if [ $SERVERNAME = `hostname-fqdn` ]
	then
		[ -d /var/www/html/joomla ] && rm -f -R /var/www/html/joomla
		/opt/karoshi/serversetup/all/"useful scripts"/mysql_root_pass
		#Get root mysql password
		MYSQLPASS=`cat /opt/karoshi/server_network/mysql/.key | gpg --no-tty --passphrase-fd 0 -o - /opt/karoshi/server_network/mysql/mysql_password.gpg 2>/dev/null`
		mysqladmin -f --password=$MYSQLPASS drop joomla 1>/dev/null 2>/dev/null
	else
	ssh -x -o PasswordAuthentication=no $SERVERNAME '
		[ -d /var/www/html/joomla ] && rm -f -R /var/www/html/joomla
		/opt/karoshi/serversetup/all/"useful scripts"/mysql_root_pass
		#Get root mysql password
		MYSQLPASS=`cat /opt/karoshi/server_network/mysql/.key | gpg --no-tty --passphrase-fd 0 -o - /opt/karoshi/server_network/mysql/mysql_password.gpg 2>/dev/null`
		mysqladmin -f --password=$MYSQLPASS drop joomla 1>/dev/null 2>/dev/null
		'
	fi
	#Unflag server
	echo "<li>"$SERVERNAME: $"Joomla" - $"Designation removed.""</li><br>"
	[ -f /opt/karoshi/server_network/servers/$SERVERNAME/joomlaserver ] && rm -f /opt/karoshi/server_network/servers/$SERVERNAME/joomlaserver
	completed
fi

##########################
#radioserver
#Unflags this server from using joomla. Deletes all joomla files and the joomla database.
##########################

if [ $MODULE = radioserver ]
then
echo "<li>"$SERVERNAME: $"Removing Icecast radio server.""</li><br>"
if [ $SERVERNAME = `hostname-fqdn` ]
then
#Stop icecast server
source /opt/karoshi/serversetup/variables/distro
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/icecast_stop
#Stop icecast server from running on boot
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/stoponboot/icecast 2>/dev/null
else
ssh -x -o PasswordAuthentication=no $SERVERNAME '
#Stop icecast server
source /opt/karoshi/serversetup/variables/distro
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/icecast_stop
#Stop icecast server from running on boot
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/stoponboot/icecast 2>/dev/null
'
fi
#Unflag server
echo "<li>"$SERVERNAME: $"Internet Radio Server" - $"Designation removed.""</li><br>"
[ -f /opt/karoshi/server_network/servers/$SERVERNAME/radioserver ] && rm -f /opt/karoshi/server_network/servers/$SERVERNAME/radioserver
[ -f /opt/karoshi/server_network/radioserver ] && rm -f /opt/karoshi/server_network/radioserver
completed
fi

##########################
#radioserver
#Unflags this server from using joomla. Deletes all joomla files and the joomla database.
##########################

if [ $MODULE = remote_ssh ]
then
	echo "<li>"$SERVERNAME: $"Removing ssh access.""</li><br>"
	#Change firewall rules to stop ssh access
	MODCHECK=`grep -c pdc_ssh_rule /etc/shorewall/rules`
	if [ $MODCHECK != 0 ]
	then
		LINENUM=`grep -n '#pdc_ssh_rule' /etc/shorewall/rules | cut -d: -f1`
		sed -i $LINENUM'd' /etc/shorewall/rules
		#Restart shorewall
		source /opt/karoshi/serversetup/variables/distro
		/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/shorewall_stop
		sleep 0.5
		/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/shorewall_start
	fi
	#Unflag server
	echo "<li>"$SERVERNAME: $"Remote SSH Access" - $"Designation removed.""</li><br>"
	[ -f /opt/karoshi/server_network/servers/$SERVERNAME/remote_ssh ] && rm -f /opt/karoshi/server_network/servers/$SERVERNAME/remote_ssh
	completed
fi


##########################
#moodleserver
#Unflags this server as a moodle server. Deletes all moodle files and the moodle database.
##########################

if [ $MODULE = moodle ]
then
	echo "<li>"$SERVERNAME: $"Removing Moodle.""</li><br>"
	if [ $SERVERNAME = `hostname-fqdn` ]
	then
		[ -d /var/www/html/moodle ] && rm -f -R /var/www/html/moodle
		[ -d /var/www/moodle-data ] && rm -f -R /var/www/moodle-data

		[ -f /opt/karoshi/server_network/cronjobs/$SERVERNAME/jobs/refresh_moodle.cron ] && rm -f /opt/karoshi/server_network/cronjobs/$SERVERNAME/jobs/refresh_moodle.cron
		/opt/karoshi/serversetup/all/"useful scripts"/refreshcronjobs 1>/dev/null

		/opt/karoshi/serversetup/all/"useful scripts"/mysql_root_pass
		#Get root mysql password
		MYSQLPASS=$(cat /etc/mysql.secret)
		mysqladmin -f --password=$MYSQLPASS drop moodle 1>/dev/null 2>/dev/null
	else
	ssh -x -o PasswordAuthentication=no $SERVERNAME '
		[ -d /var/www/html/moodle ] && rm -f -R /var/www/html/moodle
		[ -d /var/www/moodle-data ] && rm -f -R /var/www/moodle-data

		[ -f /opt/karoshi/server_network/cronjobs/'$SERVERNAME'/jobs/refresh_moodle.cron ] && rm -f /opt/karoshi/server_network/cronjobs/'$SERVERNAME'/jobs/refresh_moodle.cron
		/opt/karoshi/serversetup/all/"useful scripts"/refreshcronjobs 1>/dev/null

		/opt/karoshi/serversetup/all/"useful scripts"/mysql_root_pass
		#Get root mysql password
		MYSQLPASS=$(cat /etc/mysql.secret)
		mysqladmin -f --password=$MYSQLPASS drop moodle 1>/dev/null 2>/dev/null
		'
	fi
	#Unflag server
	echo "<li>"$SERVERNAME: $"Moodle Server" - $"Designation removed.""</li><br>"
	[ -f /opt/karoshi/server_network/servers/$SERVERNAME/moodle ] && rm -f /opt/karoshi/server_network/servers/$SERVERNAME/moodle
	[ -f /opt/karoshi/server_network/moodleserver ] && rm -f /opt/karoshi/server_network/moodleserver
	completed
fi

if [ $MODULE = openvpn ]
then
	echo "<li>"$SERVERNAME: $"Removing OpenVPN.""</li><br>"
	ssh -x -o PasswordAuthentication=no $SERVERNAME '
	#Stop openvpn
	source /opt/karoshi/serversetup/variables/distro
	/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/openvpn_stop 1>/dev/null
	/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/stoponboot/openvpn

	#Change firewall rules to stop openvpn access
	MODCHECK=`grep -c openvpn_client_connect /etc/shorewall/rules`
	if [ $MODCHECK != 0 ]
	then
		LINENUM=`grep -n "#openvpn_client_connect" /etc/shorewall/rules | cut -d: -f1`
		sed -i $LINENUM"d" /etc/shorewall/rules
		#Restart shorewall
		source /opt/karoshi/serversetup/variables/distro
		/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/shorewall_stop
		sleep 0.5
		/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/shorewall_start
	fi
	'

	#Unflag server
	echo "<li>"$SERVERNAME: $"OpenVPN Server" - $"Designation removed.""</li><br>"
	[ -f /opt/karoshi/server_network/servers/$SERVERNAME/openvpn ] && rm -f /opt/karoshi/server_network/servers/$SERVERNAME/openvpn
	[ -f /opt/karoshi/server_network/vpnserver ] && rm -f /opt/karoshi/server_network/vpnserver
	completed
fi

##########################
#ocsserver
#Unflags this server as an OCS server. Deletes all OCS files and the OCS database.
##########################

if [ $MODULE = ocsserver ]
then
echo "<li>"$SERVERNAME: $"Removing OCS-Inventory.""</li><br>"

[ -d /var/www/html_karoshi/admin/ocs ] && rm -f -R /var/www/html_karoshi/admin/ocs
[ -d /var/www/html_karoshi/tech/ocs ] && rm -f -R /var/www/html_karoshi/tech/ocs

if [ $SERVERNAME = `hostname-fqdn` ]
then
[ -d /usr/share/ocsinventory-reports ] && rm -f -R /usr/share/ocsinventory-reports
[ -f /etc/httpd/conf.d/z-ocsinventory-server.conf ] && em -f /etc/httpd/conf.d/z-ocsinventory-server.conf
[ -f /etc/httpd/conf.d/ocsinventory-reports.conf ] && em -f /etc/httpd/conf.d/ocsinventory-reports.conf
[ -f /etc/apache2/conf.d/z-ocsinventory-server.conf ] && rm -f /etc/apache2/conf.d/z-ocsinventory-server.conf
[ -f /etc/apache2/conf.d/ocsinventory-reports.conf ] && rm -f /etc/apache2/conf.d/ocsinventory-reports.conf

/opt/karoshi/serversetup/all/"useful scripts"/mysql_root_pass
#Get root mysql password
MYSQLPASS=`cat /opt/karoshi/server_network/mysql/.key | gpg --no-tty --passphrase-fd 0 -o - /opt/karoshi/server_network/mysql/mysql_password.gpg 2>/dev/null`
mysqladmin -f --password=$MYSQLPASS drop ocsweb 1>/dev/null 2>/dev/null
#Restart apache
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/apache_stop 1>/dev/null
sleep 0.5
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/apache_start 1>/dev/null
else
ssh -x -o PasswordAuthentication=no $SERVERNAME '
[ -d /usr/share/ocsinventory-reports ] && rm -f -R /usr/share/ocsinventory-reports
[ -f /etc/httpd/conf.d/z-ocsinventory-server.conf ] && em -f /etc/httpd/conf.d/z-ocsinventory-server.conf
[ -f /etc/httpd/conf.d/ocsinventory-reports.conf ] && em -f /etc/httpd/conf.d/ocsinventory-reports.conf
[ -f /etc/apache2/conf.d/z-ocsinventory-server.conf ] && rm -f /etc/apache2/conf.d/z-ocsinventory-server.conf
[ -f /etc/apache2/conf.d/ocsinventory-reports.conf ] && rm -f /etc/apache2/conf.d/ocsinventory-reports.conf
/opt/karoshi/serversetup/all/"useful scripts"/mysql_root_pass
#Get root mysql password
MYSQLPASS=`cat /opt/karoshi/server_network/mysql/.key | gpg --no-tty --passphrase-fd 0 -o - /opt/karoshi/server_network/mysql/mysql_password.gpg 2>/dev/null`
mysqladmin -f --password=$MYSQLPASS drop ocsweb 1>/dev/null 2>/dev/null
#Restart apache
source /opt/karoshi/serversetup/variables/distro
source /opt/karoshi/serversetup/distro/$DISTROCHOICE/all/software
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/apache_stop 1>/dev/null
sleep 0.5
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/apache_start 1>/dev/null
'
fi
#Unflag server
echo "<li>"$SERVERNAME: $"OCS Inventory" - $"Designation removed.""</li><br>"
[ -f /opt/karoshi/server_network/servers/$SERVERNAME/ocsserver ] && rm -f /opt/karoshi/server_network/servers/$SERVERNAME/ocsserver
[ -f /opt/karoshi/server_network/ocs_server ] && rm -f /opt/karoshi/server_network/ocs_server
#Remove ocs item from the web management menu
sed -i 's/OCSCTRL=yes/OCSCTRL=no/g' /opt/karoshi/web_controls/generate_navbar_admin
completed
fi

##########################
#printserver
#Unflags this server as a print server.Stops cups on the server.
##########################

if [ $MODULE = printserver ]
then
	echo "<li>"$SERVERNAME: $"Removing Print Server.""</li><br>"
	if [ $SERVERNAME = `hostname-fqdn` ]
	then
		#Stop Cups
		/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/cups_stop 1>/dev/null
		/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/stoponboot/cups
	else
		ssh -x -o PasswordAuthentication=no $SERVERNAME '
		#Stop Cups
		source /opt/karoshi/serversetup/variables/distro
		/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/cups_stop 1>/dev/null
		/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/stoponboot/cups
		'
	fi
	#Unflag server
	echo "<li>"$SERVERNAME: $"Print Server" - $"Designation removed.""</li><br>"
	[ -f /opt/karoshi/server_network/servers/$SERVERNAME/printserver ] && rm -f /opt/karoshi/server_network/servers/$SERVERNAME/printserver
	[ -f /opt/karoshi/server_network/printserver ] && rm -f /opt/karoshi/server_network/printserver

	#Remove printing item from the web management menu
	sed -i 's/PRINTERCTRL=yes/PRINTERCTRL=no/g' /opt/karoshi/web_controls/generate_navbar_admin
	sed -i 's/PRINTERCTRL=yes/PRINTERCTRL=no/g' /opt/karoshi/web_controls/generate_navbar_tech
	sed -i 's/PRINTERCTRL=yes/PRINTERCTRL=no/g' /opt/karoshi/web_controls/generate_navbar_staff
	completed
fi

##########################
#squid
#Unflags this server as an Internet Proxy server. Stops squid and dansguardian from running on the server.
##########################
if [ $MODULE = squid ]
then
	echo "<li>"$SERVERNAME: $"Removing Squid.""</li><br>"
	if [ $SERVERNAME = `hostname-fqdn` ]
	then
		#Stop squid and dansguardian
		/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/squid_stop 1>/dev/null
		/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/e2guardian_stop 1>/dev/null
		/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/squiddebproxy_stop 1>/dev/null
		/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/stoponboot/squid
		/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/stoponboot/e2guardian
		/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/stoponboot/squiddebproxy

		[ -f /opt/karoshi/server_network/cronjobs/$SERVERNAME/jobs/restart_dansguardian.cron ] && rm -f /opt/karoshi/server_network/cronjobs/$SERVERNAME/jobs/restart_dansguardian.cron
		[ -f /opt/karoshi/server_network/cronjobs/$SERVERNAME/jobs/restart_e2guardian.cron ] && rm -f /opt/karoshi/server_network/cronjobs/$SERVERNAME/jobs/restart_e2guardian.cron
		[ -f /opt/karoshi/server_network/cronjobs/$SERVERNAME/jobs/internet_log_gen.cron ] && rm -f /opt/karoshi/server_network/cronjobs/$SERVERNAME/jobs/internet_log_gen.cron
		[ -f /opt/karoshi/server_network/cronjobs/$SERVERNAME/jobs/internet_log_compress.cron ] && rm -f /opt/karoshi/server_network/cronjobs/$SERVERNAME/jobs/internet_log_compress.cron
		[ -f /opt/karoshi/server_network/cronjobs/$SERVERNAME/jobs/dgupdatefilterlist.cron ] && rm -f /opt/karoshi/server_network/cronjobs/$SERVERNAME/jobs/dgupdatefilterlist.cron
		[ -f /opt/karoshi/server_network/cronjobs/$SERVERNAME/jobs/archive_internet_logs.cron ] && rm -f /opt/karoshi/server_network/cronjobs/$SERVERNAME/jobs/archive_internet_logs.cron

		/opt/karoshi/serversetup/all/"useful scripts"/refreshcronjobs 1>/dev/null

	else
	ssh -x -o PasswordAuthentication=no $SERVERNAME '
		#Stop squid and dansguardian
		source /opt/karoshi/serversetup/variables/distro
		/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/squid_stop 1>/dev/null
		/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/e2guardian_stop 1>/dev/null
		/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/squiddebproxy_stop 1>/dev/null
		/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/stoponboot/squid
		/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/stoponboot/e2guardian
		/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/stoponboot/squiddebproxy

		[ -f /opt/karoshi/server_network/cronjobs/'$SERVERNAME'/jobs/restart_dansguardian.cron ] && rm -f /opt/karoshi/server_network/cronjobs/'$SERVERNAME'/jobs/restart_dansguardian.cron
		[ -f /opt/karoshi/server_network/cronjobs/'$SERVERNAME'/jobs/restart_e2guardian.cron ] && rm -f /opt/karoshi/server_network/cronjobs/'$SERVERNAME'/jobs/restart_e2guardian.cron
		[ -f /opt/karoshi/server_network/cronjobs/'$SERVERNAME'/jobs/internet_log_gen.cron ] && rm -f /opt/karoshi/server_network/cronjobs/'$SERVERNAME'/jobs/internet_log_gen.cron
		[ -f /opt/karoshi/server_network/cronjobs/'$SERVERNAME'/jobs/internet_log_compress.cron ] && rm -f /opt/karoshi/server_network/cronjobs/'$SERVERNAME'/jobs/internet_log_compress.cron
		[ -f /opt/karoshi/server_network/cronjobs/'$SERVERNAME'/jobs/dgupdatefilterlist.cron ] && rm -f /opt/karoshi/server_network/cronjobs/'$SERVERNAME'/jobs/dgupdatefilterlist.cron
		[ -f /opt/karoshi/server_network/cronjobs/'$SERVERNAME'/jobs/archive_internet_logs.cron ] && rm -f /opt/karoshi/server_network/cronjobs/'$SERVERNAME'/jobs/archive_internet_logs.cron

		/opt/karoshi/serversetup/all/"useful scripts"/refreshcronjobs 1>/dev/null
	'
	fi
	#Unflag server
	echo "<li>"$SERVERNAME: $"Squid Internet Proxy" - $"Designation removed.""</li><br>"
	[ -f /opt/karoshi/server_network/servers/$SERVERNAME/squid ] && rm -f /opt/karoshi/server_network/servers/$SERVERNAME/squid
	[ -f /opt/karoshi/server_network/proxyserver ] && rm -f /opt/karoshi/server_network/proxyserver
	[ -f /opt/karoshi/server_network/servers/$SERVERNAME/apt-cacher-ng ] && rm -f /opt/karoshi/server_network/servers/$SERVERNAME/apt-cacher-ng
	[ -f /opt/karoshi/server_network/servers/$SERVERNAME/squid-deb-proxy ] && rm -f /opt/karoshi/server_network/servers/$SERVERNAME/squid-deb-proxy
	[ -f /opt/karoshi/server_network/proxyservers/$SERVERNAME ] && rm -f /opt/karoshi/server_network/proxyservers/$SERVERNAME

	#Regenerate proxy dns entry.
	/opt/karoshi/serversetup/modules/squid/scripts/create_proxy_dns_entries
	completed
fi

##########################
#monitoring
#Unflags this server as a monitor server. Stops mon from running.
##########################
if [ $MODULE = monitoring ]
then
echo "<li>"$SERVERNAME: $"Removing Mon.""</li><br>"
if [ $SERVERNAME = `hostname-fqdn` ]
then
#Stop mon
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/mon_stop 1>/dev/null
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/stoponboot/mon

[ -f /opt/karoshi/karoshi_user/Desktop/Monitoring.desktop ] && rm -f /opt/karoshi/karoshi_user/Desktop/Monitoring.desktop

[ -f /opt/karoshi/server_network/cronjobs/$SERVERNAME/jobs/gen_status.cron ] && rm -f /opt/karoshi/server_network/cronjobs/$SERVERNAME/jobs/gen_status.cron
/opt/karoshi/serversetup/all/"useful scripts"/refreshcronjobs 1>/dev/null

else
ssh -x -o PasswordAuthentication=no $SERVERNAME '
source /opt/karoshi/serversetup/variables/distro
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/mon_stop 1>/dev/null
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/stoponboot/mon

[ -f /opt/karoshi/karoshi_user/Desktop/Monitoring.desktop ] && rm -f /opt/karoshi/karoshi_user/Desktop/Monitoring.desktop

[ -f /opt/karoshi/server_network/cronjobs/'$SERVERNAME'/jobs/gen_status.cron ] && rm -f /opt/karoshi/server_network/cronjobs/'$SERVERNAME'/jobs/gen_status.cron
/opt/karoshi/serversetup/all/"useful scripts"/refreshcronjobs 1>/dev/null

'
fi
#Unflag server
echo "<li>"$SERVERNAME: $"Monitor Server" - $"Designation removed.""</li><br>"
[ -f /opt/karoshi/server_network/servers/$SERVERNAME/monitoring ] && rm -f /opt/karoshi/server_network/servers/$SERVERNAME/monitoring
[ -f /opt/karoshi/server_network/monitoringserver ] && rm -f /opt/karoshi/server_network/monitoringserver

#Remove mon entry from the web management
sed -i 's/MONITORINGCTRL=yes/MONITORINGCTRL=no/g' /opt/karoshi/web_controls/generate_navbar_admin
sed -i 's/MONITORINGCTRL=yes/MONITORINGCTRL=no/g' /opt/karoshi/web_controls/generate_navbar_tech
completed
fi

##########################
#fileserver
#Unflags this server as a file server. Re-maps any groups using this server back to the main server.
##########################
if [ $MODULE = fileserver ]
then
	source /opt/karoshi/server_network/domain_information/domain_name
	echo "<li>"$SERVERNAME: $"Removing File Server.""</li><br>"

	#Change group information
	for GROUPFILES in /opt/karoshi/server_network/group_information/*
	do
	GROUPFILE=`basename $GROUPFILES`
	sed -i 's/'$SERVERNAME'/'$HOSTNAME.$REALM'/g' /opt/karoshi/server_network/group_information/$GROUPFILE
	done
	#Change drive mapping
	/opt/karoshi/serversetup/pdc/"useful scripts"/generate_logon_scripts

	#Unflag server
	echo "<li>"$SERVERNAME: $"File Server" - $"Designation removed.""</li><br>"
	[ -f /opt/karoshi/server_network/servers/$SERVERNAME/fileserver ] && rm -f /opt/karoshi/server_network/servers/$SERVERNAME/fileserver
	completed
fi


if [ $MODULE = REMOVESERVER ]
then
	echo "<li>"$SERVERNAME: $"Removing Server""</li><br>"
	LDAPPASS=`sed -n 1,1p /etc/ldap.secret`
	source /opt/karoshi/server_network/domain_information/domain_name

	#Remove server from gluster
	/opt/karoshi/serversetup/modules/glusterfs/scripts/karoshi_gluster $SERVERNAME all removeserver "$REMOTE_USER" "$REMOTE_ADDR"

	/opt/karoshi/serversetup/modules/glusterfs/scripts/karoshi_gluster berylium.elements.com all removeserver "me" "12345"

	#Check to see if this is a domain controller
	if [ -f /opt/karoshi/server_network/servers/$SERVERNAME/1dc ]
	then
		#Demote from dc role in samba4
		ssh -x -o PasswordAuthentication=no $SERVERNAME '
		echo "<li>"'$SERVERNAME': '$"Demoting domain controller role"'"</li><br>"
		samba-tool domain demote --username=Administrator --password='$LDAPPASS'
		'
	fi

	#Remove zone information
	[ -f /opt/karoshi/server_network/zones/internal/servers/$SERVERNAME ] && rm -f /opt/karoshi/server_network/zones/internal/servers/$SERVERNAME
	[ -f /opt/karoshi/server_network/zones/dmz/servers/$SERVERNAME ] && rm -f /opt/karoshi/server_network/zones/dmz/servers/$SERVERNAME
	[ -f /opt/karoshi/server_network/zones/external/servers/$SERVERNAME ] && rm -f /opt/karoshi/server_network/zones/external/servers/$SERVERNAME

	#Remove alias information
	if [ -f /opt/karoshi/server_network/aliases/$SERVERNAME ]
	then
		ALIAS=`sed -n 1,1p /opt/karoshi/server_network/aliases/$SERVERNAME`
		rm -f /opt/karoshi/server_network/aliases/$SERVERNAME
		[ -f /etc/ssl/apache/$ALIAS.key ] && rm -f /etc/ssl/apache/$ALIAS.key
		[ -f /etc/ssl/apache/$ALIAS.pem ] && rm -f /etc/ssl/apache/$ALIAS.pem
		[ -f /etc/ssl/apache/$ALIAS.req ] && rm -f /etc/ssl/apache/$ALIAS.req
		#Delete alias from dns
		samba-tool dns delete 127.0.0.1 $REALM $ALIAS CNAME $SERVERNAME.$REALM --username=Administrator --password=$LDAPPASS 1>> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE 2>> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	fi

	#Remove entry from dns
	TCPIPNUMBER=`net lookup $SERVERNAME`
	samba-tool dns delete 127.0.0.1 $REALM $SERVERNAME A $TCPIPNUMBER --username=Administrator --password=$LDAPPASS 1>> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE 2>> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE

	#Change group information
	for GROUPFILES in /opt/karoshi/server_network/group_information/*
	do
	GROUPFILE=`basename $GROUPFILES`
	sed -i 's/'$SERVERNAME'/'$HOSTNAME.$REALM'/g' /opt/karoshi/server_network/group_information/$GROUPFILE
	done
	#Change drive mapping
	/opt/karoshi/serversetup/pdc/"useful scripts"/generate_logon_scripts

	#Unflag server
	echo "<li>"$SERVERNAME: $"Designation removed.""</li><br>"
	[ -d /opt/karoshi/server_network/servers/$SERVERNAME ] && rm -f -R /opt/karoshi/server_network/servers/$SERVERNAME
	[ -f /opt/karoshi/server_network/slave_ldap_servers/$SERVERNAME ] && rm -f /opt/karoshi/server_network/slave_ldap_servers/$SERVERNAME
	[ -f /opt/karoshi/server_network/ldap_clients/$SERVERNAME ] && rm -f /opt/karoshi/server_network/ldap_clients/$SERVERNAME
	#Remove backup server
	[ -f /opt/karoshi/server_network/backup_servers/servers/$SERVERNAME ] && rm -f /opt/karoshi/server_network/backup_servers/servers/$SERVERNAME
	#Check to see if any other servers are backing up to this server
	if [ -d /opt/karoshi/server_network/backup_servers/backup_settings/ ]
	then
		if [ `grep -l -w $SERVERNAME -R /opt/karoshi/server_network/backup_servers/backup_settings/* | wc -l` -gt 0 ]
		then
			for BACKUP_CLIENTS in `grep -l -w $SERVERNAME -R /opt/karoshi/server_network/backup_servers/backup_settings`
				do
				BACKUP_CLIENT=`echo $BACKUP_CLIENTS | cut -d/ -f7`
				rm -f $BACKUP_CLIENTS
				echo '<li>'$BACKUP_CLIENT': '$"Backup disabled"'</li><br>'
				echo `date`: karoshi_servers_remove_role - $"Back"UP_CLIENT backup disabled by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
			done
		fi
	fi
	completed
fi
##########################
#ldapserver
#Unflags this server as a slave ldap server. Stops ldap from running and turns of ldap authentication on the server.
##########################
if [ $MODULE = ldapserver ]
then
	echo "<li>"$SERVERNAME: $"Removing LDAP Server.""</li><br>"

	#Unflag server
	echo "<li>"$SERVERNAME: $"Designation removed.""</li><br>"
	[ -f /opt/karoshi/server_network/servers/$SERVERNAME/ldapserver ] && rm -f /opt/karoshi/server_network/servers/$SERVERNAME/ldapserver
	[ -f /opt/karoshi/server_network/slave_ldap_servers/$SERVERNAME ] && rm -f /opt/karoshi/server_network/slave_ldap_servers/$SERVERNAME

	ssh -x -o PasswordAuthentication=no $SERVERNAME '
	source /opt/karoshi/serversetup/variables/distro
	/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/ldap_stop 1>/dev/null
	/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/stoponboot/ldap
	sed -i "s/files ldap/files/g" /etc/nsswitch.conf
	'
	completed
fi

#Unflag server
echo "<li>"$SERVERNAME: $"Designation removed.""</li><br>"
[ -f /opt/karoshi/server_network/servers/$SERVERNAME/$MODULE ] && rm -f /opt/karoshi/server_network/servers/$SERVERNAME/$MODULE

completed

