#!/bin/bash
#Copyright (C) 2011 Paul Sharrad

#This file is part of Karoshi Server.
#
#Karoshi Server is free software: you can redistribute it and/or modify
#it under the terms of the GNU Affero General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#Karoshi Server is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU Affero General Public License for more details.
#
#You should have received a copy of the GNU Affero General Public License
#along with Karoshi Server.  If not, see <http://www.gnu.org/licenses/>.

#
#The Karoshi Team can be contacted at: 
#mpsharrad@karoshi.org.uk
#jsharrad@karoshi.org.uk

#
#Website: http://www.karoshi.org.uk
LOG_DATE=`date +%F`
########################
#Check md5checksum
########################
if ! test -f /opt/karoshi/web_controls/checksums/admin_checksums/linux_client_choose_distro_cgi
then
	echo `date`: linux_client_choose_distro - No admin MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
source /opt/karoshi/web_controls/checksums/admin_checksums/linux_client_choose_distro_cgi
MD5SUM=`md5sum /var/www/cgi-bin_karoshi/admin/linux_client_choose_distro.cgi | cut -d' ' -f1`
[ -z "$MD5SUM" ] && MD5SUM=not_set
if [ $MD5SUM'check' != $linux_client_choose_distro_cgi'check' ]
then
	echo `date`: linux_client_choose_distro - Incorrect admin MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi

########################
#Get variables
########################
numArgs=$#
if [ $numArgs != 0 ]
then
	echo `date`: linux_client_choose_distro - incorrect number of arguments >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi

read DATA
DATA=`echo $DATA | tr -cd 'A-Za-z0-9\._:\-'`
if [ -z "$DATA" ]
then
	echo `date`: linux_client_choose_distro - no data >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
REMOTE_USER=`echo "$DATA" | cut -s -d: -f1`
REMOTE_ADDR=`echo "$DATA" | cut -s -d: -f2`
REMOTE_MD5=`echo "$DATA" | cut -s -d: -f3`
DISTROCHOICE=`echo "$DATA" | cut -s -d: -f4`
CONTROL=`echo "$DATA" | cut -s -d: -f5`
NETBOOT=`echo "$DATA" | cut -s -d: -f6`
########################
#Check data
########################
if [ $REMOTE_MD5'check' != $MD5SUM'check' ]
then
	echo `date`: linux_client_choose_distro - Not called by linux_client_choose_distro.cgi or bulk_user_creation_create.cgi >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ -z "$REMOTE_USER" ]
then
	echo `date`: linux_client_choose_distro - Blank remote user >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ -z "$REMOTE_ADDR" ]
then
	echo `date`: linux_client_choose_distro - Blank remote tcpip address >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ -z "$DISTROCHOICE" ]
then
	echo `date`: linux_client_choose_distro - Blank distribution choice by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi

if [ -z "$CONTROL" ]
then
	echo `date`: linux_client_choose_distro - Blank control choice by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi

if [ $CONTROL = copy ] || [ $CONTROL = delete ]
then
	if [ -z "$NETBOOT" ]
	then
		echo `date`: linux_client_choose_distro - Blank netboot by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
		exit 101
	fi
fi

if [ `grep -c ^$REMOTE_USER: /opt/karoshi/web_controls/web_access_admin` != 1 ]
then
	echo `date`: linux_client_choose_distro - access denied to $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi

##########################
#Language
##########################

STYLESHEET=defaultstyle.css
[ -f /opt/karoshi/web_controls/user_prefs/$REMOTE_USER ] && source /opt/karoshi/web_controls/user_prefs/$REMOTE_USER
TEXTDOMAIN=karoshi-server


#Get distribution server
DISTRIBUTIONSERVER=`sed -n 1,1p /opt/karoshi/server_network/distribution_server`
#Get Distro server ip
DISTROSERVERIP=`net lookup $DISTRIBUTIONSERVER`
DISTROFOLDER=`echo $DISTROCHOICE | sed 's/.iso//g'`

if [ $CONTROL = copy ]
then
	DEFAULTISO=no
	#Copy iso to /home/distributions/iso
	#Mount iso

	[ ! -d /home/distributions/linux_iso ] && mkdir -p /home/distributions/linux_iso

	[ -f /home/distributions/linux_iso/"$DISTROCHOICE" ] && rm -f /home/distributions/linux_iso/"$DISTROCHOICE"
	ln -s /home/itadminshare/distributions/linux/"$DISTROCHOICE" /home/distributions/linux_iso/"$DISTROCHOICE"
	#Get distribution server

	if [ $DISTRIBUTIONSERVER = `hostname-fqdn` ]
	then

		[ ! -d /media/iso.$$ ] && mkdir -p /media/iso.$$
		[ -d /home/distributions/linux_distro/$DISTROFOLDER ] && rm -f -R /home/distributions/linux_distro/$DISTROFOLDER
		mkdir -p /home/distributions/linux_distro/$DISTROFOLDER
		#Mount iso
		echo "<ul><li>"$DISTRIBUTIONSERVER - $"Mounting iso""</li></ul>"
		mount /home/distributions/linux_iso/"$DISTROCHOICE" /media/iso.$$ -o loop
		#Copy files
		echo "<ul><li>"$DISTRIBUTIONSERVER - $"Copying files out of the iso image""</li></ul>"
		echo "<pre style=\"font-size: 10pt; font-family:Arial, Times, Georgia, serif\">"
		cp -v -a /media/iso.$$/* /home/distributions/linux_distro/$DISTROFOLDER
		cp -v -a -f -R /media/iso.$$/.disk /home/distributions/linux_distro/$DISTROFOLDER
		echo "</pre>"
		#Unmount iso
		echo "<ul><li>"$DISTRIBUTIONSERVER - $"Unmounting iso""</li></ul>"
		umount /media/iso.$$
		rm -f -R /media/iso.$$

		echo $NETBOOT > /home/distributions/linux_iso/"$DISTROCHOICE".netboot
		#Copy out files
		echo "<ul><li>"$DISTRIBUTIONSERVER - $"Copying out files""</li></ul>"

		[ -d /home/tftpboot/$NETBOOT/images/$DISTROFOLDER/ ] && rm -f -R /home/tftpboot/$NETBOOT/images/$DISTROFOLDER/
		mkdir -p /home/tftpboot/$NETBOOT/images/$DISTROFOLDER/
		echo "<pre style=\"font-size: 10pt; font-family:Arial, Times, Georgia, serif\">"

		cp -v -f /home/distributions/linux_distro/$DISTROFOLDER/casper/initrd.* /home/tftpboot/$NETBOOT/images/$DISTROFOLDER/

		#Get vmlinuz
		VMLINUZ=`ls /home/distributions/linux_distro/$DISTROFOLDER/casper/vmlin* | sed -n 1,1p`
		VMLINUZ=`basename "$VMLINUZ"`
		cp -v -f /home/distributions/linux_distro/$DISTROFOLDER/casper/$VMLINUZ /home/tftpboot/$NETBOOT/images/$DISTROFOLDER/
		[ ! -f /home/tftpboot/$NETBOOT/preseed.cfg ] && cp /opt/karoshi/serversetup/modules/distributionserver/tftpboot/preseed/$NETBOOT-preseed.cfg /home/tftpboot/$NETBOOT/preseed.cfg
		cp -v -f /home/tftpboot/$NETBOOT/preseed.cfg /home/distributions/linux_distro/$DISTROFOLDER/casper/
		sed -i "s%CHANGETHISLOCALE%$LANG%" /home/distributions/linux_distro/$DISTROFOLDER/casper/preseed.cfg
		TIMEZONE=$(cat /etc/timezone)
		sed -i "s%CHANGETHISTIMEZONE%$TIMEZONE%" /home/distributions/linux_distro/$DISTROFOLDER/casper/preseed.cfg
		echo "</pre>"

		#Find which initrd
		INITRD=`ls /home/tftpboot/$NETBOOT/images/$DISTROFOLDER/initrd.* | sed -n 1,1p`
		INITRD=`basename "$INITRD"`

		#Create boot entry
		[ ! -d /home/tftpboot/$NETBOOT/menus ] && mkdir -p /home/tftpboot/$NETBOOT/menus

		echo 'LABEL '$DISTROFOLDER'' > /home/tftpboot/$NETBOOT/menus/$DISTROFOLDER
		echo '	MENU LABEL ^'$DISTROFOLDER'' >> /home/tftpboot/$NETBOOT/menus/$DISTROFOLDER
		echo '	KERNEL images/'$DISTROFOLDER'/'$VMLINUZ'' >> /home/tftpboot/$NETBOOT/menus/$DISTROFOLDER
		echo '	append	boot=casper automatic-ubiquity netboot=nfs nfsroot='$DISTROSERVERIP':/home/distributions/linux_distro/'$DISTROFOLDER' initrd=images/'$DISTROFOLDER'/'$INITRD' file=/cdrom/casper/preseed.cfg priority=critical ip=dhcp  --' >> /home/tftpboot/$NETBOOT/menus/$DISTROFOLDER	

		[ -f /home/tftpboot/$NETBOOT/ubuntu-installer/amd64/boot-screens/txt.cfg ] && rm -f /home/tftpboot/$NETBOOT/ubuntu-installer/amd64/boot-screens/txt.cfg
		if [ `ls -1 /home/tftpboot/$NETBOOT/menus/ | wc -l` -gt 0 ]
		then
			for MENUITEMS in /home/tftpboot/$NETBOOT/menus/*
			do
				MENUITEM=`basename $MENUITEMS`
				cat /home/tftpboot/$NETBOOT/menus/$MENUITEM >> /home/tftpboot/$NETBOOT/ubuntu-installer/amd64/boot-screens/txt.cfg
				echo >> /home/tftpboot/$NETBOOT/ubuntu-installer/amd64/boot-screens/txt.cfg
			done
		fi

		#Restart nfs server
		echo "<ul><li>"$DISTRIBUTIONSERVER - $"Restarting NFS Server""</li></ul>"
		source /opt/karoshi/serversetup/variables/distro
		echo "<pre style=\"font-size: 10pt; font-family:Arial, Times, Georgia, serif\">"
		/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/nfs_stop
		sleep 1
		/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/nfs_start
		echo "</pre>"
	else
		scp -r /opt/karoshi/serversetup/modules/distributionserver/tftpboot/preseed root@$DISTRIBUTIONSERVER:"/opt/karoshi/serversetup/modules/distributionserver/tftpboot/"
		ssh -x -o PasswordAuthentication=no $DISTRIBUTIONSERVER '
		[ ! -d /home/distributions/linux_iso ] && mkdir -p /home/distributions/linux_iso
		[ -f /home/distributions/linux_iso/"'$DISTROCHOICE'" ] && rm -f /home/distributions/linux_iso/"'$DISTROCHOICE'"
		'
		echo '<ul><li>'$HOSTNAME' - '$DISTRIBUTIONSERVER' - '$"Copying iso"'</li></ul>'
		echo "<pre style=\"font-size: 10pt; font-family:Arial, Times, Georgia, serif\">"
		rsync -avL /home/distributions/linux_iso/"$DISTROCHOICE" root@$DISTRIBUTIONSERVER:"/home/distributions/linux_iso/" 2>&1

		echo "</pre>"
		ssh -x -o PasswordAuthentication=no $DISTRIBUTIONSERVER '
		[ ! -d /media/iso.'$$' ] && mkdir -p /media/iso.'$$'
		[ -d /home/distributions/linux_distro/'$DISTROFOLDER' ] && rm -f -R /home/distributions/linux_distro/'$DISTROFOLDER'
		mkdir -p /home/distributions/linux_distro/'$DISTROFOLDER'
		#Mount iso
		echo "<ul><li>"'$DISTRIBUTIONSERVER' - '$"Mounting iso"'"</li></ul>"
		mount /home/distributions/linux_iso/"'$DISTROCHOICE'" /media/iso.'$$' -o loop
		#Copy files
		echo "<ul><li>"'$DISTRIBUTIONSERVER' - '$"Copying files out of the iso image"'"</li></ul>"
		echo "<pre style=\"font-size: 10pt; font-family:Arial, Times, Georgia, serif\">"
		cp -v -a /media/iso.'$$'/* /home/distributions/linux_distro/'$DISTROFOLDER'
		cp -v -a -f -R /media/iso.'$$'/.disk /home/distributions/linux_distro/'$DISTROFOLDER'
		echo "</pre>"
		#Unmount iso
		echo "<ul><li>"'$DISTRIBUTIONSERVER' - '$"Unmounting iso"'"</li></ul>"
		umount /media/iso.'$$'
		rm -f -R /media/iso.'$$'
		echo '$NETBOOT' > /home/distributions/linux_iso/"'$DISTROCHOICE'".netboot
		#Copy out files
		echo "<ul><li>"'$DISTRIBUTIONSERVER' - '$"Copying out files"'"</li></ul>"

		[ -d /home/tftpboot/'$NETBOOT'/images/'$DISTROFOLDER'/ ] && rm -f -R /home/tftpboot/'$NETBOOT'/images/'$DISTROFOLDER'/
		mkdir -p /home/tftpboot/'$NETBOOT'/images/'$DISTROFOLDER'/
		echo "<pre style=\"font-size: 10pt; font-family:Arial, Times, Georgia, serif\">"
		cp -v -f /home/distributions/linux_distro/'$DISTROFOLDER'/casper/initrd.* /home/tftpboot/'$NETBOOT'/images/'$DISTROFOLDER'/

		#Get vmlinuz
		VMLINUZ=`ls /home/distributions/linux_distro/'$DISTROFOLDER'/casper/vmlin* | sed -n 1,1p`
		VMLINUZ=`basename "$VMLINUZ"`
		cp -v -f /home/distributions/linux_distro/'$DISTROFOLDER'/casper/$VMLINUZ /home/tftpboot/'$NETBOOT'/images/'$DISTROFOLDER'/
		[ ! -f /home/tftpboot/'$NETBOOT'/preseed.cfg ] && cp /opt/karoshi/serversetup/modules/distributionserver/tftpboot/preseed/'$NETBOOT'-preseed.cfg /home/tftpboot/'$NETBOOT'/preseed.cfg

		cp -v -f /home/tftpboot/'$NETBOOT'/preseed.cfg /home/distributions/linux_distro/'$DISTROFOLDER'/casper/
		sed -i "s%CHANGETHISLOCALE%$LANG%" /home/distributions/linux_distro/'$DISTROFOLDER'/casper/preseed.cfg
		TIMEZONE=$(cat /etc/timezone)
		sed -i "s%CHANGETHISTIMEZONE%$TIMEZONE%" /home/distributions/linux_distro/'$DISTROFOLDER'/casper/preseed.cfg
		echo "</pre>"

		#Find which initrd
		INITRD=`ls /home/tftpboot/'$NETBOOT'/images/'$DISTROFOLDER'/initrd.* | sed -n 1,1p`
		INITRD=`basename "$INITRD"`


		#Create boot entry
		[ ! -d /home/tftpboot/'$NETBOOT'/menus ] && mkdir -p /home/tftpboot/'$NETBOOT'/menus

		echo "LABEL '$DISTROFOLDER'" > /home/tftpboot/'$NETBOOT'/menus/'$DISTROFOLDER'
		echo "	MENU LABEL ^'$DISTROFOLDER'" >> /home/tftpboot/'$NETBOOT'/menus/'$DISTROFOLDER'
		echo "	KERNEL images/'$DISTROFOLDER'/$VMLINUZ" >> /home/tftpboot/'$NETBOOT'/menus/'$DISTROFOLDER'
		echo "	append	boot=casper automatic-ubiquity netboot=nfs nfsroot='$DISTROSERVERIP':/home/distributions/linux_distro/'$DISTROFOLDER' initrd=images/'$DISTROFOLDER'/$INITRD file=/cdrom/casper/preseed.cfg priority=critical ip=dhcp  --" >> /home/tftpboot/'$NETBOOT'/menus/'$DISTROFOLDER'

		[ -f /home/tftpboot/'$NETBOOT'/ubuntu-installer/amd64/boot-screens/txt.cfg ] && rm -f /home/tftpboot/'$NETBOOT'/ubuntu-installer/amd64/boot-screens/txt.cfg
		if [ `ls -1 /home/tftpboot/'$NETBOOT'/menus/ | wc -l` -gt 0 ]
		then
			for MENUITEMS in /home/tftpboot/'$NETBOOT'/menus/*
			do
				MENUITEM=`basename $MENUITEMS`
				cat /home/tftpboot/'$NETBOOT'/menus/$MENUITEM >> /home/tftpboot/'$NETBOOT'/ubuntu-installer/amd64/boot-screens/txt.cfg
				echo >> /home/tftpboot/'$NETBOOT'/ubuntu-installer/amd64/boot-screens/txt.cfg
			done
		fi

		#Restart nfs server
		echo "<ul><li>"'$DISTRIBUTIONSERVER' - '$"Restarting NFS Server"'"</li></ul>"
		source /opt/karoshi/serversetup/variables/distro
		echo "<pre style=\"font-size: 10pt; font-family:Arial, Times, Georgia, serif\">"
		/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/nfs_stop
		sleep 1
		/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/nfs_start
		echo "</pre>"
		'

	fi
fi

if [ $CONTROL = delete ]
then
	#Delete iso from itadmin
	#[ -e /home/itadminshare/distributions/linux/"$DISTROCHOICE" ] && rm -f /home/itadminshare/distributions/linux/"$DISTROCHOICE"
	#Delete symlink
	[ -e /home/distributions/linux_iso/"$DISTROCHOICE" ] && rm -f /home/distributions/linux_iso/"$DISTROCHOICE"
	[ -e /home/distributions/linux_iso/"$DISTROCHOICE".netboot ] && rm -f /home/distributions/linux_iso/"$DISTROCHOICE".netboot

	if [ $DISTRIBUTIONSERVER = `hostname-fqdn` ]
	then
		NETBOOT=$(cat /home/distributions/linux_iso/$DISTROCHOICE.netboot)
		[ -d /home/tftpboot/$NETBOOT/images/"$DISTROFOLDER"/ ] && rm -f -R /home/tftpboot/$NETBOOT/images/"$DISTROFOLDER"/
		[ -e /home/tftpboot/$NETBOOT/menus/"$DISTROFOLDER" ] && rm -f /home/tftpboot/$NETBOOT/menus/"$DISTROFOLDER"
		[ -d /home/distributions/linux_distro/"$DISTROFOLDER" ] && rm -f -R /home/distributions/linux_distro/"$DISTROFOLDER"

		[ -f /home/tftpboot/$NETBOOT/ubuntu-installer/amd64/boot-screens/txt.cfg ] && rm -f /home/tftpboot/$NETBOOT/ubuntu-installer/amd64/boot-screens/txt.cfg
		if [ `ls -1 /home/tftpboot/$NETBOOT/menus/ | wc -l` -gt 0 ]
		then
			for MENUITEMS in /home/tftpboot/$NETBOOT/menus/*
			do
				MENUITEM=`basename $MENUITEMS`
				cat /home/tftpboot/$NETBOOT/menus/$MENUITEM >> /home/tftpboot/$NETBOOT/ubuntu-installer/amd64/boot-screens/txt.cfg
				echo >> /home/tftpboot/$NETBOOT/ubuntu-installer/amd64/boot-screens/txt.cfg
			done
		fi

		#Restart nfs server
		echo "<ul><li>"$DISTRIBUTIONSERVER - $"Restarting NFS Server""</li></ul>"
		source /opt/karoshi/serversetup/variables/distro
		echo "<pre style=\"font-size: 10pt; font-family:Arial, Times, Georgia, serif\">"
		/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/nfs_stop
		sleep 1
		/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/nfs_start
		echo "</pre>"
	else
		ssh -x -o PasswordAuthentication=no $DISTRIBUTIONSERVER '
		NETBOOT=$(cat /home/distributions/linux_iso/'$DISTROCHOICE'.netboot)
		[ -e /home/distributions/linux_iso/"'$DISTROCHOICE'" ] && rm -f /home/distributions/linux_iso/"'$DISTROCHOICE'"
		[ -e /home/distributions/linux_iso/"'$DISTROCHOICE'".netboot ] && rm -f /home/distributions/linux_iso/"'$DISTROCHOICE'".netboot
		[ -d /home/tftpboot/$NETBOOT/images/"'$DISTROFOLDER'"/ ] && rm -f -R /home/tftpboot/$NETBOOT/images/"'$DISTROFOLDER'"/
		[ -e /home/tftpboot/$NETBOOT/menus/"'$DISTROFOLDER'" ] && rm -f  /home/tftpboot/$NETBOOT/menus/"'$DISTROFOLDER'"
		[ -d /home/distributions/linux_distro/"'$DISTROFOLDER'" ] && rm -f -R /home/distributions/linux_distro/"'$DISTROFOLDER'"

		[ -f /home/tftpboot/'$NETBOOT'/ubuntu-installer/amd64/boot-screens/txt.cfg ] && rm -f /home/tftpboot/'$NETBOOT'/ubuntu-installer/amd64/boot-screens/txt.cfg
		if [ `ls -1 /home/tftpboot/'$NETBOOT'/menus/ | wc -l` -gt 0 ]
		then
			for MENUITEMS in /home/tftpboot/'$NETBOOT'/menus/*
			do
				MENUITEM=`basename $MENUITEMS`
				cat /home/tftpboot/'$NETBOOT'/menus/$MENUITEM >> /home/tftpboot/'$NETBOOT'/ubuntu-installer/amd64/boot-screens/txt.cfg
				echo >> /home/tftpboot/'$NETBOOT'/ubuntu-installer/amd64/boot-screens/txt.cfg
			done
		fi

		#Restart nfs server
		echo "<ul><li>"'$DISTRIBUTIONSERVER' - '$"Restarting NFS Server"'"</li></ul>"
		source /opt/karoshi/serversetup/variables/distro
		echo "<pre style=\"font-size: 10pt; font-family:Arial, Times, Georgia, serif\">"
		/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/nfs_stop
		sleep 1
		/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/nfs_start
		echo "</pre>"
		'
	fi
fi

exit

