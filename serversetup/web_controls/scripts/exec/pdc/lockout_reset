#!/bin/bash
#Copyright (C) 2007 Paul Sharrad

#This file is part of Karoshi Server.
#
#Karoshi Server is free software: you can redistribute it and/or modify
#it under the terms of the GNU Affero General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#Karoshi Server is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU Affero General Public License for more details.
#
#You should have received a copy of the GNU Affero General Public License
#along with Karoshi Server.  If not, see <http://www.gnu.org/licenses/>.

#
#The Karoshi Team can be contacted at: 
#mpsharrad@karoshi.org.uk
#jsharrad@karoshi.org.uk

#
#Website: http://www.karoshi.org.uk
LOG_DATE=$(date +%F)
########################
#Check md5checksum
########################
if ! test -f /opt/karoshi/web_controls/checksums/staff_checksums/lockout_reset_cgi
then
	echo "$(date): lockout_reset - No Staff MD5Checksum" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi
source /opt/karoshi/web_controls/checksums/staff_checksums/lockout_reset_cgi
MD5SUM=$(md5sum /var/www/cgi-bin_karoshi/staff/lockout_reset.cgi | cut -d' ' -f1)
[ -z "$MD5SUM" ] && MD5SUM=not_set
if [ "$MD5SUM"'check' != "$lockout_reset_cgi"'check' ]
then
	echo "$(date): lockout_reset - Incorrect Staff MD5Checksum" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi

if ! test -f /opt/karoshi/web_controls/checksums/admin_checksums/lockout_reset_cgi
then
	echo "$(date): lockout_reset - No Admin MD5Checksum" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi
source /opt/karoshi/web_controls/checksums/admin_checksums/lockout_reset_cgi
MD5SUM2=$(md5sum /var/www/cgi-bin_karoshi/admin/lockout_reset.cgi | cut -d' ' -f1)
[ -z "$MD5SUM2" ] && MD5SUM2=not_set
if [ "$MD5SUM2"'check' != "$lockout_reset_cgi"'check' ]
then
	echo "$(date): lockout_reset - Incorrect Admin MD5Checksum" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi

if ! test -f /opt/karoshi/web_controls/checksums/tech_checksums/lockout_reset_cgi
then
	echo "$(date): lockout_reset - No Tech MD5Checksum" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi
source /opt/karoshi/web_controls/checksums/tech_checksums/lockout_reset_cgi
MD5SUM3=$(md5sum /var/www/cgi-bin_karoshi/tech/lockout_reset.cgi | cut -d' ' -f1)
[ -z "$MD5SUM3" ] && MD5SUM3=not_set
if [ "$MD5SUM3"'check' != "$lockout_reset_cgi"'check' ]
then
	echo "$(date): lockout_reset - Incorrect Tech MD5Checksum" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi

########################
#Get variables
########################

read DATA
DATA=$(echo "$DATA" | tr -cd 'A-Za-z0-9\._:\-')
if [ -z "$DATA" ]
then
	echo "$(date): lockout_reset - no data" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi
REMOTE_USER=$(echo "$DATA" | cut -s -d: -f1)
REMOTE_ADDR=$(echo "$DATA" | cut -s -d: -f2)
REMOTE_MD5=$(echo "$DATA" | cut -s -d: -f3)
USERNAME=$(echo "$DATA" | cut -s -d: -f4)
########################
#Check data
########################
if [ "$REMOTE_MD5"'check' != "$MD5SUM"'check' ] && [ "$REMOTE_MD5"'check' != "$MD5SUM2"'check' ] && [ "$REMOTE_MD5"'check' != "$MD5SUM3"'check' ]
then
	echo "$(date): lockout_reset - Not called by lockout_reset.cgi" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi

if [ -z "$REMOTE_USER" ]
then
	echo "$(date): lockout_reset - Blank remote user" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi
if [ -z "$REMOTE_ADDR" ]
then
	echo "$(date): lockout_reset - Blank remote tcpip address" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi
if [ -z "$USERNAME" ]
then
	echo "$(date): lockout_reset - Blank username by $REMOTE_USER from $REMOTE_ADDR" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit
fi



LDAPPASS=$(sed -n 1,1p /etc/ldap.secret 2>>"/opt/karoshi/logs/karoshi_web_management/$LOG_DATE")
source /opt/karoshi/server_network/domain_information/domain_name

#Get the base dn of the user
USERDN=$(ldapsearch -o ldif-wrap=no -x -w "$LDAPPASS" -b "OU=People,$LDAPBASE" -D "cn=Administrator,cn=Users,$LDAPBASE" cn="$USERNAME" | grep ^dn:)

#Reset the lockout on any domain controllers - this is just in case we have slow replication.
function adc_lockout_reset {
for DOMAIN_CONTROLLER in $(ls -1 /opt/karoshi/server_network/zones/"$ZONE"/additional_domain_controllers)
do
	echo "$(date): lockout_reset - Resetting $USERNAME on $DOMAIN_CONTROLLER by $REMOTE_USER from $REMOTE_ADDR" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	ssh -o PasswordAuthentication=no -o ConnectTimeout=3 "$DOMAIN_CONTROLLER" '
	echo -e "'"$USERDN"'\nchangetype: modify\nreplace: badPwdCount\nbadPwdCount: 0\n-\nreplace: badPasswordTime\nbadPasswordTime: 0\n-\nreplace: lockoutTime\nlockoutTime: 0\n-" | ldapmodify -x -w '"$LDAPPASS"' -D "cn=Administrator,cn=Users,'"$LDAPBASE"'" 1>/dev/null
	'
done
}

#Reset the lockout on Internal zone domain controllers
if [ -d /opt/karoshi/server_network/zones/internal/additional_domain_controllers ]
then
	ZONE=internal
	adc_lockout_reset
fi

#Reset the lockout on dmz domain controllers
if [ -d /opt/karoshi/server_network/zones/dmz/additional_domain_controllers ]
then
	ZONE=dmz
	adc_lockout_reset
fi

#Reset the lockout on the pdc
echo "$(date): lockout_reset - Resetting $USERNAME on $(hostname-fqdn) by $REMOTE_USER from $REMOTE_ADDR" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
echo -e "$USERDN\nchangetype: modify\nreplace: badPwdCount\nbadPwdCount: 0\n-\nreplace: badPasswordTime\nbadPasswordTime: 0\n-\nreplace: lockoutTime\nlockoutTime: 0\n-" | ldapmodify -x -w "$LDAPPASS" -D "cn=Administrator,cn=Users,$LDAPBASE" 1>/dev/null 2>>"/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
exit
