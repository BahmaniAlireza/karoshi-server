#!/bin/bash
#Copyright (C) 2010 Paul Sharrad

#This file is part of Karoshi Server.
#
#Karoshi Server is free software: you can redistribute it and/or modify
#it under the terms of the GNU Affero General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#Karoshi Server is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU Affero General Public License for more details.
#
#You should have received a copy of the GNU Affero General Public License
#along with Karoshi Server.  If not, see <http://www.gnu.org/licenses/>.

#
#The Karoshi Team can be contacted at: 
#mpsharrad@karoshi.org.uk
#jsharrad@karoshi.org.uk

#
#Website: http://www.karoshi.org.uk
LOG_DATE=$(date +%F)
[ -z "$LOG_DATE" ] && exit
########################
#Check md5checksum
########################
if ! test -f /opt/karoshi/web_controls/checksums/admin_checksums/module_distributionserver_cgi
then
	echo "$(date): module_distributionserver - No Checksum" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi
source /opt/karoshi/web_controls/checksums/admin_checksums/module_distributionserver_cgi
Checksum=$(sha256sum /var/www/cgi-bin_karoshi/admin/module_distributionserver.cgi | cut -d' ' -f1)
[ -z "$Checksum" ] && Checksum=not_set
if [ "$Checksum"'check' != "$module_distributionserver_cgi"'check' ]
then
	echo "$(date): module_distributionserver - Incorrect Checksum" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi

########################
#Get variables
########################
numArgs=$#
if [ "$numArgs" != 0 ]
then
	echo "$(date): module_distributionserver - incorrect number of arguments" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi

read DATA
DATA=$(echo "$DATA" | tr -cd 'A-Za-z0-9\._:%\n-+-')
if [ -z "$DATA" ]
then
	echo "$(date): module_distributionserver - no data" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi
REMOTE_USER=$(echo "$DATA" | cut -s -d: -f1)
REMOTE_ADDR=$(echo "$DATA" | cut -s -d: -f2)
RemoteCheckSum=$(echo "$DATA" | cut -s -d: -f3)
SERVERNAME=$(echo "$DATA" | cut -s -d: -f4)
########################
#Check data
########################
if [ "$RemoteCheckSum"'check' != "$Checksum"'check' ]
then
	echo "$(date): module_distributionserver - Not called by module_distributionserver.cgi" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi
if [ -z "$REMOTE_USER" ]
then
	echo "$(date): module_distributionserver - Blank remote user" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi
if [ -z "$REMOTE_ADDR" ]
then
	echo "$(date): module_distributionserver - Blank remote tcpip address" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi
if [ -z "$SERVERNAME" ]
then
	echo "$(date): module_distributionserver - Blank servername by $REMOTE_USER from $REMOTE_ADDR" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi

echo "$(date): module_distributionserver - Setting up $SERVERNAME by $REMOTE_USER from $REMOTE_ADDR" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"

#Copy in language files
#Copy in module
#scp -p -r /opt/karoshi/serversetup/modules/fileserver root@$SERVERNAME:/opt/karoshi/serversetup/modules/ 1> /dev/null

##########################
#Language
##########################

STYLESHEET=defaultstyle.css
[ -f /opt/karoshi/web_controls/user_prefs/"$REMOTE_USER" ] && source /opt/karoshi/web_controls/user_prefs/"$REMOTE_USER"
export TEXTDOMAIN=karoshi-server

#Make sure the folders exist

if [ ! -d /home/itadminshare/distributions/linux ]
then
	mkdir -p /home/itadminshare/distributions/linux
	chown root.itadmin /home/itadminshare/distributions/linux
	chmod 0770 /home/itadminshare/distributions/linux
fi

if [ ! -d /home/itadminshare/distributions/windows ]
then
	mkdir -p /home/itadminshare/distributions/windows
	chown root.itadmin /home/itadminshare/distributions/windows
	chmod 0770 /home/itadminshare/distributions/windows
fi


DISTROSERVERIP=$(net lookup "$SERVERNAME")
source /opt/karoshi/serversetup/variables/distro
##########################
#Make sure software is installed
##########################
if [[ "$SERVERNAME" = $(hostname-fqdn) ]]
then
	/opt/karoshi/serversetup/distro/"$DISTROCHOICE"/modules/distributionserver/software

	#########################
	#Configure tftpboot
	#########################

	if [ ! -d /home/tftpboot ]
	then
		mkdir -p /home/tftpboot
		chmod 0755 /home/tftpboot
	fi

	echo \# /etc/default/tftpd-hpa > /etc/default/tftpd-hpa
	echo OPTIONS=\"-l -s /home/tftpboot\" >> /etc/default/tftpd-hpa
	echo TFTP_USERNAME=\"tftp\" >> /etc/default/tftpd-hpa
	echo TFTP_DIRECTORY=\"/home/tftpboot\" >> /etc/default/tftpd-hpa
	echo TFTP_ADDRESS=\"0.0.0.0:69\" >> /etc/default/tftpd-hpa
	echo TFTP_OPTIONS=\"-4 --secure\" >> /etc/default/tftpd-hpa

	#Extract all netboot variants
	for DISTROVERSIONS in $(ls -1 /opt/karoshi/serversetup/modules/distributionserver/tftpboot/netboot*.tar.gz)
	do
		DISTROVERSION=$(basename "$DISTROVERSIONS" | sed 's/^netboot-//g' | sed 's/.tar.gz$//g')
		mkdir -p /home/tftpboot/"$DISTROVERSION"
		tar -xvzf /opt/karoshi/serversetup/modules/distributionserver/tftpboot/netboot-"$DISTROVERSION".tar.gz -C /home/tftpboot/"$DISTROVERSION" 1>/dev/null

		#Copy in splash
		cp -f /opt/karoshi/serversetup/modules/distributionserver/tftpboot/splash.png /home/tftpboot/"$DISTROVERSION"/ubuntu-installer/amd64/boot-screens/

		#Remove message that would appear at the bottom of the screen.
		sed -i "s/Press ENTER to boot or TAB to edit a menu entry//g" /home/tftpboot/"$DISTROVERSION"/ubuntu-installer/amd64/boot-screens/stdmenu.cfg
	done

	echo "<ul><li>"Restarting tftpd"</li></ul>"

	/opt/karoshi/serversetup/distro/ubuntu/scripts/control_services/tftpd_stop 1>/dev/null
	sleep 1
	/opt/karoshi/serversetup/distro/ubuntu/scripts/control_services/tftpd_start 1>/dev/null

	#Start portmap
	/opt/karoshi/serversetup/distro/ubuntu/scripts/control_services/rpcbind_start 1>/dev/null
	sleep 1
	#########################
	#Configure nfs
	#########################
	if [ ! -d /home/distributions/linux_distro ]
	then
		mkdir -p /home/distributions/linux_distro
		chmod 0755 /home/distributions/linux_distro
	fi

	#Modify /etc/exports
	touch /etc/exports
	if [ $(grep -c /home/distributions/linux_distro /etc/exports) = 0 ]
	then
		echo '<ul><li>'$"Modifying"' /etc/exports</li></ul>'
		echo "/home/distributions/linux_distro *(fsid=0,insecure,no_root_squash,sync,ro,no_subtree_check)" >> /etc/exports
	fi
	echo '<ul><li>'$"Restarting"' nfs</li></ul>'
	/opt/karoshi/serversetup/distro/ubuntu/scripts/control_services/nfs_stop 1>/dev/null
	sleep 1
	/opt/karoshi/serversetup/distro/ubuntu/scripts/control_services/nfs_start 1>/dev/null

	###########################
	#Open shorewall ports
	###########################
	RESTART_SHOREWALL=no
	MODCHECK=$(grep -c -w \#tftp_server_rule /etc/shorewall/rules)
	if [ "$MODCHECK" = 0 ]
	then
		RESTART_SHOREWALL=yes
		echo '<ul><li>'$"The following extra ports are being allowed"' - tcp 69</li></ul>'
		LINENUM=$(grep -n "LAST LINE -- ADD YOUR ENTRIES BEFORE THIS ONE -- DO NOT REMOVE" /etc/shorewall/rules | cut -d: -f1)
		sed -i "$LINENUM""cACCEPT	net	fw	udp	69	-#tftp_server_rule" /etc/shorewall/rules
		echo "#LAST LINE -- ADD YOUR ENTRIES BEFORE THIS ONE -- DO NOT REMOVE" >> /etc/shorewall/rules
	fi

	MODCHECK=$(grep -c -w \#nfs_server_rule /etc/shorewall/rules)
	if [ "$MODCHECK" = 0 ]
	then
		RESTART_SHOREWALL=yes
		echo '<ul><li>'$"The following extra ports are being allowed"' - tcp 2049</li></ul>'
		LINENUM=$(grep -n "LAST LINE -- ADD YOUR ENTRIES BEFORE THIS ONE -- DO NOT REMOVE" /etc/shorewall/rules | cut -d: -f1)
		sed -i "$LINENUM""cACCEPT	net	fw	tcp	2049	-#nfs_server_rule" /etc/shorewall/rules
		echo "#LAST LINE -- ADD YOUR ENTRIES BEFORE THIS ONE -- DO NOT REMOVE" >> /etc/shorewall/rules
	fi

	MODCHECK=$(grep -c -w \#portmap_server_rule /etc/shorewall/rules)
	if [ "$MODCHECK" = 0 ]
	then
		RESTART_SHOREWALL=yes
		echo "<ul><li>$SHOREWALLMSG - tcp 111</li></ul>"
		LINENUM=$(grep -n "LAST LINE -- ADD YOUR ENTRIES BEFORE THIS ONE -- DO NOT REMOVE" /etc/shorewall/rules | cut -d: -f1)
		sed -i "$LINENUM""cACCEPT	net	fw	tcp	111	-#portmap_server_rule" /etc/shorewall/rules
		echo "#LAST LINE -- ADD YOUR ENTRIES BEFORE THIS ONE -- DO NOT REMOVE" >> /etc/shorewall/rules
	fi

	MODCHECK=$(grep -c -w \#mountd_server_rule /etc/shorewall/rules)
	if [ "$MODCHECK" = 0 ]
	then
		RESTART_SHOREWALL=yes
		echo '<ul><li>'$"The following extra ports are being allowed"' - tcp 33777</li></ul>'
		LINENUM=$(grep -n "LAST LINE -- ADD YOUR ENTRIES BEFORE THIS ONE -- DO NOT REMOVE" /etc/shorewall/rules | cut -d: -f1)
		sed -i "$LINENUM""cACCEPT	net	fw	tcp	33777	-#mountd_server_rule" /etc/shorewall/rules
		echo "#LAST LINE -- ADD YOUR ENTRIES BEFORE THIS ONE -- DO NOT REMOVE" >> /etc/shorewall/rules
	fi

	######################
	#Restart shorewall
	######################
	if [ "$RESTART_SHOREWALL" = yes ]
	then
		echo '<ul><li>'$"Restarting"' shorewall</li></ul>'
		/opt/karoshi/serversetup/distro/"$DISTROCHOICE"/scripts/control_services/shorewall_stop 1>/dev/null
		/opt/karoshi/serversetup/distro/"$DISTROCHOICE"/scripts/control_services/shorewall_start 1>/dev/null
	fi

	#Ensure services start on boot
	/opt/karoshi/serversetup/distro/"$DISTROCHOICE"/scripts/startonboot/nfs
	/opt/karoshi/serversetup/distro/"$DISTROCHOICE"/scripts/startonboot/tftpd
	/opt/karoshi/serversetup/distro/"$DISTROCHOICE"/scripts/startonboot/rpcbind
else

	scp -r /opt/karoshi/serversetup/modules/distributionserver/tftpboot root@"$SERVERNAME:/opt/karoshi/serversetup/modules/distributionserver/"

	ssh -x -o PasswordAuthentication=no "$SERVERNAME" '

	##########################
	#Make sure software is installed
	##########################

	source /opt/karoshi/serversetup/variables/distro
	/opt/karoshi/serversetup/distro/$DISTROCHOICE/modules/distributionserver/software

	#########################
	#Configure tftpboot
	#########################

	if [ ! -d /home/tftpboot ]
	then
		mkdir -p /home/tftpboot
		chmod 0755 /home/tftpboot
	fi

	echo \# /etc/default/tftpd-hpa > /etc/default/tftpd-hpa
	echo OPTIONS=\"-l -s /home/tftpboot\" >> /etc/default/tftpd-hpa
	echo TFTP_USERNAME=\"tftp\" >> /etc/default/tftpd-hpa
	echo TFTP_DIRECTORY=\"/home/tftpboot\" >> /etc/default/tftpd-hpa
	echo TFTP_ADDRESS=\"0.0.0.0:69\" >> /etc/default/tftpd-hpa
	echo TFTP_OPTIONS=\"-4 --secure\" >> /etc/default/tftpd-hpa

	#Extract all netboot variants
	for DISTROVERSIONS in $(ls -1 /opt/karoshi/serversetup/modules/distributionserver/tftpboot/netboot*.tar.gz)
	do
		DISTROVERSION=$(basename $DISTROVERSIONS | sed "s/^netboot-//g" | sed "s/.tar.gz$//g")
		mkdir -p /home/tftpboot/$DISTROVERSION
		tar -xvzf /opt/karoshi/serversetup/modules/distributionserver/tftpboot/netboot-$DISTROVERSION.tar.gz -C /home/tftpboot/$DISTROVERSION 1>/dev/null

		#Copy in splash
		cp -f /opt/karoshi/serversetup/modules/distributionserver/tftpboot/splash.png /home/tftpboot/$DISTROVERSION/ubuntu-installer/amd64/boot-screens/

		#Remove message that would appear at the bottom of the screen.
		sed -i "s/Press ENTER to boot or TAB to edit a menu entry//g" /home/tftpboot/$DISTROVERSION/ubuntu-installer/amd64/boot-screens/stdmenu.cfg
	done

	echo "<ul><li>"Restarting tftpd"</li></ul>"

	/opt/karoshi/serversetup/distro/"$DISTROCHOICE"/scripts/control_services/tftpd_stop 1>/dev/null
	sleep 1
	/opt/karoshi/serversetup/distro/"$DISTROCHOICE"/scripts/control_services/tftpd_start 1>/dev/null

	#Start portmap
	/opt/karoshi/serversetup/distro/ubuntu/scripts/control_services/rpcbind_start 1>/dev/null
	sleep 1

	#########################
	#Configure nfs
	#########################
	if [ ! -d /home/distributions/linux_distro ]
	then
		mkdir -p /home/distributions/linux_distro
		chmod 0755 /home/distributions/linux_distro
	fi

	#Modify /etc/exports
	touch /etc/exports
	if [ $(grep -c /home/distributions/linux_distro /etc/exports) = 0 ]
	then
		echo "<ul><li>"Modifying /etc/exports"</li></ul>"
		echo "/home/distributions/linux_distro *(fsid=0,insecure,no_root_squash,sync,ro,no_subtree_check)" >> /etc/exports
	fi
	echo "<ul><li>"Restarting nfs"</li></ul>"
	/opt/karoshi/serversetup/distro/"$DISTROCHOICE"/scripts/control_services/nfs_stop 1>/dev/null
	sleep 1
	/opt/karoshi/serversetup/distro/"$DISTROCHOICE"/scripts/control_services/nfs_start 1>/dev/null

	###########################
	#Open shorewall ports
	###########################
	RESTART_SHOREWALL=no
	MODCHECK=`grep -c -w \#tftp_server_rule /etc/shorewall/rules`
	if [ $MODCHECK = 0 ]
	then
		RESTART_SHOREWALL=yes
		echo "<ul><li>'$"The following extra ports are being allowed"' - tcp 69</li></ul>"
		LINENUM=`grep -n "LAST LINE -- ADD YOUR ENTRIES BEFORE THIS ONE -- DO NOT REMOVE" /etc/shorewall/rules | cut -d: -f1`
		sed -i $LINENUM"c"\ACCEPT"	"net"	"fw"	"udp"	"69"	"-"#"tftp_server_rule /etc/shorewall/rules
		echo "#"LAST LINE -- ADD YOUR ENTRIES BEFORE THIS ONE -- DO NOT REMOVE >> /etc/shorewall/rules
	fi

	MODCHECK=`grep -c -w \#nfs_server_rule /etc/shorewall/rules`
	if [ $MODCHECK = 0 ]
	then
		RESTART_SHOREWALL=yes
		echo "<ul><li>'$"The following extra ports are being allowed"' - tcp 2049</li></ul>"
		LINENUM=`grep -n "LAST LINE -- ADD YOUR ENTRIES BEFORE THIS ONE -- DO NOT REMOVE" /etc/shorewall/rules | cut -d: -f1`
		sed -i $LINENUM"c"\ACCEPT"	"net"	"fw"	"tcp"	"2049"	"-"#"nfs_server_rule /etc/shorewall/rules
		echo "#"LAST LINE -- ADD YOUR ENTRIES BEFORE THIS ONE -- DO NOT REMOVE >> /etc/shorewall/rules
	fi

	MODCHECK=`grep -c -w \#portmap_server_rule /etc/shorewall/rules`
	if [ $MODCHECK = 0 ]
	then
		RESTART_SHOREWALL=yes
		echo "<ul><li>'$"The following extra ports are being allowed"' - tcp 111</li></ul>"
		LINENUM=`grep -n "LAST LINE -- ADD YOUR ENTRIES BEFORE THIS ONE -- DO NOT REMOVE" /etc/shorewall/rules | cut -d: -f1`
		sed -i $LINENUM"c"\ACCEPT"	"net"	"fw"	"tcp"	"111"	"-"#"portmap_server_rule /etc/shorewall/rules
		echo "#"LAST LINE -- ADD YOUR ENTRIES BEFORE THIS ONE -- DO NOT REMOVE >> /etc/shorewall/rules
	fi

	MODCHECK=`grep -c -w \#mountd_server_rule /etc/shorewall/rules`
	if [ $MODCHECK = 0 ]
	then
		RESTART_SHOREWALL=yes
		echo "<ul><li>'$"The following extra ports are being allowed"' - tcp 33777</li></ul>"
		LINENUM=`grep -n "LAST LINE -- ADD YOUR ENTRIES BEFORE THIS ONE -- DO NOT REMOVE" /etc/shorewall/rules | cut -d: -f1`
		sed -i $LINENUM"c"\ACCEPT"	"net"	"fw"	"tcp"	"33777"	"-"#"mountd_server_rule /etc/shorewall/rules
		echo "#"LAST LINE -- ADD YOUR ENTRIES BEFORE THIS ONE -- DO NOT REMOVE >> /etc/shorewall/rules
	fi

	######################
	#Restart shorewall
	######################
	if [ $RESTART_SHOREWALL = yes ]
	then
		echo "<ul><li>"'$"Restarting shorewall"'"</li></ul>"
		/opt/karoshi/serversetup/distro/"$DISTROCHOICE"/scripts/control_services/shorewall_stop 1>/dev/null
		/opt/karoshi/serversetup/distro/"$DISTROCHOICE"/scripts/control_services/shorewall_start 1>/dev/null
	fi

	#Ensure services start on boot
	/opt/karoshi/serversetup/distro/"$DISTROCHOICE"/scripts/startonboot/nfs
	/opt/karoshi/serversetup/distro/"$DISTROCHOICE"/scripts/startonboot/tftpd
	/opt/karoshi/serversetup/distro/"$DISTROCHOICE"/scripts/startonboot/rpcbind

	'
fi

#Add role information
[ ! -d /opt/karoshi/server_network/servers/"$SERVERNAME" ] && mkdir -p /opt/karoshi/server_network/servers/"$SERVERNAME"
echo $"Distribution Server""<br>" > /opt/karoshi/server_network/servers/"$SERVERNAME"/distributionserver
[ -f /opt/karoshi/server_network/servers/"$SERVERNAME"/no_role ] && rm -f /opt/karoshi/server_network/servers/"$SERVERNAME"/no_role
echo "$SERVERNAME" > /opt/karoshi/server_network/distribution_server

sed -i 's/DISTROCTRL=no/DISTROCTRL=yes/g' /opt/karoshi/server_network/web_controls/menusettings

#Show completed message
echo '<ul><li>'$"Setup Distribution Server"' - '$"Completed"'</li></ul>'

