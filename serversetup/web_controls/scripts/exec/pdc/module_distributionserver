#!/bin/bash
#Copyright (C) 2010 Paul Sharrad

#This file is part of Karoshi Server.
#
#Karoshi Server is free software: you can redistribute it and/or modify
#it under the terms of the GNU Affero General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#Karoshi Server is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU Affero General Public License for more details.
#
#You should have received a copy of the GNU Affero General Public License
#along with Karoshi Server.  If not, see <http://www.gnu.org/licenses/>.

#
#The Karoshi Team can be contacted at: 
#mpsharrad@karoshi.org.uk
#jsharrad@karoshi.org.uk

#
#Website: http://www.karoshi.org.uk
LOG_DATE=`date +%F`
[ $LOG_DATE'null' = null ] && exit
########################
#Check md5checksum
########################
if ! test -f /opt/karoshi/web_controls/checksums/admin_checksums/module_distributionserver_cgi
then
echo `date`: module_distributionserver - No MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
source /opt/karoshi/web_controls/checksums/admin_checksums/module_distributionserver_cgi
MD5SUM=`md5sum /var/www/cgi-bin_karoshi/admin/module_distributionserver.cgi | cut -d' ' -f1`
[ $MD5SUM'null' = null ] && MD5SUM=not_set
if [ $MD5SUM'check' != $module_distributionserver_cgi'check' ]
then
echo `date`: module_distributionserver - Incorrect MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi

########################
#Get variables
########################
numArgs=$#
if [ $numArgs != 0 ]
then
echo `date`: module_distributionserver - incorrect number of arguments >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi

read DATA
DATA=`echo $DATA | tr -cd 'A-Za-z0-9\._:%\n-+-'`
if [ $DATA'null' = null ]
then
echo `date`: module_distributionserver - no data >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
REMOTE_USER=`echo "$DATA" | cut -s -d: -f1`
REMOTE_ADDR=`echo "$DATA" | cut -s -d: -f2`
REMOTE_MD5=`echo "$DATA" | cut -s -d: -f3`
SERVERNAME=`echo "$DATA" | cut -s -d: -f4`
########################
#Check data
########################
if [ $REMOTE_MD5'check' != $MD5SUM'check' ]
then
echo `date`: module_distributionserver - Not called by module_distributionserver.cgi >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
if [ $REMOTE_USER'null' = null ]
then
echo `date`: module_distributionserver - Blank remote user >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
if [ $REMOTE_ADDR'null' = null ]
then
echo `date`: module_distributionserver - Blank remote tcpip address >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
if [ $SERVERNAME'null' = null ]
then
echo `date`: module_distributionserver - Blank servername by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi


echo `date`: module_distributionserver - Setting up $SERVERNAME by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE

#Copy in language files
#scp -p -r /opt/karoshi/serversetup/language/$LANGCHOICE/modules/fileserver root@$SERVERNAME:/opt/karoshi/serversetup/language/$LANGCHOICE/modules/ 1> /dev/null
#Copy in module
#scp -p -r /opt/karoshi/serversetup/modules/fileserver root@$SERVERNAME:/opt/karoshi/serversetup/modules/ 1> /dev/null

##########################
#Language
##########################
LANGCHOICE=englishuk
STYLESHEET=defaultstyle.css
[ -f /opt/karoshi/web_controls/user_prefs/$REMOTE_USER ] && source /opt/karoshi/web_controls/user_prefs/$REMOTE_USER
[ -f /opt/karoshi/serversetup/language/$LANGCHOICE/modules/distributionserver/setupdistributionserver ] || LANGCHOICE=englishuk
source /opt/karoshi/serversetup/language/$LANGCHOICE/modules/distributionserver/setupdistributionserver
[ -f /opt/karoshi/web_controls/language/$LANGCHOICE/all ] || LANGCHOICE=englishuk
source /opt/karoshi/web_controls/language/$LANGCHOICE/all

#Make sure the folders exist

if [ ! -d /home/itadminshare/distributions/linux ]
then
mkdir -p /home/itadminshare/distributions/linux
chown root.itadmin /home/itadminshare/distributions/linux
chmod 0770 /home/itadminshare/distributions/linux
fi

if [ ! -d /home/itadminshare/distributions/windows ]
then
mkdir -p /home/itadminshare/distributions/windows
chown root.itadmin /home/itadminshare/distributions/windows
chmod 0770 /home/itadminshare/distributions/windows
fi


DISTROSERVERIP=`net lookup $SERVERNAME`
source /opt/karoshi/serversetup/variables/distro
##########################
#Make sure software is installed
##########################
if [ $SERVERNAME = `hostname-fqdn` ]
then
/opt/karoshi/serversetup/distro/$DISTROCHOICE/modules/distributionserver/software

#########################
#Configure tftpboot
#########################

if [ ! -d /home/tftpboot ]
then
mkdir -p /home/tftpboot
chmod 0755 /home/tftpboot
fi

echo \# /etc/default/tftpd-hpa > /etc/default/tftpd-hpa
echo OPTIONS=\"-l -s /home/tftpboot\" >> /etc/default/tftpd-hpa
echo TFTP_USERNAME=\"tftp\" >> /etc/default/tftpd-hpa
echo TFTP_DIRECTORY=\"/home/tftpboot\" >> /etc/default/tftpd-hpa
echo TFTP_ADDRESS=\"0.0.0.0:69\" >> /etc/default/tftpd-hpa
echo TFTP_OPTIONS=\"--secure\" >> /etc/default/tftpd-hpa

cp -f -R /opt/karoshi/serversetup/modules/distributionserver/tftpboot/ /home/
cd /home/tftpboot
tar -xvf netboot.tar.gz 1>/dev/null
rm netboot.tar.gz
cp -f /home/tftpboot/splash.png /home/tftpboot/ubuntu-installer/i386/boot-screens/
rm -f /home/tftpboot/splash.png
cp -f /home/tftpboot/menu.cfg /home/tftpboot/ubuntu-installer/i386/boot-screens/
rm -f /home/tftpboot/menu.cfg
cp -f /home/tftpboot/stdmenu.cfg /home/tftpboot/ubuntu-installer/i386/boot-screens/
rm -f /home/tftpboot/stdmenu.cfg

echo "<br><li>"Restarting tftpd"</li><br>"

/opt/karoshi/serversetup/distro/ubuntu/scripts/control_services/tftpd_stop
sleep 1
/opt/karoshi/serversetup/distro/ubuntu/scripts/control_services/tftpd_start


#Start portmap
/opt/karoshi/serversetup/distro/ubuntu/scripts/control_services/rpcbind_start
sleep 1
#########################
#Configure nfs
#########################
if [ ! -d /home/distributions/linux_distro ]
then
mkdir -p /home/distributions/linux_distro
chmod 0755 /home/distributions/linux_distro
fi

#Modify /etc/exports
touch /etc/exports
if [ `grep -c /home/distributions/linux_distro /etc/exports` = 0 ]
then
echo "<br><li>"Modifying /etc/exports"</li><br>"
echo "/home/distributions/linux_distro *(fsid=0,insecure,no_root_squash,sync,ro,no_subtree_check)" >> /etc/exports
fi
echo "<br><li>"Restarting nfs"</li><br>"
/opt/karoshi/serversetup/distro/ubuntu/scripts/control_services/nfs_stop
sleep 1
/opt/karoshi/serversetup/distro/ubuntu/scripts/control_services/nfs_start

#Modify ip
sed -i "s/CHANGETHISIP/$DISTROSERVERIP/g" /home/tftpboot/pxelinux.cfg/default

###########################
#Open shorewall ports
###########################
RESTART_SHOREWALL=no
MODCHECK=`grep -c -w \#tftp_server_rule /etc/shorewall/rules`
if [ $MODCHECK = 0 ]
then
RESTART_SHOREWALL=yes
echo "<br><li>$SHOREWALLMSG - tcp 69</li><br>"
LINENUM=`grep -n "LAST LINE -- ADD YOUR ENTRIES BEFORE THIS ONE -- DO NOT REMOVE" /etc/shorewall/rules | cut -d: -f1`
sed -i $LINENUM"c"\ACCEPT"	"net"	"fw"	"udp"	"69"	"-"#"tftp_server_rule /etc/shorewall/rules
echo "#"LAST LINE -- ADD YOUR ENTRIES BEFORE THIS ONE -- DO NOT REMOVE >> /etc/shorewall/rules
fi

MODCHECK=`grep -c -w \#nfs_server_rule /etc/shorewall/rules`
if [ $MODCHECK = 0 ]
then
RESTART_SHOREWALL=yes
echo "<br><li>$SHOREWALLMSG - tcp 2049</li><br>"
LINENUM=`grep -n "LAST LINE -- ADD YOUR ENTRIES BEFORE THIS ONE -- DO NOT REMOVE" /etc/shorewall/rules | cut -d: -f1`
sed -i $LINENUM"c"\ACCEPT"	"net"	"fw"	"tcp"	"2049"	"-"#"nfs_server_rule /etc/shorewall/rules
echo "#"LAST LINE -- ADD YOUR ENTRIES BEFORE THIS ONE -- DO NOT REMOVE >> /etc/shorewall/rules
fi

MODCHECK=`grep -c -w \#portmap_server_rule /etc/shorewall/rules`
if [ $MODCHECK = 0 ]
then
RESTART_SHOREWALL=yes
echo "<br><li>$SHOREWALLMSG - tcp 111</li><br>"
LINENUM=`grep -n "LAST LINE -- ADD YOUR ENTRIES BEFORE THIS ONE -- DO NOT REMOVE" /etc/shorewall/rules | cut -d: -f1`
sed -i $LINENUM"c"\ACCEPT"	"net"	"fw"	"tcp"	"111"	"-"#"portmap_server_rule /etc/shorewall/rules
echo "#"LAST LINE -- ADD YOUR ENTRIES BEFORE THIS ONE -- DO NOT REMOVE >> /etc/shorewall/rules
fi

MODCHECK=`grep -c -w \#mountd_server_rule /etc/shorewall/rules`
if [ $MODCHECK = 0 ]
then
RESTART_SHOREWALL=yes
echo "<br><li>$SHOREWALLMSG - tcp 33777</li><br>"
LINENUM=`grep -n "LAST LINE -- ADD YOUR ENTRIES BEFORE THIS ONE -- DO NOT REMOVE" /etc/shorewall/rules | cut -d: -f1`
sed -i $LINENUM"c"\ACCEPT"	"net"	"fw"	"tcp"	"33777"	"-"#"mountd_server_rule /etc/shorewall/rules
echo "#"LAST LINE -- ADD YOUR ENTRIES BEFORE THIS ONE -- DO NOT REMOVE >> /etc/shorewall/rules
fi

######################
#Restart shorewall
######################
if [ $RESTART_SHOREWALL = yes ]
then
echo "<br><li>"$RESTARTSWMSG"</li><br>"
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/shorewall_stop
echo "<br>"
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/shorewall_start
echo "<br><br>"
fi

#Ensure services start on boot
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/startonboot/nfs
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/startonboot/tftpd
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/startonboot/portmap
else

#Copy in start on boot files
scp -p -r /opt/karoshi/serversetup/distro/ubuntu/scripts/control_services root@$SERVERNAME:/opt/karoshi/serversetup/distro/ubuntu/scripts/ 1> /dev/null
#Copy in distro module
scp -p -r /opt/karoshi/serversetup/distro/ubuntu/modules/distributionserver root@$SERVERNAME:/opt/karoshi/serversetup/distro/ubuntu/modules/ 1> /dev/null
#Remove existing module
ssh -o PasswordAuthentication=no -o ConnectTimeout=3 $SERVERNAME '
rm -f -R /opt/karoshi/serversetup/modules/distributionserver
'
#Copy in module
scp -p -r /opt/karoshi/serversetup/modules/distributionserver root@$SERVERNAME:/opt/karoshi/serversetup/modules/ 1> /dev/null

ssh -x -o PasswordAuthentication=no $SERVERNAME '

##########################
#Make sure software is installed
##########################

source /opt/karoshi/serversetup/variables/distro
/opt/karoshi/serversetup/distro/$DISTROCHOICE/modules/distributionserver/software

#########################
#Configure tftpboot
#########################

if [ ! -d /home/tftpboot ]
then
mkdir -p /home/tftpboot
chmod 0755 /home/tftpboot
fi

echo \# /etc/default/tftpd-hpa > /etc/default/tftpd-hpa
echo OPTIONS=\"-l -s /home/tftpboot\" >> /etc/default/tftpd-hpa
echo TFTP_USERNAME=\"tftp\" >> /etc/default/tftpd-hpa
echo TFTP_DIRECTORY=\"/home/tftpboot\" >> /etc/default/tftpd-hpa
echo TFTP_ADDRESS=\"0.0.0.0:69\" >> /etc/default/tftpd-hpa
echo TFTP_OPTIONS=\"--secure\" >> /etc/default/tftpd-hpa

cp -f -R /opt/karoshi/serversetup/modules/distributionserver/tftpboot /home/
cd /home/tftpboot
tar -xvf netboot.tar.gz 1>/dev/null
rm netboot.tar.gz
cp -f /home/tftpboot/splash.png /home/tftpboot/ubuntu-installer/i386/boot-screens/
rm -f /home/tftpboot/splash.png
cp -f /home/tftpboot/menu.cfg /home/tftpboot/ubuntu-installer/i386/boot-screens/
rm -f /home/tftpboot/menu.cfg
cp -f /home/tftpboot/stdmenu.cfg /home/tftpboot/ubuntu-installer/i386/boot-screens/
rm -f /home/tftpboot/stdmenu.cfg

echo "<br><li>"Restarting tftpd"</li><br>"

/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/tftpd_stop
sleep 1
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/tftpd_start

#Start portmap
/opt/karoshi/serversetup/distro/ubuntu/scripts/control_services/rpcbind_start
sleep 1

#########################
#Configure nfs
#########################
if [ ! -d /home/distributions/linux_distro ]
then
mkdir -p /home/distributions/linux_distro
chmod 0755 /home/distributions/linux_distro
fi

#Modify /etc/exports
touch /etc/exports
if [ `grep -c /home/distributions/linux_distro /etc/exports` = 0 ]
then
echo "<br><li>"Modifying /etc/exports"</li><br>"
echo "/home/distributions/linux_distro *(fsid=0,insecure,no_root_squash,sync,ro,no_subtree_check)" >> /etc/exports
fi
echo "<br><li>"Restarting nfs"</li><br>"
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/nfs_stop
sleep 1
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/nfs_start

#Modify ip
sed -i "s/CHANGETHISIP/'$DISTROSERVERIP'/g" /home/tftpboot/pxelinux.cfg/default

###########################
#Open shorewall ports
###########################
RESTART_SHOREWALL=no
MODCHECK=`grep -c -w \#tftp_server_rule /etc/shorewall/rules`
if [ $MODCHECK = 0 ]
then
RESTART_SHOREWALL=yes
echo "<br><li>'$SHOREWALLMSG' - tcp 69</li><br>"
LINENUM=`grep -n "LAST LINE -- ADD YOUR ENTRIES BEFORE THIS ONE -- DO NOT REMOVE" /etc/shorewall/rules | cut -d: -f1`
sed -i $LINENUM"c"\ACCEPT"	"net"	"fw"	"udp"	"69"	"-"#"tftp_server_rule /etc/shorewall/rules
echo "#"LAST LINE -- ADD YOUR ENTRIES BEFORE THIS ONE -- DO NOT REMOVE >> /etc/shorewall/rules
fi

MODCHECK=`grep -c -w \#nfs_server_rule /etc/shorewall/rules`
if [ $MODCHECK = 0 ]
then
RESTART_SHOREWALL=yes
echo "<br><li>'$SHOREWALLMSG' - tcp 2049</li><br>"
LINENUM=`grep -n "LAST LINE -- ADD YOUR ENTRIES BEFORE THIS ONE -- DO NOT REMOVE" /etc/shorewall/rules | cut -d: -f1`
sed -i $LINENUM"c"\ACCEPT"	"net"	"fw"	"tcp"	"2049"	"-"#"nfs_server_rule /etc/shorewall/rules
echo "#"LAST LINE -- ADD YOUR ENTRIES BEFORE THIS ONE -- DO NOT REMOVE >> /etc/shorewall/rules
fi

MODCHECK=`grep -c -w \#portmap_server_rule /etc/shorewall/rules`
if [ $MODCHECK = 0 ]
then
RESTART_SHOREWALL=yes
echo "<br><li>'$SHOREWALLMSG' - tcp 111</li><br>"
LINENUM=`grep -n "LAST LINE -- ADD YOUR ENTRIES BEFORE THIS ONE -- DO NOT REMOVE" /etc/shorewall/rules | cut -d: -f1`
sed -i $LINENUM"c"\ACCEPT"	"net"	"fw"	"tcp"	"111"	"-"#"portmap_server_rule /etc/shorewall/rules
echo "#"LAST LINE -- ADD YOUR ENTRIES BEFORE THIS ONE -- DO NOT REMOVE >> /etc/shorewall/rules
fi

MODCHECK=`grep -c -w \#mountd_server_rule /etc/shorewall/rules`
if [ $MODCHECK = 0 ]
then
RESTART_SHOREWALL=yes
echo "<br><li>'$SHOREWALLMSG' - tcp 33777</li><br>"
LINENUM=`grep -n "LAST LINE -- ADD YOUR ENTRIES BEFORE THIS ONE -- DO NOT REMOVE" /etc/shorewall/rules | cut -d: -f1`
sed -i $LINENUM"c"\ACCEPT"	"net"	"fw"	"tcp"	"33777"	"-"#"mountd_server_rule /etc/shorewall/rules
echo "#"LAST LINE -- ADD YOUR ENTRIES BEFORE THIS ONE -- DO NOT REMOVE >> /etc/shorewall/rules
fi

######################
#Restart shorewall
######################
if [ $RESTART_SHOREWALL = yes ]
then
echo "<br><li>"'$RESTARTSWMSG'"</li><br>"
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/shorewall_stop
echo "<br>"
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/shorewall_start
echo "<br><br>"
fi

#Ensure services start on boot
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/startonboot/nfs
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/startonboot/tftpd
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/startonboot/portmap

'
fi

#Add role information
[ ! -d /opt/karoshi/server_network/servers/$SERVERNAME ] && mkdir -p /opt/karoshi/server_network/servers/$SERVERNAME
echo $ROLE"<br>" > /opt/karoshi/server_network/servers/$SERVERNAME/distributionserver
[ -f /opt/karoshi/server_network/servers/$SERVERNAME/no_role ] && rm -f /opt/karoshi/server_network/servers/$SERVERNAME/no_role
echo $SERVERNAME > /opt/karoshi/server_network/distribution_server

sed -i 's/DISTROCTRL=no/DISTROCTRL=yes/g' /opt/karoshi/server_network/menusettings

#Show completed message
echo "<br><li>"$TITLE - $COMPLETEMSG"</li><br>"

