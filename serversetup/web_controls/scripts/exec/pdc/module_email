#!/bin/bash
#Copyright (C) 2007 Paul Sharrad

#This file is part of Karoshi Server.
#
#Karoshi Server is free software: you can redistribute it and/or modify
#it under the terms of the GNU Affero General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#Karoshi Server is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU Affero General Public License for more details.
#
#You should have received a copy of the GNU Affero General Public License
#along with Karoshi Server.  If not, see <http://www.gnu.org/licenses/>.

#
#The Karoshi Team can be contacted at: 
#mpsharrad@karoshi.org.uk
#jharris@karoshi.org.uk
#aball@karoshi.org.uk
#
#Website: http://www.karoshi.org.uk
LOG_DATE=`date +%F`
########################
#Check md5checksum
########################
if ! test -f /opt/karoshi/web_controls/checksums/admin_checksums/module_email_cgi
then
echo `date`: module_email - No MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
source /opt/karoshi/web_controls/checksums/admin_checksums/module_email_cgi
MD5SUM=`md5sum /var/www/cgi-bin_karoshi/admin/module_email.cgi | cut -d' ' -f1`
[ $MD5SUM'null' = null ] && MD5SUM=not_set
if [ $MD5SUM'check' != $module_email_cgi'check' ]
then
echo `date`: module_email - Incorrect MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi

########################
#Get variables
########################
numArgs=$#
if [ $numArgs != 0 ]
then
echo `date`: module_email - incorrect number of arguments >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi

read DATA
DATA=`echo $DATA | tr -cd 'A-Za-z0-9\._:\-%'`
if [ $DATA'null' = null ]
then
echo `date`: module_email - no data >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
REMOTE_USER=`echo "$DATA" | cut -s -d: -f1`
REMOTE_ADDR=`echo "$DATA" | cut -s -d: -f2`
REMOTE_MD5=`echo "$DATA" | cut -s -d: -f3`
ALIAS=`echo "$DATA" | cut -s -d: -f4 | sed 's/%3A/:/g' | sed 's/%2F/\//g'`
COPYEMAIL=`echo "$DATA" | cut -s -d: -f5`
[ $COPYEMAIL'null' = null ] && COPYEMAIL=no
SERVERNAME=`echo "$DATA" | cut -s -d: -f6`
########################
#Check data
########################
if [ $REMOTE_MD5'check' != $MD5SUM'check' ]
then
echo `date`: module_email - Not called by module_email.cgi >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
if [ $REMOTE_USER'null' = null ]
then
echo `date`: module_email - Blank remote user >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
if [ $REMOTE_ADDR'null' = null ]
then
echo `date`: module_email - Blank remote tcpip address >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
if [ $ALIAS'null' = null ]
then
echo `date`: module_email - Blank alias by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit
fi
if [ $SERVERNAME'null' = null ]
then
echo `date`: module_email - Blank domain by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit
fi
if [ `grep -c ^$REMOTE_USER: /opt/karoshi/web_controls/web_access_admin` != 1 ]
then
echo `date`: module_email - access denied to $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
echo `date`: setupemail "for" $DOMAINPATH on $SERVERNAME by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE

[ -f /opt/karoshi/web_controls/user_prefs/$REMOTE_USER ] && source /opt/karoshi/web_controls/user_prefs/$REMOTE_USER
[ -f /opt/karoshi/web_controls/language/$LANGCHOICE/modules/email/setupemail ] || LANGCHOICE=englishuk
source /opt/karoshi/serversetup/language/$LANGCHOICE/modules/email/setupemail
source /opt/karoshi/server_network/domain_information/domain_name
source /opt/karoshi/serversetup/variables/distro


#Check that this server has been setup with the correct authentication
if [ $SERVERNAME != `hostname-fqdn` ]
then
echo "$REMOTE_USER:$REMOTE_ADDR:$MD5SUM:$SERVERNAME:users:" | /opt/karoshi/serversetup/modules/authentication/check_auth
if [ $? = 101 ]
then
echo $AUTHENTICATIONFAILMSG"<br><br>"
echo `date`: module_email - $SERVERNAME does not have the correct authentication "for" this module by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
sleep 2
exit 101
fi
fi

#Update alias entry for the server
[ ! -d /opt/karoshi/server_network/aliases ] && mkdir -p /opt/karoshi/server_network/aliases
[ ! -f /opt/karoshi/server_network/aliases/$SERVERNAME ] && echo $ALIAS > /opt/karoshi/server_network/aliases/$SERVERNAME

SHORTSERVERNAME=`echo $SERVERNAME | cut -d. -f1`
[ ! -d /var/lib/samba/netlogon/domain_information/aliases ] && mkdir -p /var/lib/samba/netlogon/domain_information/aliases
[ ! -f /var/lib/samba/netlogon/domain_information/aliases/$SHORTSERVERNAME ] && echo $ALIAS > /var/lib/samba/netlogon/domain_information/aliases/$SHORTSERVERNAME

#Add entry to samba4 dns for web alias
LDAPPASS=`sed -n 1,1p /etc/ldap.secret`
source /opt/karoshi/server_network/domain_information/domain_name
echo `date`: module_email - checking "if" $DOMAINPATH is "in" the dns records by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
samba-tool dns query 127.0.0.1 $REALM $ALIAS.$REALM CNAME --username=Administrator --password=$LDAPPASS 1>> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE 2>> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
if [ `echo $?` != 0 ]
then
echo `date`: dnsadd - adding $ALIAS.$REALM $SERVERNAME to the dns records by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
samba-tool dns add 127.0.0.1 $REALM $ALIAS CNAME $SERVERNAME --username=Administrator --password=$LDAPPASS 1>> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE 2>> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
fi

#Add entry to samba4 dns for mail alias
LDAPPASS=`sed -n 1,1p /etc/ldap.secret`
source /opt/karoshi/server_network/domain_information/domain_name
echo `date`: module_email - checking "if" $DOMAINPATH is "in" the dns records by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
samba-tool dns query 127.0.0.1 $REALM mail.$REALM CNAME --username=Administrator --password=$LDAPPASS 1>> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE 2>> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
if [ `echo $?` != 0 ]
then
echo `date`: dnsadd - adding mail.$REALM to the dns records by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
samba-tool dns add 127.0.0.1 $REALM mail CNAME $SERVERNAME --username=Administrator --password=$LDAPPASS 1>> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE 2>> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE

fi

#Create keytab for mail
echo "$REMOTE_USER:$REMOTE_ADDR:$MD5SUM:$SERVERNAME:imap:mail:$SERVERNAME:dovecot:" | /opt/karoshi/serversetup/modules/authentication/add_keytab
echo "$REMOTE_USER:$REMOTE_ADDR:$MD5SUM:$SERVERNAME:smtp:postfix:$SERVERNAME:postfix:" | /opt/karoshi/serversetup/modules/authentication/add_keytab
echo "$REMOTE_USER:$REMOTE_ADDR:$MD5SUM:$SERVERNAME:HTTP:sogo:$SERVERNAME:www-data:" | /opt/karoshi/serversetup/modules/authentication/add_keytab

#Create ssl certificate for web access
if [ ! -f /etc/ssl/apache/$ALIAS.$REALM.key ]
then
echo "$REMOTE_USER:$REMOTE_ADDR:$SERVERNAME:$ALIAS.$REALM:" | /opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/apachesslcert
[ `echo $?` != 0 ] && exit 101 
fi

#Create ssl certificate for mail access
if [ ! -f /etc/ssl/mail/dovecot.key ]
then
echo "$REMOTE_USER:$REMOTE_ADDR:$SERVERNAME:mail.$REALM:" | /opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/mailsslcert
[ `echo $?` != 0 ] && exit 101 
fi

#########################
#Install new mail system
#########################

if [ $SERVERNAME = `hostname-fqdn` ] 
then
#Install email
echo $REMOTE_USER:$REMOTE_ADDR:$MD5SUM:$SERVERNAME:$ALIAS: | /opt/karoshi/serversetup/modules/email/setupemail
fi

if [ $SERVERNAME != `hostname-fqdn` ]
then
ssh -x -o PasswordAuthentication=no $SERVERNAME '

[ ! -d /opt/karoshi/serversetup/language/'$LANGCHOICE'/modules ] && mkdir -p /opt/karoshi/serversetup/language/'$LANGCHOICE'/modules
[ ! -d /opt/karoshi/serversetup/modules/ ] && mkdir -p /opt/karoshi/serversetup/modules/
'

echo "<li>"$SERVERNAME - $COPYMODULEMSG"</li><br>"

#Copy in domain information
scp -p -r /opt/karoshi/server_network/domain_information root@$SERVERNAME:/opt/karoshi/server_network/ 1> /dev/null

#Copy in language files
scp -p -r /opt/karoshi/serversetup/language/$LANGCHOICE/modules/email root@$SERVERNAME:/opt/karoshi/serversetup/language/$LANGCHOICE/modules/ 1> /dev/null
#Copy in module
scp -p -r /opt/karoshi/serversetup/modules/email root@$SERVERNAME:/opt/karoshi/serversetup/modules/ 1> /dev/null
#Copy in distro files 
scp -p -r /opt/karoshi/serversetup/distro/ubuntu/modules/mailscanner root@$SERVERNAME:/opt/karoshi/serversetup/distro/ubuntu/modules/ 1> /dev/null
scp -p -r /opt/karoshi/serversetup/distro/ubuntu/modules/email root@$SERVERNAME:/opt/karoshi/serversetup/distro/ubuntu/modules/ 1> /dev/null
#Copy in ssl certificates
scp -p -r /etc/ssl/mail root@$SERVERNAME:/etc/ssl/ 1> /dev/null
#Copy in fail2ban files
scp -p -r /opt/karoshi/serversetup/all/fail2ban root@$SERVERNAME:/opt/karoshi/serversetup/all/ 1> /dev/null

#Install email
ssh -x -o PasswordAuthentication=no $SERVERNAME '
#Make sure that home areas exist for users to store email folders in.


echo '$REMOTE_USER:$REMOTE_ADDR:$MD5SUM:$SERVERNAME:$ALIAS:' | /opt/karoshi/serversetup/modules/email/setupemail
'
fi


function mount_servers {
if [ ! -d /opt/karoshi/server_network/server_mount ]
then
mkdir -p /opt/karoshi/server_network/server_mount
chmod 0700 /opt/karoshi/server_network/server_mount
fi
if [ ! -d /opt/karoshi/server_network/server_mount/$CURRENTMAILSERVER ] && [ $CURRENTMAILSERVER != `hostname-fqdn` ]
then
mkdir /opt/karoshi/server_network/server_mount/$CURRENTMAILSERVER
chmod 0700 /opt/karoshi/server_network/server_mount/$CURRENTMAILSERVER
fi

if [ ! -d /opt/karoshi/server_network/server_mount/$NEWMAILSERVER ] && [ $NEWMAILSERVER != `hostname-fqdn` ]
then
mkdir /opt/karoshi/server_network/server_mount/$NEWMAILSERVER
chmod 0700 /opt/karoshi/server_network/server_mount/$NEWMAILSERVER
fi
#Mount drives
if [ $CURRENTMAILSERVER != `hostname-fqdn` ]
then
sshfs root@$CURRENTMAILSERVER:/ /opt/karoshi/server_network/server_mount/$CURRENTMAILSERVER 2>> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
[ `echo $?` != 0 ] && exit 101
fi

if [ $NEWMAILSERVER != `hostname-fqdn` ]
then
sshfs root@$NEWMAILSERVER:/ /opt/karoshi/server_network/server_mount/$NEWMAILSERVER 2>> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
if [ `echo $?` != 0 ]
then
[ $CURRENTMAILSERVER != `hostname-fqdn` ] && umount /opt/karoshi/server_network/server_mount/$CURRENTMAILSERVER
exit 101
fi
[ ! -d /opt/karoshi/server_network/server_mount/$NEWMAILSERVER$DESTFOLDERPATH/$PRIGROUP ] && mkdir -p /opt/karoshi/server_network/server_mount/$NEWMAILSERVER$DESTFOLDERPATH/$PRIGROUP
fi
}

function unmount_servers {
[ $CURRENTMAILSERVER != `hostname-fqdn` ] && umount /opt/karoshi/server_network/server_mount/$CURRENTMAILSERVER
[ $NEWMAILSERVER != `hostname-fqdn` ] && umount /opt/karoshi/server_network/server_mount/$NEWMAILSERVER
}

##############################
#Migrate existing mail system not completed yet
##############################
if [ $COPYEMAIL = yes222 ]
then
#Copy email to the new server
CURRENTMAILSERVER=`sed -n 1,1p /opt/karoshi/server_network/emailserver`
NEWMAILSERVER=$SERVERNAME


#Copy E-Mail from this server to new server
if [ $CURRENTMAILSERVER = `hostname-fqdn` ]
then
mount_servers

#Copy /var/spool/mail
[ -d /var/spool/mail ] && cp -f -p -r -v /var/spool/mail /opt/karoshi/server_network/server_mount/$NEWMAILSERVER/var/spool/
#Copy mail in home folders
[ -d /home ] && cp -f -p -r -v /home /opt/karoshi/server_network/server_mount/$NEWMAILSERVER/

unmount_servers

fi

#Copy E-mail back to this server
if [ $NEWMAILSERVER=$HOSTNAME ]
then

mount_servers

#Copy /var/spool/mail
[ -d /opt/karoshi/server_network/server_mount/$NEWMAILSERVER/var/spool/mail ] && cp -f -p -r -v /opt/karoshi/server_network/server_mount/$CURRENTMAILSERVER/var/spool/mail /var/spool/
#Copy mail in home folders
[ -d /opt/karoshi/server_network/server_mount/$NEWMAILSERVER/home ] && cp -f -p -r -v /opt/karoshi/server_network/server_mount/$CURRENTMAILSERVER/home /

unmount_servers
fi

#Copy E-mail from between remote servers
if [ $NEWMAILSERVER != `hostname-fqdn` ] && [ $CURRENTMAILSERVER != `hostname-fqdn` ]
then


mount_servers

#Copy /var/spool/mail
[ -d /opt/karoshi/server_network/server_mount/$CURRENTMAILSERVER/var/spool/mail ] && cp -f -p -r -v /opt/karoshi/server_network/server_mount/$CURRENTMAILSERVER/var/spool/mail /opt/karoshi/server_network/server_mount/$NEWMAILSERVER/var/spool/
#Copy mail in home folders
[ -d /opt/karoshi/server_network/server_mount/$CURRENTMAILSERVER/home ] && cp -f -p -r -v /opt/karoshi/server_network/server_mount/$CURRENTMAILSERVER/home /opt/karoshi/server_network/server_mount/$NEWMAILSERVER/

unmount_servers
fi
fi

#Create completed info file

[ ! -d /opt/karoshi/modules/email ] && mkdir -p /opt/karoshi/modules/email
echo '<a href="http://www.squirrelmail.org" target="_blank"><img style="border: 0px solid ;" alt="" src="/images/help/info.png"></a>' > /opt/karoshi/modules/email/weblink
echo '<a href="http://www.egroupware.org" target="_blank"><img style="border: 0px solid ;" alt="" src="/images/help/info.png"></a>' >> /opt/karoshi/modules/email/weblink
echo '<b>'Server'</b>': $EMAILSERVER > /opt/karoshi/modules/email/installed_information
echo '<b>'Domain'</b>': $DOMAINPATH >> /opt/karoshi/modules/email/installed_information

echo $DOMAINPATH >  /opt/karoshi/serversetup/variables/emaildomain

#Create thunderbird icon for the linux client

echo '[Desktop Entry]
Version=1.0
Terminal=false
X-MultipleArgs=false
Type=Application
Name=E-Mail
Comment=Email reader
Icon=internet-mail
Exec=exo-open --launch MailReader' > /var/lib/samba/netlogon/linuxclient/$LINUXCLIENTVER/desktop-icons/all/Thunderbird.desktop

#Add role information
[ ! -d /opt/karoshi/server_network/servers/$SERVERNAME ] && mkdir -p /opt/karoshi/server_network/servers/$SERVERNAME
echo $ROLE"<br>" > /opt/karoshi/server_network/servers/$SERVERNAME/emailserver
echo '<a href="https://'$ALIAS'.'$REALM'/SOGo" target="_blank">https://'$ALIAS'.'$REALM'/SOGo</a><br>' >> /opt/karoshi/server_network/servers/$SERVERNAME/emailserver
echo $DOMAINPATH > /opt/karoshi/server_network/emaildomain
[ -f /opt/karoshi/server_network/servers/$SERVERNAME/no_role ] && rm -f /opt/karoshi/server_network/servers/$SERVERNAME/no_role
echo $ROLE2"<br>" > /opt/karoshi/server_network/servers/$SERVERNAME/apacheserver
echo $SERVERNAME > /opt/karoshi/server_network/emailserver
[ ! -d /opt/karoshi/server_network/webservers/ ] && mkdir -p /opt/karoshi/server_network/webservers
echo $SERVERNAME > /opt/karoshi/server_network/webservers/$SERVERNAME
sed -i 's/WEBCTRL=no/WEBCTRL=yes/g' /opt/karoshi/server_network/menusettings
sed -i 's/EMAILCTRL=no/EMAILCTRL=yes/g' /opt/karoshi/server_network/menusettings

#Add mail flag for clients
SERVERNAME2=`echo $SERVERNAME | sed 's/.'$REALM'//g'`
echo $SERVERNAME2 > /var/lib/samba/netlogon/domain_information/mail_server
#echo $SERVERNAME.$REALM > /var/lib/samba/netlogon/domain_information/mail_server_fqdn

#Add in a cron job to check the mail queue for excessive mail
echo 5 0 '*' '*' 1-7 /opt/karoshi/serversetup/modules/email/scripts/check_mail_queue > /opt/karoshi/cronjobs/jobs/check_mail_queue.cron
/opt/karoshi/serversetup/all/"useful scripts"/refreshcronjobs


#Allow monitoring server to send email alerts
########################
#Allow monitoring server to send email alerts
########################

if [ -f /opt/karoshi/server_network/monitoringserver ]
then
MONITORSERVERNAME=`sed -n 1,1p /opt/karoshi/server_network/monitoringserver`
MONITORSERVERIP=`net lookup $MONITORSERVERNAME`
if [ $SERVERNAME = `hostname-fqdn` ]
then
#Add in server ip to main.cf
if [ `grep -c -w $MONITORSERVERIP /etc/postfix/main.cf` = 0 ]
then
sed -i "s/mynetworks = 127.0.0.1/mynetworks = 127.0.0.1 , $MONITORSERVERIP/g" /etc/postfix/main.cf
#Restart postfix
source /opt/karoshi/serversetup/variables/distro
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/postfix_stop
sleep 1
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/postfix_start
fi
else
ssh -x -o PasswordAuthentication=no $SERVERNAME '
#Add in server ip to main.cf
if [ `grep -c -w '$MONITORSERVERIP' /etc/postfix/main.cf` = 0 ]
then
sed -i "s/mynetworks = 127.0.0.1/mynetworks = 127.0.0.1 , '$MONITORSERVERIP'/g" /etc/postfix/main.cf
#Restart postfix
source /opt/karoshi/serversetup/variables/distro
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/postfix_stop
sleep 1
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/postfix_start
fi
'
fi
fi

#Add in monitoring for the server
if [ -f /opt/karoshi/server_network/monitoringserver ]
then
/opt/karoshi/serversetup/modules/monitoring/scripts/add_karoshi_server_monitors $SERVERNAME
fi

exit

