#!/bin/bash
#Copyright (C) 2010 Paul Sharrad

#This file is part of Karoshi Server.
#
#Karoshi Server is free software: you can redistribute it and/or modify
#it under the terms of the GNU Affero General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#Karoshi Server is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU Affero General Public License for more details.
#
#You should have received a copy of the GNU Affero General Public License
#along with Karoshi Server.  If not, see <http://www.gnu.org/licenses/>.

#
#The Karoshi Team can be contacted at: 
#mpsharrad@karoshi.org.uk
#jharris@karoshi.org.uk
#aball@karoshi.org.uk
#
#Website: http://www.karoshi.org.uk
LOG_DATE=`date +%F`
########################
#Check md5checksum
########################
if ! test -f /opt/karoshi/web_controls/checksums/admin_checksums/module_moodle_cgi
then
echo `date`: module_moodle - No MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
source /opt/karoshi/web_controls/checksums/admin_checksums/module_moodle_cgi
MD5SUM=`md5sum /var/www/cgi-bin_karoshi/admin/module_moodle.cgi | cut -d' ' -f1`
[ $MD5SUM'null' = null ] && MD5SUM=not_set
if [ $MD5SUM'check' != $module_moodle_cgi'check' ]
then
echo `date`: module_moodle - Incorrect MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi

########################
#Get variables
########################
numArgs=$#
if [ $numArgs != 0 ]
then
echo `date`: module_moodle - incorrect number of arguments >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi

read DATA
DATA=`echo $DATA | tr -cd 'A-Za-z0-9\._:\-%'`
if [ $DATA'null' = null ]
then
echo `date`: module_moodle - no data >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
REMOTE_USER=`echo "$DATA" | cut -s -d: -f1`
REMOTE_ADDR=`echo "$DATA" | cut -s -d: -f2`
REMOTE_MD5=`echo "$DATA" | cut -s -d: -f3`
ALIAS=`echo "$DATA" | cut -s -d: -f4 | sed 's/%3A/:/g' | sed 's/%2F/\//g'`
SERVERNAME=`echo "$DATA" | cut -s -d: -f5`
COPYMOODLE=`echo "$DATA" | cut -s -d: -f6 | tr -cd 'yes'`
########################
#Check data
########################
if [ $REMOTE_MD5'check' != $MD5SUM'check' ]
then
echo `date`: module_moodle - Not called by module_moodle.cgi >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
if [ -z "$REMOTE_USER" ]
then
echo `date`: module_moodle - Blank remote user >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
if [ -z "$REMOTE_ADDR" ]
then
echo `date`: module_moodle - Blank remote tcpip address >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
if [ -z "$ALIAS" ]
then
echo `date`: module_moodle - Blank alias by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit
fi
if [ -z "$SERVERNAME" ]
then
echo `date`: module_moodle - Blank domain by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit
fi
if [ `grep -c ^$REMOTE_USER: /opt/karoshi/web_controls/web_access_admin` != 1 ]
then
echo `date`: module_moodle - access denied to $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
echo `date`: setupmoodle by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE

[ -f /opt/karoshi/web_controls/user_prefs/$REMOTE_USER ] && source /opt/karoshi/web_controls/user_prefs/$REMOTE_USER
[ -f /opt/karoshi/web_controls/language/$LANGCHOICE/modules/moodle/setupmoodle ] || LANGCHOICE=englishuk
source /opt/karoshi/serversetup/language/$LANGCHOICE/modules/moodle/setupmoodle

#Check that this server has been setup with the correct authentication
if [ $SERVERNAME != $HOSTNAME ]
then
echo "$REMOTE_USER:$REMOTE_ADDR:$MD5SUM:$SERVERNAME:users:" | /opt/karoshi/serversetup/modules/authentication/check_auth
if [ $? = 101 ]
then
echo $AUTHENTICATIONFAILMSG"<br><br>"
echo `date`: module_moodle - $SERVERNAME does not have the correct authentication "for" this module by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
sleep 2
exit 101
fi
fi

echo '<b>'$TITLE' - '$SERVERNAME'</b><br><br>'

source /opt/karoshi/server_network/domain_information/domain_name
source /opt/karoshi/serversetup/variables/distro
source /opt/karoshi/serversetup/distro/$DISTROCHOICE/all/software

#Update alias entry for the server
[ ! -d /opt/karoshi/server_network/aliases ] && mkdir -p /opt/karoshi/server_network/aliases
[ ! -f /opt/karoshi/server_network/aliases/$SERVERNAME ] && echo $ALIAS > /opt/karoshi/server_network/aliases/$SERVERNAME

#Create keytab for moodle
echo "$REMOTE_USER:$REMOTE_ADDR:$MD5SUM:$SERVERNAME:HTTP:moodle:$SERVERNAME.$REALM:www-data:" | /opt/karoshi/serversetup/modules/authentication/add_keytab

function check_already_installed {
if [ $SERVERNAME = $HOSTNAME ]
then
#Check to see if moodle is already installed
if [ -d /var/www/html/moodle ]
then
echo `date`: module_moodle - moodle is already installed on $SERVERNAME by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
echo $MOODLEINSTERROR
exit
fi
else
ssh -x -o PasswordAuthentication=no $SERVERNAME '
#Check to see if moodle is already installed
if [ -d /var/www/html/moodle ]
then
echo '$MOODLEINSTERROR'
exit 101
fi'
if [ `echo $?` = 101 ]
then
echo `date`: module_moodle - moodle is already installed on $SERVERNAME by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit
fi
fi
}

function add_dns_entry {
#Add entry to samba4 dns
LDAPPASS=`sed -n 1,1p /etc/ldap.secret`
source /opt/karoshi/server_network/domain_information/domain_name
echo `date`: module_moodle - checking "if" $DOMAINPATH is "in" the dns records by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
samba-tool dns query 127.0.0.1 $REALM $ALIAS.$REALM CNAME --username=Administrator --password=$LDAPPASS 1>> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE 2>> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
if [ `echo $?` != 0 ]
then
echo `date`: module_moodle - adding $ALIAS "for" $SERVERNAME to the dns records by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
samba-tool dns add 127.0.0.1 $REALM $ALIAS CNAME $SERVERNAME.$REALM --username=Administrator --password=$LDAPPASS 1>> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE 2>> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
fi
}

function modify_moodle.sql {

#Make a backup of moodle.sql
cp /opt/karoshi/serversetup/modules/moodle/moodle.sql /opt/karoshi/serversetup/modules/moodle/moodle_original.sql

#Edit moodle.sql with the correct subnet
THISIP=`net lookup $HOSTNAME`
THISSUBNETMASK=`grep -w netmask /etc/network/interfaces | sed -n 1,1p | cut -d' ' -f2`
NETWORK=`ipcalc $THISIP/$THISSUBNETMASK | grep -w ^Network: | sed 's/ * / /g' | cut -d' ' -f2`
sed -i 's@CHANGETHISSUBNET@'$NETWORK'@g' /opt/karoshi/serversetup/modules/moodle/moodle.sql

}

function install_moodle {
#Install
if [ $SERVERNAME = $HOSTNAME ]
then
echo $REMOTE_USER:$REMOTE_ADDR:$MD5SUM:$SERVERNAME:$ALIAS: | /opt/karoshi/serversetup/modules/moodle/setupmoodle
else
#Remote server
#Copy in language files
scp -p -r /opt/karoshi/serversetup/language/$LANGCHOICE/modules/moodle root@$SERVERNAME:/opt/karoshi/serversetup/language/$LANGCHOICE/modules/ 1> /dev/null
#Copy in module
scp -p -r /opt/karoshi/serversetup/modules/moodle root@$SERVERNAME:/opt/karoshi/serversetup/modules/ 1> /dev/null

#Copy in domain information
scp -p -r /opt/karoshi/server_network/domain_information root@$SERVERNAME:/opt/karoshi/server_network/ 1> /dev/null

#Install moodle
ssh -x -o PasswordAuthentication=no $SERVERNAME '
echo '$REMOTE_USER:$REMOTE_ADDR:$MD5SUM:$SERVERNAME:$ALIAS:' | /opt/karoshi/serversetup/modules/moodle/setupmoodle
'
fi
}

function add_role_information {
[ ! -d /opt/karoshi/server_network/servers/$SERVERNAME ] && mkdir -p /opt/karoshi/server_network/servers/$SERVERNAME
echo $ROLE"<br>" > /opt/karoshi/server_network/servers/$SERVERNAME/SERVERNAME
echo '<a href="https://'$ALIAS.$REALM'/moodle" target="_blank">https://'$ALIAS.$REALM'/moodle</a><br>' >> /opt/karoshi/server_network/servers/$SERVERNAME/SERVERNAME
[ -f /opt/karoshi/server_network/servers/$SERVERNAME/no_role ] && rm -f /opt/karoshi/server_network/servers/$SERVERNAME/no_role
echo $ROLE2"<br>" > /opt/karoshi/server_network/servers/$SERVERNAME/apacheserver
echo $SERVERNAME > /opt/karoshi/server_network/SERVERNAME
echo $DOMAINPATH > /opt/karoshi/server_network/moodledomain
[ ! -d /opt/karoshi/server_network/webservers/ ] && mkdir -p /opt/karoshi/server_network/webservers
echo $SERVERNAME > /opt/karoshi/server_network/webservers/$SERVERNAME
sed -i 's/WEBCTRL=no/WEBCTRL=yes/g' /opt/karoshi/server_network/menusettings
#sed -i 's/MOODLECTRL=no/MOODLECTRL=yes/g' /opt/karoshi/server_network/menusettings
}

function restore_moodle.sql {
rm -f /opt/karoshi/serversetup/modules/moodle/moodle.sql
mv /opt/karoshi/serversetup/modules/moodle/moodle_original.sql /opt/karoshi/serversetup/modules/moodle/moodle.sql
}

function check_ports {
if [ $SERVERNAME != $HOSTNAME ]
then
ssh -x -o PasswordAuthentication=no $SERVERNAME '
PORTCHECK=53,88,389
echo "<li>"Checking to see that the Ldap server  can be contacted on ports: $PORTCHECK"</li><br>"
SCANRESULT=`nmap '$LDAPSERVER' -p $PORTCHECK -PN`
for PORT in `echo $PORTCHECK | sed "s/,/ /g"`
do
echo "<li>"Checking $PORT"</li><br>"
if [ `echo $SCANRESULT | grep -c "$PORT/tcp open"` = 0 ]
then
echo Error - The ldap server cannot be contacted on $PORT"<br>"
exit $PORT
fi
done
'
EXITSTATUS=$?
if [ $EXITSTATUS != 0 ]
then
exit $EXITSTATUS
fi
fi
}

function apply_ssl_certificate {
#######################
#Apply certificate
#######################
if [ ! -f /etc/ssl/apache/$ALIAS.$REALM.key ]
then
echo "$REMOTE_USER:$REMOTE_ADDR:$SERVERNAME:$ALIAS.$REALM:" | /opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/apachesslcert
[ `echo $?` != 0 ] && exit 101 
fi
}

function create_linux_client_icon {
echo '[Desktop Entry]
Version=1.0
Type=Link
Name=Moodle
Comment=Moodle
Icon=moodle
URL=https://'$ALIAS.$REALM'/moodle' > /var/lib/samba/netlogon/linuxclient/$LINUXCLIENTVER/desktop-icons/all/Moodle.desktop
}

check_already_installed
apply_ssl_certificate
add_dns_entry
modify_moodle.sql
#check_ports
#if not transferring an existing setup then install moodle
install_moodle
restore_moodle.sql
add_role_information
create_linux_client_icon

#Schedule_moodle_export_grades
#cp /opt/karoshi/serversetup/modules/moodle/moodle_export_grades /opt/karoshi/"useful scripts"/
#[ -d /opt/karoshi/cronjobs/jobs ] || mkdir -p /opt/karoshi/cronjobs/jobs
#echo 0 3 '*' '*' 7 /opt/karoshi/'"'useful scripts'"'/moodle_export_grades > /opt/karoshi/cronjobs/jobs/resetguestaccounts.cron
#/opt/karoshi/serversetup/all/"useful scripts"/refreshcronjobs 1>/dev/null


########################
#Modify prefs.js for windows firefox
########################
function modify_prefs.js {

if [ /opt/karoshi/server_network/SERVERNAME ]
then
SERVERNAME=`sed -n 1,1p /opt/karoshi/server_network/SERVERNAME`
#Set clipboard setting for moodle
if [ `grep -c 'user_pref("capability.policy.allowclipboard.sites",' "$PREFSJSPATH"` -gt 0 ]
then
LINE=`grep -n 'user_pref("capability.policy.allowclipboard.sites",' "$PREFSJSPATH" | cut -d: -f1`
sed -i $LINE'c''user_pref("capability.policy.allowclipboard.sites", "http://'$SERVERNAME'.internal");' "$PREFSJSPATH"
else
echo 'user_pref("capability.policy.allowclipboard.sites", "http://'$SERVERNAME'.internal");' >> "$PREFSJSPATH"
fi
fi

#Set no proxy settings
NOPROXYSERVERS=`ls /opt/karoshi/server_network/servers/`
NOPROXYSERVERS=`echo $NOPROXYSERVERS | sed 's/ /, /g'`
NOPROXYSERVERS2=`ls /opt/karoshi/server_network/servers/`
NOPROXYSERVERS2=`echo $NOPROXYSERVERS2 | sed 's/ /.internal, /g' | sed 's/$/.internal/g'`
NOPROXYSERVERS=`echo $NOPROXYSERVERS, $NOPROXYSERVERS2`

if [ `grep -c 'user_pref("network.proxy.no_proxies_on",' "$PREFSJSPATH"` -gt 0 ]
then
LINE=`grep -n 'user_pref("network.proxy.no_proxies_on",' "$PREFSJSPATH" | cut -d: -f1`
sed -i $LINE'c''user_pref("network.proxy.no_proxies_on", "localhost, 127.0.0.1, '"$NOPROXYSERVERS"'");' "$PREFSJSPATH"
else
echo 'user_pref("network.proxy.no_proxies_on", "localhost, 127.0.0.1, '"$NOPROXYSERVERS"'");' >> "$PREFSJSPATH"
fi
}

#Windows clients
for PROFILE in /home/applications/profiles/*
do
unset PREFSJSPATH 
#Find prefs.js
PREFSJSPATH=`find $PROFILE/ -name "prefs.js"`
#Check that PREFSJSPATH has been set
if [ -n "$PREFSJSPATH" ]
then
modify_prefs.js
fi
done

exit


##########################
#Migrate existing moodle setup
##########################
if [ $COPYMOODLE'null' != null ]
then
if [ $COPYMOODLE = yes ]
then
CURRENTSERVERNAME=`sed -n 1,1p /opt/karoshi/server_network/SERVERNAME`
echo "<b>"$TRANSFERMSG1"</b><br><br>"
echo "<li>"$CURRENTSERVERNAMEMSG - $CURRENTSERVERNAME - $NEWSERVERNAMEMSG - $SERVERNAME"</li><br>"

source /opt/karoshi/serversetup/variables/distro
source /opt/karoshi/serversetup/distro/$DISTROCHOICE/all/software


function set_moodle_perms {

echo "<li>"$SERVERNAME - $SETMOODLEPERMS - /var/www/html/moodle"</li><br>"
if [ $SERVERNAME = $HOSTNAME ]
then
chmod 0440 -R /var/www/html/moodle
chmod u+X,g+X -R /var/www/html/moodle
chown -R root.$APACHEGROUP /var/www/html/moodle
else
ssh -x -o PasswordAuthentication=no $SERVERNAME '
source /opt/karoshi/serversetup/variables/distro
source /opt/karoshi/serversetup/distro/$DISTROCHOICE/all/software
chmod 0440 -R /var/www/html/moodle
chmod u+X,g+X -R /var/www/html/moodle
chown -R root.$APACHEGROUP /var/www/html/moodle
'
fi
echo "<li>"$SERVERNAME - $SETMOODLEPERMS - /var/www/moodle-data"</li><br>"
if [ $SERVERNAME = $HOSTNAME ]
then
chmod 0600 -R /var/www/moodle-data
chmod u+X -R /var/www/moodle-data
chown -R $APACHEUSER.$APACHEGROUP /var/www/moodle-data
else
ssh -x -o PasswordAuthentication=no $SERVERNAME '
source /opt/karoshi/serversetup/variables/distro
source /opt/karoshi/serversetup/distro/$DISTROCHOICE/all/software
chmod 0600 -R /var/www/moodle-data
chmod u+X -R /var/www/moodle-data
chown -R $APACHEUSER.$APACHEGROUP /var/www/moodle-data
'
fi
}


############################
#Make transfer folder
############################
if [ ! -d /home/transfer ]
then
mkdir /home/transfer
chown 0700 /home/transfer
fi
############################
#Copy /var/www/html/moodle
############################
echo "<li>"$CURRENTSERVERNAME - $SERVERNAME - $COPYMSG - /var/www/html/moodle"</li><br><br>"
sleep 2
if [ $SERVERNAME = $HOSTNAME ]
then
[ -d /var/www/html/moodle ] && rm -f -R /var/www/html/moodle
#Copy /var/www/html/moodle back to this server
echo '<pre style="font-size: 10pt; font-family:Arial, Times, Georgia, serif">'
#scp -p -r root@$CURRENTSERVERNAME:/var/www/html/moodle /var/www/html/
rsync --timeout=30 --verbose --dirs --perms --recursive --links --compress root@$CURRENTSERVERNAME:/var/www/html/moodle /var/www/html/
echo '</pre>'
fi
if [ $CURRENTSERVERNAME = $HOSTNAME ]
then
#Copy /var/www/html/moodle from this server to a new server
ssh -x -o PasswordAuthentication=no $SERVERNAME '
[ -d /var/www/html/moodle ] && rm -f -R /var/www/html/moodle
'
echo '<pre style="font-size: 10pt; font-family:Arial, Times, Georgia, serif">'
#scp -p -r /var/www/html/moodle root@$SERVERNAME:/var/www/html/
rsync --timeout=30 --dirs --recursive --links --compress /var/www/html/moodle root@$SERVERNAME:/var/www/html/
echo '</pre>'
fi
if [ $CURRENTSERVERNAME != $HOSTNAME ] && [ $SERVERNAME != $HOSTNAME ]
then
ssh -x -o PasswordAuthentication=no $SERVERNAME '
[ -d /var/www/html/moodle ] && rm -f -R /var/www/html/moodle
'
#Copy /var/www/html/moodle between remote servers
#copy /var/www/html/moodle to the pdc
echo '<pre style="font-size: 10pt; font-family:Arial, Times, Georgia, serif">'
#scp -p -r root@$CURRENTSERVERNAME:/var/www/html/moodle /home/transfer/
rsync --timeout=30 --verbose --dirs --perms --recursive --links --compress root@$CURRENTSERVERNAME:/var/www/html/moodle /home/transfer/
echo '</pre>'
#Copy /var/www/html/moodle to the new server
echo '<pre style="font-size: 10pt; font-family:Arial, Times, Georgia, serif">'
#scp -p -r /home/transfer/moodle root@$SERVERNAME:/var/www/html/
rsync --timeout=30 --dirs --recursive --links --compress /home/transfer/moodle root@$SERVERNAME:/var/www/html/
echo '</pre>'
fi
############################
#Copy /var/www/moodle-data
############################
echo "<li>"$CURRENTSERVERNAME - $SERVERNAME - $COPYMSG - /var/www/moodle-data"</li><br><br>"
sleep 2
if [ $SERVERNAME = $HOSTNAME ]
then
#Copy /var/www/moodle-data back to this server
[ -d /var/www/moodle-data ] && rm -f -R /var/www/moodle-data
echo '<pre style="font-size: 10pt; font-family:Arial, Times, Georgia, serif">'
#scp -p -r root@$CURRENTSERVERNAME:/var/www/moodle-data /var/www/
rsync --timeout=30 --verbose --dirs --perms --recursive --links --compress root@$CURRENTSERVERNAME:/var/www/moodle-data /var/www/
echo '</pre>'
fi
if [ $CURRENTSERVERNAME = $HOSTNAME ]
then
ssh -x -o PasswordAuthentication=no $SERVERNAME '
[ -d /var/www/moodle-data ] && rm -f -R /var/www/moodle-data
'
#Copy /var/www/moodle-data from this server to a new server
echo '<pre style="font-size: 10pt; font-family:Arial, Times, Georgia, serif">'
#scp -p -r /var/www/moodle-data root@$SERVERNAME:/var/www/
rsync --timeout=30 --verbose --dirs --perms --recursive --links --compress /var/www/moodle-data root@$SERVERNAME:/var/www/
echo '</pre>'
fi
if [ $CURRENTSERVERNAME != $HOSTNAME ] && [ $SERVERNAME != $HOSTNAME ]
then
ssh -x -o PasswordAuthentication=no $SERVERNAME '
[ -d /var/www/moodle-data ] && rm -f -R /var/www/moodle-data
'
#Copy /var/www/moodle-data between remote servers
#Copy /var/www/moodle-data to the pdc
echo '<pre style="font-size: 10pt; font-family:Arial, Times, Georgia, serif">'
#scp -p -r root@$CURRENTSERVERNAME:/var/www/moodle-data /home/transfer/
rsync --timeout=30 --verbose --dirs --perms --recursive --links --compress root@$CURRENTSERVERNAME:/var/www/moodle-data /home/transfer/
echo '</pre>'
#Copy /var/www/moodle-data to the new server
echo '<pre style="font-size: 10pt; font-family:Arial, Times, Georgia, serif">'
#scp -p -r /home/transfer/moodle-data root@$SERVERNAME:/var/www/
rsync --timeout=30 --verbose --dirs --perms --recursive --links --compress /home/transfer/moodle-data root@$SERVERNAME:/var/www/
echo '</pre>'
fi

#Set permissions
set_moodle_perms

##########################
#Dump existing moodle database
##########################
echo "<li>"$CURRENTSERVERNAME - $DUMPDBMSG"</li><br><br>"

if [ $CURRENTSERVERNAME = $HOSTNAME ]
then
/opt/karoshi/serversetup/all/"useful scripts"/mysql_root_pass
#Get root mysql password
MYSQLPASS=`cat /opt/karoshi/server_network/mysql/.key | gpg --no-tty --passphrase-fd 0 -o - /opt/karoshi/server_network/mysql/mysql_password.gpg 2>/dev/null`
mysqldump -u root -p$MYSQLPASS moodle > /home/transfer/moodle.sql
else
ssh -x -o PasswordAuthentication=no $CURRENTSERVERNAME '
if [ ! -d /home/transfer ]
then
mkdir /home/transfer
chown root.root /home/transfer
chown 0700 /home/transfer
fi
#Get root mysql password
MYSQLPASS=`cat /opt/karoshi/server_network/mysql/.key | gpg --no-tty --passphrase-fd 0 -o - /opt/karoshi/server_network/mysql/mysql_password.gpg 2>/dev/null`
mysqldump -u root -p$MYSQLPASS moodle > /home/transfer/moodle.sql
'
echo '<pre style="font-size: 10pt; font-family:Arial, Times, Georgia, serif">'
scp -p -r root@$CURRENTSERVERNAME:/home/transfer/moodle.sql /home/transfer/
echo '</pre>'
fi

#Copy moodle database to new moodle server
if [ $SERVERNAME != $HOSTNAME ]
then
ssh -x -o PasswordAuthentication=no $SERVERNAME '
if [ ! -d /home/transfer ]
then
mkdir /home/transfer
chown root.root /home/transfer
chown 0700 /home/transfer
fi
'
echo '<pre style="font-size: 10pt; font-family:Arial, Times, Georgia, serif">'
scp -p -r /home/transfer/moodle.sql root@$SERVERNAME:/home/transfer/
echo '</pre>'
fi
######################
#Pipe in database
######################
echo "<li>"$SERVERNAME - $PIPEDBMSG"</li><br><br>"
if [ $SERVERNAME = $HOSTNAME ]
then
#Get moodle password
MOODLEPASS=`grep '$CFG->dbpass' /var/www/html/moodle/config.php | cut -d"'" -f2 | sed -n 1,1p`
else
MOODLEPASS=`grep '$CFG->dbpass' /home/transfer/moodle/config.php | cut -d"'" -f2 | sed -n 1,1p`
fi

echo GRANT ALL PRIVILEGES ON moodle.\* TO "'"moodle_user"'"@"'"localhost"'" IDENTIFIED BY "'"$MOODLEPASS"'"';' > /home/transfer/mysqlperms.sql
echo ALTER DATABASE moodle DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_unicode_ci';' >> /home/transfer/mysqlperms.sql

if [ $SERVERNAME = $HOSTNAME ]
then
/opt/karoshi/serversetup/all/"useful scripts"/mysql_root_pass
#Get root mysql password
MYSQLPASS=`cat /opt/karoshi/server_network/mysql/.key | gpg --no-tty --passphrase-fd 0 -o - /opt/karoshi/server_network/mysql/mysql_password.gpg 2>/dev/null`
mysqladmin -f --password=$MYSQLPASS drop moodle 1>/dev/null 2>/dev/null
sleep 1
mysqladmin --password=$MYSQLPASS create moodle
sleep 1
mysql --password=$MYSQLPASS moodle < /home/transfer/moodle.sql
mysql --password=$MYSQLPASS < /home/transfer/mysqlperms.sql
else
echo '<pre style="font-size: 10pt; font-family:Arial, Times, Georgia, serif">'
scp -p -r /home/transfer/mysqlperms.sql root@$SERVERNAME:/home/transfer/
echo '</pre>'
ssh -x -o PasswordAuthentication=no $SERVERNAME '
#Get root mysql password
MYSQLPASS=`cat /opt/karoshi/server_network/mysql/.key | gpg --no-tty --passphrase-fd 0 -o - /opt/karoshi/server_network/mysql/mysql_password.gpg 2>/dev/null`
mysqladmin -f --password=$MYSQLPASS drop moodle 1>/dev/null 2>/dev/null
sleep 1
mysqladmin --password=$MYSQLPASS create moodle
sleep 1
mysql --password=$MYSQLPASS moodle < /home/transfer/moodle.sql
mysql --password=$MYSQLPASS < /home/transfer/mysqlperms.sql
'
fi

[ -d /home/transfer ] && rm -f -R /home/transfer

echo "<b>"$SERVERNAME - $COMPLETEDMSG5"</b><br><br>"
echo "<b>"$MIGRATECHECKMSG"</b><br><br>"
fi
fi

