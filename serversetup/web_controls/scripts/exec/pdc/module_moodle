#!/bin/bash
#Copyright (C) 2010 Paul Sharrad

#This file is part of Karoshi Server.
#
#Karoshi Server is free software: you can redistribute it and/or modify
#it under the terms of the GNU Affero General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#Karoshi Server is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU Affero General Public License for more details.
#
#You should have received a copy of the GNU Affero General Public License
#along with Karoshi Server.  If not, see <http://www.gnu.org/licenses/>.

#
#The Karoshi Team can be contacted at: 
#mpsharrad@karoshi.org.uk
#jsharrad@karoshi.org.uk

#
#Website: http://www.karoshi.org.uk
LOG_DATE=$(date +%F)
########################
#Check md5checksum
########################
if ! test -f /opt/karoshi/web_controls/checksums/admin_checksums/module_moodle_cgi
then
	echo "$(date): module_moodle - No Checksum" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi
source /opt/karoshi/web_controls/checksums/admin_checksums/module_moodle_cgi
Checksum=$(sha256sum /var/www/cgi-bin_karoshi/admin/module_moodle.cgi | cut -d' ' -f1)
[ -z "$Checksum" ] && Checksum=not_set
if [ "$Checksum"'check' != "$module_moodle_cgi"'check' ]
then
	echo "$(date): module_moodle - Incorrect Checksum" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi

########################
#Get variables
########################
numArgs="$#"
if [ "$numArgs" != 0 ]
then
	echo "$(date): module_moodle - incorrect number of arguments" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi

read DATA
DATA=$(echo "$DATA" | tr -cd 'A-Za-z0-9\._:\-%')
if [ -z "$DATA" ]
then
	echo "$(date): module_moodle - no data" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi
REMOTE_USER=$(echo "$DATA" | cut -s -d: -f1)
REMOTE_ADDR=$(echo "$DATA" | cut -s -d: -f2)
RemoteCheckSum=$(echo "$DATA" | cut -s -d: -f3)
ALIAS=$(echo "$DATA" | cut -s -d: -f4 | sed 's/%3A/:/g' | sed 's/%2F/\//g')
SERVERNAME=$(echo "$DATA" | cut -s -d: -f5)
########################
#Check data
########################
if [ "$RemoteCheckSum"'check' != "$Checksum"'check' ]
then
	echo "$(date): module_moodle - Not called by module_moodle.cgi" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi
if [ -z "$REMOTE_USER" ]
then
	echo "$(date): module_moodle - Blank remote user" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi
if [ -z "$REMOTE_ADDR" ]
then
	echo "$(date): module_moodle - Blank remote tcpip address" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi
if [ -z "$ALIAS" ]
then
	echo "$(date): module_moodle - Blank alias by $REMOTE_USER from $REMOTE_ADDR" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit
fi
if [ -z "$SERVERNAME" ]
then
	echo "$(date): module_moodle - Blank domain by $REMOTE_USER from $REMOTE_ADDR" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit
fi
if [[ $(grep -c ^"$REMOTE_USER": /opt/karoshi/web_controls/web_access_admin) != 1 ]]
then
	echo "$(date): module_moodle - access denied to $REMOTE_USER from $REMOTE_ADDR" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi
echo "$(date): setupmoodle by $REMOTE_USER from $REMOTE_ADDR" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"

[ -f /opt/karoshi/web_controls/user_prefs/"$REMOTE_USER" ] && source /opt/karoshi/web_controls/user_prefs/"$REMOTE_USER"

#Check that this server has been setup with the correct authentication
if [[ "$SERVERNAME" != $(hostname-fqdn) ]]
then
	echo "$REMOTE_USER:$REMOTE_ADDR:$Checksum:$SERVERNAME:users:" | /opt/karoshi/serversetup/modules/authentication/check_auth
	if [ "$?" = 101 ]
	then
		echo "$AUTHENTICATIONFAILMSG<br><br>"
		echo "$(date): module_moodle - $SERVERNAME does not have the correct authentication for this module by $REMOTE_USER from $REMOTE_ADDR" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
		sleep 2
		exit 101
	fi
fi

echo '<div class="sectiontitle">'$"Setup Moodle"' - '"$SERVERNAME"'</div><br></div><div id="infobox">'

source /opt/karoshi/server_network/domain_information/domain_name
source /opt/karoshi/serversetup/variables/distro
source /opt/karoshi/serversetup/distro/"$DISTROCHOICE"/all/software

#Update alias entry for the server
[ ! -d /opt/karoshi/server_network/aliases ] && mkdir -p /opt/karoshi/server_network/aliases
touch /opt/karoshi/server_network/aliases/"$SERVERNAME"
[[ $(grep -c -w "$ALIAS" /opt/karoshi/server_network/aliases/"$SERVERNAME") = 0 ]] && echo "$ALIAS" >> /opt/karoshi/server_network/aliases/"$SERVERNAME"

#Create keytab for moodle
echo "$REMOTE_USER:$REMOTE_ADDR:$Checksum:$SERVERNAME:HTTP:moodle:$SERVERNAME:www-data:" | /opt/karoshi/serversetup/modules/authentication/add_keytab

function check_already_installed {
if [[ "$SERVERNAME" = $(hostname-fqdn) ]]
then
#Check to see if moodle is already installed
if [ -d /var/www/html/moodle ]
then
	echo "$(date): module_moodle - moodle is already installed on $SERVERNAME by $REMOTE_USER from $REMOTE_ADDR" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	echo $"Moodle is already installed on this server."
	exit 101
	fi
else
	ssh -x -o PasswordAuthentication=no "$SERVERNAME" '
	#Check to see if moodle is already installed
	if [ -d /var/www/html/moodle ]
	then
	echo '$"Moodle is already installed on this server."'
	exit 101
	fi'
	if [ "$?" = 101 ]
	then
		echo "$(date): module_moodle - moodle is already installed on $SERVERNAME by $REMOTE_USER from $REMOTE_ADDR" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
		exit 101
	fi
fi
}

function add_dns_entry {
#Add entry to samba4 dns
LDAPPASS=$(sed -n 1,1p /etc/ldap.secret)
source /opt/karoshi/server_network/domain_information/domain_name
echo "$(date): module_moodle - checking if $ALIAS.$REALM is in the dns records by $REMOTE_USER from $REMOTE_ADDR" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
samba-tool dns query 127.0.0.1 "$REALM" "$ALIAS.$REALM" CNAME --username=Administrator --password="$LDAPPASS" 1>> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE" 2>> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
if [ "$?" != 0 ]
then
	echo "$(date): module_moodle - adding $ALIAS for $SERVERNAME to the dns records by $REMOTE_USER from $REMOTE_ADDR" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	samba-tool dns add 127.0.0.1 "$REALM" "$ALIAS" CNAME "$SERVERNAME" --username=Administrator --password="$LDAPPASS" 1>> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE" 2>> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
fi
}

function install_moodle {

#Edit moodle.sql with the correct subnet
THISIP=$(net lookup "$HOSTNAME")
THISSUBNETMASK=$(grep -w netmask /etc/network/interfaces | sed -n 1,1p | cut -d' ' -f2)
NETWORK=$(ipcalc "$THISIP/$THISSUBNETMASK" | grep -w ^Network: | sed 's/ * / /g' | cut -d' ' -f2)

cp /opt/karoshi/serversetup/modules/moodle/moodle.sql /opt/karoshi/serversetup/modules/moodle/moodle_backup.$$.sql
sed -i 's@CHANGETHISSUBNET@'"$NETWORK"'@g' /opt/karoshi/serversetup/modules/moodle/moodle.sql

#Install
if [[ "$SERVERNAME" = $(hostname-fqdn) ]]
then
	echo "$REMOTE_USER:$REMOTE_ADDR:$Checksum:$SERVERNAME:$ALIAS:" | /opt/karoshi/serversetup/modules/moodle/setupmoodle
else

	#Copy in domain information
	scp -p -r /opt/karoshi/server_network/domain_information root@"$SERVERNAME":/opt/karoshi/server_network/ 1> /dev/null

	#Install moodle
	ssh -x -o PasswordAuthentication=no "$SERVERNAME" '
	echo '"$REMOTE_USER:$REMOTE_ADDR:$Checksum:$SERVERNAME:$ALIAS:"' | /opt/karoshi/serversetup/modules/moodle/setupmoodle
	'
fi

#Restore moodle.sql
cp -f /opt/karoshi/serversetup/modules/moodle/moodle_backup."$$".sql /opt/karoshi/serversetup/modules/moodle/moodle.sql 

}

function add_role_information {
[ ! -d /opt/karoshi/server_network/servers/"$SERVERNAME" ] && mkdir -p /opt/karoshi/server_network/servers/"$SERVERNAME"
echo ''$"Moodle E-Learning Server"'<br>' > /opt/karoshi/server_network/servers/"$SERVERNAME"/moodle
echo '<a href="https://'"$ALIAS.$REALM"'/moodle" target="_blank">https://'"$ALIAS.$REALM"'/moodle</a><br>' >> /opt/karoshi/server_network/servers/"$SERVERNAME"/moodle
[ -f /opt/karoshi/server_network/servers/"$SERVERNAME"/no_role ] && rm -f /opt/karoshi/server_network/servers/"$SERVERNAME"/no_role
echo $"Apache Web Server""<br>" > /opt/karoshi/server_network/servers/"$SERVERNAME"/apacheserver
echo "$SERVERNAME" > /opt/karoshi/server_network/moodleserver
echo "$DOMAINPATH" > /opt/karoshi/server_network/moodledomain
[ ! -d /opt/karoshi/server_network/webservers/ ] && mkdir -p /opt/karoshi/server_network/webservers
echo "$SERVERNAME" > /opt/karoshi/server_network/webservers/"$SERVERNAME"
sed -i 's/WEBCTRL=no/WEBCTRL=yes/g' /opt/karoshi/server_network/web_controls/menusettings
}

function apply_ssl_certificate {
#######################
#Apply certificate
#######################
echo "$REMOTE_USER:$REMOTE_ADDR:$SERVERNAME:enablecert:" | /opt/karoshi/serversetup/distro/"$DISTROCHOICE"/scripts/apachesslcert
[ "$?" != 0 ] && exit 101 
}

function create_linux_client_icon {
for KAROSHICLIENT in $(ls -1 /var/lib/samba/netlogon/linuxclient/ | grep ^karoshi) 
do
	[ ! -d /var/lib/samba/netlogon/linuxclient/"$KAROSHICLIENT"/desktop-icons/all ] && mkdir -p /var/lib/samba/netlogon/linuxclient/"$KAROSHICLIENT"/desktop-icons/all
	echo '[Desktop Entry]
	Version=1.0
	Type=Link
	Name=Moodle
	Comment=Moodle
	Icon=moodle
	URL=https://'"$ALIAS.$REALM"'/moodle' > /var/lib/samba/netlogon/linuxclient/"$KAROSHICLIENT"/desktop-icons/all/Moodle.desktop
done
}

function add_moodle_users {
echo '<ul><li>'$"Adding users to the moodle database"'</li></ul>'
/opt/karoshi/serversetup/modules/moodle/moodle_add_all_users
}

check_already_installed
apply_ssl_certificate
add_dns_entry
#if not transferring an existing setup then install moodle
install_moodle
add_role_information
create_linux_client_icon
add_moodle_users

########################
#Modify prefs.js for windows firefox
########################
function modify_prefs.js {

#Set clipboard setting for moodle
if [[ $(grep -c 'user_pref("capability.policy.allowclipboard.sites",' "$PREFSJSPATH") -gt 0 ]]
then
	LINE=$(grep -n 'user_pref("capability.policy.allowclipboard.sites",' "$PREFSJSPATH" | cut -d: -f1)
	sed -i "$LINE"'c''user_pref("capability.policy.allowclipboard.sites", "http://'"$SERVERNAME"'.internal");' "$PREFSJSPATH"
else
	echo 'user_pref("capability.policy.allowclipboard.sites", "http://'"$SERVERNAME"'.internal");' >> "$PREFSJSPATH"
fi

#Set no proxy settings
NOPROXYSERVERS=$(ls /opt/karoshi/server_network/servers/)
NOPROXYSERVERS="${NOPROXYSERVERS// /,}"
NOPROXYSERVERS2=$(ls /opt/karoshi/server_network/servers/)
NOPROXYSERVERS2=$(echo "$NOPROXYSERVERS2" | sed 's/ /.internal, /g' | sed 's/$/.internal/g')
NOPROXYSERVERS="$NOPROXYSERVERS, $NOPROXYSERVERS2"

if [[ $(grep -c 'user_pref("network.proxy.no_proxies_on",' "$PREFSJSPATH") -gt 0 ]]
then
	LINE=$(grep -n 'user_pref("network.proxy.no_proxies_on",' "$PREFSJSPATH" | cut -d: -f1)
	sed -i "$LINE"'c''user_pref("network.proxy.no_proxies_on", "localhost, 127.0.0.1, '"$NOPROXYSERVERS"'");' "$PREFSJSPATH"
else
	echo 'user_pref("network.proxy.no_proxies_on", "localhost, 127.0.0.1, '"$NOPROXYSERVERS"'");' >> "$PREFSJSPATH"
fi
}

#Windows clients
for PROFILE in /home/applications/profiles/*
do
	unset PREFSJSPATH 
	#Find prefs.js
	PREFSJSPATH=$(find "$PROFILE"/ -name "prefs.js")
	#Check that PREFSJSPATH has been set
	if [ -n "$PREFSJSPATH" ]
	then
		modify_prefs.js
	fi
done

#Add in monitoring for the server
if [ -f /opt/karoshi/server_network/monitoringserver ]
then
	/opt/karoshi/serversetup/modules/monitoring/scripts/add_karoshi_server_monitors "$SERVERNAME"
fi

###########################
#Show completed message
###########################
echo '<br>'$"Moodle has been installed and can be accessed from" - '<a href="https://'"$ALIAS.$REALM"'/moodle" target="_blank">'"$ALIAS.$REALM"'/moodle</a>'
echo '<br>'$"username"":admin - "$"password"": admin"
echo '<br><p style="font-weight:bold; font-size:20px;">'$"Please login and change this password immediately."'</p><br>'

exit

