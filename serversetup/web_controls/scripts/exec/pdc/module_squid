#!/bin/bash
#Copyright (C) 2010 Paul Sharrad

#This file is part of Karoshi Server.
#
#Karoshi Server is free software: you can redistribute it and/or modify
#it under the terms of the GNU Affero General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#Karoshi Server is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU Affero General Public License for more details.
#
#You should have received a copy of the GNU Affero General Public License
#along with Karoshi Server.  If not, see <http://www.gnu.org/licenses/>.

#
#The Karoshi Team can be contacted at: 
#mpsharrad@karoshi.org.uk
#jharris@karoshi.org.uk
#aball@karoshi.org.uk
#
#Website: http://www.karoshi.org.uk
LOG_DATE=`date +%F`
[ $LOG_DATE'null' = null ] && exit
########################
#Check md5checksum
########################
if ! test -f /opt/karoshi/web_controls/checksums/admin_checksums/module_squid_cgi
then
echo `date`: module_squid - No MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
source /opt/karoshi/web_controls/checksums/admin_checksums/module_squid_cgi
MD5SUM=`md5sum /var/www/cgi-bin_karoshi/admin/module_squid.cgi | cut -d' ' -f1`
[ $MD5SUM'null' = null ] && MD5SUM=not_set
if [ $MD5SUM'check' != $module_squid_cgi'check' ]
then
echo `date`: module_squid - Incorrect MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi

########################
#Get variables
########################
numArgs=$#
if [ $numArgs != 0 ]
then
echo `date`: module_squid - incorrect number of arguments >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi

read DATA
DATA=`echo $DATA | tr -cd 'A-Za-z0-9\._:%\n-+-'`
if [ $DATA'null' = null ]
then
echo `date`: module_squid - no data >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
REMOTE_USER=`echo "$DATA" | cut -s -d: -f1`
REMOTE_ADDR=`echo "$DATA" | cut -s -d: -f2`
REMOTE_MD5=`echo "$DATA" | cut -s -d: -f3`
SERVERNAME=`echo "$DATA" | cut -s -d: -f4`
########################
#Check data
########################
if [ $REMOTE_MD5'check' != $MD5SUM'check' ]
then
echo `date`: module_squid - Not called by module_squid.cgi >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
if [ -z "$REMOTE_USER" ]
then
echo `date`: module_squid - Blank remote user >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
if [ -z "$REMOTE_ADDR" ]
then
echo `date`: module_squid - Blank remote tcpip address >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
if [ -z "$SERVERNAME" ]
then
echo `date`: module_squid - Blank servername by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi

echo `date`: module_squid - Setting up $SERVERNAME by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE

########################
#Language
########################
LANGCHOICE=englishuk
STYLESHEET=defaultstyle.css
[ -f /opt/karoshi/web_controls/user_prefs/$REMOTE_USER ] && source /opt/karoshi/web_controls/user_prefs/$REMOTE_USER
[ -f /opt/karoshi/serversetup/language/$LANGCHOICE/modules/squid/setupsquid ] || LANGCHOICE=englishuk
source /opt/karoshi/serversetup/language/$LANGCHOICE/modules/squid/setupsquid
[ -f /opt/karoshi/web_controls/language/$LANGCHOICE/all ] || LANGCHOICE=englishuk
source /opt/karoshi/web_controls/language/$LANGCHOICE/all

source /opt/karoshi/server_network/domain_information/domain_name

#Create keytab for squid
echo "$REMOTE_USER:$REMOTE_ADDR:$MD5SUM:$SERVERNAME:HTTP:squid:$SERVERNAME.$REALM:proxy:" | /opt/karoshi/serversetup/modules/authentication/add_keytab

PDCIP=`net lookup $HOSTNAME`
LDAPSTATUS=notset
if [ $SERVERNAME != $HOSTNAME ]
then
PDCIP=`net lookup $HOSTNAME`
#Get samba 4 database password
LDAPPASS=`sed -n 1,1p /etc/ldap.secret`

#Check that this server has been setup with the correct authentication
echo "$REMOTE_USER:$REMOTE_ADDR:$MD5SUM:$SERVERNAME:users:" | /opt/karoshi/serversetup/modules/authentication/check_auth
if [ $? = 101 ]
then
echo $AUTHENTICATIONFAILMSG"<br><br>"
echo `date`: module_squid - $SERVERNAME does not have the correct authentication "for" this module by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi

#Copy in language files
scp -p -r /opt/karoshi/serversetup/language/$LANGCHOICE/modules/squid root@$SERVERNAME:/opt/karoshi/serversetup/language/$LANGCHOICE/modules/ 1> /dev/null
#Copy in module
scp -p -r /opt/karoshi/serversetup/modules/squid root@$SERVERNAME:/opt/karoshi/serversetup/modules/ 1> /dev/null

#########################
#Run module
#########################

ssh -x -o PasswordAuthentication=no $SERVERNAME '
echo '$REMOTE_USER:$REMOTE_ADDR:$MD5SUM:$HOSTNAME:$PDCIP:$AUTHTYPE:$PASSWORD:' | /opt/karoshi/serversetup/modules/squid/setupsquid
'
[ `echo $?` = 101 ] && exit 101

else
echo $REMOTE_USER:$REMOTE_ADDR:$MD5SUM:$HOSTNAME:$PDCIP:$AUTHTYPE:$PASSWORD: | /opt/karoshi/serversetup/modules/squid/setupsquid
[ `echo $?` = 101 ] && exit 101
fi

#Add role information
[ ! -d /opt/karoshi/server_network/servers/$SERVERNAME ] && mkdir -p /opt/karoshi/server_network/servers/$SERVERNAME
echo $ROLE"<br>" > /opt/karoshi/server_network/servers/$SERVERNAME/squid
echo $ROLE3"<br>" > /opt/karoshi/server_network/servers/$SERVERNAME/apt-cacher-ng
sed -i 's/INTERNETCTRL=no/INTERNETCTRL=yes/g' /opt/karoshi/server_network/menusettings
[ -f /opt/karoshi/server_network/servers/$SERVERNAME/no_role ] && rm -f /opt/karoshi/server_network/servers/$SERVERNAME/no_role
echo $SERVERNAME > /opt/karoshi/server_network/proxyserver

#Copy in allowed_file_extensions
[ ! -d /opt/karoshi/server_network/dansguardian ] && mkdir -p /opt/karoshi/server_network/dansguardian
[ ! -f /opt/karoshi/server_network/dansguardian/allowed_file_extensions ] && cp -f /opt/karoshi/serversetup/modules/squid/allowed_file_extensions /opt/karoshi/server_network/dansguardian/ 

########################
#Modify prefs.js
########################
function modify_prefs.js {
#Point firefox to proxy server

#Turn off proxy if no proxy has been setup
sed -i 's/user_pref("network.proxy.type", 0);/user_pref("network.proxy.type", 1);/g' "$PREFSJSPATH"
#Set http proxy settings
if [ `grep -c 'user_pref("network.proxy.http",' "$PREFSJSPATH"` -gt 0 ]
then
LINE=`grep -n 'user_pref("network.proxy.http",' "$PREFSJSPATH" | cut -d: -f1`
sed -i $LINE'c''user_pref("network.proxy.http", "'$PROXYSERVER'.internal");' "$PREFSJSPATH"
else
echo 'user_pref("network.proxy.http", "'$PROXYSERVER'.internal");' >> "$PREFSJSPATH"
fi
#Set ftp proxy settings
if [ `grep -c 'user_pref("network.proxy.ftp",' "$PREFSJSPATH"` -gt 0 ]
then
LINE=`grep -n 'user_pref("network.proxy.ftp",' "$PREFSJSPATH" | cut -d: -f1`
sed -i $LINE'c''user_pref("network.proxy.ftp", "'$PROXYSERVER'.internal");' "$PREFSJSPATH"
else
echo 'user_pref("network.proxy.ftp", "'$PROXYSERVER'.internal");' >> "$PREFSJSPATH"
fi
#Set gopher proxy settings
if [ `grep -c 'user_pref("network.proxy.gopher",' "$PREFSJSPATH"` -gt 0 ]
then
LINE=`grep -n 'user_pref("network.proxy.gopher",' "$PREFSJSPATH" | cut -d: -f1`
sed -i $LINE'c''user_pref("network.proxy.gopher", "'$PROXYSERVER'.internal");' "$PREFSJSPATH"
else
echo 'user_pref("network.proxy.gopher", "'$PROXYSERVER'.internal");' >> "$PREFSJSPATH"
fi
#Set socks proxy settings
if [ `grep -c 'user_pref("network.proxy.socks",' "$PREFSJSPATH"` -gt 0 ]
then
LINE=`grep -n 'user_pref("network.proxy.socks",' "$PREFSJSPATH" | cut -d: -f1`
sed -i $LINE'c''user_pref("network.proxy.socks", "'$PROXYSERVER'.internal");' "$PREFSJSPATH"
else
echo 'user_pref("network.proxy.socks", "'$PROXYSERVER'.internal");' >> "$PREFSJSPATH"
fi
#Set ssl proxy settings
if [ `grep -c 'user_pref("network.proxy.ssl",' "$PREFSJSPATH"` -gt 0 ]
then
LINE=`grep -n 'user_pref("network.proxy.ssl",' "$PREFSJSPATH" | cut -d: -f1`
sed -i $LINE'c''user_pref("network.proxy.ssl", "'$PROXYSERVER'.internal");' "$PREFSJSPATH"
else
echo 'user_pref("network.proxy.ssl", "'$PROXYSERVER'.internal");' >> "$PREFSJSPATH"
fi
#Set startpage settings
if [ `grep -c 'user_pref("browser.startup.homepage",' "$PREFSJSPATH"` -gt 0 ]
then
LINE=`grep -n 'user_pref("browser.startup.homepage",' "$PREFSJSPATH" | cut -d: -f1`
sed -i $LINE'c''user_pref("browser.startup.homepage", "http://'$PROXYSERVER'.internal/index.html");' "$PREFSJSPATH"
else
echo 'user_pref("browser.startup.homepage", "http://'$PROXYSERVER'.internal/index.html");' >> "$PREFSJSPATH"
fi

if [ -f /opt/karoshi/server_network/moodleserver ]
then
MOODLESERVER=`sed -n 1,1p /opt/karoshi/server_network/moodleserver`
#Set clipboard setting for moodle
if [ `grep -c 'user_pref("capability.policy.allowclipboard.sites",' "$PREFSJSPATH"` -gt 0 ]
then
LINE=`grep -n 'user_pref("capability.policy.allowclipboard.sites",' "$PREFSJSPATH" | cut -d: -f1`
sed -i $LINE'c''user_pref("capability.policy.allowclipboard.sites", "http://'$MOODLESERVER'.internal");' "$PREFSJSPATH"
else
echo 'user_pref("capability.policy.allowclipboard.sites", "http://'$MOODLESERVER'.internal");' >> "$PREFSJSPATH"
fi
fi

#Set no proxy settings
NOPROXYSERVERS=`ls /opt/karoshi/server_network/servers/`
NOPROXYSERVERS=`echo $NOPROXYSERVERS | sed 's/ /, /g'`
NOPROXYSERVERS2=`ls /opt/karoshi/server_network/servers/`
NOPROXYSERVERS2=`echo $NOPROXYSERVERS2 | sed 's/ /.internal, /g' | sed 's/$/.internal/g'`
NOPROXYSERVERS=`echo $NOPROXYSERVERS, $NOPROXYSERVERS2`

if [ `grep -c 'user_pref("network.proxy.no_proxies_on",' "$PREFSJSPATH"` -gt 0 ]
then
LINE=`grep -n 'user_pref("network.proxy.no_proxies_on",' "$PREFSJSPATH" | cut -d: -f1`
sed -i $LINE'c''user_pref("network.proxy.no_proxies_on", "localhost, 127.0.0.1, '"$NOPROXYSERVERS"'");' "$PREFSJSPATH"
else
echo 'user_pref("network.proxy.no_proxies_on", "localhost, 127.0.0.1, '"$NOPROXYSERVERS"'");' >> "$PREFSJSPATH"
fi

}

PROXYSERVER=`sed -n 1,1p /opt/karoshi/server_network/proxyserver`

#Windows clients
for PROFILE in /home/applications/profiles/*
do
unset PREFSJSPATH 
#Find prefs.js
PREFSJSPATH=`find $PROFILE/ -name "prefs.js"`
#Check that PREFSJSPATH has been set
if [ -n "$PREFSJSPATH" ]
then
modify_prefs.js
fi
done

#Create info file for linux clients proxy server
echo $PROXYSERVER > /var/lib/samba/netlogon/domain_information/proxy_server
exit

