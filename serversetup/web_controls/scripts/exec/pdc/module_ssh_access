#!/bin/bash
#Copyright (C) 2011 Paul Sharrad

#This file is part of Karoshi Server.
#
#Karoshi Server is free software: you can redistribute it and/or modify
#it under the terms of the GNU Affero General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#Karoshi Server is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU Affero General Public License for more details.
#
#You should have received a copy of the GNU Affero General Public License
#along with Karoshi Server.  If not, see <http://www.gnu.org/licenses/>.

#
#The Karoshi Team can be contacted at: 
#mpsharrad@karoshi.org.uk
#jsharrad@karoshi.org.uk

#
#Website: http://www.karoshi.org.uk
LOG_DATE=`date +%F`
[ -z "$LOG_DATE" ] && exit
########################
#Check md5checksum
########################
if ! test -f /opt/karoshi/web_controls/checksums/admin_checksums/module_ssh_access_cgi
then
	echo `date`: module_ssh_access - No Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
source /opt/karoshi/web_controls/checksums/admin_checksums/module_ssh_access_cgi
Checksum=`sha256sum /var/www/cgi-bin_karoshi/admin/module_ssh_access.cgi | cut -d' ' -f1`
[ -z "$Checksum" ] && Checksum=not_set
if [ $Checksum'check' != $module_ssh_access_cgi'check' ]
then
	echo `date`: module_ssh_access - Incorrect Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi

########################
#Get variables
########################
numArgs=$#
if [ $numArgs != 0 ]
then
	echo `date`: module_ssh_access - incorrect number of arguments >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi

read DATA
DATA=`echo $DATA | tr -cd 'A-Za-z0-9\._:%\n-+-'`
if [ -z "$DATA" ]
then
	echo `date`: module_ssh_access - no data >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi

REMOTE_USER=`echo "$DATA" | cut -s -d: -f1`
REMOTE_ADDR=`echo "$DATA" | cut -s -d: -f2`
RemoteCheckSum=`echo "$DATA" | cut -s -d: -f3`
RESTRICT=`echo "$DATA" | cut -s -d: -f4`
SERVERNAME=`echo "$DATA" | cut -s -d: -f5`
RESTRICTTYPE=`echo "$DATA" | cut -s -d: -f6`

if [ $RESTRICTTYPE != null ]
then
	if [ $RESTRICTTYPE = TCPIP ]
	then
		RESTRICT=`echo $RESTRICT | tr -cd '0-9.,'`
	else
		RESTRICT=`echo $RESTRICT | sed 's/%3A/-/g' | tr -cd 'A-Za-z0-9\-:,' | sed 's/^/~/g; s/,/,~/g'`
	fi
fi

#Get install type
INSTALL_TYPE=education
if [ -f /opt/karoshi/server_network/install_type ]
then
	INSTALL_TYPE=`sed -n 1,1p /opt/karoshi/server_network/install_type`
fi

########################
#Check data
########################
if [ $RemoteCheckSum'check' != $Checksum'check' ]
then
	echo `date`: module_ssh_access - Not called by module_ssh_access.cgi >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi

if [ -z "$REMOTE_USER" ]
then
	echo `date`: module_ssh_access - Blank remote user >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ -z "$REMOTE_ADDR" ]
then
	echo `date`: module_ssh_access - Blank remote tcpip address >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi

if [ -z "$RESTRICT" ]
then
	echo `date`: module_ssh_access - Setting up $SERVERNAME by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
else
	echo `date`: module_ssh_access - Setting up $SERVERNAME "for" $RESTRICT by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
fi
########################
#Language
########################

STYLESHEET=defaultstyle.css
[ -f /opt/karoshi/web_controls/user_prefs/$REMOTE_USER ] && source /opt/karoshi/web_controls/user_prefs/$REMOTE_USER
TEXTDOMAIN=karoshi-server

source /opt/karoshi/serversetup/variables/distro
#########################
#Modify shorewall rules
#########################

MODCHECK=`grep -c pdc_ssh_rule /etc/shorewall/rules`
if [ $MODCHECK = 0 ]
then
	echo '<ul><li>'$RESTRICT' '$"Allowing access on port 22"'</li></ul>'
	LINENUM=`grep -n 'LAST LINE -- ADD YOUR ENTRIES BEFORE THIS ONE -- DO NOT REMOVE' /etc/shorewall/rules | cut -d: -f1`
	if [ ! -z "$RESTRICT" ]
	then
		sed $LINENUM'c'\ACCEPT'	'net:$RESTRICT'	'fw'	'tcp'	'22'	'-'#'pdc_ssh_rule /etc/shorewall/rules > /etc/shorewall/rulestemp
	else
		sed $LINENUM'c'\ACCEPT'	'net'	'fw'	'tcp'	'22'	'-'#'pdc_ssh_rule /etc/shorewall/rules > /etc/shorewall/rulestemp
	fi
	rm -f /etc/shorewall/rules
	mv /etc/shorewall/rulestemp /etc/shorewall/rules
	echo '#'LAST LINE -- ADD YOUR ENTRIES BEFORE THIS ONE -- DO NOT REMOVE >> /etc/shorewall/rules
fi

if [ $MODCHECK != 0 ]
then
	LINENUM=`grep -n '#pdc_ssh_rule' /etc/shorewall/rules | cut -d: -f1`
	if [ ! -z "$RESTRICT" ]
	then
		sed $LINENUM'c'\ACCEPT'	'net:$RESTRICT'	'fw'	'tcp'	'22'	'-'#'pdc_ssh_rule /etc/shorewall/rules > /etc/shorewall/rulestemp
	else
		sed $LINENUM'c'\ACCEPT'	'net'	'fw'	'tcp'	'22'	'-'#'pdc_ssh_rule /etc/shorewall/rules > /etc/shorewall/rulestemp
	fi
	rm -f /etc/shorewall/rules
	mv /etc/shorewall/rulestemp /etc/shorewall/rules
fi
######################
#Restart shorewall
######################

/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/shorewall_stop 1>/dev/null
sleep 0.5
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/shorewall_start 1>/dev/null

######################
#Add ssh line to hosts.allow
######################
MODCHECK=`grep -c sshd':' /etc/hosts.allow`
if [ $MODCHECK = 0 ]
then
	if [ ! -z "$RESTRICT" ]
	then
		echo sshd: 127.0.0.1 , $RESTRICT >> /etc/hosts.allow
	fi
fi

#############################
#copy in config file
#############################
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/ssh_stop 1>/dev/null
mv /etc/ssh/sshd_config /etc/ssh/sshd_configbackup
cp -f /opt/karoshi/serversetup/distro/$DISTROCHOICE/extra_server/configfiles/sshd_config /etc/ssh/
sleep .5

#Modify ssh config to allow normal users if this is a home server setup.
if [ "$INSTALL_TYPE" = home ]
then
	sed -i 's/^#UsePAM no/UsePAM yes/g' /etc/ssh/sshd_config
fi

#Create ssh folder
[ ! -d /root/.ssh ] && mkdir /root/.ssh
chmod 0700 /root/.ssh
#Generate keys ??
/opt/karoshi/serversetup/distro/$DISTROCHOICE/extra_server/scripts/generate_ssh_keys

#Check that timeout has been set
TIMEOUTSTATUS=`grep -c '#''   'ConnectTimeout' '0 /etc/ssh/ssh_config`
[ "$TIMEOUTSTATUS" != 0 ] && sed -i 's/#   ConnectTimeout 0/ConnectTimeout 4/g' /etc/ssh/ssh_config

#Check that StrictHostkeychecking is set to no
HOSTKEYSTATUS=`grep -c '#''   'StrictHostKeyChecking' 'ask /etc/ssh/ssh_config`
[ $HOSTKEYSTATUS != 0 ] && sed -i 's/#   StrictHostKeyChecking ask/StrictHostKeyChecking no/g' /etc/ssh/ssh_config

#Stop ssh if it is running
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/ssh_status 1>/dev/null
if [ $? = 0 ]
then
	/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/ssh_stop 1>/dev/null
	sleep 1
fi

#Start ssh
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/ssh_start 1>/dev/null

#############################
#Ensure that ssh is running on boot
#############################
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/startonboot/ssh

#############################
#Add role information
#############################
[ ! -d /opt/karoshi/server_network/servers/$SERVERNAME ] && mkdir -p /opt/karoshi/server_network/servers/$SERVERNAME
if [ -z "$RESTRICT" ]
then
	echo $"Remote SSH Access""<br>" > /opt/karoshi/server_network/servers/$SERVERNAME/remote_ssh
else
	RESTRICT=`echo $RESTRICT | sed 's/~//g; s/-/:/g; s/,/, /g'`
	echo $"Remote SSH Access" $RESTRICT"<br>" > /opt/karoshi/server_network/servers/$SERVERNAME/remote_ssh
fi

#Add in monitoring for the server
[ -f /opt/karoshi/server_network/monitoringserver ] && /opt/karoshi/serversetup/modules/monitoring/scripts/add_karoshi_server_monitors $SERVERNAME

exit

