#!/bin/bash
#Copyright (C) 2010 Paul Sharrad

#This file is part of Karoshi Server.
#
#Karoshi Server is free software: you can redistribute it and/or modify
#it under the terms of the GNU Affero General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#Karoshi Server is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU Affero General Public License for more details.
#
#You should have received a copy of the GNU Affero General Public License
#along with Karoshi Server.  If not, see <http://www.gnu.org/licenses/>.

#
#The Karoshi Team can be contacted at: 
#mpsharrad@karoshi.org.uk
#jsharrad@karoshi.org.uk

#
#Website: http://www.karoshi.org.uk
LOG_DATE=`date +%F`
########################
#Check md5checksum
########################
if ! test -f /opt/karoshi/web_controls/checksums/admin_checksums/module_web_cgi
then
echo `date`: module_web - No MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
source /opt/karoshi/web_controls/checksums/admin_checksums/module_web_cgi
MD5SUM=`md5sum /var/www/cgi-bin_karoshi/admin/module_web.cgi | cut -d' ' -f1`
[ $MD5SUM'null' = null ] && MD5SUM=not_set
if [ $MD5SUM'check' != $module_web_cgi'check' ]
then
echo `date`: module_web - Incorrect MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi

########################
#Get variables
########################
numArgs=$#
if [ $numArgs != 0 ]
then
echo `date`: module_web - incorrect number of arguments >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi

read DATA
DATA=`echo $DATA | tr -cd 'A-Za-z0-9\._:\-%' | sed 's/UNDERSCORE/_/g'`
if [ $DATA'null' = null ]
then
echo `date`: module_web - no data >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
REMOTE_USER=`echo "$DATA" | cut -s -d: -f1`
REMOTE_ADDR=`echo "$DATA" | cut -s -d: -f2`
REMOTE_MD5=`echo "$DATA" | cut -s -d: -f3`
WEBSERVER=`echo "$DATA" | cut -s -d: -f4`
WEBDB=`echo "$DATA" | cut -s -d: -f5`
WEBDBUSER=`echo "$DATA" | cut -s -d: -f6`
WEBDBPASS=`echo "$DATA" | cut -s -d: -f7`
########################
#Check data
########################
if [ $REMOTE_MD5'check' != $MD5SUM'check' ]
then
echo `date`: module_web - Not called by module_web.cgi >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
if [ $REMOTE_USER'null' = null ]
then
echo `date`: module_web - Blank remote user >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
if [ $REMOTE_ADDR'null' = null ]
then
echo `date`: module_web - Blank remote tcpip address >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
if [ $WEBSERVER'null' = null ]
then
echo `date`: module_web - Blank domain by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
if [ `grep -c ^$REMOTE_USER: /opt/karoshi/web_controls/web_access_admin` != 1 ]
then
echo `date`: module_web - access denied to $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi

echo `date`: module_web on $WEBSERVER by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE

[ -f /opt/karoshi/web_controls/language/$LANGCHOICE/modules/web/setupweb ] || LANGCHOICE=englishuk
source /opt/karoshi/serversetup/language/$LANGCHOICE/modules/web/setupweb
[ -f /opt/karoshi/web_controls/language/$LANGCHOICE/all ] || LANGCHOICE=englishuk
source /opt/karoshi/web_controls/language/$LANGCHOICE/all

#Check to see if we need to create a database

if [ $WEBDB'null' != null ] && [ $WEBDBUSER'null' != null ] && [ $WEBDBPASS'null' != null ]
then
if [ $WEBDB != mysql ]
then
echo `date`: module_web - creating database $WEBDB "for" $WEBDBUSER on $WEBSERVER by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
CREATEDB=yes
else
CREATEDB=no
fi
fi

[ -f /opt/karoshi/web_controls/user_prefs/$REMOTE_USER ] && source /opt/karoshi/web_controls/user_prefs/$REMOTE_USER
[ -f /opt/karoshi/web_controls/language/$LANGCHOICE/modules/moodle/setupmoodle ] || LANGCHOICE=englishuk
source /opt/karoshi/serversetup/language/$LANGCHOICE/modules/moodle/setupmoodle
source /opt/karoshi/serversetup/variables/distro
source /opt/karoshi/serversetup/distro/$DISTROCHOICE/all/software


##########################
#Make sure that apache and mysql are running
##########################
echo "<li>"Making sure that apache and mysql are running"</li><br>"
if [ $WEBSERVER = `hostname-fqdn` ]
then
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/apache_status
[ $? != 0 ] && /opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/apache_start

/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/mysql_status
[ $? != 0 ] && /opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/mysql_start

/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/tftpd_status
[ $? != 0 ] && /opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/tftpd_start

#############################
#Ensure that apache and mysql are running on boot
#############################
echo "<li>"$STARTONBOOTMSG"</li><br>"
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/startonboot/apache
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/startonboot/mysql
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/startonboot/tftpd

else
ssh -x -o PasswordAuthentication=no $WEBSERVER '
source /opt/karoshi/serversetup/variables/distro

/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/apache_status
[ $? != 0 ] && /opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/apache_start

/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/mysql_status
[ $? != 0 ] && /opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/mysql_start

/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/tftpd_status
[ $? != 0 ] && /opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/tftpd_start

#############################
#Ensure that apache and mysql are running on boot
#############################
echo "<li>"'$STARTONBOOTMSG'"</li><br>"
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/startonboot/apache
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/startonboot/mysql
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/startonboot/tftpd
'
fi


echo "<li>"$SHOREWALLCHECKMSG"</li><br>"
if [ $WEBSERVER = `hostname-fqdn` ]
then
#####################################
#Ensure that apache ports are open in shorewall
#####################################

MODCHECK=`grep -c -w 80 /etc/shorewall/rules`
MODCHECK2=`grep -c -w 443 /etc/shorewall/rules`
MODCHECK3=`grep -c -w \#ftp_rule /etc/shorewall/rules`

MOD_SHOREWALL=no
ADD_APACHE_RULE=no
ADD_FTP_RULE=no
if [ $MODCHECK = 0 ]
then
MOD_SHOREWALL=yes
ADD_APACHE_RULE=yes
PORTS="80"
fi

if [ $MODCHECK2 = 0 ]
then
MOD_SHOREWALL=yes
ADD_APACHE_RULE=yes
PORTS="443"
fi

if [ $MODCHECK = 0 ] && [ $MODCHECK2 = 0 ]
then
MOD_SHOREWALL=yes
ADD_APACHE_RULE=yes
PORTS="80,443"
fi

if [ $MODCHECK3 = 0 ]
then
MOD_SHOREWALL=yes
ADD_FTP_RULE=yes
fi

if [ $ADD_APACHE_RULE = yes ]
then
echo '<li>'$SHOREWALLMSG1'</li><br>'
LINENUM=`grep -n 'LAST LINE -- ADD YOUR ENTRIES BEFORE THIS ONE -- DO NOT REMOVE' /etc/shorewall/rules | cut -d: -f1`
sed -i $LINENUM'c'\ACCEPT'	'net'	'fw'	'tcp'	'$PORTS'	'-'#'apache_webserver_rule /etc/shorewall/rules
echo '#'LAST LINE -- ADD YOUR ENTRIES BEFORE THIS ONE -- DO NOT REMOVE >> /etc/shorewall/rules
fi

if [ $ADD_FTP_RULE = yes ]
then
echo '<li>'$SHOREWALLMSG2'</li><br>'
LINENUM=`grep -n 'LAST LINE -- ADD YOUR ENTRIES BEFORE THIS ONE -- DO NOT REMOVE' /etc/shorewall/rules | cut -d: -f1`
sed -i $LINENUM'c'\ACCEPT'	'net'	'fw'	'tcp'	'20,21'	'-'#'ftp_rule /etc/shorewall/rules
echo '#'LAST LINE -- ADD YOUR ENTRIES BEFORE THIS ONE -- DO NOT REMOVE >> /etc/shorewall/rules
fi

if [ $MOD_SHOREWALL = yes ]
then
echo '<li>'$RESTARTSWMSG'</li><br>'
source /opt/karoshi/serversetup/variables/distro
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/shorewall_stop 1>/dev/null
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/shorewall_start 1>/dev/null
fi

else
ssh -x -o PasswordAuthentication=no $WEBSERVER '
#####################################
#Ensure that apache ports are open in shorewall
#####################################
source /opt/karoshi/serversetup/variables/distro

MODCHECK=`grep -c -w 80 /etc/shorewall/rules`
MODCHECK2=`grep -c -w 443 /etc/shorewall/rules`
MODCHECK3=`grep -c -w \#ftp_rule /etc/shorewall/rules`

MOD_SHOREWALL=no
ADD_APACHE_RULE=no
ADD_FTP_RULE=no


if [ $MODCHECK = 0 ]
then
ADD_APACHE_RULE=yes
MOD_SHOREWALL=yes
PORTS="80"
fi

if [ $MODCHECK2 = 0 ]
then
ADD_APACHE_RULE=yes
MOD_SHOREWALL=yes
PORTS="443"
fi

if [ $MODCHECK = 0 ] && [ $MODCHECK2 = 0 ]
then
ADD_APACHE_RULE=yes
MOD_SHOREWALL=yes
PORTS="80,443"
fi

if [ $MODCHECK3 = 0 ]
then
MOD_SHOREWALL=yes
ADD_FTP_RULE=yes
fi


if [ $ADD_APACHE_RULE = yes ]
then
echo "<li>"'$SHOREWALLMSG1'"</li><br>"
LINENUM=`grep -n "LAST LINE -- ADD YOUR ENTRIES BEFORE THIS ONE -- DO NOT REMOVE" /etc/shorewall/rules | cut -d: -f1`
sed -i $LINENUM"c"\ACCEPT"	"net"	"fw"	"tcp"	"$PORTS"	"-"#"apache_webserver_rule /etc/shorewall/rules
echo "#"LAST LINE -- ADD YOUR ENTRIES BEFORE THIS ONE -- DO NOT REMOVE >> /etc/shorewall/rules
fi

if [ $ADD_FTP_RULE = yes ]
then
echo "<li>"'$SHOREWALLMSG2'"</li><br>"
LINENUM=`grep -n "LAST LINE -- ADD YOUR ENTRIES BEFORE THIS ONE -- DO NOT REMOVE" /etc/shorewall/rules | cut -d: -f1`
sed -i $LINENUM"c"\ACCEPT"	"net"	"fw"	"tcp"	"$PORTS"	"-"#"ftp_rule /etc/shorewall/rules
echo "#"LAST LINE -- ADD YOUR ENTRIES BEFORE THIS ONE -- DO NOT REMOVE >> /etc/shorewall/rules
fi


if [ $MOD_SHOREWALL = yes ]
then
echo "<li>"'$RESTARTSWMSG'"</li><br>"
source /opt/karoshi/serversetup/variables/distro
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/shorewall_stop 1>/dev/null
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/shorewall_start 1>/dev/null
fi
'
fi

#########################
#Create mysql database
#########################
if [ $CREATEDB = yes ]
then
echo '<li>'$CREATEDBMSG $WEBDB username $WEBDBUSER.'</li><br>'
if [ $WEBSERVER = `hostname-fqdn` ]
then
#Make sure that we know the root mysql password
/opt/karoshi/serversetup/all/'useful scripts'/mysql_root_pass
#Get root mysql password
MYSQLPASS=`sed -n 1,1p /etc/mysql.secret`
mysqladmin --password=$MYSQLPASS create $WEBDB
sleep 1
echo GRANT ALL PRIVILEGES ON $WEBDB.\* TO \'$WEBDBUSER\'@\'localhost\' IDENTIFIED BY \'$WEBDBPASS\'\; > /opt/karoshi/.tempdata/perms$$.sql
echo ALTER DATABASE $WEBDB DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_unicode_ci';' >> /opt/karoshi/.tempdata/perms$$.sql
mysql --password=$MYSQLPASS < /opt/karoshi/.tempdata/perms$$.sql
rm -f /opt/karoshi/.tempdata/perms$$.sql

else
ssh -x -o PasswordAuthentication=no $WEBSERVER '
#Make sure that we know the root mysql password
/opt/karoshi/serversetup/all/"useful scripts"/mysql_root_pass
#Get root mysql password
MYSQLPASS=`sed -n 1,1p /etc/mysql.secret`
mysqladmin --password=$MYSQLPASS create '$WEBDB'
sleep 1
echo GRANT ALL PRIVILEGES ON '$WEBDB'.\* TO "'"'$WEBDBUSER'"'"@"'"localhost"'" IDENTIFIED BY "'"'$WEBDBPASS'"'"\; > /opt/karoshi/.tempdata/perms$$.sql
echo ALTER DATABASE '$WEBDB' DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_unicode_ci\; >> /opt/karoshi/.tempdata/perms$$.sql
mysql --password=$MYSQLPASS < /opt/karoshi/.tempdata/perms$$.sql
rm -f /opt/karoshi/.tempdata/perms$$.sql
'
fi
fi

#########################
#Add role information
#########################
[ ! -d /opt/karoshi/server_network/servers/$WEBSERVER ] && mkdir -p /opt/karoshi/server_network/servers/$WEBSERVER
echo $ROLE"<br>" > /opt/karoshi/server_network/servers/$WEBSERVER/apacheserver
[ -f /opt/karoshi/server_network/servers/$WEBSERVER/no_role ] && rm -f /opt/karoshi/server_network/servers/$WEBSERVER/no_role
[ ! -d /opt/karoshi/server_network/webservers/ ] && mkdir -p /opt/karoshi/server_network/webservers
echo $WEBSERVER > /opt/karoshi/server_network/webservers/$WEBSERVER
sed -i 's/WEBCTRL=no/WEBCTRL=yes/g' /opt/karoshi/server_network/menusettings
exit

