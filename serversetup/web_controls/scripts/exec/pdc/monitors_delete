#!/bin/bash
#Copyright (C) 2007  The karoshi Team

#This file is part of Karoshi Server.
#
#Karoshi Server is free software: you can redistribute it and/or modify
#it under the terms of the GNU Affero General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#Karoshi Server is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU Affero General Public License for more details.
#
#You should have received a copy of the GNU Affero General Public License
#along with Karoshi Server.  If not, see <http://www.gnu.org/licenses/>.

#
#The Karoshi Team can be contacted at: 
#mpsharrad@karoshi.org.uk
#jsharrad@karoshi.org.uk

#
#Website: http://www.karoshi.org.uk
LOG_DATE=$(date +%F)
[ -z "$LOG_DATE" ] && exit

########################
#Check md5checksum
########################
if ! test -f /opt/karoshi/web_controls/checksums/admin_checksums/monitors_delete_cgi
then
	echo "$(date): monitors_delete - No Checksum" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi
source /opt/karoshi/web_controls/checksums/admin_checksums/monitors_delete_cgi
Checksum=$(sha256sum /var/www/cgi-bin_karoshi/admin/monitors_delete.cgi | cut -d' ' -f1)
[ -z "$Checksum" ] && Checksum=not_set1
if [ "$Checksum"'check' != "$monitors_delete_cgi"'check' ]
then
	echo "$(date): monitors_delete - Incorrect Checksum" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi


########################
#Get variables
########################
numArgs=$#
if [ "$numArgs" != 0 ]
then
	echo "$(date): monitors_delete - incorrect number of arguments" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi

read DATA
DATA=$(echo "$DATA" | tr -cd 'A-Za-z0-9\._:\-%')
if [ -z "$DATA" ]
then
	echo "$(date): monitors_delete - no data" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi
REMOTE_USER=$(echo "$DATA" | cut -s -d: -f1)
REMOTE_ADDR=$(echo "$DATA" | cut -s -d: -f2)
RemoteCheckSum=$(echo "$DATA" | cut -s -d: -f3)
MONITOR=$(echo "$DATA" | cut -s -d: -f4 | sed 's/+/_/g')
########################
#Check data
########################
if [ "$RemoteCheckSum"'check' != "$Checksum"'check' ]
then
	echo "$(date): monitors_delete - Not called by monitors_delete.cgi" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi
if [ -z "$REMOTE_USER" ]
then
	echo "$(date): monitors_delete - Blank remote user" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi
if [ -z "$REMOTE_ADDR" ]
then
	echo "$(date): monitors_delete - Blank remote tcpip address" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi

if [[ $(grep -c ^"$REMOTE_USER": /opt/karoshi/web_controls/web_access_admin) != 1 ]]
then
	echo "$(date): monitors_delete - access denied to $REMOTE_USER from $REMOTE_ADDR" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi

if [ -z "$MONITOR" ]
then
	echo "$(date): monitors_delete - Blank monitor by $REMOTE_USER from $REMOTE_ADDR" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi

MONITOR=${MONITOR//%25%25%25%25%25/_}

#Exit if no monitoring server has been set up.
[ ! -f /opt/karoshi/server_network/monitoringserver ] && exit 103
#Delete monitor


echo "$(date): monitors_delete - Deleting $MONITOR by $REMOTE_USER from $REMOTE_ADDR" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
[ -f /opt/karoshi/server_network/mon/monitors/"$MONITOR" ] && rm -f /opt/karoshi/server_network/mon/monitors/"$MONITOR"
[ -f /opt/karoshi/server_network/mon/monitors_disabled/"$MONITOR" ] && rm -f /opt/karoshi/server_network/mon/monitors_disabled/"$MONITOR"

######################
#Make mon.cf file
######################
if [ ! -f /opt/karoshi/server_network/mon/global ]
then
		#Make mon global file
		echo 'cfbasedir   = /etc/mon
pidfile     = /var/run/mon/mon.pid
statedir    = /var/lib/mon/state.d
logdir      = /var/lib/mon/log.d
dtlogfile   = /var/lib/mon/log.d/downtime.log
alertdir    = /usr/lib/mon/alert.d
mondir      = /usr/lib/mon/mon.d
maxprocs    = 20
histlength  = 100
randstart   = 60s
authtype    = pam
userfile    = /etc/mon/userfile
dtlogging   = yes

' >> /opt/karoshi/server_network/mon/global

fi
#Create mon.cf
cat /opt/karoshi/server_network/mon/global /opt/karoshi/server_network/mon/monitors/* > /opt/karoshi/server_network/mon/mon.cf 2>/dev/null
#Create flag file for activate changes button
touch /opt/karoshi/server_network/mon/activate_changes

MONITORING_SERVER=$(sed -n 1,1p /opt/karoshi/server_network/monitoringserver)
if [[ "$MONITORING_SERVER" = $(hostname-fqdn) ]]
then
	if [ -d /opt/karoshi/server_network/mon/events/"$MONITOR" ]
	then
		rm -f -R /opt/karoshi/server_network/mon/events/"$MONITOR"
	fi
else
	ssh -x -o PasswordAuthentication=no -o ConnectTimeout=3 "$MONITORING_SERVER" '
	if [ -d /opt/karoshi/server_network/mon/events/"'"$MONITOR"'" ]
	then
		rm -f -R /opt/karoshi/server_network/mon/events/"'"$MONITOR"'"
	fi
	'
fi

exit

