#!/bin/bash
#Copyright (C) 2007  The karoshi Team

#This file is part of Karoshi Server.
#
#Karoshi Server is free software: you can redistribute it and/or modify
#it under the terms of the GNU Affero General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#Karoshi Server is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU Affero General Public License for more details.
#
#You should have received a copy of the GNU Affero General Public License
#along with Karoshi Server.  If not, see <http://www.gnu.org/licenses/>.

#
#The Karoshi Team can be contacted at: 
#mpsharrad@karoshi.org.uk
#jsharrad@karoshi.org.uk

#
#Website: http://www.karoshi.org.uk
LOG_DATE=`date +%F`
[ -z "$LOG_DATE" ] && exit
MD5ERROR="Incorrect MD5 checksum for this patch."

########################
#Check md5checksum
########################
if ! test -f /opt/karoshi/web_controls/checksums/admin_checksums/monitors_edit2_cgi
then
echo `date`: monitors_edit2 - No MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
source /opt/karoshi/web_controls/checksums/admin_checksums/monitors_edit2_cgi
MD5SUM=`md5sum /var/www/cgi-bin_karoshi/admin/monitors_edit2.cgi | cut -d' ' -f1`
[ $MD5SUM'null' = null ] && MD5SUM=not_set1
if [ $MD5SUM'check' != $monitors_edit2_cgi'check' ]
then
	echo `date`: monitors_edit2 - Incorrect MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
########################
#Get variables
########################
numArgs=$#
if [ $numArgs != 1 ]
then
	echo `date`: monitors_edit2 - incorrect number of arguments >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
REMOTE_USER=`echo $* | cut -s -d: -f1`
REMOTE_ADDR=`echo $* | cut -s -d: -f2`
REMOTE_MD5=`echo $* | cut -s -d: -f3`
GROUPNAME=`echo $* | cut -s -d: -f4 | sed 's/+/_/g'`
TCPIP=`echo $* | cut -s -d: -f5`
INTERVAL=`echo $* | cut -s -d: -f6`
DAYSTART=`echo $* | cut -s -d: -f7`
DAYEND=`echo $* | cut -s -d: -f8`
HOURSTART=`echo $* | cut -s -d: -f9`
HOUREND=`echo $* | cut -s -d: -f10`
MONITORTYPES=( `echo $* | cut -s -d: -f11- | sed 's/:/ /g'` )
########################
#Check data
########################
if [ $REMOTE_MD5'check' != $MD5SUM'check' ]
then
	echo `date`: monitors_edit2 - Not called by monitors_edit2.cgi >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ -z "$REMOTE_USER" ]
then
	echo `date`: monitors_edit2 - Blank remote user >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ -z "$REMOTE_ADDR" ]
then
	echo `date`: monitors_edit2 - Blank remote tcpip address >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi

if [ `grep -c ^$REMOTE_USER: /opt/karoshi/web_controls/web_access_admin` != 1 ]
then
	echo `date`: monitors_edit2 - access denied to $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi

if [ -z "$GROUPNAME" ]
then
	echo `date`: monitors_edit2 - Blank groupname by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi

if [ -z "$TCPIP" ]
then
	echo `date`: monitors_edit2 - Blank tcpip by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
TCPIP=`echo $TCPIP | sed 's/+/ /g'`

if [ -z "$INTERVAL" ]
then
	INTERVAL=5
fi

if [ $MONITORTYPES'null' = null ]
then
	echo `date`: monitors_edit2 - Blank monitortypes by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
#Exit if no monitoring server has been set up.
[ ! -f /opt/karoshi/server_network/monitoringserver ] && exit 103
#Make mon directories
[ -d /opt/karoshi/server_network/mon/monitors ] || mkdir -p /opt/karoshi/server_network/mon/monitors
#Log custom monitor edit
echo `date`: monitors_edit2 - Editing $GROUPNAME by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE

[ -d /var/www/html/mon/events/$GROUPNAME ] || mkdir -p /var/www/html/mon/events/$GROUPNAME
################################
#Create mon file for this custom group
################################

[ -z "$DAYSTART" ] && DAYSTART=Sun
[ -z "$DAYEND" ] && DAYEND=Sat

if [ -z "$HOURSTART" ] && [ -z "$HOUREND" ]
then
MON_PERIOD=""
else
MON_PERIOD="hr {$HOURSTART-$HOUREND}"
fi

#Create header
echo '######################' > /opt/karoshi/server_network/mon/monitors/$GROUPNAME
echo '#'$GROUPNAME $DESCRIPTION'' >> /opt/karoshi/server_network/mon/monitors/$GROUPNAME
echo '######################' >> /opt/karoshi/server_network/mon/monitors/$GROUPNAME
echo 'hostgroup '$GROUPNAME' '$TCPIP'' >> /opt/karoshi/server_network/mon/monitors/$GROUPNAME
echo >> /opt/karoshi/server_network/mon/monitors/$GROUPNAME
echo 'watch '$GROUPNAME'' >> /opt/karoshi/server_network/mon/monitors/$GROUPNAME
#Create checks
COUNTER=0
CHECKCOUNT=`echo ${#MONITORTYPES[@]}`
while [ $COUNTER -lt $CHECKCOUNT ] 
do
MONITORTYPE=`echo ${MONITORTYPES[$COUNTER]}`
#Ping
if [ $MONITORTYPE = ping ]
then
echo ' 	service ping' >> /opt/karoshi/server_network/mon/monitors/$GROUPNAME
echo '		description Network Connection' >> /opt/karoshi/server_network/mon/monitors/$GROUPNAME
echo '		interval '$INTERVAL'm' >> /opt/karoshi/server_network/mon/monitors/$GROUPNAME
echo '		monitor ping.monitor' >> /opt/karoshi/server_network/mon/monitors/$GROUPNAME
echo '		period wd {'$DAYSTART-$DAYEND'}' $MON_PERIOD >> /opt/karoshi/server_network/mon/monitors/$GROUPNAME
echo '			alert file.alert -d /opt/karoshi/server_network/mon/events/'$GROUPNAME' ping.log' >> /opt/karoshi/server_network/mon/monitors/$GROUPNAME
echo '			alert send_mail.alert :SERVICE:'$GROUPNAME':LOGNAME:ping.log' >> /opt/karoshi/server_network/mon/monitors/$GROUPNAME
echo '			upalert file.alert -d /opt/karoshi/server_network/mon/events/'$GROUPNAME' ping.log' >> /opt/karoshi/server_network/mon/monitors/$GROUPNAME
echo '			alertevery 120m' >> /opt/karoshi/server_network/mon/monitors/$GROUPNAME
fi
#Pop3
if [ $MONITORTYPE = pop3 ]
then
echo ' 	service pop' >> /opt/karoshi/server_network/mon/monitors/$GROUPNAME
echo '		description Pop3' >> /opt/karoshi/server_network/mon/monitors/$GROUPNAME
echo '		interval '$INTERVAL'm' >> /opt/karoshi/server_network/mon/monitors/$GROUPNAME
echo '		monitor pop3.monitor' >> /opt/karoshi/server_network/mon/monitors/$GROUPNAME
echo '		period wd {'$DAYSTART-$DAYEND'}' $MON_PERIOD >> /opt/karoshi/server_network/mon/monitors/$GROUPNAME
echo '			alert file.alert -d /opt/karoshi/server_network/mon/events/'$GROUPNAME' pop3.log' >> /opt/karoshi/server_network/mon/monitors/$GROUPNAME
echo '			alert send_mail.alert :SERVICE:'$GROUPNAME':LOGNAME:pop3.log' >> /opt/karoshi/server_network/mon/monitors/$GROUPNAME
echo '			upalert file.alert -d /opt/karoshi/server_network/mon/events/'$GROUPNAME' pop3.log' >> /opt/karoshi/server_network/mon/monitors/$GROUPNAME
echo '			alertevery 120m' >> /opt/karoshi/server_network/mon/monitors/$GROUPNAME
fi
#Pop3s
if [ $MONITORTYPE = pop3s ]
then
echo ' 	service pop3s' >> /opt/karoshi/server_network/mon/monitors/$GROUPNAME
echo '		description Secure Pop3' >> /opt/karoshi/server_network/mon/monitors/$GROUPNAME
echo '		interval '$INTERVAL'm' >> /opt/karoshi/server_network/mon/monitors/$GROUPNAME
echo '		monitor pop3.monitor -p 995' >> /opt/karoshi/server_network/mon/monitors/$GROUPNAME
echo '		period wd {'$DAYSTART-$DAYEND'}' $MON_PERIOD >> /opt/karoshi/server_network/mon/monitors/$GROUPNAME
echo '			alert file.alert -d /opt/karoshi/server_network/mon/events/'$GROUPNAME' pop3s.log' >> /opt/karoshi/server_network/mon/monitors/$GROUPNAME
echo '			alert send_mail.alert :SERVICE:'$GROUPNAME':LOGNAME:pop3s.log' >> /opt/karoshi/server_network/mon/monitors/$GROUPNAME
echo '			upalert file.alert -d /opt/karoshi/server_network/mon/events/'$GROUPNAME' pop3s.log' >> /opt/karoshi/server_network/mon/monitors/$GROUPNAME
echo '			alertevery 120m' >> /opt/karoshi/server_network/mon/monitors/$GROUPNAME
fi
#imap
if [ $MONITORTYPE = imap ]
then
echo ' 	service imap' >> /opt/karoshi/server_network/mon/monitors/$GROUPNAME
echo '		description UW Imap' >> /opt/karoshi/server_network/mon/monitors/$GROUPNAME
echo '		interval '$INTERVAL'm' >> /opt/karoshi/server_network/mon/monitors/$GROUPNAME
echo '		monitor tcp.monitor -p 143' >> /opt/karoshi/server_network/mon/monitors/$GROUPNAME
echo '		period wd {'$DAYSTART-$DAYEND'}' $MON_PERIOD >> /opt/karoshi/server_network/mon/monitors/$GROUPNAME
echo '			alert file.alert -d /opt/karoshi/server_network/mon/events/'$GROUPNAME' imap.log' >> /opt/karoshi/server_network/mon/monitors/$GROUPNAME
echo '			alert send_mail.alert :SERVICE:'$GROUPNAME':LOGNAME:imap.log' >> /opt/karoshi/server_network/mon/monitors/$GROUPNAME
echo '			upalert file.alert -d /opt/karoshi/server_network/mon/events/'$GROUPNAME' imap.log' >> /opt/karoshi/server_network/mon/monitors/$GROUPNAME
echo '			alertevery 120m' >> /opt/karoshi/server_network/mon/monitors/$GROUPNAME
fi
#imaps
if [ $MONITORTYPE = imaps ]
then
echo ' 	service imaps' >> /opt/karoshi/server_network/mon/monitors/$GROUPNAME
echo '		description UW Imap over SSL' >> /opt/karoshi/server_network/mon/monitors/$GROUPNAME
echo '		interval '$INTERVAL'm' >> /opt/karoshi/server_network/mon/monitors/$GROUPNAME
echo '		monitor tcp.monitor -p 993' >> /opt/karoshi/server_network/mon/monitors/$GROUPNAME
echo '		period wd {'$DAYSTART-$DAYEND'}' $MON_PERIOD >> /opt/karoshi/server_network/mon/monitors/$GROUPNAME
echo '			alert file.alert -d /opt/karoshi/server_network/mon/events/'$GROUPNAME' imaps.log' >> /opt/karoshi/server_network/mon/monitors/$GROUPNAME
echo '			alert send_mail.alert :SERVICE:'$GROUPNAME':LOGNAME:imaps.log' >> /opt/karoshi/server_network/mon/monitors/$GROUPNAME
echo '			upalert file.alert -d /opt/karoshi/server_network/mon/events/'$GROUPNAME' imaps.log' >> /opt/karoshi/server_network/mon/monitors/$GROUPNAME
echo '			alertevery 120m' >> /opt/karoshi/server_network/mon/monitors/$GROUPNAME
fi
#samba
if [ $MONITORTYPE = samba ]
then
echo ' 	service samba' >> /opt/karoshi/server_network/mon/monitors/$GROUPNAME
echo '		description Samba' >> /opt/karoshi/server_network/mon/monitors/$GROUPNAME
echo '		interval '$INTERVAL'm' >> /opt/karoshi/server_network/mon/monitors/$GROUPNAME
echo '		monitor tcp.monitor -p 139' >> /opt/karoshi/server_network/mon/monitors/$GROUPNAME
echo '		period wd {'$DAYSTART-$DAYEND'}' $MON_PERIOD >> /opt/karoshi/server_network/mon/monitors/$GROUPNAME
echo '			alert file.alert -d /opt/karoshi/server_network/mon/events/'$GROUPNAME' samba.log' >> /opt/karoshi/server_network/mon/monitors/$GROUPNAME
echo '			alert send_mail.alert :SERVICE:'$GROUPNAME':LOGNAME:samba.log' >> /opt/karoshi/server_network/mon/monitors/$GROUPNAME
echo '			upalert file.alert -d /opt/karoshi/server_network/mon/events/'$GROUPNAME' samba.log' >> /opt/karoshi/server_network/mon/monitors/$GROUPNAME
echo '			alertevery 120m' >> /opt/karoshi/server_network/mon/monitors/$GROUPNAME
fi
#http
if [ $MONITORTYPE = http ]
then
echo ' 	service http' >> /opt/karoshi/server_network/mon/monitors/$GROUPNAME
echo '		description Webserver' >> /opt/karoshi/server_network/mon/monitors/$GROUPNAME
echo '		interval '$INTERVAL'm' >> /opt/karoshi/server_network/mon/monitors/$GROUPNAME
echo '		monitor http.monitor -p 139' >> /opt/karoshi/server_network/mon/monitors/$GROUPNAME
echo '		allow_empty_group' >> /opt/karoshi/server_network/mon/monitors/$GROUPNAME
echo '		period wd {'$DAYSTART-$DAYEND'}' $MON_PERIOD >> /opt/karoshi/server_network/mon/monitors/$GROUPNAME
echo '			alert file.alert -d /opt/karoshi/server_network/mon/events/'$GROUPNAME' http.log' >> /opt/karoshi/server_network/mon/monitors/$GROUPNAME
echo '			alert send_mail.alert :SERVICE:'$GROUPNAME':LOGNAME:http.log' >> /opt/karoshi/server_network/mon/monitors/$GROUPNAME
echo '			upalert file.alert -d /opt/karoshi/server_network/mon/events/'$GROUPNAME' http.log' >> /opt/karoshi/server_network/mon/monitors/$GROUPNAME
echo '			alertevery 120m' >> /opt/karoshi/server_network/mon/monitors/$GROUPNAME
fi
#https
if [ $MONITORTYPE = https ]
then
echo ' 	service https' >> /opt/karoshi/server_network/mon/monitors/$GROUPNAME
echo '		description Secure Webserver' >> /opt/karoshi/server_network/mon/monitors/$GROUPNAME
echo '		interval '$INTERVAL'm' >> /opt/karoshi/server_network/mon/monitors/$GROUPNAME
echo '		monitor tcp.monitor -p 443' >> /opt/karoshi/server_network/mon/monitors/$GROUPNAME
echo '		period wd {'$DAYSTART-$DAYEND'}' $MON_PERIOD >> /opt/karoshi/server_network/mon/monitors/$GROUPNAME
echo '			alert file.alert -d /opt/karoshi/server_network/mon/events/'$GROUPNAME' https.log' >> /opt/karoshi/server_network/mon/monitors/$GROUPNAME
echo '			alert send_mail.alert :SERVICE:'$GROUPNAME':LOGNAME:https.log' >> /opt/karoshi/server_network/mon/monitors/$GROUPNAME
echo '			upalert file.alert -d /opt/karoshi/server_network/mon/events/'$GROUPNAME' https.log' >> /opt/karoshi/server_network/mon/monitors/$GROUPNAME
echo '			alertevery 120m' >> /opt/karoshi/server_network/mon/monitors/$GROUPNAME
fi
#smtp
if [ $MONITORTYPE = smtp ]
then
echo ' 	service smtp' >> /opt/karoshi/server_network/mon/monitors/$GROUPNAME
echo '		description Simple Mail Transfer Protocol' >> /opt/karoshi/server_network/mon/monitors/$GROUPNAME
echo '		interval '$INTERVAL'm' >> /opt/karoshi/server_network/mon/monitors/$GROUPNAME
echo '		monitor smtp.monitor' >> /opt/karoshi/server_network/mon/monitors/$GROUPNAME
echo '		period wd {'$DAYSTART-$DAYEND'}' $MON_PERIOD >> /opt/karoshi/server_network/mon/monitors/$GROUPNAME
echo '			alert file.alert -d /opt/karoshi/server_network/mon/events/'$GROUPNAME' smtp.log' >> /opt/karoshi/server_network/mon/monitors/$GROUPNAME
echo '			alert send_mail.alert :SERVICE:'$GROUPNAME':LOGNAME:smtp.log' >> /opt/karoshi/server_network/mon/monitors/$GROUPNAME
echo '			upalert file.alert -d /opt/karoshi/server_network/mon/events/'$GROUPNAME' smtp.log' >> /opt/karoshi/server_network/mon/monitors/$GROUPNAME
echo '			alertevery 120m' >> /opt/karoshi/server_network/mon/monitors/$GROUPNAME
fi
let COUNTER=$COUNTER+1
done
echo >> /opt/karoshi/server_network/mon/monitors/$GROUPNAME
echo >> /opt/karoshi/server_network/mon/monitors/$GROUPNAME

###############################
#Make mon.cf file
###############################
[ -f /opt/karoshi/server_network/mon/global ] || cp -f /opt/karoshi/serversetup/modules/monitoring/mon/global /opt/karoshi/server_network/mon/
cat /opt/karoshi/server_network/mon/global /opt/karoshi/server_network/mon/monitors/* > /opt/karoshi/server_network/mon/mon.cf 2>/dev/null
###############################
#Transfer mon.cf to the monitoring server
###############################
#Check that ssh is working
#Check that ssh is enabled for the backup server
MONITORING_SERVER=`sed -n 1,1p /opt/karoshi/server_network/monitoringserver`

if [ $MONITORING_SERVER = `hostname-fqdn` ]
then
	cp -f /opt/karoshi/server_network/mon/mon.cf /etc/mon/
	source /opt/karoshi/serversetup/variables/distro
	/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/mon_stop 1>/dev/null
	sleep 1
	/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/mon_start 1>/dev/null
	else
	ssh -o PasswordAuthentication=no -o ConnectTimeout=2 -o ConnectTimeout=2 $MONITORING_SERVER ls 1>/dev/null
	SSHSTATUS=`echo $?`
	if [ $SSHSTATUS != 0 ]
	then
		echo `date`: monitors_edit2 - ssh is not working 'for' $MONITORING_SERVER >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
		exit 101
	fi

	scp -o PasswordAuthentication=no -o ConnectTimeout=3 /opt/karoshi/server_network/mon/mon.cf root@$MONITORING_SERVER:/etc/mon/ 2>&1
	###############################
	#Restart Mon
	###############################
	ssh -x -o PasswordAuthentication=no -o ConnectTimeout=3 $MONITORING_SERVER '
	source /opt/karoshi/serversetup/variables/distro
	/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/mon_stop 1>/dev/null
	sleep 1
	/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/mon_start 1>/dev/null
	'
fi
exit

