#!/bin/bash
#Copyright (C) 2007 Paul Sharrad

#This file is part of Karoshi Server.
#
#Karoshi Server is free software: you can redistribute it and/or modify
#it under the terms of the GNU Affero General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#Karoshi Server is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU Affero General Public License for more details.
#
#You should have received a copy of the GNU Affero General Public License
#along with Karoshi Server.  If not, see <http://www.gnu.org/licenses/>.

#
#The Karoshi Team can be contacted at: 
#mpsharrad@karoshi.org.uk
#jsharrad@karoshi.org.uk

#
#Website: http://www.karoshi.org.uk
LOG_DATE=`date +%F`
[ -z "$LOG_DATE" ] && exit
########################
#Check md5checksum
########################
#Admin checksum
if ! test -f /opt/karoshi/web_controls/checksums/admin_checksums/printers_control_cgi
then
	echo `date`: printers_control - No admin MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
source /opt/karoshi/web_controls/checksums/admin_checksums/printers_control_cgi
Checksum=`sha256sum /var/www/cgi-bin_karoshi/admin/printers_control.cgi | cut -d' ' -f1`
[ -z "$Checksum" ] && Checksum=not_set
if [ $Checksum'check' != $printers_control_cgi'check' ]
then
	echo `date`: printers_control - Incorrect admin MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
#Tech checksum
if ! test -f /opt/karoshi/web_controls/checksums/tech_checksums/printers_control_cgi
then
	echo `date`: printers_control - No tech MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
source /opt/karoshi/web_controls/checksums/tech_checksums/printers_control_cgi
Checksum2=`sha256sum /var/www/cgi-bin_karoshi/tech/printers_control.cgi | cut -d' ' -f1`
[ -z "$Checksum2" ] && Checksum2=not_set
if [ $Checksum2'check' != $printers_control_cgi'check' ]
then
	echo `date`: printers_control - Incorrect tech MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
#Staff checksum
if [ -f /var/www/cgi-bin_karoshi/staff/printers_control.cgi ]
then
	if ! test -f /opt/karoshi/web_controls/checksums/staff_checksums/printers_control_cgi
	then
		echo `date`: printers_control - No staff MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
		exit 101
	fi
	source /opt/karoshi/web_controls/checksums/staff_checksums/printers_control_cgi
	Checksum3=`sha256sum /var/www/cgi-bin_karoshi/staff/printers_control.cgi | cut -d' ' -f1`
	[ -z "$Checksum3" ] && Checksum3=not_set
	if [ $Checksum3'check' != $printers_control_cgi'check' ]
	then
		echo `date`: printers_control - Incorrect staff MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
		exit 101
	fi
fi
########################
#Get variables
########################
numArgs=$#
if [ $numArgs != 1 ]
then
	echo `date`: printers_control - incorrect number of arguments >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
REMOTE_USER=`echo $* | tr -cd 'A-Za-z0-9\._:\-' | cut -s -d: -f1`
REMOTE_ADDR=`echo $* | tr -cd 'A-Za-z0-9\._:\-' | cut -s -d: -f2`
RemoteCheckSum=`echo $* | tr -cd 'A-Za-z0-9\._:\-' | cut -s -d: -f3`
PRINTERNAME=`echo $* | tr -cd 'A-Za-z0-9\._:\-' | cut -s -d: -f4`
PRINTER_ACTION=`echo $* | tr -cd 'A-Za-z0-9\._:\-' | cut -s -d: -f5`
JOBID=`echo $* | tr -cd 'A-Za-z0-9\._:\-' | cut -s -d: -f6`
########################
#Check data
########################
if [ $RemoteCheckSum'check' != $Checksum'check' ] && [ $RemoteCheckSum'check' != $Checksum2'check' ] && [ $RemoteCheckSum'check' != $Checksum3'check' ]
then
	echo `date`: printers_control - Not called by printers_control.cgi >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ -z "$REMOTE_USER" ]
then
	echo `date`: printers_control - Blank remote user >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ -z "$REMOTE_ADDR" ]
then
	echo `date`: printers_control - Blank remote tcpip address >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ -z "$PRINTERNAME" ]
then
	echo `date`: printers_control - Blank printername by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ -z "$PRINTER_ACTION" ]
then
	echo `date`: printers_control - Blank printer action by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ $PRINTER_ACTION != enable ] && [ $PRINTER_ACTION != disable ] && [ $PRINTER_ACTION != test ] && [ $PRINTER_ACTION != clearqueue ] && [ $PRINTER_ACTION != removejobid ] && [ $PRINTER_ACTION != setppd ] && [ $PRINTER_ACTION != setlocation ]
then
	echo `date`: printers_control - Incorrect printer action by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ $PRINTER_ACTION = removejobid ]
then
	if [ -z "$JOBID" ]
	then
		echo `date`: printers_control - Blank jobid by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
		exit 101
	fi
fi


if [ $PRINTER_ACTION = setppd ]
then
	echo '<form name="setppd" action="/cgi-bin/admin/printers_ppd_assign1.cgi" method="post">
	<input type="hidden" name="____PRINTERNAME____" value="'$PRINTERNAME'">
	</form>
	<script>
	document.setppd.submit();
	</script>'
	exit
fi

if [ $PRINTER_ACTION = setlocation ]
then
	echo '<form name="setppd" action="/cgi-bin/admin/printers_assign_fm.cgi" method="post">
	<input type="hidden" name="____PRINTERNAME____" value="'$PRINTERNAME'">
	</form>
	<script>
	document.setppd.submit();
	</script>'
	exit
fi

PRINTSERVER=`sed -n 1,1p /opt/karoshi/server_network/printserver`
if [ $PRINTSERVER != `hostname-fqdn` ]
then
	USESSH=yes
else
	USESSH=no
fi
#Enable printer
if [ $PRINTER_ACTION = enable ]
then
	echo `date`: printers_control - enabling $PRINTERNAME by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	if [ $USESSH = yes ]
	then
		ssh -x -o PasswordAuthentication=no $PRINTSERVER '
		accept '$PRINTERNAME' 2&>1
		cupsenable '$PRINTERNAME' 2&>1
		'
	else
		accept $PRINTERNAME 2&>1
		cupsenable $PRINTERNAME 2&>1
	fi
fi
#Disable printer
if [ $PRINTER_ACTION = disable ]
then
	echo `date`: printers_control - disabling $PRINTERNAME by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	if [ $USESSH = yes ]
	then
		ssh -x -o PasswordAuthentication=no $PRINTSERVER '
		reject '$PRINTERNAME' 2&>1
		cupsdisable '$PRINTERNAME' 2&>1
		'
	else
		reject $PRINTERNAME 2&>1
		cupsdisable $PRINTERNAME 2&>1
	fi
fi
#Test printer
if [ $PRINTER_ACTION = test ]
then
	echo `date`: printers_control - testing $PRINTERNAME by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	if [ $USESSH = yes ]
	then
		ssh -x -o PasswordAuthentication=no $PRINTSERVER '
		lp -d '$PRINTERNAME' /usr/share/cups/data/testprint.ps 1>/dev/null
		'
	else
		lp -d $PRINTERNAME /usr/share/cups/data/testprint.ps 1>/dev/null
	fi
fi
#Clear printer queue
if [ $PRINTER_ACTION = clearqueue ]
then
	echo `date`: printers_control - Clearing queue "for" $PRINTERNAME by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	if [ $USESSH = yes ]
	then
		ssh -x -o PasswordAuthentication=no $PRINTSERVER '
		cancel -a '$PRINTERNAME' 2&>1
		'
	else
		cancel -a $PRINTERNAME 2&>1
	fi
fi
#Remove job
if [ $PRINTER_ACTION = removejobid ]
then
	echo `date`: printers_control - removing job$JOBID by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	if [ $USESSH = yes ]
	then
		ssh -x -o PasswordAuthentication=no $PRINTSERVER '
		cancel '$JOBID' 2&>1
		'
	else
		cancel $JOBID 2&>1
	fi
fi
exit
