#!/bin/bash
#Copyright (C) 2007 Paul Sharrad

#This file is part of Karoshi Server.
#
#Karoshi Server is free software: you can redistribute it and/or modify
#it under the terms of the GNU Affero General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#Karoshi Server is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU Affero General Public License for more details.
#
#You should have received a copy of the GNU Affero General Public License
#along with Karoshi Server.  If not, see <http://www.gnu.org/licenses/>.

#
#The Karoshi Team can be contacted at: 
#mpsharrad@karoshi.org.uk
#jsharrad@karoshi.org.uk

#
#Website: http://www.karoshi.org.uk
LOG_DATE=`date +%F`
########################
#Check md5checksum
########################
if ! test -f /opt/karoshi/web_controls/checksums/admin_checksums/quotas_set_cgi
then
echo `date`: quotas_set - No MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
source /opt/karoshi/web_controls/checksums/admin_checksums/quotas_set_cgi
MD5SUM=`md5sum /var/www/cgi-bin_karoshi/admin/quotas_set.cgi | cut -d' ' -f1`
[ -z "$MD5SUM" ] && MD5SUM=not_set
if [ $MD5SUM'check' != $quotas_set_cgi'check' ]
then
	echo `date`: quotas_set - Incorrect MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi

########################
#Get variables
########################
numArgs=$#
if [ $numArgs != 0 ]
then
	echo `date`: quotas_set - incorrect number of arguments >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi

read DATA
DATA=`echo $DATA | tr -cd 'A-Za-z0-9\._:%\n-+'`
if [ -z "$DATA" ]
then
	echo `date`: quotas_set - no data >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
REMOTE_USER=`echo "$DATA" | cut -s -d: -f1`
REMOTE_ADDR=`echo "$DATA" | cut -s -d: -f2`
REMOTE_MD5=`echo "$DATA" | cut -s -d: -f3`
PRIMARYGROUP=`echo "$DATA" | cut -s -d: -f4`
MAXSIZE2=`echo "$DATA" | cut -s -d: -f5`
MAXFILES2=`echo "$DATA" | cut -s -d: -f6`
UNIT=`echo "$DATA" | cut -s -d: -f7`
USERNAME=`echo "$DATA" | cut -s -d: -f8`
########################
#Check data
########################
if [ $REMOTE_MD5'check' != $MD5SUM'check' ]
then
	echo `date`: quotas_set - Not called by quotas_set.cgi >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ -z "$REMOTE_USER"l ]
then
	echo `date`: quotas_set - Blank remote user >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ -z "$REMOTE_ADDR" ]
then
	echo `date`: quotas_set - Blank remote tcpip address >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ -z "$PRIMARYGROUP" ] && [ -z "$USERNAME" ]
then
	echo `date`: quotas_set - Blank group by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ -z "$MAXSIZE2" ]
then
	echo `date`: quotas_set - Blank size by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ -z "$MAXFILES2" ]
then
	echo `date`: quotas_set - Blank maxfiles by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ -z "$UNIT" ]
then
	echo `date`: quotas_set - Blank unit by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ $UNIT != MB ] && [ $UNIT != GB ] && [ $UNIT != TB ] 
then
	echo `date`: quotas_set - Incorrect unit by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ `grep -c ^$REMOTE_USER: /opt/karoshi/web_controls/web_access_admin` != 1 ]
then
	echo `date`: quotas_set - access denied to $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi

###########################
#Assign extra variables
###########################
DISPLAYSIZE2=`echo $MAXSIZE2$UNIT`
let DISPLAYSIZE1=$MAXSIZE2*95/100
DISPLAYSIZE1=`echo $DISPLAYSIZE1$UNIT`
let MAXSIZE2=$MAXSIZE2*1024
[ $UNIT = GB ] && let MAXSIZE2=$MAXSIZE2*1024
[ $UNIT = TB ] && let MAXSIZE2=$MAXSIZE2*104857
let MAXSIZE1=$MAXSIZE2*95/100
let MAXFILES1=$MAXFILES2*95/100


#Check for federated servers
FEDERATED_SERVERS=no
if [ -d /opt/karoshi/server_network/federated_ldap_servers/ ]
then
	if [ `ls -1 /opt/karoshi/server_network/federated_ldap_servers/ | wc -l` -gt 0 ]
	then
		FEDERATED_SERVERS=yes
	fi
fi

if [ ! -z "$USERNAME" ]
then
	SEARCH="$USERNAME"
	PRIMARYGROUP=`id -g -n $USERNAME`
else
	SEARCH="$PRIMARYGROUP"
fi

source /opt/karoshi/server_network/group_information/$PRIMARYGROUP

echo '<table class="tablesorter" id="myTable">
<thead>
 <tr><th style="width: 80px;"><b>'$"Username"'</b></th><th style="width: 200px;"><b>'$"Server"'</b></th><th style="width: 100px;"><b>'$"Group"'</b></th><th style="width: 100px;"><b>'$"Size Limit"'1</b></th><th style="width: 100px;"><b>'$"Size Limit"'2</b></th><th style="width: 100px;"><b>'$"Max Files"'1</b></th><th style="width: 100px;"><b>'$"Max Files"'2</b></th></tr></thead><tbody>'

#Check if quotas are enabled on the server

QUOTASENABLED=yes
if [ $SERVER = `hostname-fqdn` ]
then
	[ `grep /home /etc/fstab | grep -c usrquota` = 0 ] && QUOTASENABLED=no

	#Make sure quota file is not locked
	#[ $QUOTASENABLED = yes ] && chattr -ia /home/aquota.user

else
	ssh -x -o PasswordAuthentication=no $SERVER '
	[ `grep /home /etc/fstab | grep -c usrquota` = 0 ] && exit 105
	#Make sure quota file is not locked
	#chattr -ia /home/aquota.user 

'
[ `echo $?` = 105 ] && QUOTASENABLED=no
fi

if [ $QUOTASENABLED = yes ]
then
	for NETWORKUSER in `getent passwd | grep -w $SEARCH | cut -d: -f1`
	do
		echo `date`: quotas_set - Setting Maxsize:$MAXSIZE2 Maxfiles:$MAXFILES2 "for" $NETWORKUSER on $SERVER by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
		#Set quota
		echo "<tr><td>"$NETWORKUSER"</td><td>"$SERVER"</td><td>"$PRIMARYGROUP"</td><td>"$DISPLAYSIZE1"</td><td>"$DISPLAYSIZE2"</td><td>"$MAXFILES1"</td><td>"$MAXFILES2"</td></tr>"
		if [ $SERVER = `hostname-fqdn` ]
		then
			setquota -u $NETWORKUSER $MAXSIZE1 $MAXSIZE2 $MAXFILES1 $MAXFILES2 -a /dev/loop0
		else
			ssh -x -o PasswordAuthentication=no $SERVER '
			setquota -u '$NETWORKUSER' '$MAXSIZE1' '$MAXSIZE2' '$MAXFILES1' '$MAXFILES2' -a /dev/loop0
			'
		fi
	done
fi

if [ $QUOTASENABLED = no ]
then
	echo '<tr><td><b>'$"Warning"'</b></td><TH COLSPAN=5>"'$SERVER'" - '$"Quotas are not enabled for this server"'</th></tr>'
fi

if [ $FEDERATED_SERVERS = yes ]
then
for FEDERATED_SERVERS in /opt/karoshi/server_network/federated_ldap_servers/*
do
FEDERATED_SERVER=`basename $FEDERATED_SERVERS`
ssh -x -o PasswordAuthentication=no $FEDERATED_SERVER '
if [ '$USERNAME'"null" != null ]
then
SEARCH="'$USERNAME'"
PRIMARYGROUP=`id -g -n '$USERNAME'`
else
SEARCH="'$PRIMARYGROUP'"
fi

source /opt/karoshi/server_network/group_information/'$PRIMARYGROUP'

QUOTASENABLED=yes
if [ $SERVER = `hostname-fqdn` ]
then
[ `grep /home /etc/fstab | grep -c usrquota` = 0 ] && QUOTASENABLED=no
#Make sure quota file is not locked
[ $QUOTASENABLED = yes ] && chattr -ia /home/aquota.user
else
ssh -x -o PasswordAuthentication=no $SERVER '\''
[ `grep /home /etc/fstab | grep -c usrquota` = 0 ] && exit 105
#Make sure quota file is not locked
chattr -ia /home/aquota.user
'\''
[ `echo $?` = 105 ] && QUOTASENABLED=no
fi

if [ $QUOTASENABLED = no ]
then
echo "<tr><td><b>'$"Warning"'</b></td><TH COLSPAN=5>"$SERVER" - '$"Quotas are not enabled for this server"'</th></tr>"
fi

if [ $QUOTASENABLED = yes ]
then
for NETWORKUSER in `getent passwd | grep -w $SEARCH | cut -d: -f1`
do
echo `date`: quotas_set - Setting Maxsize:$MAXSIZE2 Maxfiles:$MAXFILES2 "for" $NETWORKUSER on $SERVER by '$REMOTE_USER' from '$REMOTE_ADDR' >> /opt/karoshi/logs/karoshi_web_management/'$LOG_DATE'
#Set quota
echo "<tr><td>"$NETWORKUSER"</td><td>"$SERVER"</td><td>"'$PRIMARYGROUP'"</td><td>"'$DISPLAYSIZE1'"</td><td>"'$DISPLAYSIZE2'"</td><td>"'$MAXFILES1'"</td><td>"'$MAXFILES2'"</td></tr>"
if [ $SERVER = `hostname-fqdn` ]
then
setquota -u $NETWORKUSER '$MAXSIZE1' '$MAXSIZE2' '$MAXFILES1' '$MAXFILES2' -a /dev/loop0
else
ssh -x -o PasswordAuthentication=no $SERVER '\''
setquota -u '$NETWORKUSER' '$MAXSIZE1' '$MAXSIZE2' '$MAXFILES1' '$MAXFILES2' -a /dev/loop0
'\''
fi
done
fi
'
done
fi

echo "</tbody></table>"

#Load view quotas page for the user or the group


exit

