#!/bin/bash
#Copyright (C) 2017 Paul Sharrad

#This file is part of Karoshi Server.
#
#Karoshi Server is free software: you can redistribute it and/or modify
#it under the terms of the GNU Affero General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#Karoshi Server is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU Affero General Public License for more details.
#
#You should have received a copy of the GNU Affero General Public License
#along with Karoshi Server.  If not, see <http://www.gnu.org/licenses/>.

#
#The Karoshi Team can be contacted at: 
#mpsharrad@karoshi.org.uk
#jsharrad@karoshi.org.uk

#
#Website: http://www.karoshi.org.uk
LOG_DATE=$(date +%F)
########################
#Check md5checksum
########################
if ! test -f /opt/karoshi/web_controls/checksums/admin_checksums/radius_access_controls_cgi
then
	echo "$(date): radius_access_controls - No admin Checksum" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi
source /opt/karoshi/web_controls/checksums/admin_checksums/radius_access_controls_cgi
Checksum=$(sha256sum /var/www/cgi-bin_karoshi/admin/radius_access_controls.cgi | cut -d' ' -f1)
[ -z "$Checksum" ] && Checksum=not_set
if [ "$Checksum"'check' != "$radius_access_controls_cgi"'check' ]
then
	echo "$(date): radius_access_controls - Incorrect admin Checksum" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi


########################
#Get variables
########################
numArgs=$#
if [ "$numArgs" != 0 ]
then
	echo "$(date): radius_access_controls - incorrect number of arguments" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi

read DATA
DATA=$(echo "$DATA" | tr -cd 'A-Za-z0-9\._:%\n-+-/' | sed 's/REPLACEUNDERSCORE/_/g')
if [ -z "$DATA" ]
then
	echo "$(date): radius_access_controls - no data" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi

REMOTE_USER=$(echo "$DATA" | cut -s -d: -f1 | tr -cd 'A-Za-z0-9\-')
REMOTE_ADDR=$(echo "$DATA" | cut -s -d: -f2 | tr -cd '0-9.')
RemoteCheckSum=$(echo "$DATA" | cut -s -d: -f3)
ACTION=$(echo "$DATA" | cut -s -d: -f5 | tr -cd '[:lower:]')
GROUP=$(echo "$DATA" | cut -s -d: -f6 | tr -cd 'A-Za-z0-9\-')

########################
#Check data
########################
if [ "$RemoteCheckSum"'check' != "$Checksum"'check' ]
then
	echo "$(date): radius_access_controls - Not called by radius_access_controls.cgi" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi
if [ -z "$REMOTE_USER" ]
then
	echo "$(date): radius_access_controls - Blank remote user" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi
if [ -z "$REMOTE_ADDR" ]
then
	echo "$(date): radius_access_controls - Blank remote tcpip address" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi

if [[ $(grep -c ^"$REMOTE_USER": /opt/karoshi/web_controls/web_access_admin) != 1 ]]
then
	echo "$(date): radius_access_controls - access denied to $REMOTE_USER from $REMOTE_ADDR" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi

if [ -z "$ACTION" ]
then
	echo "$(date): radius_access_controls - blank action by $REMOTE_USER from $REMOTE_ADDR" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi

if [ -z "$GROUP" ]
then
	echo "$(date): radius_access_controls - blank group by $REMOTE_USER from $REMOTE_ADDR" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi


function activate_changes {
#Create /etc/freeradius/denied_groups
[ -f /etc/freeradius/denied_groups ] && rm -f /etc/freeradius/denied_groups
touch /etc/freeradius/denied_groups
for GROUP in $(ls -1 /opt/karoshi/server_network/radius/denied_groups/)
do
	echo -e 'DEFAULT Group == "'"$GROUP"'", Auth-Type := Reject\n\tReply-Message = "This group is not allowed to access radius"\n\n' >> /etc/freeradius/denied_groups
done

#Activate changes on all radius servers
for RADIUS_SERVER in $(ls -1 /opt/karoshi/server_network/radius_servers/ )
do
	if [[ "$RADIUS_SERVER" = $(hostname-fqdn) ]]
	then
		#Make sure that denied_groups is included in /etc/freeradius/users
		if [[ $(grep -c "INCLUDE denied_groups" /etc/freeradius/users) = 0 ]]
		then
			sed -i "1i \$INCLUDE denied_groups" /etc/freeradius/users
		fi

		#Reload radius
		source /opt/karoshi/serversetup/variables/distro
		/opt/karoshi/serversetup/distro/"$DISTROCHOICE"/scripts/control_services/radius_stop 1>/dev/null
		sleep 1
		/opt/karoshi/serversetup/distro/"$DISTROCHOICE"/scripts/control_services/radius_start 1>/dev/null
	else
		#Copy /etc/freeradius/denied_groups
		scp /etc/freeradius/denied_groups root@"$RADIUS_SERVER":/etc/freeradius/
		ssh -x -o PasswordAuthentication=no "$RADIUS_SERVER" '
		#Make sure that denied_groups is included in /etc/freeradius/users
		if [[ $(grep -c "INCLUDE denied_groups" /etc/freeradius/users) = 0 ]]
		then
			sed -i "1i \$INCLUDE denied_groups" /etc/freeradius/users
		fi

		#Reload radius
		source /opt/karoshi/serversetup/variables/distro
		/opt/karoshi/serversetup/distro/"$DISTROCHOICE"/scripts/control_services/radius_stop 1>/dev/null
		sleep 1
		/opt/karoshi/serversetup/distro/"$DISTROCHOICE"/scripts/control_services/radius_start 1>/dev/null
		'
	fi
done
#Remove active changes flag file
[ -f /opt/karoshi/server_network/radius/activate_changes ] && rm -f /opt/karoshi/server_network/radius/activate_changes
}

function allow_group {
echo "$(date): radius_access_controls allowing - $GROUP by $REMOTE_USER from $REMOTE_ADDR" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
#Delete the flag file for the group if it exists
[ -f /opt/karoshi/server_network/radius/denied_groups/"$GROUP" ] && rm -f /opt/karoshi/server_network/radius/denied_groups/"$GROUP"
touch /opt/karoshi/server_network/radius/activate_changes
}

function deny_group {
#Check that the group exists
getent group "$GROUP" 1>/dev/null
if [ "$?" = 0 ]
then
	echo "$(date): radius_access_controls - denying $GROUP by $REMOTE_USER from $REMOTE_ADDR" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	[ ! -d /opt/karoshi/server_network/radius/denied_groups ] && mkdir -p /opt/karoshi/server_network/radius/denied_groups
	#Create a flag file for the group
	touch /opt/karoshi/server_network/radius/denied_groups/"$GROUP"
else
	echo "$(date): radius_access_controls - $GROUP does not exist by $REMOTE_USER from $REMOTE_ADDR" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
fi
touch /opt/karoshi/server_network/radius/activate_changes
}

if [ "$ACTION" = allow ]
then
	allow_group
fi

if [ "$ACTION" = deny ]
then
	deny_group
fi

if [ "$ACTION" = allowall ] || [ "$ACTION" = denyall ]
then
	for GROUP in $(ls -1 /opt/karoshi/server_network/group_information)
	do
		if [ "$ACTION" = allowall ]
		then
			allow_group
		else
			deny_group
		fi
	done
fi

if [ "$ACTION" = activatechanges ]
then
	activate_changes
fi
exit

