#!/bin/bash
#Copyright (C) 2007  The karoshi Team

#This file is part of Karoshi Server.
#
#Karoshi Server is free software: you can redistribute it and/or modify
#it under the terms of the GNU Affero General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#Karoshi Server is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU Affero General Public License for more details.
#
#You should have received a copy of the GNU Affero General Public License
#along with Karoshi Server.  If not, see <http://www.gnu.org/licenses/>.

#
#The Karoshi Team can be contacted at: 
#mpsharrad@karoshi.org.uk
#jharris@karoshi.org.uk
#aball@karoshi.org.uk
#
#Website: http://www.karoshi.org.uk
LOG_DATE=`date +%F`
[ $LOG_DATE'null' = null ] && exit
########################
#Check md5checksum
########################
if ! test -f /opt/karoshi/web_controls/checksums/admin_checksums/reset_password_cgi
then
echo `date`: reset_password - No MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
if ! test -f /opt/karoshi/web_controls/checksums/tech_checksums/reset_password_cgi
then
echo `date`: reset_password - No MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
source /opt/karoshi/web_controls/checksums/admin_checksums/reset_password_cgi
MD5SUM=`md5sum /var/www/cgi-bin_karoshi/admin/reset_password.cgi | cut -d' ' -f1`
[ $MD5SUM'null' = null ] && MD5SUM=not_set
if [ $MD5SUM'check' != $reset_password_cgi'check' ]
then
echo `date`: reset_password - Incorrect MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
source /opt/karoshi/web_controls/checksums/tech_checksums/reset_password_cgi
MD5SUM2=`md5sum /var/www/cgi-bin_karoshi/tech/reset_password.cgi | cut -d' ' -f1`
[ $MD5SUM2'null' = null ] && MD5SUM2=not_set
if [ $MD5SUM2 != $reset_password_cgi ]
then
echo `date`: reset_password - Incorrect MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi

########################
#Get variables
########################
numArgs=$#
if [ $numArgs != 0 ]
then
echo `date`: reset_password - incorrect number of arguments >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
read DATA
DATA=`echo "$DATA" | tr -cd 'A-Za-z0-9\._:%\n-+'`
if [ $DATA'null' = null ]
then
echo `date`: reset_password - no data >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
REMOTE_USER=`echo "$DATA" | cut -s -d: -f1`
REMOTE_ADDR=`echo "$DATA" | cut -s -d: -f2`
REMOTE_MD5=`echo "$DATA" | cut -s -d: -f3`
USERNAME=`echo "$DATA" | cut -s -d: -f4`
PASSWORD=`echo "$DATA" | cut -s -d: -f5`
########################
#Check data
########################
if [ $REMOTE_MD5'check' != $MD5SUM'check' ] && [ $REMOTE_MD5'check' != $MD5SUM2'check' ]
then
echo `date`: reset_password - Not called by reset_password.cgi >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
if [ $REMOTE_USER'null' = null ]
then
echo `date`: reset_password - Blank remote user >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
if [ $REMOTE_ADDR'null' = null ]
then
echo `date`: reset_password - Blank remote tcpip address >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
if [ $USERNAME'null' = null ]
then
echo `date`: reset_password - Blank username by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit
fi
if [ $PASSWORD'null' = null ]
then
echo `date`: reset_password - Blank password by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
if [ `grep -c ^$REMOTE_USER: /opt/karoshi/web_controls/web_access_admin` != 1 ] && [ `grep -c ^$REMOTE_USER: /opt/karoshi/web_controls/web_access_tech` != 1 ]
then
echo `date`: reset_password - access denied to $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
#Dont change password for system accounts
if [ `id -u $USERNAME` -lt 1000 ]
then
echo `date`: change_password - attempt to change system password 'for' $USERNAME by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi

#Dont change passwords for banned users
[ -f /opt/karoshi/logs/banned_user_permanent/$USERNAME ] && exit 102
[ -f /opt/karoshi/logs/banned_user_account_durations/$USERNAME ] && exit 102

########################
#Change the password
########################
echo `date`: reset_password - Reset password 'for' $USERNAME by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
samba-tool user setpassword $USERNAME --newpassword=$PASSWORD 1>/dev/null 2>>/opt/karoshi/logs/karoshi_web_management/$LOG_DATE

########################
#Change the password on federated ldap servers
########################
if [ -d /opt/karoshi/server_network/federated_ldap_servers/ ]
then
if [ `ls -1 /opt/karoshi/server_network/federated_ldap_servers/ | wc -l` -gt 0 ]
then
for FEDERATEDLDAPSERVERS in /opt/karoshi/server_network/federated_ldap_servers/*
do
FEDERATEDLDAPSERVER=`basename $FEDERATEDLDAPSERVERS`
echo `date`: change_password \(federated mode\) - Changing password 'for' $USERNAME on $FEDERATEDLDAPSERVER by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
ssh -x -o PasswordAuthentication=no $FEDERATEDLDAPSERVER '

echo `date`: change_password \(federated mode\) - Changing password for '$USERNAME' by '$REMOTE_USER' from '$REMOTE_ADDR' >> /opt/karoshi/logs/karoshi_web_management/'$LOG_DATE'
samba-tool user setpassword '$USERNAME' --newpassword='$PASSWORD' 1>/dev/null 2>>/opt/karoshi/logs/karoshi_web_management/'$LOG_DATE'
' 2>> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
done
fi
fi

exit $CHANGE_PASS_STATUS

