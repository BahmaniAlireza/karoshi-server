#!/bin/bash
#Copyright (C) 2009 Paul Sharrad

#This file is part of Karoshi Server.
#
#Karoshi Server is free software: you can redistribute it and/or modify
#it under the terms of the GNU Affero General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#Karoshi Server is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU Affero General Public License for more details.
#
#You should have received a copy of the GNU Affero General Public License
#along with Karoshi Server.  If not, see <http://www.gnu.org/licenses/>.

#
#The Karoshi Team can be contacted at: 
#mpsharrad@karoshi.org.uk
#jsharrad@karoshi.org.uk

#
#Website: http://www.karoshi.org.uk
LOG_DATE=`date +%F`
########################
#Check md5checksum
########################
if ! test -f /opt/karoshi/web_controls/checksums/admin_checksums/restore_my_files_cgi
then
echo `date`: restore_my_files - No admin MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
source /opt/karoshi/web_controls/checksums/admin_checksums/restore_my_files_cgi
MD5SUM=`md5sum /var/www/cgi-bin_karoshi/admin/restore_my_files.cgi | cut -d' ' -f1`
[ $MD5SUM'null' = null ] && MD5SUM=not_set
if [ $MD5SUM'check' != $restore_my_files_cgi'check' ]
then
echo `date`: restore_my_files - Incorrect admin MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi

########################
#Get variables
########################
numArgs=$#
if [ $numArgs != 0 ]
then
echo `date`: restore_my_files - incorrect number of arguments >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi

read DATA
DATA=`echo $DATA | tr -cd 'A-Za-z0-9\._,:\-+/%'`
#echo $DATA"<br>"
if [ $DATA'null' = null ]
then
echo `date`: restore_my_files - no data >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi

REMOTE_USER=`echo "$DATA" | cut -s -d: -f1`
REMOTE_ADDR=`echo "$DATA" | cut -s -d: -f2`
REMOTE_MD5=`echo "$DATA" | cut -s -d: -f3`
LOCATION=`echo "$DATA" | cut -s -d: -f5`
FILENAME=`echo "$DATA" | cut -s -d: -f6`
ACTION=`echo "$DATA" | cut -s -d: -f7`
PERMISSIONS=`echo "$DATA" | cut -s -d: -f8`
ITEMMOVE=`echo "$DATA" | cut -s -d: -f11 | sed "s/_/Z%%%%%Z/g"`
NEWFOLDER=`echo "$DATA" | cut -s -d: -f12`



SERVER=`echo "$DATA" | cut -s -d: -f4`


########################
#Check data
########################
if [ $REMOTE_MD5'check' != $MD5SUM'check' ] && [ $REMOTE_MD5'check' != $MD5SUM2'check' ]
then
echo `date`: restore_my_files - Not called by restore_my_files.cgi >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
if [ $REMOTE_USER'null' = null ]
then
echo `date`: restore_my_files - Blank remote user >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
if [ $REMOTE_ADDR'null' = null ]
then
echo `date`: restore_my_files - Blank remote tcpip address >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi

if [ $LOCATION'null' = null ]
then
LOCATION=""
fi

if [ $SERVER'null' = null ]
then
SERVER=notset
fi

if [ $ACTION'null' = null ]
then
ACTION=notset
fi

if [ $ACTION != ENTER ] && [ $ACTION != RESTORE ] && [ $ACTION != REALLYRESTORE ] && [ $ACTION != notset ]
then
echo `date`: restore_my_files - incorrect action by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi

if [ `grep -c ^$REMOTE_USER: /opt/karoshi/web_controls/web_access_admin` != 1 ]
then
echo `date`: restore_my_files - access denied to $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi

[ -f /opt/karoshi/web_controls/user_prefs/$REMOTE_USER ] && source /opt/karoshi/web_controls/user_prefs/$REMOTE_USER
[ -f /opt/karoshi/web_controls/language/$LANGCHOICE/file/restore_my_files ] || LANGCHOICE=englishuk
source /opt/karoshi/web_controls/language/$LANGCHOICE/file/restore_my_files
[ -f /opt/karoshi/web_controls/language/$LANGCHOICE/all ] || LANGCHOICE=englishuk
source /opt/karoshi/web_controls/language/$LANGCHOICE/all

#Show server choice
if [ $SERVER = notset ]
then

SERVERCOUNTER=0
SERVERICON="/images/submenus/system/computer.png"
SERVERICON2="/images/submenus/system/all_computers.png"
echo '<br><br><table class="standard" style="text-align: left;" border="0" cellpadding="2" cellspacing="2"><tbody><tr>'

for KAROSHI_SERVER in /opt/karoshi/server_network/servers/*
do
KAROSHI_SERVER=`basename "$KAROSHI_SERVER"`

echo '<td style="width: 90px; vertical-align: top; text-align: left;"><a class="info" href="javascript:void(0)"><input name="_SERVER_'$KAROSHI_SERVER'_ACTION_ENTER_" type="image" class="images" src="/images/submenus/file/server.png" value=""><span>'$KAROSHI_SERVER'</span></a><br>'$KAROSHI_SERVER'</td>'

[ $SERVERCOUNTER = 5 ] && echo '</tr><tr>'
let SERVERCOUNTER=$SERVERCOUNTER+1
done
echo '</tr></tbody></table>'
fi

#This list is used to declare areas that cannot me deleted or moved
LOCATION_LIST="/ /bin /boot /dev /etc /home /home/applications /home/itadminshare /home/staffshare /home/subjects /home/officeshare /home/users /home/users/guests /home/users/exams /home/users/profileuser /home/users/nonteachingstaff /home/users/studentstaff /home/users/staff /home/users/students /home/users/itadminstaff /home/users/officestaff /home/users/techstaff /initrd /lib /root /opt /opt/karoshi /opt/karoshi/serversetup  /opt/karoshi/karoshi_user /usr /usr/bin /proc /sbin /sys /var /var/www /var/www/html /var/www/html_karoshi /var/www/cgi-bin /var/www/cgi-bin_karoshi"
#This list is used to recursivly declare areas that cannot me deleted or moved
LOCATION_LIST2=( /opt/karoshi/logs /opt/karoshi/web_management /var/www/cgi-bin_karoshi )

#icons
ICON2=/images/submenus/file/set_perms.png
ICON3=/images/submenus/file/rename.png
ICON4=/images/submenus/file/copy.png
ICON5=/images/submenus/file/delete.png
ICON6=/images/submenus/file/up.png
ICON7=/images/submenus/file/home.png
ICON8=/images/submenus/file/stop.png
ICON9=/images/submenus/file/move.png
ICON10=/images/submenus/file/edit.png
ICON11=/images/submenus/file/newfolder.png
ICON12=/images/submenus/file/restore.png
ICON13=/images/submenus/file/reload.png


function check_recursive {
ENTER=yes
[ `echo $LOCATION_LIST | grep -c -w "$FILE"` -gt 0 ] && ENTER=no
COUNTER=0
LOCATIONLIST2COUNT=${#LOCATION_LIST2[@]}
while [ $COUNTER -lt $LOCATIONLIST2COUNT ]
do
LOCATION_ENTRY=${LOCATION_LIST2[$COUNTER]}
[ `echo $FILE | grep -c $LOCATION_ENTRY` -gt 0 ] && ENTER=no
let COUNTER=$COUNTER+1
done
}

function show_directory {

if [ "$LOCATION""null" != null ]
then
convert_special_chars
LOCATION=`echo "$LOCATION" | sed 's/+/ /g'`
LOCATIONFOLDER=`basename "$LOCATION"`
LASTLOCATION=`echo "$LOCATION" | sed "s/\/$LOCATIONFOLDER$//g" | sed "s/_/Z%%%%%Z/g"`
LOCATION2=`echo "$LOCATION" | sed "s/_/Z%%%%%Z/g"`
fi

echo '<b>'$LOCATION'</b>'

if [ "$ITEMMOVE"'null' != null ]
then
convert_special_chars2
ITEMMOVE2=`echo $ITEMMOVE| sed "s/Z%%%%%Z/_/g"`
echo '<br><input name="_ITEMMOVE_" value="'$ITEMMOVE'" type="hidden">'

echo ''$ITEMMOVE2' - '$MOVEMSG2' <input type="image" src="'$ICON9'" name="_ACTION_REALLYMOVE_SERVER_'$SERVER'_ITEMMOVE_'$ITEMMOVE'_LOCATION_'$LOCATION2'_" value="">'
echo ''$COPYMSG2' <input type="image" src="'$ICON4'" name="_ACTION_REALLYCOPY_SERVER_'$SERVER'_ITEMMOVE_'$ITEMMOVE'_LOCATION_'$LOCATION2'_" value="">'
echo ''$CANCELMSG' <input type="image" src="'$ICON8'" name="_ACTION_CANCELCOPY_SERVER_'$SERVER'_LOCATION_'$LOCATION2'_" value="">'
fi

echo '<br><br><table style="table-layout:fixed" class="standard" style="text-align: left;" border="0" cellpadding="2" cellspacing="2"><col width=22><col width=22><col width=22><col width=22><col width=22><tbody>
<tr><td style="vertical-align: top;"><a class="info" href="javascript:void(0)"><input name="_ACTION_ENTER_SERVER_'$SERVER'_" type="image" class="images" src="'$ICON7'" value=""><span>'$TOPDIRMSG'</span></a></td><td style="vertical-align: top;"><a class="info" href="javascript:void(0)"><input name="_ACTION_ENTER_SERVER_'$SERVER'_LOCATION_'$LASTLOCATION'_" type="image" class="images" src="'$ICON6'" value=""><span>'$UPMSG'</span></a></td><td><a class="info" href="javascript:void(0)"><input name="_ACTION_CREATEDIR_SERVER_'$SERVER'_LOCATION_'$LOCATION2'_" type="image" class="images" src="'$ICON11'" value=""><span>'$NEWDIRMSG'</span></a></td>
<td><a class="info" href="javascript:void(0)"><input name="_ACTION_ENTER_SERVER_'$SERVER'_LOCATION_'$LOCATION2'_" type="image" class="images" src="'$ICON13'" value=""><span>'$RELOADMSG'</span></a></td>
</tr>
'

#Log Browse Actions
echo `date`: restore_my_files - browsing  "$LOCATION" on $SERVER by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE

if [ $SERVER = `hostname-fqdn` ]
then
if [ `ls -1 -a "$LOCATION"/ | wc -l` -gt 2 ]
then
GLOBIGNORE=yes
for FILE in "$LOCATION"/*
do
FILENAME=`basename "$FILE"`
FILEINFO=`ls -l -h -d "$FILE"`
PERMS=`echo $FILEINFO | cut -d" " -f1`
OWNER=`echo $FILEINFO | cut -d" " -f3-4`
SIZE=`echo $FILEINFO | cut -d" " -f5`
LASTMOD=`echo $FILEINFO | cut -d" " -f6-8`
FILE2=`echo "$FILE" | sed "s/_/Z%%%%%Z/g"`
LOCATION2=`echo "$LOCATION" | sed "s/_/Z%%%%%Z/g"`

ICON1=/images/submenus/file/file.png
FILEACTION=DOWNLOAD
if [ -d "$FILE" ]
then
ICON1=/images/submenus/file/folder.png
FILEACTION=ENTER
fi
echo '<tr>'

check_recursive

if [ $ENTER = yes ]
then
echo '
<td><a class="info" href="javascript:void(0)"><input name="_ACTION_RENAME_SERVER_'$SERVER'_LOCATION_'$FILE2'_" type="image" class="images" src="'$ICON3'" value=""><span>'$RENAMEMSG'</span></a></td>
<td><a class="info" href="javascript:void(0)"><input name="_ACTION_ENTER_SERVER_'$HOSTNAME'_ITEMMOVE_'$FILE2'_LOCATION_'$LOCATION2'_" type="image" class="images" src="'$ICON4'" value=""><span>'$MOVEMSG'</span></a></td>
<td><a class="info" href="javascript:void(0)"><input name="_ACTION_DELETE_SERVER_'$HOSTNAME'_LOCATION_'$FILE2'_" type="image" class="images" src="'$ICON5'" value=""><span>'$DELETEMSG'</span></a></td>
'
else
echo "<td></td><td></td><td></td>"
fi
if [ $ENTER = yes ]
then
echo '<td><a class="info" href="javascript:void(0)"><input name="_ACTION_SETPERMS_SERVER_'$HOSTNAME'_LOCATION_'$FILE2'_" type="image" class="images" src="'$ICON2'" value=""><span>'$OWNERMSG' : '$OWNER'<br>'$PERMISSIONSMSG' : '$PERMS'<br>'$LASTMODMSG' : '$LASTMOD'<br>'$SIZEMSG' : '$SIZE'</span></a></td><td>'
else
echo "<td></td><td>"
fi

if [ $FILEACTION = ENTER ]
then
echo '<input src="'$ICON1'" name="_ACTION_ENTER_SERVER_'$SERVER'_LOCATION_'$FILE2'_" type="image" value="">'
else
if [ $ENTER = yes ]
then
FILETYPEDATA=`file "$FILE"`
if [ `echo "$FILETYPEDATA" | grep -c ASCII` -gt 0 ] || [ `echo "$FILETYPEDATA" | grep -c Bourne-Again` -gt 0 ]
then
echo '<a class="info" href="javascript:void(0)"><input name="_ACTION_EDIT_SERVER_'$HOSTNAME'_LOCATION_'$FILE2'_" type="image" class="images" src="'$ICON10'" value=""><span>'$EDITMSG'</span></a>'
fi
else
echo '<img src="'$ICON1'">'
fi
fi
echo '</td><td>'$FILENAME'</td></tr>'
done
fi
else
ssh -x -o PasswordAuthentication=no $SERVER '

#This list is used to declare areas that cannot me deleted or moved
LOCATION_LIST="/ /bin /boot /dev /etc /home /home/applications /home/itadminshare /home/staffshare /home/subjects /home/officeshare /home/users /home/users/guests /home/users/exams /home/users/profileuser /home/users/nonteachingstaff /home/users/studentstaff /home/users/staff /home/users/students /home/users/itadminstaff /home/users/officestaff /home/users/techstaff /initrd /lib /root /opt /opt/karoshi /opt/karoshi/serversetup  /opt/karoshi/karoshi_user /usr /usr/bin /proc /sbin /sys /var /var/www /var/www/html /var/www/html_karoshi /var/www/cgi-bin /var/www/cgi-bin_karoshi"
#This list is used to recursivly declare areas that cannot me deleted or moved
LOCATION_LIST2=( /opt/karoshi/logs /opt/karoshi/web_management /var/www/cgi-bin_karoshi )

if [ `ls -1 -a "'$LOCATION'"/ | wc -l` -gt 2 ]
then
GLOBIGNORE=yes
SHOWRESTORE=no

if [ `echo '$LOCATION' | grep -c /home/backups` -gt 0 ]
then
if [ `echo '$LOCATION' | sed "s/\//\n/g" | wc -l` -gt 5 ]
then
SHOWRESTORE=yes
fi
fi
for FILE in "'$LOCATION'"/*
do
FILENAME=`basename "$FILE"`
FILEINFO=`ls -l -h -d "$FILE"`
PERMS=`echo $FILEINFO | cut -d" " -f1`
OWNER=`echo $FILEINFO | cut -d" " -f3-4`
SIZE=`echo $FILEINFO | cut -d" " -f5`
LASTMOD=`echo $FILEINFO | cut -d" " -f6-8`
FILE2=`echo "$FILE" | sed "s/_/Z%%%%%Z/g"`
LOCATION2=`echo "'$LOCATION'" | sed "s/_/Z%%%%%Z/g"`

ICON1=/images/submenus/file/file.png
FILEACTION=DOWNLOAD
if [ -d "$FILE" ]
then
ICON1=/images/submenus/file/folder.png
FILEACTION=ENTER
fi
echo "<tr>"


ENTER=yes
[ `echo $LOCATION_LIST | grep -c -w "$FILE"` -gt 0 ] && ENTER=no
COUNTER=0
LOCATIONLIST2COUNT=${#LOCATION_LIST2[@]}
while [ $COUNTER -lt $LOCATIONLIST2COUNT ]
do
LOCATION_ENTRY=${LOCATION_LIST2[$COUNTER]}
[ `echo $FILE | grep -c $LOCATION_ENTRY` -gt 0 ] && ENTER=no
let COUNTER=$COUNTER+1
done

if [ $ENTER = yes ]
then
echo "<td><a class=\"info\" href=\"javascript:void(0)\"><input name=\"_ACTION_RENAME_SERVER_'$SERVER'"_"LOCATION_$FILE2"_"\" type=\"image\" class=\"images\" src=\"'$ICON3'\" value=\"\"><span>'$RENAMEMSG'</span></a></td>
<td><a class=\"info\" href=\"javascript:void(0)\"><input name=\"_ACTION_ENTER_SERVER_'$SERVER'"_"ITEMMOVE_$FILE2"_"LOCATION_$LOCATION2"_"\" type=\"image\" class=\"images\" src=\"'$ICON4'\" value=\"'$SERVER'_MOVE_$FILE\"><span>'$MOVEMSG'</span></a></td>
<td><a class=\"info\" href=\"javascript:void(0)\"><input name=\"_ACTION_DELETE_SERVER_'$SERVER'"_"LOCATION_$FILE2"_"\" type=\"image\" class=\"images\" src=\"'$ICON5'\" value=\"\"><span>'$DELETEMSG'</span></a></td>"
else
echo "<td></td><td></td><td></td>"
fi
if [ $ENTER = yes ]
then
echo "<td><a class=\"info\" href=\"javascript:void(0)\"><input name=\"_ACTION_SETPERMS_SERVER_'$SERVER'"_"LOCATION_$FILE2"_"\" type=\"image\" class=\"images\" src=\"'$ICON2'\" value=\"\"><span>'$OWNERMSG' : $OWNER<br>'$PERMISSIONSMSG' : $PERMS<br>'$LASTMODMSG' : $LASTMOD<br>'$SIZEMSG' : $SIZE</span></a></td><td>"
else
echo "<td></td><td>"
fi
[ $SHOWRESTORE = yes ] && echo "<input type=\"image\" src=\"'$ICON12'\" name=\"_ACTION_RESTORE_SERVER_'$SERVER'"_"LOCATION_$FILE2"_"\" value=\"\"></td><td>"

if [ $FILEACTION = ENTER ]
then
echo "<input type=\"image\" src=\"$ICON1\" name=\"_ACTION_ENTER_SERVER_'$SERVER'_LOCATION_$FILE2"_"\" value=\"\">"
else
if [ $ENTER = yes ]
then
FILETYPEDATA=`file "$FILE"`
if [ `echo "$FILETYPEDATA" | grep -c ASCII` -gt 0 ] || [ `echo "$FILETYPEDATA" | grep -c Bourne-Again` -gt 0 ]
then
echo "<input type=\"image\" src=\"'$ICON10'\" name=\"_ACTION_EDIT_SERVER_'$SERVER'"_"LOCATION_$FILE2"_"\" value=\"'$SERVER'_EDIT_$FILE\">"
fi
else
echo "<img src=\"$ICON1\">"
fi
fi
echo "</td><td>$FILENAME</td></tr>"
done
fi
'
fi
echo '</tbody></table>'

}

function convert_special_chars {
LOCATION=`echo "$LOCATION" |  sed 's/+/ /g' | sed 's/%21/!/g' | sed 's/%25/%/g' | sed 's/%5E/^/g' | sed 's/%28/(/g' | sed 's/%29/)/g' | sed 's/%7E/~/g' | sed 's/%23/#/g' | sed 's/%40/@/g' | sed 's/%7B/{/g'  | sed 's/%7D/}/g' | sed 's/%3E/>/g' | sed 's/%3C/</g' | sed 's/%C2%AC/¬/g' | sed 's/%7C/|/g' | sed 's/%2C/,/g' | sed 's/%3B/;/g' | sed 's/%3A/:/g' | sed 's/%3D/=/g' | sed 's/%2B/+/g' | sed 's/%3F/?/g'`
}

function convert_special_chars2 {
ITEMMOVE=`echo "$ITEMMOVE" |  sed 's/%2F/\//g' | sed 's/+/ /g' | sed 's/%21/!/g' | sed 's/%25/%/g' | sed 's/%5E/^/g' | sed 's/%28/(/g' | sed 's/%29/)/g' | sed 's/%7E/~/g' | sed 's/%23/#/g' | sed 's/%40/@/g' | sed 's/%7B/{/g'  | sed 's/%7D/}/g' | sed 's/%3E/>/g' | sed 's/%3C/</g' | sed 's/%C2%AC/¬/g' | sed 's/%7C/|/g' | sed 's/%2C/,/g' | sed 's/%3B/;/g' | sed 's/%3A/:/g' | sed 's/%3D/=/g' | sed 's/%2B/+/g' | sed 's/%3F/?/g'`
}

function convert_special_chars3 {
TEXTCONTENT=`echo "$TEXTCONTENT" |  sed 's/%2F/\//g' | sed 's/+/ /g' | sed 's/%21/!/g' | sed 's/%25/%/g' | sed 's/%5E/^/g' | sed 's/%28/(/g' | sed 's/%29/)/g' | sed 's/%7E/~/g' | sed 's/%23/#/g' | sed 's/%40/@/g' | sed 's/%7B/{/g'  | sed 's/%7D/}/g' | sed 's/%3E/>/g' | sed 's/%3C/</g' | sed 's/%C2%AC/¬/g' | sed 's/%7C/|/g' | sed 's/%2C/,/g' | sed 's/%3B/;/g' | sed 's/%3A/:/g' | sed 's/%3D/=/g' | sed 's/%2B/+/g' | sed 's/%3F/?/g' | sed 's/%5B/[/g' | sed 's/%5D/]/g' | sed 's/REPLACEUNDERSCORE/_/g' | sed 's/%99/*/g' | sed 's/%24/$/g' | sed 's/%26/\&/g'`
}

function restore_check_info {

ENABLE_RESTORE=yes
if [ `echo $BACKUPINFO'null' | sed 's/ //g'` = null ]
then
ENABLE_RESTORE=no
fi

if [ `echo "$RESTOREPATH"null | sed 's/ //g'` = null ]
then
echo '<br>'$RESTOREERRORMSG3'<br><br>'
ENABLE_RESTORE=no
fi
}


function restore_item {
#Confirm restore of item.
convert_special_chars
#Get backup details
RESTOREPATH=`echo $LOCATION | cut -d/ -f7-`
RESTOREPATH=`echo /$RESTOREPATH`
DEPTHCOUNT=`echo -e "$RESTOREPATH" | sed 's/\//\n/g' | wc -l`
let DEPTHCOUNT=$DEPTHCOUNT-1

if [ $DEPTHCOUNT -gt 0 ]
then
RESTOREPATH=`echo $RESTOREPATH | cut -d/ -f1-$DEPTHCOUNT`
else
RESTOREPATH=""
fi
LOCATION2=`echo "$LOCATION" | sed "s/_/Z%%%%%Z/g"`
LOCATIONFOLDER=`echo $LOCATION | cut -d/ -f6-`
RESTORESERVER=`echo $LOCATION | cut -d/ -f4`
[ `echo $RESTORESERVER'null' | sed 's/ //g'` = null ] && RESTORESERVER=notset
BACKUPNAME=`echo $LOCATION | cut -d/ -f5`
[ `echo $BACKUPNAME'null' | sed 's/ //g'` = null ] && BACKUPNAME=notset
BACKUPINFOPATH=/home/backups/$RESTORESERVER/$BACKUPNAME/backup_information
#Read info file
BACKUPINFO=`ssh -x -o PasswordAuthentication=no $SERVER '
[ -f "'$BACKUPINFOPATH'" ] && cat '$BACKUPINFOPATH'
'`

TOPRESTOREPATH=`echo -e "$BACKUPINFO" | sed -n 4,4p`
TOPRESTOREPATH2=`basename "$TOPRESTOREPATH"`
TOPRESTOREPATH=`echo "$TOPRESTOREPATH" | sed "s/\/$TOPRESTOREPATH2$//g"`
RESTOREPATH=`echo "$TOPRESTOREPATH$RESTOREPATH"`

#Check info
restore_check_info
if [ $ENABLE_RESTORE = yes ]
then
echo '<table class="standard" style="text-align: left; height: 91px;" border="0" cellpadding="2" cellspacing="2"><tbody>
<tr><td style="width: 180px;">'$RESTOREMSG'</td><td>'$LOCATIONFOLDER'</td></tr>
<tr><td>'$RESTOREPATHMSG'</td><td>'$RESTOREPATH'</td></tr>
<tr><td>'$RESTORESERVERMSG'</td><td>'$RESTORESERVER'</td></tr>
</tbody></table>
<br>'$CONFIRMRESTOREMSG'<br><br>
<input type="image" src="/images/submenus/file/go.gif" name="_ACTION_REALLYRESTORE_SERVER_'$SERVER'_LOCATION_'$LOCATION2'_" value="">'
else
echo '<br><br>'
fi
echo '<a href="javascript:history.go(-1)"> <img src="/images/submenus/file/back.gif" alt="back" border="0"></a>'
}

function really_restore_item {
if [ $LOCATION'null' = null ]
then
echo `date`: restore_my_files - blank location by "for" $SERVER by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit
fi
#Restore the item
convert_special_chars
LOCATIONFOLDER2=`basename "$LOCATION"`
LASTLOCATION=`echo "$LOCATION" | sed "s/\/$LOCATIONFOLDER2$//g"`

CURRENTLOCATION=`echo $LOCATION | cut -d/ -f1-6`
RESTOREPATH=`echo $LOCATION | cut -d/ -f7-`
RESTOREPATH=`echo /$RESTOREPATH`

DEPTHCOUNT=`echo -e "$RESTOREPATH" | sed 's/\//\n/g' | wc -l`
let DEPTHCOUNT=$DEPTHCOUNT-1

if [ $DEPTHCOUNT -gt 0 ]
then
RESTOREPATH=`echo $RESTOREPATH | cut -d/ -f1-$DEPTHCOUNT`
else
RESTOREPATH=""
fi
LOCATIONFOLDER=`echo $LOCATION | cut -d/ -f6-`
RESTORESERVER=`echo $LOCATION | cut -d/ -f4`
[ `echo $RESTORESERVER'null' | sed 's/ //g'` = null ] && RESTORESERVER=notset
BACKUPNAME=`echo $LOCATION | cut -d/ -f5`
[ `echo $BACKUPNAME'null' | sed 's/ //g'` = null ] && BACKUPNAME=notset
BACKUPINFOPATH=/home/backups/$RESTORESERVER/$BACKUPNAME/backup_information
#Read info file
BACKUPINFO=`ssh -x -o PasswordAuthentication=no $SERVER '
[ -f "'$BACKUPINFOPATH'" ] && cat '$BACKUPINFOPATH'
'`

TOPRESTOREPATH=`echo -e "$BACKUPINFO" | sed -n 4,4p`
TOPRESTOREPATH2=`basename "$TOPRESTOREPATH"`
TOPRESTOREPATH=`echo "$TOPRESTOREPATH" | sed "s/\/$TOPRESTOREPATH2$//g"`
RESTOREPATH=`echo "$TOPRESTOREPATH$RESTOREPATH"`

#Convert underscores
LOCATION=`echo "$LOCATION" | sed "s/Z%%%%%Z/_/g"`
RESTOREPATH=`echo "$RESTOREPATH" | sed "s/Z%%%%%Z/_/g"`

echo `date`: restore_my_files - restoring "$LOCATIONFOLDER" from $SERVER to $RESTORESERVER $RESTOREPATH by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE

echo '<table class="standard" style="text-align: left; height: 91px;" border="0" cellpadding="2" cellspacing="2"><tbody>
<tr><td style="width: 180px;">'$RESTOREMSG'</td><td>'$LOCATIONFOLDER'</td></tr>
<tr><td>'$RESTOREPATHMSG'</td><td>'$RESTOREPATH'</td></tr>
<tr><td>'$RESTORESERVERMSG'</td><td>'$RESTORESERVER'</td></tr>
</tbody></table>
<br>'$RESTORINGMSG'<br><br>'

restore_check_info
echo '<PRE STYLE="font-size: small; font-family:'Arial, Times, Georgia, Times New Roman, Times, serif'">'
if [ $ENABLE_RESTORE = yes ]
then
#Sort out spaces for rsync
LOCATION=`echo "$LOCATION" | sed 's/ /\\\ /g'`
#RESTOREPATH=`echo "$RESTOREPATH" | sed 's/ /\\\ /g'`

#echo 'rsync --dirs --recursive --compress --times --progress --perms --executability --owner --group root@'$SERVER':"'$LOCATION'" "'$RESTOREPATH'"'

if [ $RESTORESERVER = `hostname-fqdn` ]
then
echo Restoring "$LOCATION" to $HOSTNAME
#echo restorepath "$RESTOREPATH"
#echo 'rsync --dirs --recursive --compress --times --progress --perms --executability --owner --group root@'$SERVER':"'$LOCATION'" "'$RESTOREPATH'"'
#create restore path if it does not exist
[ ! -d $RESTOREPATH ] && mkdir -p $RESTOREPATH
rsync --timeout=30 --dirs --recursive --compress --times --progress --perms --executability --owner --group root@$SERVER:"$LOCATION" "$RESTOREPATH"/

else
echo Restoring "$LOCATION" to $RESTORESERVER
ssh -x -o PasswordAuthentication=no $RESTORESERVER '
#create restore path if it does not exist
[ ! -d '$RESTOREPATH' ] && mkdir -p '$RESTOREPATH'
rsync --timeout=30 --dirs --recursive --compress --times --progress --perms --executability --owner --group root@'$SERVER':"'$LOCATION'" "'$RESTOREPATH'"/
'
fi
echo '</pre>'
fi
echo '<br>'$RESTORECOMPLETEMSG'<br><br>'
echo '<input type="image" src="/images/submenus/file/back.gif" name="_ACTION_ENTER_SERVER_'$SERVER'_LOCATION_'$LASTLOCATION'_" value="">'
}

[ $ACTION = ENTER ] && show_directory
[ $ACTION = RESTORE ] && restore_item
[ $ACTION = REALLYRESTORE ] && really_restore_item
exit
