#!/bin/bash
#Copyright (C) 2012 Paul Sharrad

#This file is part of Karoshi Server.
#
#Karoshi Server is free software: you can redistribute it and/or modify
#it under the terms of the GNU Affero General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#Karoshi Server is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU Affero General Public License for more details.
#
#You should have received a copy of the GNU Affero General Public License
#along with Karoshi Server.  If not, see <http://www.gnu.org/licenses/>.

#
#The Karoshi Team can be contacted at: 
#mpsharrad@karoshi.org.uk
#jharris@karoshi.org.uk
#aball@karoshi.org.uk
#
#Website: http://www.karoshi.org.uk
LOG_DATE=`date +%F`
########################
#Check md5checksum
########################
if ! test -f /opt/karoshi/web_controls/checksums/admin_checksums/samba_add_share_cgi
then
echo `date`: samba_add_share - No admin MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
source /opt/karoshi/web_controls/checksums/admin_checksums/samba_add_share_cgi
MD5SUM=`md5sum /var/www/cgi-bin_karoshi/admin/samba_add_share.cgi | cut -d' ' -f1`
[ $MD5SUM'null' = null ] && MD5SUM=not_set
if [ $MD5SUM'check' != $samba_add_share_cgi'check' ]
then
echo `date`: samba_add_share - Incorrect admin MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi

########################
#Get variables
########################
numArgs=$#
if [ $numArgs != 0 ]
then
echo `date`: samba_add_share - incorrect number of arguments >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi

read DATA
DATA=`echo $DATA | tr -cd 'A-Za-z0-9\._:\-'`
if [ $DATA'null' = null ]
then
echo `date`: samba_add_share - no data >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
REMOTE_USER=`echo "$DATA" | cut -s -d: -f1`
REMOTE_ADDR=`echo "$DATA" | cut -s -d: -f2`
REMOTE_MD5=`echo "$DATA" | cut -s -d: -f3`
COMMENT=`echo "$DATA" | cut -s -d: -f4`
FOLDERNAME=`echo "$DATA" | cut -s -d: -f5`
GROUP=`echo "$DATA" | cut -s -d: -f6`
GROUPPERMS=`echo "$DATA" | cut -s -d: -f7`
OTHERSPERMS=`echo "$DATA" | cut -s -d: -f8`
SERVERNAME=`echo "$DATA" | cut -s -d: -f9`
SERVERTYPE=`echo "$DATA" | cut -s -d: -f10`
SERVERMASTER=`echo "$DATA" | cut -s -d: -f11`

########################
#Check data
########################
if [ $REMOTE_MD5'check' != $MD5SUM'check' ]
then
echo `date`: samba_add_share - Not called by samba_add_share.cgi or bulk_user_creation_create.cgi >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
if [ $REMOTE_USER'null' = null ]
then
echo `date`: samba_add_share - Blank remote user >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
if [ $REMOTE_ADDR'null' = null ]
then
echo `date`: samba_add_share - Blank remote tcpip address >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
if [ $FOLDERNAME'null' = null ]
then
echo `date`: samba_add_share - Blank folder name by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
if [ $GROUP'null' = null ]
then
echo `date`: samba_add_share - Blank group by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
if [ $GROUPPERMS'null' = null ]
then
echo `date`: samba_add_share - Blank group permissions by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
if [ $OTHERSPERMS'null' = null ]
then
echo `date`: samba_add_share - Blank permissions "for" other users by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
if [ $SERVERNAME'null' = null ]
then
echo `date`: samba_add_share - Blank servername by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
if [ $SERVERTYPE'null' = null ]
then
echo `date`: samba_add_share - Blank servertype by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
if [ $SERVERTYPE = federatedslave ]
then
if [ $SERVERMASTER'null' = null ]
then
echo `date`: samba_add_share - Blank servermaster by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
fi


if [ `grep -c ^$REMOTE_USER: /opt/karoshi/web_controls/web_access_admin` != 1 ]
then
echo `date`: samba_add_share - access denied to $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi

##########################
#Language
##########################
LANGCHOICE=englishuk
STYLESHEET=defaultstyle.css
[ -f /opt/karoshi/web_controls/user_prefs/$REMOTE_USER ] && source /opt/karoshi/web_controls/user_prefs/$REMOTE_USER
[ -f /opt/karoshi/web_controls/language/$LANGCHOICE/system/samba_add_share ] || LANGCHOICE=englishuk
source /opt/karoshi/web_controls/language/$LANGCHOICE/system/samba_add_share
[ -f /opt/karoshi/web_controls/language/$LANGCHOICE/all ] || LANGCHOICE=englishuk
source /opt/karoshi/web_controls/language/$LANGCHOICE/all

echo `date`: samba_add_share - adding $FOLDERNAME as a share to $SERVERNAME by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE


if [ $SERVERNAME = `hostname-fqdn` ]
then
#Make sure that the folder does not already exist
if [ -d /home/$FOLDERNAME ]
then
exit 102
else
#Add details to smb.conf
if [ `grep -c "path = /home/$FOLDERNAME" /etc/samba/smb.conf` != 0 ]
then
exit 103
else
#Create folder
mkdir "/home/$FOLDERNAME"
#Set ownership
chown root:$GROUP "/home/$FOLDERNAME"
#Work out permissions
CREATEMASK=064
DIRMASK=075
OTHERMASK=0
OTHERDIRMASK=0
if [ $GROUPPERMS = fullaccess ]
then
CREATEMASK=066
DIRMASK=077
fi
if [ $OTHERSPERMS = readonly ]
then
OTHERMASK=4
OTHERDIRMASK=5
fi
if [ $OTHERSPERMS = fullaccess ]
then
OTHERMASK=6
OTHERDIRMASK=7
fi
#Set permissions
chmod $DIRMASK$OTHERDIRMASK "/home/$FOLDERNAME"

#Add data to custom smb.conf
[ ! -d /opt/karoshi/server_network/extra_network_shares/$SERVERNAME ] && mkdir -p /opt/karoshi/server_network/extra_network_shares/$SERVERNAME
echo "[$FOLDERNAME]" > /opt/karoshi/server_network/extra_network_shares/$SERVERNAME/"$FOLDERNAME".conf
echo "	path = \"/home/$FOLDERNAME\"" >> /opt/karoshi/server_network/extra_network_shares/$SERVERNAME/"$FOLDERNAME".conf
echo "	force group = +$GROUP" >> /opt/karoshi/server_network/extra_network_shares/$SERVERNAME/"$FOLDERNAME".conf
echo "	invalid users = root" >> /opt/karoshi/server_network/extra_network_shares/$SERVERNAME/"$FOLDERNAME".conf
echo "	read only = No" >> /opt/karoshi/server_network/extra_network_shares/$SERVERNAME/"$FOLDERNAME".conf
echo "	create mask =" $CREATEMASK$OTHERMASK >> /opt/karoshi/server_network/extra_network_shares/$SERVERNAME/"$FOLDERNAME".conf
echo "	directory mask =" $DIRMASK$OTHERDIRMASK >> /opt/karoshi/server_network/extra_network_shares/$SERVERNAME/"$FOLDERNAME".conf
echo "	browseable = Yes" >> /opt/karoshi/server_network/extra_network_shares/$SERVERNAME/"$FOLDERNAME".conf
echo >> /opt/karoshi/server_network/extra_network_shares/$SERVERNAME/"$FOLDERNAME".conf
#Add include line to smb.conf
if [ `grep -c $SERVERNAME/"$FOLDERNAME".conf` = 0 ]
then
echo  >> /etc/samba/smb.conf
echo include = /opt/karoshi/server_network/extra_network_shares/$SERVERNAME/"$FOLDERNAME".conf >> /etc/samba/smb.conf
#Restart samba
source /opt/karoshi/serversetup/variables/distro
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/samba_stop
sleep 1
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/samba_start
fi
fi
fi
fi


if [ $SERVERTYPE = network ] && [ $SERVERNAME != `hostname-fqdn` ] || [ $SERVERTYPE = federated ]
then
ssh -o PasswordAuthentication=no -o ConnectTimeout=3 $SERVERNAME '
#Make sure that the folder does not already exist
if [ -d /home/'$FOLDERNAME' ]
then
exit 102
else
#Add details to smb.conf
if [ `grep -c "path = /home/'$FOLDERNAME'" /etc/samba/smb.conf` != 0 ]
then
exit 103
else
#Create folder
mkdir "/home/'$FOLDERNAME'"
#Set ownership
chown root:'$GROUP' "/home/'$FOLDERNAME'"
#Work out permissions
CREATEMASK=064
DIRMASK=075
OTHERMASK=0
OTHERDIRMASK=0
if [ $GROUPPERMS = fullaccess ]
then
CREATEMASK=066
DIRMASK=077
fi
if [ $OTHERSPERMS = readonly ]
then
OTHERMASK=4
OTHERDIRMASK=5
fi
if [ $OTHERSPERMS = fullaccess ]
then
OTHERMASK=6
OTHERDIRMASK=7
fi
chmod $DIRMASK$OTHERDIRMASK "/home/'$FOLDERNAME'"

#Add data to custom smb.conf
[ ! -d /opt/karoshi/server_network/extra_network_shares/'$SERVERNAME' ] && mkdir -p /opt/karoshi/server_network/extra_network_shares/'$SERVERNAME'
echo "['$FOLDERNAME']" > /opt/karoshi/server_network/extra_network_shares/'$SERVERNAME'/"'$FOLDERNAME'".conf
echo "	path = \"/home/'$FOLDERNAME'\"" >> /opt/karoshi/server_network/extra_network_shares/'$SERVERNAME'/"'$FOLDERNAME'".conf
echo "	force group = +'$GROUP'" >> /opt/karoshi/server_network/extra_network_shares/'$SERVERNAME'/"'$FOLDERNAME'".conf
echo "	invalid users = root" >> /opt/karoshi/server_network/extra_network_shares/'$SERVERNAME'/"'$FOLDERNAME'".conf
echo "	read only = No" >> /opt/karoshi/server_network/extra_network_shares/'$SERVERNAME'/"'$FOLDERNAME'".conf
echo "	create mask =" $CREATEMASK$OTHERMASK >> /opt/karoshi/server_network/extra_network_shares/'$SERVERNAME'/"'$FOLDERNAME'".conf
echo "	directory mask =" $DIRMASK$OTHERDIRMASK >> /opt/karoshi/server_network/extra_network_shares/'$SERVERNAME'/"'$FOLDERNAME'".conf
echo "	browseable = Yes" >> /opt/karoshi/server_network/extra_network_shares/'$SERVERNAME'/"'$FOLDERNAME'".conf
echo >> /opt/karoshi/server_network/extra_network_shares/'$SERVERNAME'/"'$FOLDERNAME'".conf
#Add include to smb.conf
if [ `grep -c '$SERVERNAME'/"'$FOLDERNAME'".conf` = 0 ]
then
echo  >> /etc/samba/smb.conf
echo include = /opt/karoshi/server_network/extra_network_shares/'$SERVERNAME'/"'$FOLDERNAME'".conf >> /etc/samba/smb.conf
#Restart samba
source /opt/karoshi/serversetup/variables/distro
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/samba_stop
sleep 1
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/samba_start
fi
fi
fi
'
EXITSTATUS=`echo $?`

if [ $EXITSTATUS = 0 ]
then
#Add data to custom smb.conf
[ ! -d /opt/karoshi/server_network/extra_network_shares/$SERVERNAME ] && mkdir /opt/karoshi/server_network/extra_network_shares/$SERVERNAME
echo "[$FOLDERNAME]" > /opt/karoshi/server_network/extra_network_shares/$SERVERNAME/"$FOLDERNAME".conf
echo "	path = \"/home/$FOLDERNAME\"" >> /opt/karoshi/server_network/extra_network_shares/$SERVERNAME/"$FOLDERNAME".conf
echo "	force group = +$GROUP" >> /opt/karoshi/server_network/extra_network_shares/$SERVERNAME/"$FOLDERNAME".conf
echo "	invalid users = root" >> /opt/karoshi/server_network/extra_network_shares/$SERVERNAME/"$FOLDERNAME".conf
echo "	read only = No" >> /opt/karoshi/server_network/extra_network_shares/$SERVERNAME/"$FOLDERNAME".conf
echo "	create mask =" $CREATEMASK$OTHERMASK >> /opt/karoshi/server_network/extra_network_shares/$SERVERNAME/"$FOLDERNAME".conf
echo "	directory mask =" $DIRMASK$OTHERDIRMASK >> /opt/karoshi/server_network/extra_network_shares/$SERVERNAME/"$FOLDERNAME".conf
echo "	browseable = Yes" >> /opt/karoshi/server_network/extra_network_shares/$SERVERNAME/"$FOLDERNAME".conf
echo >> /opt/karoshi/server_network/extra_network_shares/$SERVERNAME/"$FOLDERNAME".conf
fi
exit $EXITSTATUS
fi

if [ $SERVERTYPE = federatedslave ]
then
ssh -o PasswordAuthentication=no -o ConnectTimeout=3 $SERVERMASTER '
ssh -o PasswordAuthentication=no -o ConnectTimeout=3 '$SERVERNAME' '\''
#Make sure that the folder does not already exist
if [ -d /home/'$FOLDERNAME' ]
then
exit 102
else
#Add details to smb.conf
if [ `grep -c "path = /home/'$FOLDERNAME'" /etc/samba/smb.conf` != 0 ]
then
exit 103
else
#Create folder
mkdir "/home/'$FOLDERNAME'"
#Set ownership
chown root:'$GROUP' "/home/'$FOLDERNAME'"
#Work out permissions
CREATEMASK=064
DIRMASK=075
OTHERMASK=0
OTHERDIRMASK=0
if [ $GROUPPERMS = fullaccess ]
then
CREATEMASK=066
DIRMASK=077
fi
if [ $OTHERSPERMS = readonly ]
then
OTHERMASK=4
OTHERDIRMASK=5
fi
if [ $OTHERSPERMS = fullaccess ]
then
OTHERMASK=6
OTHERDIRMASK=7
fi
chmod $DIRMASK$OTHERDIRMASK "/home/'$FOLDERNAME'"

#Add data to custom smb.conf
[ ! -d /opt/karoshi/server_network/extra_network_shares/'$SERVERNAME' ] && mkdir -p /opt/karoshi/server_network/extra_network_shares/'$SERVERNAME'
echo "['$FOLDERNAME']" > /opt/karoshi/server_network/extra_network_shares/'$SERVERNAME'/"'$FOLDERNAME'".conf
echo "	path = \"/home/'$FOLDERNAME'\"" >> /opt/karoshi/server_network/extra_network_shares/'$SERVERNAME'/"'$FOLDERNAME'".conf
echo "	force group = +'$GROUP'" >> /opt/karoshi/server_network/extra_network_shares/'$SERVERNAME'/"'$FOLDERNAME'".conf
echo "	invalid users = root" >> /opt/karoshi/server_network/extra_network_shares/'$SERVERNAME'/"'$FOLDERNAME'".conf
echo "	read only = No" >> /opt/karoshi/server_network/extra_network_shares/'$SERVERNAME'/"'$FOLDERNAME'".conf
echo "	create mask =" $CREATEMASK$OTHERMASK >> /opt/karoshi/server_network/extra_network_shares/'$SERVERNAME'/"'$FOLDERNAME'".conf
echo "	directory mask =" $DIRMASK$OTHERDIRMASK >> /opt/karoshi/server_network/extra_network_shares/'$SERVERNAME'/"'$FOLDERNAME'".conf
echo "	browseable = Yes" >> /opt/karoshi/server_network/extra_network_shares/'$SERVERNAME'/"'$FOLDERNAME'".conf
echo >> /opt/karoshi/server_network/extra_network_shares/'$SERVERNAME'/"'$FOLDERNAME'".conf
#Add include to smb.conf
if [ `grep -c '$SERVERNAME'/"'$FOLDERNAME'".conf` = 0 ]
then
echo  >> /etc/samba/smb.conf
echo include = /opt/karoshi/server_network/extra_network_shares/'$SERVERNAME'/"'$FOLDERNAME'".conf >> /etc/samba/smb.conf
#Restart samba
source /opt/karoshi/serversetup/variables/distro
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/samba_stop
sleep 1
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/samba_start
fi
fi
fi
'\''
EXITSTATUS=`echo $?`
exit $EXITSTATUS
'
EXITSTATUS=`echo $?`
if [ $EXITSTATUS = 0 ]
then
#Add data to custom smb.conf
[ ! -d /opt/karoshi/server_network/extra_network_shares/$SERVERNAME ] && mkdir /opt/karoshi/server_network/extra_network_shares/$SERVERNAME
echo "[$FOLDERNAME]" > /opt/karoshi/server_network/extra_network_shares/$SERVERNAME/"$FOLDERNAME".conf
echo "	path = \"/home/$FOLDERNAME\"" >> /opt/karoshi/server_network/extra_network_shares/$SERVERNAME/"$FOLDERNAME".conf
echo "	force group = +$GROUP" >> /opt/karoshi/server_network/extra_network_shares/$SERVERNAME/"$FOLDERNAME".conf
echo "	invalid users = root" >> /opt/karoshi/server_network/extra_network_shares/$SERVERNAME/"$FOLDERNAME".conf
echo "	read only = No" >> /opt/karoshi/server_network/extra_network_shares/$SERVERNAME/"$FOLDERNAME".conf
echo "	create mask =" $CREATEMASK$OTHERMASK >> /opt/karoshi/server_network/extra_network_shares/$SERVERNAME/"$FOLDERNAME".conf
echo "	directory mask =" $DIRMASK$OTHERDIRMASK >> /opt/karoshi/server_network/extra_network_shares/$SERVERNAME/"$FOLDERNAME".conf
echo "	browseable = Yes" >> /opt/karoshi/server_network/extra_network_shares/$SERVERNAME/"$FOLDERNAME".conf
echo >> /opt/karoshi/server_network/extra_network_shares/$SERVERNAME/"$FOLDERNAME".conf
fi

#Add server information
echo SERVERTYPE=$SERVERTYPE > /opt/karoshi/server_network/extra_network_shares/$SERVERNAME/"$FOLDERNAME".info
echo SERVERMASTER=$SERVERMASTER >> /opt/karoshi/server_network/extra_network_shares/$SERVERNAME/"$FOLDERNAME".info
exit $EXITSTATUS
fi

