#!/bin/bash
#Copyright (C) 2015 Paul Sharrad

#This file is part of Karoshi Server.
#
#Karoshi Server is free software: you can redistribute it and/or modify
#it under the terms of the GNU Affero General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#Karoshi Server is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU Affero General Public License for more details.
#
#You should have received a copy of the GNU Affero General Public License
#along with Karoshi Server.  If not, see <http://www.gnu.org/licenses/>.

#
#The Karoshi Team can be contacted at: 
#mpsharrad@karoshi.org.uk
#jsharrad@karoshi.org.uk

#
#Website: http://www.karoshi.org.uk
LOG_DATE=`date +%F`
########################
#Check md5checksum
########################
if ! test -f /opt/karoshi/web_controls/checksums/admin_checksums/samba_shares_cgi
then
	echo `date`: samba_shares - No admin MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
source /opt/karoshi/web_controls/checksums/admin_checksums/samba_shares_cgi
MD5SUM=`md5sum /var/www/cgi-bin_karoshi/admin/samba_shares.cgi | cut -d' ' -f1`
[ -z "$MD5SUM" ] && MD5SUM=not_set
if [ "$MD5SUM"'check' != "$samba_shares_cgi"'check' ]
then
	echo `date`: samba_shares - Incorrect admin MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi

########################
#Get variables
########################
numArgs=$#
if [ $numArgs != 0 ]
then
	echo `date`: samba_shares - incorrect number of arguments >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi

read DATA
DATA=`echo "$DATA" | tr -cd 'A-Za-z0-9\._:%\n-+-/' | sed 's/REPLACEUNDERSCORE/_/g'`
if [ -z "$DATA" ]
then
	echo `date`: samba_shares - no data >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
REMOTE_USER=`echo "$DATA" | cut -s -d: -f1`
REMOTE_ADDR=`echo "$DATA" | cut -s -d: -f2`
REMOTE_MD5=`echo "$DATA" | cut -s -d: -f3`
ACTION=`echo "$DATA" | cut -s -d: -f4`
COMMENT=`echo "$DATA" | cut -s -d: -f5`
SHARENAME=`echo "$DATA" | cut -s -d: -f6`
SHAREPATH=`echo "$DATA" | cut -s -d: -f7`
GROUP1=`echo "$DATA" | cut -s -d: -f8`
GROUP2=`echo "$DATA" | cut -s -d: -f9`
GROUP3=`echo "$DATA" | cut -s -d: -f10`
GROUP4=`echo "$DATA" | cut -s -d: -f11`
GROUPPERMS1=`echo "$DATA" | cut -s -d: -f12`
GROUPPERMS2=`echo "$DATA" | cut -s -d: -f13`
GROUPPERMS3=`echo "$DATA" | cut -s -d: -f14`
GROUPPERMS4=`echo "$DATA" | cut -s -d: -f15`
ALLPERMS=`echo "$DATA" | cut -s -d: -f16`
MAPDRIVE1=`echo "$DATA" | cut -s -d: -f17`
MAPDRIVE2=`echo "$DATA" | cut -s -d: -f18`
MAPDRIVE3=`echo "$DATA" | cut -s -d: -f19`
MAPDRIVE4=`echo "$DATA" | cut -s -d: -f20`
MAPDRIVEALL=`echo "$DATA" | cut -s -d: -f21`
DRIVELETTER=`echo "$DATA" | cut -s -d: -f22`
SERVERNAME=`echo "$DATA" | cut -s -d: -f23`
SERVERTYPE=`echo "$DATA" | cut -s -d: -f24`
SERVERMASTER=`echo "$DATA" | cut -s -d: -f25`
MOBILE=`echo "$DATA" | cut -s -d: -f26`

[ -z "$MOBILE" ] && MOBILE=no
[ -z "$ACTION" ] && ACTION=view

########################
#Check data
########################
if [ $REMOTE_MD5'check' != $MD5SUM'check' ]
then
	echo `date`: samba_shares - Not called by samba_shares.cgi or bulk_user_creation_create.cgi >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ -z "$REMOTE_USER" ]
then
	echo `date`: samba_shares - Blank remote user >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ -z "$REMOTE_ADDR" ]
then
	echo `date`: samba_shares - Blank remote tcpip address >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ $ACTION = reallyadd ] || [ $ACTION = reallyedit ]
then
	if [ -z "$SHARENAME" ]
	then
		echo `date`: samba_shares - Blank share name by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
		exit 101
	fi
	if [ -z "$SHAREPATH" ]
	then
		echo `date`: samba_shares - Blank folder path by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
		exit 101
	fi
	if [ -z "$GROUP1" ]
	then
		echo `date`: samba_shares - Blank group1 by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
		exit 101
	fi
	if [ -z "$GROUPPERMS1" ]
	then
		echo `date`: samba_shares - Blank group permissions by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
		exit 101
	fi
	if [ -z "$SERVERNAME" ]
	then
		echo `date`: samba_shares - Blank servername by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
		exit 101
	fi
	if [ -z "$SERVERTYPE" ]
	then
		echo `date`: samba_shares - Blank servertype by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
		exit 101
	fi
	if [ "$SERVERTYPE" = federatedslave ]
	then
		if [ -z "$SERVERMASTER" ]
		then
			echo `date`: samba_shares - Blank servermaster by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
			exit 101
		fi
	fi
fi

if [ `grep -c ^$REMOTE_USER: /opt/karoshi/web_controls/web_access_admin` != 1 ]
then
	echo `date`: samba_shares - access denied to $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi

##########################
#Language
##########################

STYLESHEET=defaultstyle.css
[ -f /opt/karoshi/web_controls/user_prefs/$REMOTE_USER ] && source /opt/karoshi/web_controls/user_prefs/$REMOTE_USER
TEXTDOMAIN=karoshi-server

WIDTH1=120
WIDTH2=160
WIDTH3=100
WIDTH4=100
WIDTH5=100
WIDTH6=30
WIDTH7=100
WIDTH8=180
WIDTH9=100
ICON1=/images/submenus/file/edit.png
ICON2=/images/submenus/file/delete.png

if [ "$ACTION" = reallyadd ] || [ $ACTION = reallyedit ]
then
	echo `date`: samba_shares - adding $SHARENAME with $SHAREPATH as a share to $SERVERNAME by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE

	#Check to see if this is a gluster volume
	GLUSTER=no

	if [ ! -f /opt/karoshi/server_network/servers/$SERVERNAME/fileserver ]
	then
		#Check to see if this is a gluster volume
		VOLUME=`echo $SERVERNAME | cut -d. -f1`
		if [ ! -d /opt/karoshi/server_network/gluster-volumes/$VOLUME ]
		then
			MESSAGE=$"The new server you have chosen is not configured as a Karoshi file server."
			show_status
		else
			GLUSTER=yes
		fi
	fi

	#Check if all groups has been selected
	ALLGROUPS=""
	ALL_PERMS=""
	if [ "$ALLPERMS" -gt 0 ]
	then
		ALLGROUPS=all
		ALL_PERMS=$ALLPERMS
	fi
	[ -z "$GROUP1" ] && MAPDRIVE1="" GROUPPERMS1=""
	[ -z "$GROUP2" ] && MAPDRIVE2="" GROUPPERMS2=""
	[ -z "$GROUP3" ] && MAPDRIVE3="" GROUPPERMS3=""
	[ -z "$GROUP4" ] && MAPDRIVE4="" GROUPPERMS4=""
	[ -z "$ALLGROUPS" ] && MAPDRIVEALL=""
	GROUPLIST="$ALLGROUPS $GROUP1 $GROUP2 $GROUP3 $GROUP4"
	GROUPLIST=`echo $GROUPLIST | sed 's/ /,/g'`
	MAP_DRIVE="$MAPDRIVEALL $MAPDRIVE1 $MAPDRIVE2 $MAPDRIVE3 $MAPDRIVE4"
	MAP_DRIVE=`echo $MAP_DRIVE | sed 's/ /,/g'`
	GROUPPERMS="$ALL_PERMS $GROUPPERMS1 $GROUPPERMS2 $GROUPPERMS3 $GROUPPERMS4"
	GROUPPERMS=`echo $GROUPPERMS | sed 's/ /,/g'`

	#Calculate network mask
	MASK=075
	if [ $GROUPPERMS1 = 7 ] || [ $GROUPPERMS2 = 7 ] || [ $GROUPPERMS3 = 7 ] || [ $GROUPPERMS4 = 7 ]
	then
		MASK=077
	fi
	MASK=$MASK$ALLPERMS
	
	function create_network_share {
	if [ "$SERVERNAME" = `hostname-fqdn` ]
	then
		#Create folder
		[ ! -d "$SHAREPATH" ] && mkdir "$SHAREPATH"

		#Set permissions
		chmod $MASK "$SHAREPATH"

		#Remove all acls from the folder
		setfacl -Rb "$SHAREPATH"
		
		#Add acls for the selected groups
		GROUPNAMES=( `echo $GROUPLIST | sed 's/,/ /g'` )
		GROUP_PERMS=( `echo $GROUPPERMS | sed 's/,/ /g'` )
		GROUPNAMECOUNT=${#GROUPNAMES[*]}

		COUNTER=0
		while [ "$COUNTER" -lt "$GROUPNAMECOUNT" ]
		do
			PERM="r-x"
			GROUP_PERM=${GROUP_PERMS[$COUNTER]}
			[ "$GROUP_PERM" = 7 ] && PERM="rwx"
			GROUPNAME=${GROUPNAMES[$COUNTER]}
			if [ "$GROUPNAME" = all ]
			then
				setfacl -Rm d:u::rwx,g::"$PERM",o::"$PERM" "$SHAREPATH"
			else
				GROUP_PERM=${GROUP_PERMS[$COUNTER]}
				setfacl -Rm d:u::---,d:g::---,d:g:"$GROUPNAME":"$PERM",g:"$GROUPNAME":"$PERM" "$SHAREPATH"
			fi
			let COUNTER=$COUNTER+1
		done
		#Check that the share definition does not already exist in smb.conf
		if [ `grep -c -w "\[$SHARENAME\]" /etc/samba/smb.conf` =  0 ]
		then
			#Add data to custom smb.conf
			[ ! -d /etc/samba/extra_network_shares/$SERVERNAME ] && mkdir -p /etc/samba/extra_network_shares/$SERVERNAME
			echo "[$SHARENAME]" > /etc/samba/extra_network_shares/$SERVERNAME/"$SHARENAME".conf
			echo "	comment = \"$COMMENT\"" >> /etc/samba/extra_network_shares/$SERVERNAME/"$SHARENAME".conf
			echo "	path = \"$SHAREPATH\"" >> /etc/samba/extra_network_shares/$SERVERNAME/"$SHARENAME".conf
			echo "	invalid users = root" >> /etc/samba/extra_network_shares/$SERVERNAME/"$SHARENAME".conf
			echo "	read only = No" >> /etc/samba/extra_network_shares/$SERVERNAME/"$SHARENAME".conf
			echo "	browseable = Yes" >> /etc/samba/extra_network_shares/$SERVERNAME/"$SHARENAME".conf
			echo >> /etc/samba/extra_network_shares/$SERVERNAME/"$SHARENAME".conf

			#Add include line to smb.conf
			if [ `grep -c "$SERVERNAME"/"$SHARENAME".conf /etc/samba/smb.conf` = 0 ]
			then
				echo  >> /etc/samba/smb.conf
				echo include = /etc/samba/extra_network_shares/$SERVERNAME/"$SHARENAME".conf >> /etc/samba/smb.conf
			fi
			#Restart samba
			source /opt/karoshi/serversetup/variables/distro
			/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/samba_stop 1>/dev/null 2>/dev/null
			sleep 1
			/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/samba_start 1>/dev/null 2>/dev/null
		fi
	fi


	if [ $SERVERTYPE = network ] && [ $SERVERNAME != `hostname-fqdn` ] || [ $SERVERTYPE = federated ]
	then
		ssh -o PasswordAuthentication=no -o ConnectTimeout=3 $SERVERNAME '
		#Create folder
		[ ! -d "'$SHAREPATH'" ] && mkdir "'$SHAREPATH'"
		#Set ownership

		chmod '$MASK' "'$SHAREPATH'"

		#Remove all acls from the folder
		setfacl -Rb "'$SHAREPATH'"

		#Add acls for the selected groups
		GROUPNAMES=( `echo '$GROUPLIST' | sed "s/,/ /g"` )
		GROUP_PERMS=( `echo '$GROUPPERMS' | sed "s/,/ /g"` )
		GROUPNAMECOUNT=${#GROUPNAMES[*]}

		COUNTER=0
		while [ "$COUNTER" -lt "$GROUPNAMECOUNT" ]
		do
			PERM="r-x"
			GROUPNAME=${GROUPNAMES[$COUNTER]}
			GROUP_PERM=${GROUP_PERMS[$COUNTER]}
			[ "$GROUP_PERM" = 7 ] && PERM="rwx"
			if [ "$GROUPNAME" = all ]
			then
				setfacl -Rm d:u::rwx,g::"$PERM",o::"$PERM" "$SHAREPATH"
			else
				setfacl -Rm d:u::---,d:g::---,d:g:"$GROUPNAME":"$PERM",g:"$GROUPNAME":"$PERM" "'$SHAREPATH'"
			fi
			let COUNTER=$COUNTER+1
			
		done
		#Check that the share definition does not already exist in smb.conf
		if [ `grep -c -w "\['$SHARENAME'\]" /etc/samba/smb.conf` =  0 ]
		then
			#Add data to custom smb.conf
			[ ! -d /etc/samba/extra_network_shares/'$SERVERNAME' ] && mkdir -p /etc/samba/extra_network_shares/'$SERVERNAME'
			echo "['$SHARENAME']" > /etc/samba/extra_network_shares/'$SERVERNAME'/"'$SHARENAME'".conf
			echo "	comment = \"'$COMMENT'\"" >> /etc/samba/extra_network_shares/'$SERVERNAME'/"'$SHARENAME'".conf
			echo "	path = \"'$SHAREPATH'\"" >> /etc/samba/extra_network_shares/'$SERVERNAME'/"'$SHARENAME'".conf
			echo "	invalid users = root" >> /etc/samba/extra_network_shares/'$SERVERNAME'/"'$SHARENAME'".conf
			echo "	read only = No" >> /etc/samba/extra_network_shares/'$SERVERNAME'/"'$SHARENAME'".conf
			echo "	browseable = Yes" >> /etc/samba/extra_network_shares/'$SERVERNAME'/"'$SHARENAME'".conf
			echo >> /etc/samba/extra_network_shares/'$SERVERNAME'/"'$SHARENAME'".conf
			#Add include to smb.conf
			if [ `grep -c "'$SERVERNAME'"/"'$SHARENAME'".conf /etc/samba/smb.conf` = 0 ]
			then
				echo  >> /etc/samba/smb.conf
				echo include = /etc/samba/extra_network_shares/'$SERVERNAME'/"'$SHARENAME'".conf >> /etc/samba/smb.conf
			fi
			#Restart samba
			source /opt/karoshi/serversetup/variables/distro
			/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/samba_stop 1>/dev/null 2>/dev/null
			sleep 1
			/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/samba_start 1>/dev/null 2>/dev/null
		fi
		'
		EXITSTATUS=$?
		[ $EXITSTATUS != 0 ] && exit $EXITSTATUS
	fi

	if [ $SERVERTYPE = federatedslave ]
	then
		ssh -o PasswordAuthentication=no -o ConnectTimeout=3 $SERVERMASTER '
		ssh -o PasswordAuthentication=no -o ConnectTimeout=3 '$SERVERNAME' '\''
		#Create folder
		[ ! -d "'$SHAREPATH'" ] && mkdir "'$SHAREPATH'"
		#Set ownership
		chmod '$MASK' "/home/'$FOLDERNAME'"

		#Add acls for the selected groups
		GROUPNAMES=( `echo '$GROUPLIST' | sed "s/,/ /g"` )
		GROUP_PERMS=( `echo '$GROUPPERMS' | sed "s/,/ /g"` )
		GROUPNAMECOUNT=${#GROUPNAMES[*]}

		COUNTER=0
		while [ "$COUNTER" -lt "$GROUPNAMECOUNT" ]
		do
			PERM="r-x"
			GROUPNAME=${GROUPNAMES[$COUNTER]}
			GROUP_PERM=${GROUP_PERMS[$COUNTER]}
			[ "$GROUP_PERM" = 7 ] && PERM="rwx"
			if [ "$GROUPNAME" = all ]
			then
				setfacl -Rm d:u::rwx,g::"$PERM",o::"$PERM" "$SHAREPATH"
			else
				setfacl -Rm d:u::---,d:g::---,d:g:"$GROUPNAME":"$PERM",g:"$GROUPNAME":"$PERM" "'$SHAREPATH'"
			fi
			let COUNTER=$COUNTER+1
			
		done

		#Add data to custom smb.conf
		[ ! -d /etc/samba/extra_network_shares/'$SERVERNAME' ] && mkdir -p /etc/samba/extra_network_shares/'$SERVERNAME'
		echo "['$SHARENAME']" > /etc/samba/extra_network_shares/'$SERVERNAME'/"'$SHARENAME'".conf
		echo "	comment = \"'$COMMENT'\"" >> /etc/samba/extra_network_shares/'$SERVERNAME'/"'$SHARENAME'".conf
		echo "	path = \"'$SHAREPATH'\"" >> /etc/samba/extra_network_shares/'$SERVERNAME'/"'$SHARENAME'".conf
		echo "	invalid users = root" >> /etc/samba/extra_network_shares/'$SERVERNAME'/"'$SHARENAME'".conf
		echo "	read only = No" >> /etc/samba/extra_network_shares/'$SERVERNAME'/"'$SHARENAME'".conf
		echo "	browseable = Yes" >> /etc/samba/extra_network_shares/'$SERVERNAME'/"'$SHARENAME'".conf
		echo >> /etc/samba/extra_network_shares/'$SERVERNAME'/"'$SHARENAME'".conf
		#Add include to smb.conf
		if [ `grep -c "'$SERVERNAME'"/"'$SHARENAME'".conf /etc/samba/smb.conf` = 0 ]
		then
			echo >> /etc/samba/smb.conf
			echo include = /etc/samba/extra_network_shares/'$SERVERNAME'/"'$SHARENAME'".conf >> /etc/samba/smb.conf
		fi
		#Restart samba
		source /opt/karoshi/serversetup/variables/distro
		/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/samba_stop 1>/dev/null 2>/dev/null
		sleep 1
		/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/samba_start 1>/dev/null 2>/dev/null
		'\''
		EXITSTATUS=`echo $?`
		exit $EXITSTATUS
		'
		EXITSTATUS=`echo $?`
		[ $EXITSTATUS != 0 ] && exit $EXITSTATUS
		
	fi

	#Add data to custom smb.conf
	[ ! -d /opt/karoshi/server_network/network_shares/$SERVERNAME ] && mkdir -p /opt/karoshi/server_network/network_shares/$SERVERNAME
	echo SERVER='"'"$SERVERNAME"'"' > /opt/karoshi/server_network/network_shares/$SERVERNAME/"$SHARENAME"
	echo COMMENT='"'"$COMMENT"'"' > /opt/karoshi/server_network/network_shares/$SERVERNAME/"$SHARENAME"
	echo SHAREPATH=$SHAREPATH >> /opt/karoshi/server_network/network_shares/$SERVERNAME/"$SHARENAME"
	echo USERLIST='"''"' >> /opt/karoshi/server_network/network_shares/$SERVERNAME/"$SHARENAME"
	echo GROUPLIST='"'"$GROUPLIST"'"' >> /opt/karoshi/server_network/network_shares/$SERVERNAME/"$SHARENAME"
	echo GROUPPERMS='"'"$GROUPPERMS"'"' >> /opt/karoshi/server_network/network_shares/$SERVERNAME/"$SHARENAME"
	echo MAP_DRIVE='"'"$MAP_DRIVE"'"' >> /opt/karoshi/server_network/network_shares/$SERVERNAME/"$SHARENAME"
	echo SERVERTYPE='"'"$SERVERTYPE"'"' >> /opt/karoshi/server_network/network_shares/$SERVERNAME/"$SHARENAME"
	echo SERVERMASTER='"'"$SERVERMASTER"'"' >> /opt/karoshi/server_network/network_shares/$SERVERNAME/"$SHARENAME"
	echo DRIVELETTER='"'"$DRIVELETTER"'"' >> /opt/karoshi/server_network/network_shares/$SERVERNAME/"$SHARENAME"
	echo MASK=$MASK >> /opt/karoshi/server_network/network_shares/$SERVERNAME/"$SHARENAME"
	}

	if [ "$GLUSTER" = no ]
	then
		create_network_share
		#Add in dfs link
		ln -s msdfs:$SERVERNAME\\$SHARENAME /var/lib/samba/dfs/$SHARENAME
	else
		#Get a list of servers in the gluster volume.
		GLUSTERSERVERS=`ls -1 /opt/karoshi/server_network/gluster-volumes/$SERVERNAME/servers`
		GLUSTERVOL=$SERVERNAME
		#GLUSTERSERVERS=`echo $GLUSTERSERVERS | sed 's/ /,/g'`

		for SERVERNAME in $GLUSTERSERVERS
		do
			DFSPATH=$DFSPATH,$SERVERNAME\\$SHARENAME
			create_network_share
			/opt/karoshi/serversetup/modules/glusterfs/scripts/populate_gluster_volume "$SERVERNAME" "$SHAREPATH" "$GLUSTERVOL" copydata 1>/dev/null
		done
		DFSPATH=`echo $DFSPATH | sed 's/^,//g'`
		[ -L /var/lib/samba/dfs/"$SHARENAME" ] && rm -f /var/lib/samba/dfs/homes/"$SHARENAME"
		ln -s msdfs:"$DFSPATH" /var/lib/samba/dfs/"$SHARENAME"
	fi

	#Regenerate pam mount and kix files to map drives
	/opt/karoshi/serversetup/pdc/"useful scripts"/generate_logon_scripts

	#Show shares
	ACTION=view
fi

if [ "$ACTION" = add ] || [ "$ACTION" = edit ]
then
	if [ "$ACTION" = edit ]
	then
		#Get existing share information 
		if [ -f /opt/karoshi/server_network/network_shares/$SERVERNAME/"$SHARENAME" ]
		then
			source /opt/karoshi/server_network/network_shares/$SERVERNAME/"$SHARENAME"
			ALLGROUPS=""
			ALLPERMS=""
			MAPDRIVEALL=""
			if [ `echo $GROUPLIST | grep -c ^all` -gt 0 ]
			then
				ALLGROUPS=ALL
				ALLPERMS=`echo $GROUPPERMS | cut -d, -f1`
				MAPDRIVEALL=`echo $MAP_DRIVE | cut -d, -f1`
			fi
			
			COUNTER=1
			GROUPCOUNTER=1
			for GROUPNAME in `echo $GROUPLIST | sed 's/,/ /g'`
			do
				if [ $GROUPNAME != all ]
				then
					GROUP[$GROUPCOUNTER]="$GROUPNAME"
					GROUPPERMS[$GROUPCOUNTER]=`echo $GROUPPERMS | cut -d, -f$COUNTER`
					MAPDRIVE[$GROUPCOUNTER]=`echo $MAP_DRIVE| cut -d, -f$COUNTER`
					let GROUPCOUNTER="$GROUPCOUNTER"+1
				fi
				let COUNTER="$COUNTER"+1
			done
			GROUP1=${GROUP[1]}
			GROUP2=${GROUP[2]}
			GROUP3=${GROUP[3]}
			GROUP4=${GROUP[4]}
			GROUPPERMS1=${GROUPPERMS[1]}
			GROUPPERMS2=${GROUPPERMS[2]}
			GROUPPERMS3=${GROUPPERMS[3]}
			GROUPPERMS4=${GROUPPERMS[4]}
			MAPDRIVE1=${MAPDRIVE[1]}
			MAPDRIVE2=${MAPDRIVE[2]}
			MAPDRIVE3=${MAPDRIVE[3]}
			MAPDRIVE4=${MAPDRIVE[4]}
		fi
	fi

	echo '<form action="/cgi-bin/admin/samba_shares.cgi" method="post">'
[ "$ACTION" = add ] && echo '<input type="hidden" name="____ACTION____" value="reallyadd____">'
echo '<br><table class="standard" style="text-align: left;" ><tbody>'

if [ "$ACTION" = edit ]
then
	echo '<tr><td style="width: '$WIDTH5'px;">'$"Server"'</td><td>'$SERVERNAME'</td></tr>'
fi

echo '<tr><td style="width: '$WIDTH5'px;">'$"Share Name"'</td><td>'

#Only allow share name to be entered if creating a new share.
if [ "$ACTION" = add ]
then
	echo '<input tabindex= "2" name="____SHARENAME____" value="'$SHARENAME'" style="width: 192px;" size="20" type="text"></td><td style="width: '$WIDTH6'px;">
<a class="info" target="_blank" href="http://www.linuxschools.com/karoshi/documentation/wiki/index.php?title=Network_Shares"><img class="images" alt="" src="/images/help/info.png"><span>'$"Enter in the name for the network share."'</span></a>'
else
	echo '<input type="hidden" name="____SHARENAME____" value="'$SHARENAME'">'"$SHARENAME"	
fi
echo '</td></tr>
<tr><td>'$"Comment"'</td><td><input tabindex= "1" name="____COMMENT____" value="'$COMMENT'" style="width: 192px;" size="20" type="text"></td><td><a class="info" target="_blank" href="http://www.linuxschools.com/karoshi/documentation/wiki/index.php?title=Network_Shares"><img class="images" alt="" src="/images/help/info.png"><span>'$"This show as information for your clients when they look at the network share."'</span></a></td></tr>
<tr><td>'$"Folder Path"'</td><td>'

if [ "$ACTION" = add ]
then
	echo '<input tabindex= "2"  name="____SHAREPATH____" value="'$SHAREPATH'" style="width: 192px;" size="20" type="text"></td><td>
<a class="info" target="_blank" href="http://www.linuxschools.com/karoshi/documentation/wiki/index.php?title=Network_Shares"><img class="images" alt="" src="/images/help/info.png"><span>'$"Enter in the path that you want the share to use."'</span></a>'
else
	echo '<input type="hidden" name="____SHAREPATH____" value="'$SHAREPATH'">'"$SHAREPATH"	
fi

echo '</td></tr>
<tr><td>'$"Drive Letter"'</td><td>
<select style="width: 200px;" name="____DRIVELETTER____">
<option label="DriveLetter" value="'$DRIVELETTER'">'$DRIVELETTER'</option><option class="select-dash" disabled="disabled">----------</option>'
for DRIVELETTER in D E F G H I J K L M N O P Q R S T U V W X Y Z
do
	echo '<option value="'$DRIVELETTER'">'$DRIVELETTER'</option>'
done
echo '</select>
</td><td>
<a class="info" target="_blank" href="http://www.linuxschools.com/karoshi/documentation/wiki/index.php?title=Network_Shares"><img class="images" alt="" src="/images/help/info.png"><span>'$"This will map the drive with the drive letter you have chosen. This only affects Windows clients."'</span></a></td>
</tr>

<tr><td style="vertical-align:middle">'$"Group"'</td><td style="vertical-align:middle">'

	if [ ! -z "$GROUP1" ]
	then
		/opt/karoshi/web_controls/group_dropdown_list | sed 's/_/____/g' | sed 's/____GROUP____/____GROUP1____/g' | sed 's/<option><\/option>/<option value="'$GROUP1'">'$GROUP1'<\/option><option label="dottedline" class="select-dash" disabled="disabled">----------<\/option>/g'
	else
		/opt/karoshi/web_controls/group_dropdown_list | sed 's/_/____/g' | sed 's/____GROUP____/____GROUP1____/g'
	fi

	echo '</td><td style="vertical-align:middle">
	<a class="info" target="_blank" href="http://www.linuxschools.com/karoshi/documentation/wiki/index.php?title=Network_Shares"><img class="images" alt="" src="/images/help/info.png"><span>'$"Enter in the name of the group that you want to allow access to the folder."'</span></a></td><td style="width: '$WIDTH7'px;">
<select style="width: 200px;" name="____GROUPPERMS1____">'

if [ ! -z "$GROUPPERMS1" ]
then
	PERMSLANG=$"No Access"
	[ $GROUPPERMS1 = 5 ] && PERMSLANG=$"Read only"
	[ $GROUPPERMS1 = 7 ] && PERMSLANG=$"Full Access"
	echo '<option value="'$GROUPPERMS1'">'$PERMSLANG'</option><option class="select-dash" disabled="disabled">----------</option>'
fi

echo '<option value="5">'$"Read only"'</option>
<option value="7">'$"Full Access"'</option>
</select>
</td><td style="vertical-align:middle"><a class="info" target="_blank" href="http://www.linuxschools.com/karoshi/documentation/wiki/index.php?title=Network_Shares"><img class="images" alt="" src="/images/help/info.png"><span>'$"Choose the permissions that you want to set for this group for the share."'</span></a></td>
<td>
<select style="width: 200px;" name="____MAPDRIVE1____">'

if [ ! -z "$MAPDRIVE1" ]
then
	MAPDRIVELANG=$"Do not map drive"
	[ $MAPDRIVE1 = 1 ] && MAPDRIVELANG=$"Map drive"
	echo '<option value="'$MAPDRIVE1'">'$MAPDRIVELANG'</option><option class="select-dash" disabled="disabled">----------</option>'
fi

echo '<option value="1">'$"Map drive"'</option>
<option value="0">'$"Do not map drive"'</option>
</select>
</td></tr>
<tr><td style="vertical-align:middle">'$"Group"'</td><td style="vertical-align:middle">'
	if [ ! -z "$GROUP2" ]
	then
		/opt/karoshi/web_controls/group_dropdown_list | sed 's/_/____/g' | sed 's/____GROUP____/____GROUP2____/g' | sed 's/<option><\/option>/<option value="'$GROUP2'">'$GROUP2'<\/option><option class="select-dash" disabled="disabled">----------<\/option>/g'
	else
		/opt/karoshi/web_controls/group_dropdown_list | sed 's/_/____/g' | sed 's/____GROUP____/____GROUP2____/g'
	fi

	echo '</td><td style="vertical-align:middle">
	<a class="info" target="_blank" href="http://www.linuxschools.com/karoshi/documentation/wiki/index.php?title=Network_Shares"><img class="images" alt="" src="/images/help/info.png"><span>'$"Enter in the name of the group that you want to allow access to the folder."'</span></a></td><td>
<select style="width: 200px;" name="____GROUPPERMS2____">'

if [ ! -z "$GROUPPERMS2" ]
then
	PERMSLANG=$"No Access"
	[ $GROUPPERMS2 = 5 ] && PERMSLANG=$"Read only"
	[ $GROUPPERMS2 = 7 ] && PERMSLANG=$"Full Access"
	echo '<option value="'$GROUPPERMS2'">'$PERMSLANG'</option><option class="select-dash" disabled="disabled">----------</option>'
fi

echo '<option value="5">'$"Read only"'</option>
<option value="7">'$"Full Access"'</option>
</select>	
<td style="vertical-align:middle"><a class="info" target="_blank" href="http://www.linuxschools.com/karoshi/documentation/wiki/index.php?title=Network_Shares"><img class="images" alt="" src="/images/help/info.png"><span>'$"Choose the permissions that you want to set for this group for the share."'</span></a></td>
<td>
<select style="width: 200px;" name="____MAPDRIVE2____">'

if [ ! -z "$MAPDRIVE2" ]
then
	MAPDRIVELANG=$"Do not map drive"
	[ $MAPDRIVE2 = 1 ] && MAPDRIVELANG=$"Map drive"
	echo '<option value="'$MAPDRIVE2'">'$MAPDRIVELANG'</option><option class="select-dash" disabled="disabled">----------</option>'
fi

echo '<option value="1">'$"Map drive"'</option>
<option value="0">'$"Do not map drive"'</option>
</select>
</td></tr>

<tr><td style="vertical-align:middle">'$"Group"'</td><td style="vertical-align:middle">'
	if [ ! -z "$GROUP3" ]
	then
		/opt/karoshi/web_controls/group_dropdown_list | sed 's/_/____/g' | sed 's/____GROUP____/____GROUP3____/g' | sed 's/<option><\/option>/<option value="'$GROUP3'">'$GROUP3'<\/option><option class="select-dash" disabled="disabled">----------<\/option>/g'
	else
		/opt/karoshi/web_controls/group_dropdown_list | sed 's/_/____/g' | sed 's/____GROUP____/____GROUP3____/g'
	fi

	echo '</td><td style="vertical-align:middle">
	<a class="info" target="_blank" href="http://www.linuxschools.com/karoshi/documentation/wiki/index.php?title=Network_Shares"><img class="images" alt="" src="/images/help/info.png"><span>'$"Enter in the name of the group that you want to allow access to the folder."'</span></a>
	</td><td>
<select style="width: 200px;" name="____GROUPPERMS3____">'

if [ ! -z "$GROUPPERMS3" ]
then
	PERMSLANG=$"No Access"
	[ $GROUPPERMS3 = 5 ] && PERMSLANG=$"Read only"
	[ $GROUPPERMS3 = 7 ] && PERMSLANG=$"Full Access"
	echo '<option value="'$GROUPPERMS3'">'$PERMSLANG'</option><option class="select-dash" disabled="disabled">----------</option>'
fi

echo '<option value="5">'$"Read only"'</option>
<option value="7">'$"Full Access"'</option>
</select>
<td style="vertical-align:middle"><a class="info" target="_blank" href="http://www.linuxschools.com/karoshi/documentation/wiki/index.php?title=Network_Shares"><img class="images" alt="" src="/images/help/info.png"><span>'$"Choose the permissions that you want to set for this group for the share."'</span></a></td><td>
<select style="width: 200px;" name="____MAPDRIVE3____">'


if [ ! -z "$MAPDRIVE3" ]
then
	MAPDRIVELANG=$"Do not map drive"
	[ $MAPDRIVE3 = 1 ] && MAPDRIVELANG=$"Map drive"
	echo '<option value="'$MAPDRIVE3'">'$MAPDRIVELANG'</option><option class="select-dash" disabled="disabled">----------</option>'
fi

echo '<option value="1">'$"Map drive"'</option>
<option value="0">'$"Do not map drive"'</option>
</select>
</td></tr>

<tr><td style="vertical-align:middle">'$"Group"'</td><td style="vertical-align:middle">'
	if [ ! -z "$GROUP4" ]
	then
		/opt/karoshi/web_controls/group_dropdown_list | sed 's/_/____/g' | sed 's/____GROUP____/____GROUP4____/g' | sed 's/<option><\/option>/<option value="'$GROUP4'">'$GROUP4'<\/option><option class="select-dash" disabled="disabled">----------<\/option>/g'
	else
		/opt/karoshi/web_controls/group_dropdown_list | sed 's/_/____/g' | sed 's/____GROUP____/____GROUP4____/g'
	fi

	echo '</td><td style="vertical-align:middle">
	<a class="info" target="_blank" href="http://www.linuxschools.com/karoshi/documentation/wiki/index.php?title=Network_Shares"><img class="images" alt="" src="/images/help/info.png"><span>'$"Enter in the name of the group that you want to allow access to the folder."'</span></a>
	</td><td>
<select style="width: 200px;" name="____GROUPPERMS4____">'

if [ ! -z "$GROUPPERMS4" ]
then
	PERMSLANG=$"No Access"
	[ $GROUPPERMS4 = 5 ] && PERMSLANG=$"Read only"
	[ $GROUPPERMS4 = 7 ] && PERMSLANG=$"Full Access"
	echo '<option value="'$GROUPPERMS4'">'$PERMSLANG'</option><option class="select-dash" disabled="disabled">----------</option>'
fi

echo '<option value="5">'$"Read only"'</option>
<option value="7">'$"Full Access"'</option>
</select>
<td style="vertical-align:middle"><a class="info" target="_blank" href="http://www.linuxschools.com/karoshi/documentation/wiki/index.php?title=Network_Shares"><img class="images" alt="" src="/images/help/info.png"><span>'$"Choose the permissions that you want to set for this group for the share."'</span></a></td>
<td>
<select style="width: 200px;" name="____MAPDRIVE4____">'

if [ ! -z "$MAPDRIVE4" ]
then
	MAPDRIVELANG=$"Do not map drive"
	[ $MAPDRIVE4 = 1 ] && MAPDRIVELANG=$"Map drive"
	echo '<option value="'$MAPDRIVE4'">'$MAPDRIVELANG'</option><option class="select-dash" disabled="disabled">----------</option>'
fi

echo '<option value="1">'$"Map drive"'</option>
<option value="0">'$"Do not map drive"'</option>
</select>
</td></tr>
<tr><td style="vertical-align:middle">'$"All Users"'</td><td style="vertical-align:middle">
	</td><td style="vertical-align:middle">
	</td><td>
<select style="width: 200px;" name="____ALLPERMS____">'

if [ ! -z "$ALLGROUPS" ]
then
	PERMSLANG=$"No Access"
	[ $ALLPERMS = 5 ] && PERMSLANG=$"Read only"
	[ $ALLPERMS = 7 ] && PERMSLANG=$"Full Access"
	echo '<option value="'$ALLPERMS'">'$PERMSLANG'</option><option class="select-dash" disabled="disabled">----------</option>'
fi

echo '<option value="0">'$"No Access"'</option>
<option value="5">'$"Read only"'</option>
<option value="7">'$"Full Access"'</option>
</select>
</td><td style="vertical-align:middle"><a class="info" target="_blank" href="http://www.linuxschools.com/karoshi/documentation/wiki/index.php?title=Network_Shares"><img class="images" alt="" src="/images/help/info.png"><span>'$"Choose the permissions that you want to set for this group for the share."'</span></a></td>
<td>
<select style="width: 200px;" name="____MAPDRIVEALL____">'

if [ ! -z "$MAPDRIVEALL" ]
then
	MAPDRIVELANG=$"Do not map drive"
	[ $MAPDRIVEALL = 1 ] && MAPDRIVELANG=$"Map drive"
	echo '<option value="'$MAPDRIVEALL'">'$MAPDRIVELANG'</option><option class="select-dash" disabled="disabled">----------</option>'
fi

echo '<option value="0">'$"Do not map drive"'</option>
<option value="1">'$"Map drive"'</option>
</select>
</td>
</tr>'

echo '</tbody></table><br><br>'
	if [ "$ACTION" = add ]
	then
		#Show list of servers
		/opt/karoshi/web_controls/show_servers $MOBILE fileservers $"Add share" none none ____
	else
		#Just add submit button for the server.
		echo '<input name="____SERVERNAME____'$SERVERNAME'____SERVERTYPE____'$SERVERTYPE'____SERVERMASTER____'$SERVERMASTER'____ACTION____reallyedit____" type="submit" class="button" value="'$"Submit"'"> <input name="____SERVERNAME____'$SERVERNAME'____SERVERTYPE____'$SERVERTYPE'____SERVERMASTER____'$SERVERMASTER'____ACTION____view____" type="submit" class="button" value="'$"Cancel"'">'
	fi
	echo '</form>'
fi

if [ "$ACTION" = reallydelete ]
then
	echo `date`: samba_shares - deleting $FOLDERNAME from $SERVERNAME by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	source /opt/karoshi/server_network/network_shares/"$SERVERNAME"/"$SHARENAME"

	#Delete info file
	[ -f /opt/karoshi/server_network/network_shares/"$SERVERNAME"/"$SHARENAME" ] && rm -f /opt/karoshi/server_network/network_shares/"$SERVERNAME"/"$SHARENAME"

	if [ $SERVERNAME = `hostname-fqdn` ]
	then
		#Delete out additional samba configuration file.
		[ -f /etc/samba/extra_network_shares/"$SERVERNAME"/"$SHARENAME".conf ] && rm -f /etc/samba/extra_network_shares/"$SERVERNAME"/"$SHARENAME".conf

		#Delete include line in smb.conf
		sed -i "/etc\/samba\/extra_network_shares\/$SERVERNAME\/$SHARENAME.conf/d" /etc/samba/smb.conf
	
		#Restart samba
		source /opt/karoshi/serversetup/variables/distro
		/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/samba_stop 1>/dev/null 2>/dev/null
		sleep 1
		/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/samba_start 1>/dev/null 2>/dev/null
	else
		ssh -o PasswordAuthentication=no -o ConnectTimeout=3 $SERVERNAME '
		#Delete out additional samba configuration file.
		[ -f /etc/samba/extra_network_shares/"'$SERVERNAME'"/"'$SHARENAME'".conf ] && rm -f /etc/samba/extra_network_shares/"'$SERVERNAME'"/"'$SHARENAME'".conf

		#Delete include line in smb.conf
		sed -i "/etc\/samba\/extra_network_shares\/'$SERVERNAME'\/'$SHARENAME'.conf/d" /etc/samba/smb.conf
	
		#Restart samba
		source /opt/karoshi/serversetup/variables/distro
		/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/samba_stop 1>/dev/null 2>/dev/null
		sleep 1
		/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/samba_start 1>/dev/null 2>/dev/null
		'
	fi

	#Regenerate pam mount to map drives
	/opt/karoshi/serversetup/pdc/"useful scripts"/generate_logon_scripts

	#Show shares
	ACTION=view
fi

if [ "$ACTION" = delete ]
then
	source /opt/karoshi/server_network/network_shares/"$SERVERNAME"/"$FOLDERNAME"
	echo '<form action="/cgi-bin/admin/samba_shares.cgi" method="post">
	<table class="standard" style="text-align: left;" ><tbody>
	<tr><td style="width: '$WIDTH1'px;">'$"Server"'</td><td>'$SERVERNAME'</td></tr>
	<tr><td style="width: '$WIDTH1'px;">'$"Network Share"'</td><td>'$SHARENAME'</td></tr>
	<tr><td style="width: '$WIDTH1'px;">'$"Path"'</td><td>'$SHAREPATH'</td></tr>
	</tbody></table><br><br>'$"This will delete the share definition but will not delete the folder."'<br><br>'$"Are you sure that you want to delete this share?"'<br><br><input name="____ACTION____reallydelete____" value="'$"Delete Share"'" class="button" type="submit"> <input name="____ACTION____reallydelete____" value="'$"Cancel"'" class="button" type="submit">
	<input type="hidden" name="____SERVERNAME____" value="'$SERVERNAME'____">
	<input type="hidden" name="____SERVERTYPE____" value="'$SERVERTYPE'____">
	<input type="hidden" name="____SERVERMASTER____" value="'$SERVERMASTER'____">
	<input type="hidden" name="____SHARENAME____" value="'$SHARENAME'____">
	</form>
	'
fi

if [ "$ACTION" = view ]
then
	echo '<form action="/cgi-bin/admin/samba_shares.cgi" method="post"><table id="myTable" class="tablesorter" style="text-align: left;" ><thead>
<tr><th style="width: '$WIDTH1'px;">'$"Server"'</th><th style="width: '$WIDTH1'px;"><b>'$"Network Share"'</b></th><th style="width: '$WIDTH2'px;"><b>'$"Server Path"'</b></th><th style="width: '$WIDTH3'px;"><b>'$"Groups"'</b></th><th style="width: '$WIDTH4'px;"><b>'$"Permissions"'</b></th><th style="width: '$WIDTH5'px;"><b>'$"Map Drive"'</b></th><th style="vertical-align:top; width: '$WIDTH5'px;"><b>'$"Drive Letter"'</b></th><th></th><th></th></tr></thead><tbody>
'
	for SERVERS in /opt/karoshi/server_network/network_shares/*
	do
		SERVER=`basename "$SERVERS"`
		if [ `ls -1 /opt/karoshi/server_network/network_shares/"$SERVER" | wc -l` -gt 0 ]
		then
			for NETSHARES in /opt/karoshi/server_network/network_shares/"$SERVER"/*
			do
				NETSHARE=`basename "$NETSHARES"`
				DRIVELETTER=""
				source /opt/karoshi/server_network/network_shares/"$SERVER"/"$NETSHARE"
				[ -z "$DRIVELETTER" ] && DRIVELETTER=$"Auto"
				#Translate the permissions
				GROUPPERMS=`echo "$GROUPPERMS" | sed 's/,/<br>/g' | sed 's/7/'$"Full Access"'/g;' | sed 's/5/'$"Read Only"'/g;'`
				#Translate map drives
				MAP_DRIVE=`echo "$MAP_DRIVE" | sed 's/,/<br>/g' | sed 's/1/'$"Yes"'/g' | sed 's/0/'$"No"'/g'`
				echo '<tr><td style="vertical-align:top">'$SERVER'</td><td style="vertical-align:top">'$NETSHARE'</td><td style="vertical-align:top">'$SHAREPATH'</td><td style="vertical-align:top">'`echo "$GROUPLIST" | sed "s/,/<br>/g"`'</td><td style="vertical-align:top">'$GROUPPERMS'</td><td style="vertical-align:top">'$MAP_DRIVE'</td><td style="vertical-align:top">'$DRIVELETTER'</td>'
				if [ "$NETSHARE" != sysvol ] && [ "$NETSHARE" != netlogon ] && [ "$NETSHARE" != applications ]
				then
					echo '<td style="vertical-align:top">
					<button class="info infoleft" name="____Edit____" value="____ACTION____edit____SHARENAME____'$NETSHARE'____SERVERTYPE____'$SERVERTYPE'____SERVERNAME____'$SERVER'____">
					<img src="'$ICON1'" alt="'$"Edit"'">
					<span>'$"Edit"'<br>'$NETSHARE'</span>
					</button>
					</td><td style="vertical-align:top">
					<button class="info infoleft" name="____Delete____" value="____ACTION____delete____SHARENAME____'$NETSHARE'____SERVERTYPE____'$SERVERTYPE'____SERVERNAME____'$SERVER'____">
					<img src="'$ICON2'" alt="'$"Edit"'">
					<span>'$"Delete"'<br>'$NETSHARE'</span>
					</button>
					</td>'
				else
					echo '<td></td><td></td>'
				fi
					echo '</tr>'
			done
		fi
	done
	echo '</tbody></table></form>'
fi

exit

