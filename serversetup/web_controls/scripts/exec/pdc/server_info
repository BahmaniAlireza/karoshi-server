#!/bin/bash
#Copyright (C) 2007 Paul Sharrad

#This file is part of Karoshi Server.
#
#Karoshi Server is free software: you can redistribute it and/or modify
#it under the terms of the GNU Affero General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#Karoshi Server is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU Affero General Public License for more details.
#
#You should have received a copy of the GNU Affero General Public License
#along with Karoshi Server.  If not, see <http://www.gnu.org/licenses/>.

#
#The Karoshi Team can be contacted at: 
#mpsharrad@karoshi.org.uk
#jsharrad@karoshi.org.uk

#
#Website: http://www.karoshi.org.uk
LOG_DATE=`date +%F`
[ $LOG_DATE'null' = null ] && exit

########################
#Check md5checksum
########################
if ! test -f /opt/karoshi/web_controls/checksums/admin_checksums/server_info_cgi
then
echo `date`: server_info - No MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
source /opt/karoshi/web_controls/checksums/admin_checksums/server_info_cgi
MD5SUM=`md5sum /var/www/cgi-bin_karoshi/admin/server_info.cgi | cut -d' ' -f1`
[ $MD5SUM'null' = null ] && MD5SUM=not_set1
if [ $MD5SUM'check' != $server_info_cgi'check' ]
then
echo `date`: server_info - Incorrect MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
########################
#Get variables
########################
numArgs=$#
if [ $numArgs != 1 ]
then
echo `date`: server_info - incorrect number of arguments >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
REMOTE_USER=`echo $* | cut -s -d: -f1`
REMOTE_ADDR=`echo $* | cut -s -d: -f2`
REMOTE_MD5=`echo $* | cut -s -d: -f3`
INFO=`echo $* | cut -s -d: -f4`
SERVER=`echo $* | cut -s -d: -f5`
SERVERTYPE=`echo $* | cut -s -d: -f6`
SERVERMASTER=`echo $* | cut -s -d: -f7`
MOBILE=`echo $* | cut -s -d: -f8`
########################
#Check data
########################
if [ $REMOTE_MD5'check' != $MD5SUM'check' ]
then
echo `date`: server_info - Not called by server_info.cgi >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
if [ $REMOTE_USER'null' = null ]
then
echo `date`: server_info - Blank remote user >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
if [ $REMOTE_ADDR'null' = null ]
then
echo `date`: server_info - Blank remote tcpip address >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi

if [ `grep -c ^$REMOTE_USER: /opt/karoshi/web_controls/web_access_admin` != 1 ]
then
echo `date`: server_info - access denied to $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi

if [ $SERVER'null' = null ]
then
echo `date`: server_info - Blank server by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi

if [ $INFO'null' = null ]
then
echo `date`: server_info - Blank info by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi

if [ $SERVERTYPE'null' = null ]
then
echo `date`: server_info - Blank servertype by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi

if [ $SERVERTYPE != network ] && [ $SERVERTYPE != federated ] && [ $SERVERTYPE != federatedslave ]
then
echo `date`: server_info - Incorrect servertype by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi

if [ $SERVERTYPE = federatedslave ]
then
if [ $SERVERMASTER'null' = null ]
then
echo `date`: server_info - Blank servermaster by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
fi

############################
#Language
############################
LANGCHOICE=englishuk
STYLESHEET=defaultstyle.css
[ -f /opt/karoshi/web_controls/user_prefs/$REMOTE_USER ] && source /opt/karoshi/web_controls/user_prefs/$REMOTE_USER
[ -f /opt/karoshi/web_controls/language/$LANGCHOICE/system/server_info ] || LANGCHOICE=englishuk
source /opt/karoshi/web_controls/language/$LANGCHOICE/system/server_info
[ -f /opt/karoshi/web_controls/language/$LANGCHOICE/all ] || LANGCHOICE=englishuk
source /opt/karoshi/web_controls/language/$LANGCHOICE/all

KAROSHI_SERVER=$SERVER
TABLECLASS=standard
[ $MOBILE = yes ] && TABLECLASS=mobilestandard

echo `date`: server_info - checking $INFO "for" $KAROSHI_SERVER by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
if [ $KAROSHI_SERVER = `hostname-fqdn` ]
then
if [ $INFO = harddrive ]
then
#Show free space
echo '<b>'$FREESPACEMSG'</b><br>'

echo "<table class=\"$TABLECLASS\" style=\"text-align: left;\" border=\"0\" cellpadding=\"2\" cellspacing=\"2\"><tbody>"

df -h -l | sed "s/ * / /g" | sed "s/ /<\/td><td>/g" | sed "s/$/<\/td><\/tr>/g" | sed "s/^/<tr><td style=\"width: 180px;\">/"
echo "</tbody></table><br>"

#Get list of disks
DISKLIST=`fdisk -l 2>/dev/null | grep ^"Disk /dev/s" | cut -d: -f1 | sed "s/^Disk //g"`
for DISK in $DISKLIST
do
echo "<img src=\"/images/submenus/system/disk_drive.png\" alt=\"Disk Drive\"> <b>"$DISK"</b><br>"

#Get Disk information
UUID=
SMARTINFO=`smartctl -i $DISK | tr -cd "A-Za-z0-9:=,/\n "`
MODELFAMILY=`echo -e "$SMARTINFO" | grep ^Model | cut -d: -f2 | sed "s/^ * //g"`
DEVICEMODEL=`echo -e "$SMARTINFO" | grep ^Device | cut -d: -f2 | sed "s/^ * //g"`
SERIALNO=`echo -e "$SMARTINFO" | grep ^Serial | cut -d: -f2 | sed "s/^ * //g"`
FIRMWARE=`echo -e "$SMARTINFO" | grep ^Firmware | cut -d: -f2 | sed "s/^ * //g"`
CAPACITYBYTES=`echo -e "$SMARTINFO" | grep ^User | cut -d: -f2 | sed "s/^ * //g" | tr -cd "0-9"`
SMARTENABLED=`echo -e "$SMARTINFO" | grep ^SMART | cut -d: -f2 | sed "s/^ * //g"`
SMARTSTATUS=`smartctl -H $DISK | sed 1,4d`

#Convert capacity to gigabytes
CAPACITY=`echo "scale=0; $CAPACITYBYTES/1024/1024/1024" | bc`
DRIVESCALE=GB
if [ $CAPACITY -gt 1000 ]
then
#Covert capacity to terabytes
CAPACITY=`echo "scale=0; $CAPACITY/1024" | bc`
DRIVESCALE=TB
fi

echo "<table class=\"$TABLECLASS\" style=\"text-align: left;\" border=\"0\" cellpadding=\"2\" cellspacing=\"2\"><tbody>
<tr><td style=\"width: 180px;\">$MODELFAMILIYMSG</td><td>$MODELFAMILY</td></tr>
<tr><td style=\"width: 180px;\">$DEVICEMODELMSG</td><td>$DEVICEMODEL</td></tr>
<tr><td style=\"width: 180px;\">$SERIALNOMSG</td><td>$SERIALNO</td></tr>
<tr><td style=\"width: 180px;\">$FIRMWAREMSG</td><td>$FIRMWARE</td></tr>
<tr><td style=\"width: 180px;\">$CAPACITYMSG</td><td>$CAPACITY $DRIVESCALE</td></tr>
<tr><td style=\"width: 180px;\">$SMARTENABLEDMSG</td><td>$SMARTENABLED</td></tr>
<tr><td style=\"width: 180px;\">$SMARTSTATUSMSG</td><td>$SMARTSTATUS</td></tr>
</tbody></table><br>"

done

#Show software raid information
if [ `grep -c ^"#Software raid" /etc/fstab` -gt 0 ]
then
RAIDMOUNTPOINT=`mdadm --detail --scan 2>/dev/null | cut -d" " -f2`
echo "<img src=\"/images/submenus/system/raid.png\" alt=\"Software Raid\"> <b>$SOFTWARERAIDMSG</b><br>"

MDADMDATA=`mdadm --detail $RAIDMOUNTPOINT`
REBUILDSTATUS=`echo -e "$MDADMDATA" | grep "Rebuild Status :" | cut -d: -f2 | sed "s/^ //g"`
RAIDLEVEL=`echo -e "$MDADMDATA" | grep "Raid Level :" | cut -d: -f2 | sed "s/^ //g"`
ARRAYSIZE=`echo -e "$MDADMDATA" | grep "Array Size :" | cut -d: -f2 | sed "s/^ //g"`
USEDSIZE=`echo -e "$MDADMDATA" | grep "Used Dev Size :" | cut -d: -f2 | sed "s/^ //g"`
RAIDDEVICES=`echo -e "$MDADMDATA" | grep "Raid Devices :" | cut -d: -f2 | sed "s/^ //g"`
TOTALDEVICES=`echo -e "$MDADMDATA" | grep "Total Devices :" | cut -d: -f2 | sed "s/^ //g"`
RAIDSTATUS=`echo -e "$MDADMDATA" | grep "State :" | cut -d: -f2 | sed "s/^ //g"`
ACTIVEDEVICES=`echo -e "$MDADMDATA" | grep "Active Devices :" | cut -d: -f2 | sed "s/^ //g"`
WORKINGDEVICES=`echo -e "$MDADMDATA" | grep "Working Devices :" | cut -d: -f2 | sed "s/^ //g"`
FAILEDDEVICES=`echo -e "$MDADMDATA" | grep "Failed Devices :" | cut -d: -f2 | sed "s/^ //g"`
SPAREDEVICES=`echo -e "$MDADMDATA" | grep "Spare Devices :" | cut -d: -f2 | sed "s/^ //g"`
LAYOUT=`echo -e "$MDADMDATA" | grep "Layout :" | cut -d: -f2 | sed "s/^ //g"`
CHUNKSIZE=`echo -e "$MDADMDATA" | grep "Chunk Size :" | cut -d: -f2 | sed "s/^ //g"`
UUID=`echo -e "$MDADMDATA" | grep "UUID :" | cut -d: -f2- | sed "s/^ //g"`

echo "<table class=\"$TABLECLASS\" style=\"text-align: left;\" border=\"0\" cellpadding=\"2\" cellspacing=\"2\"><tbody>
<tr><td style=\"width: 180px;\">$RAIDLEVELMSG</td><td>$RAIDLEVEL</td></tr>
<tr><td style=\"width: 180px;\">$RAIDSIZEMSG</td><td>$ARRAYSIZE</td></tr>
<tr><td style=\"width: 180px;\">$USEDSIZEMSG</td><td>$USEDSIZE</td></tr>
<tr><td style=\"width: 180px;\">$RAIDSTATUSMSG</td><td>$RAIDSTATUS</td></tr>"
[ ! -z "$REBUILDSTATUS" ] && echo "<tr><td style=\"width: 180px;\">Rebuild Status</td><td>$REBUILDSTATUS</td></tr>"
echo "<tr><td style=\"width: 180px;\">$RAIDDRIVESMSG</td><td>$RAIDDEVICES</td></tr>
<tr><td style=\"width: 180px;\">$USEDDRIVESMSG</td><td>$TOTALDEVICES</td></tr>
<tr><td style=\"width: 180px;\">$ACTIVEDEVICESMSG</td><td>$ACTIVEDEVICES</td></tr>
<tr><td style=\"width: 180px;\">$WORKINGDEVICESMSG</td><td>$WORKINGDEVICES</td></tr>
<tr><td style=\"width: 180px;\">$FAILEDDEVICESMSG</td><td>$FAILEDDEVICES</td></tr>
<tr><td style=\"width: 180px;\">$SPAREDEVICESMSG</td><td>$SPAREDEVICES</td></tr>
<tr><td style=\"width: 180px;\">$LAYOUTMSG</td><td>$LAYOUT</td></tr>
<tr><td style=\"width: 180px;\">$CHUNKSIZEMSG</td><td>$CHUNKSIZE</td></tr>
<tr><td style=\"width: 180px;\">UUID</td><td>$UUID</td></tr>
</tbody></table>"
fi

fi
#Show cpu usage
if [ $INFO = cpu ]
then
echo \<b\>$CPUUSAGEMSG\</b\>\<br\>
echo \<table class=\"$TABLECLASS\"\>\<tbody\>
#                        Replace spaces with single space  Add column start and ends           End row                      start row
top -b -n 1 | sed 1,2d | sed "s/^ * //g" | sed "s/ * / /g" | sed "s/ * /\<\/td\>\<td\>/g" | sed "s/$ /\<\/td\>\<\/tr\>/g" | sed "s/^/\<tr\>\<td\>/g"
echo \</tbody\>\</table\>
echo \<hr style=\"width: 100%\; height: 2px\;\"\>
fi
#Show running kernel
if [ $INFO = kernel ]
then
echo \<b\>$KERNELMSG\</b\>\<br\>
echo '<pre style="font-size: 10pt; font-family:Arial, Times, Georgia, serif">'
uname -a
echo '</pre>'
echo \<hr style=\"width: 100%\; height: 2px\;\"\>
fi
#Show samba status
if [ $INFO = samba ]
then
echo \<b\>$SAMBAMSG\</b\>\<br\>
echo '<pre style="font-size: 10pt; font-family:Arial, Times, Georgia, serif">'
smbstatus
echo '</pre>'
echo \<hr style=\"width: 100%\; height: 2px\;\"\>
fi
fi

if [ $KAROSHI_SERVER != `hostname-fqdn` ] && [ $SERVERTYPE = network ] || [ $SERVERTYPE = federated ]
then
ssh -o PasswordAuthentication=no -o ConnectTimeout=3 $KAROSHI_SERVER '
if [ '$INFO' = harddrive ]
then
#Show free space
echo \<b\>'$FREESPACEMSG'\</b\>\<br\>

echo "<table class=\"'$TABLECLASS'\" style=\"text-align: left\;\" border=\"0\" cellpadding=\"2\" cellspacing=\"2\"><tbody>"

df -h -l | sed "s/ * / /g" | sed "s/ /<\/td><td>/g" | sed "s/$/<\/td><\/tr>/g" | sed "s/^/<tr><td style=\"width: 180px;\">/"
echo "</tbody></table><br>"

#Show smart information

echo "<pre style=\"font-size: 10pt; font-family:Arial, Times, Georgia, serif\">"
#Get list of disks
DISKLIST=`fdisk -l 2>/dev/null | grep ^"Disk /dev/s" | cut -d: -f1 | sed "s/^Disk //g"`
for DISK in $DISKLIST
do
echo "<img src=\"/images/submenus/system/disk_drive.png\" alt=\"Disk Drive\"> <b>"$DISK"</b><br>"
#Get Disk information
UUID=
SMARTINFO=`smartctl -i $DISK | tr -cd "A-Za-z0-9:=,/\n "`
MODELFAMILY=`echo -e "$SMARTINFO" | grep ^Model | cut -d: -f2 | sed "s/^ * //g"`
DEVICEMODEL=`echo -e "$SMARTINFO" | grep ^Device | cut -d: -f2 | sed "s/^ * //g"`
SERIALNO=`echo -e "$SMARTINFO" | grep ^Serial | cut -d: -f2 | sed "s/^ * //g"`
FIRMWARE=`echo -e "$SMARTINFO" | grep ^Firmware | cut -d: -f2 | sed "s/^ * //g"`
CAPACITYBYTES=`echo -e "$SMARTINFO" | grep ^User | cut -d: -f2 | sed "s/^ * //g" | tr -cd "0-9"`
SMARTENABLED=`echo -e "$SMARTINFO" | grep ^SMART | cut -d: -f2 | sed "s/^ * //g"`
SMARTSTATUS=`smartctl -H $DISK | sed 1,4d`

#Convert capacity to gigabytes
CAPACITY=`echo "scale=0; $CAPACITYBYTES/1024/1024/1024" | bc`
DRIVESCALE=GB
if [ $CAPACITY -gt 1000 ]
then
#Covert capacity to terabytes
CAPACITY=`echo "scale=0; $CAPACITY/1024" | bc`
DRIVESCALE=TB
fi

echo "<table class=\"'$TABLECLASS'\" style=\"text-align: left;\" border=\"0\" cellpadding=\"2\" cellspacing=\"2\"><tbody>
<tr><td style=\"width: 180px;\">'$MODELFAMILIYMSG'</td><td>$MODELFAMILY</td></tr>
<tr><td style=\"width: 180px;\">'$DEVICEMODELMSG'</td><td>$DEVICEMODEL</td></tr>
<tr><td style=\"width: 180px;\">'$SERIALNOMSG'</td><td>$SERIALNO</td></tr>
<tr><td style=\"width: 180px;\">'$FIRMWAREMSG'</td><td>$FIRMWARE</td></tr>
<tr><td style=\"width: 180px;\">'$CAPACITYMSG'</td><td>$CAPACITY $DRIVESCALE</td></tr>
<tr><td style=\"width: 180px;\">'$SMARTENABLEDMSG'</td><td>$SMARTENABLED</td></tr>
<tr><td style=\"width: 180px;\">'$SMARTSTATUSMSG'</td><td>$SMARTSTATUS</td></tr>
</tbody></table><br>"

done

#Show software raid information
if [ `grep -c ^"#Software raid" /etc/fstab` -gt 0 ]
then
RAIDMOUNTPOINT=`mdadm --detail --scan 2>/dev/null | cut -d" " -f2`
echo "<img src=\"/images/submenus/system/raid.png\" alt=\"Software Raid\"> <b>'$SOFTWARERAIDMSG'</b><br>"

MDADMDATA=`mdadm --detail $RAIDMOUNTPOINT`
REBUILDSTATUS=`echo -e "$MDADMDATA" | grep "Rebuild Status :" | cut -d: -f2 | sed "s/^ //g"`
RAIDLEVEL=`echo -e "$MDADMDATA" | grep "Raid Level :" | cut -d: -f2 | sed "s/^ //g"`
ARRAYSIZE=`echo -e "$MDADMDATA" | grep "Array Size :" | cut -d: -f2 | sed "s/^ //g"`
USEDSIZE=`echo -e "$MDADMDATA" | grep "Used Dev Size :" | cut -d: -f2 | sed "s/^ //g"`
RAIDDEVICES=`echo -e "$MDADMDATA" | grep "Raid Devices :" | cut -d: -f2 | sed "s/^ //g"`
TOTALDEVICES=`echo -e "$MDADMDATA" | grep "Total Devices :" | cut -d: -f2 | sed "s/^ //g"`
RAIDSTATUS=`echo -e "$MDADMDATA" | grep "State :" | cut -d: -f2 | sed "s/^ //g"`
ACTIVEDEVICES=`echo -e "$MDADMDATA" | grep "Active Devices :" | cut -d: -f2 | sed "s/^ //g"`
WORKINGDEVICES=`echo -e "$MDADMDATA" | grep "Working Devices :" | cut -d: -f2 | sed "s/^ //g"`
FAILEDDEVICES=`echo -e "$MDADMDATA" | grep "Failed Devices :" | cut -d: -f2 | sed "s/^ //g"`
SPAREDEVICES=`echo -e "$MDADMDATA" | grep "Spare Devices :" | cut -d: -f2 | sed "s/^ //g"`
LAYOUT=`echo -e "$MDADMDATA" | grep "Layout :" | cut -d: -f2 | sed "s/^ //g"`
CHUNKSIZE=`echo -e "$MDADMDATA" | grep "Chunk Size :" | cut -d: -f2 | sed "s/^ //g"`
UUID=`echo -e "$MDADMDATA" | grep "UUID :" | cut -d: -f2- | sed "s/^ //g"`

echo "<table class=\"'$TABLECLASS'\" style=\"text-align: left;\" border=\"0\" cellpadding=\"2\" cellspacing=\"2\"><tbody>
<tr><td style=\"width: 180px;\">'$RAIDLEVELMSG'</td><td>$RAIDLEVEL</td></tr>
<tr><td style=\"width: 180px;\">'$RAIDSIZEMSG'</td><td>$ARRAYSIZE</td></tr>
<tr><td style=\"width: 180px;\">'$USEDSIZEMSG'</td><td>$USEDSIZE</td></tr>
<tr><td style=\"width: 180px;\">'$RAIDSTATUSMSG'</td><td>$RAIDSTATUS</td></tr>"
[ ! -z "$REBUILDSTATUS" ] && echo "<tr><td style=\"width: 180px;\">Rebuild Status</td><td>$REBUILDSTATUS</td></tr>"
echo "<tr><td style=\"width: 180px;\">'$RAIDDRIVESMSG'</td><td>$RAIDDEVICES</td></tr>
<tr><td style=\"width: 180px;\">'$USEDDRIVESMSG'</td><td>$TOTALDEVICES</td></tr>
<tr><td style=\"width: 180px;\">'$ACTIVEDEVICESMSG'</td><td>$ACTIVEDEVICES</td></tr>
<tr><td style=\"width: 180px;\">'$WORKINGDEVICESMSG'</td><td>$WORKINGDEVICES</td></tr>
<tr><td style=\"width: 180px;\">'$FAILEDDEVICESMSG'</td><td>$FAILEDDEVICES</td></tr>
<tr><td style=\"width: 180px;\">'$SPAREDEVICESMSG'</td><td>$SPAREDEVICES</td></tr>
<tr><td style=\"width: 180px;\">'$LAYOUTMSG'</td><td>$LAYOUT</td></tr>
<tr><td style=\"width: 180px;\">'$CHUNKSIZEMSG'</td><td>$CHUNKSIZE</td></tr>
<tr><td style=\"width: 180px;\">UUID</td><td>$UUID</td></tr>
</tbody></table>"
fi

fi
#Show cpu usage
if [ '$INFO' = cpu ]
then
echo \<b\>'$CPUUSAGEMSG'\</b\>\<br\>
echo \<table class=\"'$TABLECLASS'\"\>\<tbody\>
#                        Replace spaces with single space  Add column start and ends           End row                      start row
top -b -n 1 | sed 1,2d | sed "s/^ * //g" | sed "s/ * / /g" | sed "s/ * /\<\/td\>\<td\>/g" | sed "s/$ /\<\/td\>\<\/tr\>/g" | sed "s/^/\<tr\>\<td\>/g"
echo \</tbody\>\</table\>
echo \<hr style=\"width: 100%\; height: 2px\;\"\>
fi
#Show running kernel
if [ '$INFO' = kernel ]
then
echo \<b\>'$KERNELMSG'\</b\>\<br\>
echo "<pre style=\"font-size: 10pt; font-family:Arial, Times, Georgia, serif\">"
uname -a
echo "</pre>"
echo \<hr style=\"width: 100%\; height: 2px\;\"\>
fi
#Show samba status
if [ '$INFO' = samba ]
then
echo \<b\>'$SAMBAMSG'\</b\>\<br\>
echo "<pre style=\"font-size: 10pt; font-family:Arial, Times, Georgia, serif\">"
smbstatus
echo "</pre>"
echo \<hr style=\"width: 100%\; height: 2px\;\"\>
fi
'

fi

if [ $SERVERTYPE = federatedslave ]
then
ssh -o PasswordAuthentication=no -o ConnectTimeout=3 $SERVERMASTER '
ssh -o PasswordAuthentication=no -o ConnectTimeout=3 '$KAROSHI_SERVER' '\''

if [ '$INFO' = harddrive ]
then
#Show free space
echo \<img src=\"/images/submenus/system/computer.png\" alt=\"Server\"\> \<b\>'$FREESPACEMSG'\</b\>\<br\>

echo "<table class=\"'$TABLECLASS'\" style=\"text-align: left\;\" border=\"0\" cellpadding=\"2\" cellspacing=\"2\"><tbody>"

df -h -l | sed "s/ * / /g" | sed "s/ /<\/td><td>/g" | sed "s/$/<\/td><\/tr>/g" | sed "s/^/<tr><td style=\"width: 180px;\">/"
echo "</tbody></table><br>"



#Show smart information

echo "<pre style=\"font-size: 10pt; font-family:Arial, Times, Georgia, serif\">"
#Get list of disks
DISKLIST=`fdisk -l 2>/dev/null | grep ^"Disk /dev/s" | cut -d: -f1 | sed "s/^Disk //g"`
for DISK in $DISKLIST
do
echo "<img src=\"/images/submenus/system/disk_drive.png\" alt=\"Disk Drive\"> <b>"$DISK"</b><br>"
#Get Disk information
UUID=
SMARTINFO=`smartctl -i $DISK | tr -cd "A-Za-z0-9:=,/\n "`
MODELFAMILY=`echo -e "$SMARTINFO" | grep ^Model | cut -d: -f2 | sed "s/^ * //g"`
DEVICEMODEL=`echo -e "$SMARTINFO" | grep ^Device | cut -d: -f2 | sed "s/^ * //g"`
SERIALNO=`echo -e "$SMARTINFO" | grep ^Serial | cut -d: -f2 | sed "s/^ * //g"`
FIRMWARE=`echo -e "$SMARTINFO" | grep ^Firmware | cut -d: -f2 | sed "s/^ * //g"`
CAPACITYBYTES=`echo -e "$SMARTINFO" | grep ^User | cut -d: -f2 | sed "s/^ * //g" | tr -cd "0-9"`
SMARTENABLED=`echo -e "$SMARTINFO" | grep ^SMART | cut -d: -f2 | sed "s/^ * //g"`
SMARTSTATUS=`smartctl -H $DISK | sed 1,4d`

#Convert capacity to gigabytes
CAPACITY=`echo "scale=0; $CAPACITYBYTES/1024/1024/1024" | bc`
DRIVESCALE=GB
if [ $CAPACITY -gt 1000 ]
then
#Covert capacity to terabytes
CAPACITY=`echo "scale=0; $CAPACITY/1024" | bc`
DRIVESCALE=TB
fi

echo "<table class=\"'$TABLECLASS'\" style=\"text-align: left;\" border=\"0\" cellpadding=\"2\" cellspacing=\"2\"><tbody>
<tr><td style=\"width: 180px;\">'$MODELFAMILIYMSG'</td><td>$MODELFAMILY</td></tr>
<tr><td style=\"width: 180px;\">'$DEVICEMODELMSG'</td><td>$DEVICEMODEL</td></tr>
<tr><td style=\"width: 180px;\">'$SERIALNOMSG'</td><td>$SERIALNO</td></tr>
<tr><td style=\"width: 180px;\">'$FIRMWAREMSG'</td><td>$FIRMWARE</td></tr>
<tr><td style=\"width: 180px;\">'$CAPACITYMSG'</td><td>$CAPACITY $DRIVESCALE</td></tr>
<tr><td style=\"width: 180px;\">'$SMARTENABLEDMSG'</td><td>$SMARTENABLED</td></tr>
<tr><td style=\"width: 180px;\">'$SMARTSTATUSMSG'</td><td>$SMARTSTATUS</td></tr>
</tbody></table><br>"

done

#Show software raid information
if [ `grep -c ^"#Software raid" /etc/fstab` -gt 0 ]
then
RAIDMOUNTPOINT=`mdadm --detail --scan 2>/dev/null | cut -d" " -f2`
echo "<img src=\"/images/submenus/system/raid.png\" alt=\"Software Raid\"> <b>'$SOFTWARERAIDMSG'</b><br>"

MDADMDATA=`mdadm --detail $RAIDMOUNTPOINT`
RAIDLEVEL=`echo -e "$MDADMDATA" | grep "Raid Level :" | cut -d: -f2 | sed "s/^ //g"`
ARRAYSIZE=`echo -e "$MDADMDATA" | grep "Array Size :" | cut -d: -f2 | sed "s/^ //g"`
USEDSIZE=`echo -e "$MDADMDATA" | grep "Used Dev Size :" | cut -d: -f2 | sed "s/^ //g"`
RAIDDEVICES=`echo -e "$MDADMDATA" | grep "Raid Devices :" | cut -d: -f2 | sed "s/^ //g"`
TOTALDEVICES=`echo -e "$MDADMDATA" | grep "Total Devices :" | cut -d: -f2 | sed "s/^ //g"`
RAIDSTATUS=`echo -e "$MDADMDATA" | grep "State :" | cut -d: -f2 | sed "s/^ //g"`
ACTIVEDEVICES=`echo -e "$MDADMDATA" | grep "Active Devices :" | cut -d: -f2 | sed "s/^ //g"`
WORKINGDEVICES=`echo -e "$MDADMDATA" | grep "Working Devices :" | cut -d: -f2 | sed "s/^ //g"`
FAILEDDEVICES=`echo -e "$MDADMDATA" | grep "Failed Devices :" | cut -d: -f2 | sed "s/^ //g"`
SPAREDEVICES=`echo -e "$MDADMDATA" | grep "Spare Devices :" | cut -d: -f2 | sed "s/^ //g"`
LAYOUT=`echo -e "$MDADMDATA" | grep "Layout :" | cut -d: -f2 | sed "s/^ //g"`
CHUNKSIZE=`echo -e "$MDADMDATA" | grep "Chunk Size :" | cut -d: -f2 | sed "s/^ //g"`
UUID=`echo -e "$MDADMDATA" | grep "UUID :" | cut -d: -f2- | sed "s/^ //g"`

echo "<table class=\"'$TABLECLASS'\" style=\"text-align: left;\" border=\"0\" cellpadding=\"2\" cellspacing=\"2\"><tbody>
<tr><td style=\"width: 180px;\">'$RAIDLEVELMSG'</td><td>$RAIDLEVEL</td></tr>
<tr><td style=\"width: 180px;\">'$RAIDSIZEMSG'</td><td>$ARRAYSIZE</td></tr>
<tr><td style=\"width: 180px;\">'$USEDSIZEMSG'</td><td>$USEDSIZE</td></tr>
<tr><td style=\"width: 180px;\">'$RAIDSTATUSMSG'</td><td>$RAIDSTATUS</td></tr>
<tr><td style=\"width: 180px;\">'$RAIDDRIVESMSG'</td><td>$RAIDDEVICES</td></tr>
<tr><td style=\"width: 180px;\">'$USEDDRIVESMSG'</td><td>$TOTALDEVICES</td></tr>
<tr><td style=\"width: 180px;\">'$ACTIVEDEVICESMSG'</td><td>$ACTIVEDEVICES</td></tr>
<tr><td style=\"width: 180px;\">'$WORKINGDEVICESMSG'</td><td>$WORKINGDEVICES</td></tr>
<tr><td style=\"width: 180px;\">'$FAILEDDEVICESMSG'</td><td>$FAILEDDEVICES</td></tr>
<tr><td style=\"width: 180px;\">'$SPAREDEVICESMSG'</td><td>$SPAREDEVICES</td></tr>
<tr><td style=\"width: 180px;\">'$LAYOUTMSG'</td><td>$LAYOUT</td></tr>
<tr><td style=\"width: 180px;\">'$CHUNKSIZEMSG'</td><td>$CHUNKSIZE</td></tr>
<tr><td style=\"width: 180px;\">UUID</td><td>$UUID</td></tr>
</tbody></table>"
fi

fi
#Show cpu usage
if [ '$INFO' = cpu ]
then
echo \<b\>'$CPUUSAGEMSG'\</b\>\<br\>
echo \<table class=\"'$TABLECLASS'\"\>\<tbody\>
#                        Replace spaces with single space  Add column start and ends           End row                      start row
top -b -n 1 | sed 1,2d | sed "s/^ * //g" | sed "s/ * / /g" | sed "s/ * /\<\/td\>\<td\>/g" | sed "s/$ /\<\/td\>\<\/tr\>/g" | sed "s/^/\<tr\>\<td\>/g"
echo \</tbody\>\</table\>
echo \<hr style=\"width: 100%\; height: 2px\;\"\>
fi
#Show running kernel
if [ '$INFO' = kernel ]
then
echo \<b\>'$KERNELMSG'\</b\>\<br\>
echo "<pre style=\"font-size: 10pt; font-family:Arial, Times, Georgia, serif\">"
uname -a
echo "</pre>"
echo \<hr style=\"width: 100%\; height: 2px\;\"\>
fi
#Show samba status
if [ '$INFO' = samba ]
then
echo \<b\>'$SAMBAMSG'\</b\>\<br\>
echo "<pre style=\"font-size: 10pt; font-family:Arial, Times, Georgia, serif\">"
smbstatus
echo "</pre>"
echo \<hr style=\"width: 100%\; height: 2px\;\"\>
fi

'\''
'

fi

exit

