#!/bin/bash
#Copyright (C) 2011 Paul Sharrad

#This file is part of Karoshi Server.
#
#Karoshi Server is free software: you can redistribute it and/or modify
#it under the terms of the GNU Affero General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#Karoshi Server is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU Affero General Public License for more details.
#
#You should have received a copy of the GNU Affero General Public License
#along with Karoshi Server.  If not, see <http://www.gnu.org/licenses/>.

#
#The Karoshi Team can be contacted at: 
#mpsharrad@karoshi.org.uk
#jsharrad@karoshi.org.uk

#
#Website: http://www.karoshi.org.uk
LOG_DATE=$(date +%F)
[ -z "$LOG_DATE" ] && exit

########################
#Check md5checksum
########################
if ! test -f /opt/karoshi/web_controls/checksums/admin_checksums/services_view2_cgi
then
	echo "$(date): services_view2 - No MD5Checksum" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi
source /opt/karoshi/web_controls/checksums/admin_checksums/services_view2_cgi
MD5SUM=$(md5sum /var/www/cgi-bin_karoshi/admin/services_view2.cgi | cut -d' ' -f1)
[ -z "$MD5SUM" ] && MD5SUM=not_set
if [ "$MD5SUM"'check' != "$services_view2_cgi"'check' ]
then
	echo "$(date): services_view2 - Incorrect MD5Checksum" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi
########################
#Get variables
########################
numArgs=$#
if [ "$numArgs" != 0 ]
then
	echo "$(date): services_view2 - incorrect number of arguments" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi
read DATA
DATA=$(echo "$DATA" | tr -cd 'A-Za-z0-9\._:%\n-+-')
if [ -z "$DATA" ]
then
	echo "$(date): services_view2 - no data" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi
REMOTE_USER=$(echo "$DATA" | cut -d: -f1)
REMOTE_ADDR=$(echo "$DATA" | cut -d: -f2)
REMOTE_MD5=$(echo "$DATA" | cut -d: -f3)
SERVERNAME=$(echo "$DATA" | cut -s -d: -f4)
SERVERTYPE=$(echo "$DATA" | cut -s -d: -f5)
SERVERMASTER=$(echo "$DATA" | cut -s -d: -f6)
ACTION=$(echo "$DATA" | cut -s -d: -f7)
SERVICE=$(echo "$DATA" | cut -s -d: -f8)

if [[ $(echo "$SERVERNAME" | grep -c showallservers) -gt 0 ]]
then
	SERVERNAME2=allservers
else
	SERVERNAME2=$SERVERNAME
fi

SERVERNAME=${SERVERNAME//showallservers/}

########################
#Check data
########################
if [ "$REMOTE_MD5"'check' != "$MD5SUM"'check' ]
then
	echo "$(date): services_view2 - Not called by services_view2.cgi" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi
if [ -z "$REMOTE_USER" ]
then
	echo "$(date): services_view2 - Blank remote user" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi
if [ -z "$REMOTE_ADDR" ]
then
	echo "$(date): services_view2 - Blank remote tcpip address" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi
if [ -z "$SERVERNAME" ]
then
	echo "$date): services_view2 - Blank server by $REMOTE_USER from $REMOTE_ADDR" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi
if [ -z "$SERVERTYPE" ]
then
	echo "$(date): services_view2 - Blank servertype by $REMOTE_USER from $REMOTE_ADDR" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi
if [ -z "$SERVICE" ]
then
	echo "$(date): services_view2 - Blank service by $REMOTE_USER from $REMOTE_ADDR" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi
if [ "$SERVERTYPE" = federatedslave ]
then
	if [ -z "$SERVERMASTER" ]
	then
		echo "$(date): services_view2 - Blank servermaster by $REMOTE_USER from $REMOTE_ADDR" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
		exit 101
	fi
fi
if [[ $(grep -c ^"$REMOTE_USER": /opt/karoshi/web_controls/web_access_admin) != 1 ]]
then
	echo "$(date): services_view2 - access denied to $REMOTE_USER from $REMOTE_ADDR" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi

echo "$(date): services_view2 $SERVERNAME $SERVICE $ACTION - by $REMOTE_USER from $REMOTE_ADDR" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"

############################
#Language
############################

[ -f /opt/karoshi/web_controls/user_prefs/"$REMOTE_USER"/language_choice ] && source /opt/karoshi/web_controls/user_prefs/"$REMOTE_USER"/language_choice
export TEXTDOMAIN=karoshi-server

source /opt/karoshi/serversetup/variables/distro

function redirect {
echo '<form action="services_view.cgi" method="post" id="servicesview">
<input type="hidden" name="_SERVERNAME_'"$SERVERNAME2"'_SERVERTYPE_'"$SERVERTYPE"'_SERVERMASTER_'"$SERVERMASTER"'_" value="">
</form>
<script language="JavaScript" type="text/javascript">
document.getElementById("servicesview").submit();
</script>'
exit
}


if [[ "$SERVERNAME" = $(hostname-fqdn) ]]
then
	source /opt/karoshi/serversetup/variables/distro


	if [ "$ACTION" = start ]
	then
		#Set the service to run on boot
		"/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/startonboot/$SERVICE"

		#Stop the service to make sure that it is really stopped
		"/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/$SERVICE"_stop		

		#Start the service
		"/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/$SERVICE"_start
	fi
	

	if [ "$ACTION" = stop ]
	then
		#Stop the service from running at boot
		"/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/stoponboot/$SERVICE"

		#Stop the service
		"/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/$SERVICE"_stop	
	fi


	redirect
fi

if [[ "$SERVERNAME" != $(hostname-fqdn) ]]
then
	if [ "$SERVERTYPE" = network ] || [ "$SERVERTYPE" = federated ]
	then
	ssh -x -o PasswordAuthentication=no -o ConnectTimeout=4 "$SERVERNAME" '
	source /opt/karoshi/serversetup/variables/distro

	
	if [ '"$ACTION"' = start ]
	then
		#Set the service to run on boot
		/opt/karoshi/serversetup/distro/"$DISTROCHOICE"/scripts/startonboot/'"$SERVICE"'

		#Stop the service to make sure that it is really stopped
		/opt/karoshi/serversetup/distro/"$DISTROCHOICE"/scripts/control_services/'"$SERVICE"'_stop

		#Start the service
		/opt/karoshi/serversetup/distro/"$DISTROCHOICE"/scripts/control_services/'"$SERVICE"'_start
	fi

	#Stop the service from running at boot
	if [ '"$ACTION"' = stop ]
	then
		/opt/karoshi/serversetup/distro/"$DISTROCHOICE"/scripts/stoponboot/'"$SERVICE"'

		#Stop the service
		/opt/karoshi/serversetup/distro/"$DISTROCHOICE"/scripts/control_services/'"$SERVICE"'_stop
	fi


	'
	redirect
	fi
fi

if [ "$SERVERTYPE" = federatedslave ]
then
	ssh -x -o PasswordAuthentication=no -o ConnectTimeout=4 "$SERVERMASTER" '
	ssh -x -o PasswordAuthentication=no -o ConnectTimeout=4 '"$SERVERNAME"' '\''
	source /opt/karoshi/serversetup/variables/distro

	#Set the service to run on boot
	if [ '"$ACTION"' = start ]
	then
		/opt/karoshi/serversetup/distro/"$DISTROCHOICE"/scripts/startonboot/'"$SERVICE"'
	fi

	#Stop the service from running at boot
	if [ '"$ACTION"' = stop ]
	then
		/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/stoponboot/'"$SERVICE"'
	fi

	#Start or stop the service
	/opt/karoshi/serversetup/distro/"$DISTROCHOICE"/scripts/control_services/'"$SERVICE"'"_"'"$ACTION"'
	'\''
	'
	redirect
fi
exit

