#!/bin/bash
#Copyright (C) 2010 Paul Sharrad

#This file is part of Karoshi Server.
#
#Karoshi Server is free software: you can redistribute it and/or modify
#it under the terms of the GNU Affero General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#Karoshi Server is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU Affero General Public License for more details.
#
#You should have received a copy of the GNU Affero General Public License
#along with Karoshi Server.  If not, see <http://www.gnu.org/licenses/>.

#
#The Karoshi Team can be contacted at: 
#mpsharrad@karoshi.org.uk
#jharris@karoshi.org.uk
#aball@karoshi.org.uk
#
#Website: http://www.karoshi.org.uk
LOG_DATE=`date +%F`
########################
#Check md5checksum
########################
if ! test -f /opt/karoshi/web_controls/checksums/admin_checksums/software_raid_control_cgi
then
echo `date`: software_raid_control - No admin MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
source /opt/karoshi/web_controls/checksums/admin_checksums/software_raid_control_cgi
MD5SUM=`md5sum /var/www/cgi-bin_karoshi/admin/software_raid_control.cgi | cut -d' ' -f1`
[ $MD5SUM'null' = null ] && MD5SUM=not_set
if [ $MD5SUM'check' != $software_raid_control_cgi'check' ]
then
echo `date`: software_raid_control - Incorrect admin MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi

########################
#Get variables
########################
numArgs=$#
if [ $numArgs != 0 ]
then
echo `date`: software_raid_control - incorrect number of arguments >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi

read DATA
DATA=`echo $DATA | tr -cd 'A-Za-z0-9\._:\-'`
if [ $DATA'null' = null ]
then
echo `date`: software_raid_control - no data >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
REMOTE_USER=`echo "$DATA" | cut -s -d: -f1`
REMOTE_ADDR=`echo "$DATA" | cut -s -d: -f2`
REMOTE_MD5=`echo "$DATA" | cut -s -d: -f3`
SERVERNAME=`echo "$DATA" | cut -s -d: -f4`
SERVERTYPE=`echo "$DATA" | cut -s -d: -f5`
SERVERMASTER=`echo "$DATA" | cut -s -d: -f6`
########################
#Check data
########################
if [ $REMOTE_MD5'check' != $MD5SUM'check' ]
then
echo `date`: software_raid_control - Not called by software_raid_control.cgi >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
if [ $REMOTE_USER'null' = null ]
then
echo `date`: software_raid_control - Blank remote user >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
if [ $REMOTE_ADDR'null' = null ]
then
echo `date`: software_raid_control - Blank remote tcpip address >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
if [ $SERVERNAME'null' = null ]
then
echo `date`: software_raid_create - Blank server >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi

if [ $SERVERTYPE'null' = null ]
then
echo `date`: software_raid_create - Blank servertype >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi

if [ $SERVERTYPE = federatedslave ]
then
if [ $SERVERMASTER'null' = null ]
then
echo `date`: software_raid_create - Blank servermaster >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
fi



if [ `grep -c ^$REMOTE_USER: /opt/karoshi/web_controls/web_access_admin` != 1 ]
then
echo `date`: software_raid_control - access denied to $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi

##########################
#Language
##########################
LANGCHOICE=englishuk
STYLESHEET=defaultstyle.css
[ -f /opt/karoshi/web_controls/user_prefs/$REMOTE_USER ] && source /opt/karoshi/web_controls/user_prefs/$REMOTE_USER
[ -f /opt/karoshi/web_controls/language/$LANGCHOICE/system/software_raid ] || LANGCHOICE=englishuk
source /opt/karoshi/web_controls/language/$LANGCHOICE/system/software_raid
[ -f /opt/karoshi/web_controls/language/$LANGCHOICE/all ] || LANGCHOICE=englishuk
source /opt/karoshi/web_controls/language/$LANGCHOICE/all

ICON1=/images/submenus/system/hdd_add.png
ICON2=/images/submenus/system/hdd_add_spare.png
ICON3=/images/submenus/system/hdd_remove.png
ICON4=/images/submenus/system/hdd_fail.png

if [ $SERVERNAME = `hostname-fqdn` ]
then

#Check that a software raid has been set up on this server

if [ ! -f /etc/mdadm/mdadm.conf ]
then
echo $ERRORMSG14
sleep 5
exit
fi

if [ `grep -c ^ARRAY /etc/mdadm/mdadm.conf` = 0 ]
then
echo $ERRORMSG14
sleep 5
exit
fi


#Get raid info
RAID_UUID=`cat /etc/fstab | grep -A 1 "#Software raid" | sed -n 2,2p | cut -d\" -f2`
RAID_DEVICE=`blkid | grep $RAID_UUID | cut -d: -f1`

#Check that the raid is running
if [ `mdadm --detail --scan | grep -c ARRAY` = 0 ]
then
echo "<table class=\"standard\" style=\"text-align: left;\" border=\"0\" cellpadding=\"2\" cellspacing=\"2\"><tbody>
<tr><td style=\"width: 180px;\">$RAIDUUIDMSG</td><td>$RAID_UUID</td></tr>
<tr><td>$RAIDSTATEMSG</td><td>$ERRORMSG12</td></tr>
<tr><td>$CUSTOMCOMMANDMSG</td><td><form action=\"/cgi-bin/admin/software_raid_control2.cgi\" method=\"post\">
<input tabindex= \"1\" value=\"mdadm --assemble --scan\" name=\"_SERVERNAME_$HOSTNAME"_"SERVERTYPE_'$SERVERTYPE'"_"SERVERMASTER_'$SERVERMASTER'"_"ACTION_custom_RAIDDEVICE_null_DRIVE_\" size=\"30\" type=\"text\"></form></td>
<td><a class=\"info\" href=\"javascript:void(0)\"><img class=\"images\" alt=\"\" src=\"/images/help/info.png\"><span>$CUSTOMCOMMANDHELPMSG</span></a></td></tr>
</tbody></table><br><br>
<input value=\"$SUBMITMSG\" type=\"submit\"> <input value=\"$RESETMSG\" type=\"reset\">
"
exit
fi
#Get list of all drives
ALL_DRIVES=( `parted -l -s | grep Disk | sed "s/Error: //g" | sed "s/Disk //g" | grep /dev/sd | cut -d: -f1 | tr -cd "A-Za-z0-9/\n "` )
ALL_DRIVES_COUNT=${#ALL_DRIVES[@]}

function get_drive_info {
#Get drive information
DISKSIZE=`df -h $DRIVE | sed 's/ * / /g' | cut -d" " -f4 | sed -n 2,2p`
DRIVE_STATUS=ok
SMART_INFO=`smartctl -H $DRIVE | sed 1,4d`
smartctl -H $DRIVE 1>/dev/null 2>/dev/null
SMARTSTATUS=`echo $?`

HDDATA=`hdparm -i $DRIVE | grep SerialNo= | sed "s/,/\n/g"`
MAKER=`echo -e "$HDDATA" | grep Model= | cut -d= -f2`
DRIVE_SN=`echo -e "$HDDATA" | grep SerialNo= | cut -d= -f2`

DISKICON=hdd.png
if [ $SMARTSTATUS = 24 ]
then
#Drive failing
DRIVE_STATUS=fail
DISKICON=hdd_fail.png
fi
}

#Get list of all unmounted drives and display properties
COUNTER=0
SHOW_MENU=yes
SHOW_SUBMIT=no
echo "<input type=\"hidden\" name=\"_SERVERNAME_\" value=\"$SERVERNAME\">"
echo "<input type=\"hidden\" name=\"_SERVERTYPE_\" value=\"$SERVERTYPE\">"
echo "<input type=\"hidden\" name=\"_SERVERMASTER_\" value=\"$SERVERMASTER\">"
while [ $COUNTER -lt $ALL_DRIVES_COUNT ]
do
DRIVE=${ALL_DRIVES[$COUNTER]}
DRIVE_SHORT=`echo $DRIVE | sed "s/\/dev\///g"` 
if [ `mount | grep -c $DRIVE` = 0 ] && [ `cat /proc/mdstat | grep -c $DRIVE_SHORT` = 0 ]
then
get_drive_info

if [ $SHOW_MENU = yes ]
then
echo "<b>$SPAREDISKSMSG</b><br><br><table class=\"standard\" style=\"text-align: left;\" border=\"0\" cellpadding=\"2\" cellspacing=\"2\">
<tbody>"
SHOW_MENU=no
SHOW_SUBMIT=yes
fi

#Show drive information
if [ $DRIVE_STATUS = ok ]
then
echo "<tr><td style=\"width: 180px;\"><a class=\"info\" href=\"javascript:void(0)\"><img class=\"images\" alt=\"\" src=\"/images/submenus/system/$DISKICON\"><span>$DRIVE - $DISKSIZE<br><br><br>$SMART_INFO</span></a>$DRIVE</td><td style=\"width: 260px;\">$MAKER $DRIVE_SN</td>
<td><a class=\"info\" href=\"javascript:void(0)\"><input name=\"_SERVERNAME_$HOSTNAME"_"SERVERTYPE_'$SERVERTYPE'"_"SERVERMASTER_'$SERVERMASTER'"_"ACTION_add_DRIVE_$DRIVE"_"RAIDDEVICE_$RAID_DEVICE"_"\" type=\"image\" class=\"images\" src=\"$ICON1\" value=\"\"><span>$ADD_DISKMSG</span></a></td>
</tr>"
else
echo "<tr><td style=\"width: 180px;\"><a class=\"info\" href=\"javascript:void(0)\"><img class=\"images\" alt=\"\" src=\"/images/submenus/system/$DISKICON\"><span>$DRIVE - $DISKSIZE<br><br><br>$SMART_INFO</span></a>$DRIVE</td><td style=\"width: 260px;\">$MAKER $DRIVE_SN</td></tr>"
fi
fi
let COUNTER=$COUNTER+1
done

if [ $SHOW_SUBMIT = yes ]
then
echo "</tbody></table><br><br>"
fi

#Show raid information
if [ `grep -c "#Software raid" /etc/fstab` != 0 ]
then
DEVICE_UUID=`mdadm --detail $RAID_DEVICE 2>/dev/null | grep UUID | sed "s/ * / /g" | cut -d" " -f4`
DEVICE_UUID2=`echo $DEVICE_UUID | sed "s/://g"`
RAID_TYPE=`mdadm --query $RAID_DEVICE 2>/dev/null | cut -d" " -f3` 
#RAID_SIZE=`parted -l | grep $RAID_DEVICE | cut -d: -f2 | sed "s/ //g"`

RAID_SIZE=`df -h $RAID_DEVICE`
RAID_SIZE=`echo -e "$RAID_SIZE" | sed "s/ * / /g" | sed -n 2,2p | cut -d" " -f2`

RAID_STATE=`mdadm --detail $RAID_DEVICE | grep "State :" | sed "s/ * / /g" | cut -d: -f2 | sed "s/^ //g"`
REBUILDSTATUS=`mdadm --detail $RAID_DEVICE | grep "Rebuild Status :" | cut -d: -f2 | sed "s/^ //g"`
echo "<b>"$RAIDINFOMSG"</b><br><br>"
echo "<table class=\"standard\" style=\"text-align: left;\" border=\"0\" cellpadding=\"2\" cellspacing=\"2\"><tbody>
<tr><td style=\"width: 180px;\">$RAIDNAMEMSG</td><td>$RAID_DEVICE</td></tr>
<tr><td>$RAIDUUIDMSG</td><td>$RAID_UUID</td></tr>
<tr><td>$RAIDTYPEMSG</td><td>$RAID_TYPE</td></tr>
<tr><td>$RAIDSIZEMSG</td><td>$RAID_SIZE</td></tr>
<tr><td>$RAIDSTATEMSG</td><td>$RAID_STATE</td></tr>
"
[ ! -z "$REBUILDSTATUS" ] && echo "<tr><td style=\"width: 180px;\">Rebuild Status</td><td>$REBUILDSTATUS</td></tr>"

#Get a list of active drives in the array
RAID_DISKS=( `mdadm --detail $RAID_DEVICE 2>/dev/null | grep "active sync" | sed "s/ * / /g" | cut -d" " -f8` )
RAID_DISKS_COUNT=`echo ${#RAID_DISKS[@]}`
COUNTER=0
while [ $COUNTER -lt $RAID_DISKS_COUNT ]
do
RAID_DISK=${RAID_DISKS[$COUNTER]}
ICON=$ICON3
DRIVE=$RAID_DISK
get_drive_info
echo "<tr><td><a class=\"info\" href=\"javascript:void(0)\"><img class=\"images\" alt=\"\" src=\"/images/submenus/system/$DISKICON\"><span>$DRIVE - $DISKSIZE<br><br>$SMART_INFO</span></a>"$RAID_DISK - $ACTIVEMSG"</td><td style=\"width: 260px;\">$MAKER $DRIVE_SN</td><td>
<a class=\"info\" href=\"javascript:void(0)\"><input name=\"_SERVERNAME_$HOSTNAME"_"SERVERTYPE_'$SERVERTYPE'"_"SERVERMASTER_'$SERVERMASTER'"_"ACTION_remove_DRIVE_$RAID_DISK"_"RAIDDEVICE_$RAID_DEVICE"_"\" type=\"image\" class=\"images\" src=\"$ICON\" value=\"\"><span>$REMOVEDISKMSG</span></a>
</td></tr>"
let COUNTER=$COUNTER+1
done

#Get a list of spare rebuiling drives in the array
RAID_DISKS=( `mdadm --detail $RAID_DEVICE 2>/dev/null | grep "spare rebuilding " | sed "s/ * / /g" | cut -d" " -f8` )
RAID_DISKS_COUNT=`echo ${#RAID_DISKS[@]}`
COUNTER=0
while [ $COUNTER -lt $RAID_DISKS_COUNT ]
do
RAID_DISK=${RAID_DISKS[$COUNTER]}
ICON=$ICON3
DRIVE=$RAID_DISK
get_drive_info
echo "<tr><td><a class=\"info\" href=\"javascript:void(0)\"><img class=\"images\" alt=\"\" src=\"/images/submenus/system/$DISKICON\"><span>$DRIVE - $DISKSIZE<br><br>$SMART_INFO</span></a>"$RAID_DISK - $SPAREREBUILDINGMSG"</td><td style=\"width: 260px;\">$MAKER $DRIVE_SN</td><td>
<a class=\"info\" href=\"javascript:void(0)\"><input name=\"_SERVERNAME_$HOSTNAME"_"SERVERTYPE_$SERVERTYPE"_"SERVERMASTER_$SERVERMASTER"_"ACTION_remove_DRIVE_$RAID_DISK"_"RAIDDEVICE_$RAID_DEVICE"_"\" type=\"image\" class=\"images\" src=\"$ICON\" value=\"\"><span>$REMOVEDISKMSG</span></a>
</td></tr>"
let COUNTER=$COUNTER+1
done

#Get a list of spare drives in the array
RAID_DISKS=( `mdadm --detail $RAID_DEVICE 2>/dev/null | sed "s/ * / /g" | grep "\- spare" | cut -d" " -f7` )
RAID_DISKS_COUNT=`echo ${#RAID_DISKS[@]}`
COUNTER=0
while [ $COUNTER -lt $RAID_DISKS_COUNT ]
do
RAID_DISK=${RAID_DISKS[$COUNTER]}
ICON=$ICON3
DRIVE=$RAID_DISK
get_drive_info
echo "<tr><td><a class=\"info\" href=\"javascript:void(0)\"><img class=\"images\" alt=\"\" src=\"/images/submenus/system/$DISKICON\"><span>$DRIVE - $DISKSIZE<br><br>$SMART_INFO</span></a>"$RAID_DISK - $SPAREMSG"</td><td style=\"width: 260px;\">$MAKER $DRIVE_SN</td><td>
<a class=\"info\" href=\"javascript:void(0)\"><input name=\"_SERVERNAME_$HOSTNAME"_"SERVERTYPE_$SERVERTYPE"_"SERVERMASTER_$SERVERMASTER"_"ACTION_remove_DRIVE_$RAID_DISK"_"RAIDDEVICE_$RAID_DEVICE"_"\" type=\"image\" class=\"images\" src=\"$ICON\" value=\"\"><span>$REMOVEDISKMSG</span></a>
</td></tr>"
let COUNTER=$COUNTER+1
done

#Get a list of faulty spare drives in the array
RAID_DISKS=( `mdadm --detail $RAID_DEVICE 2>/dev/null | grep "faulty spare" | sed "s/ * / /g" | cut -d" " -f8` )
RAID_DISKS_COUNT=`echo ${#RAID_DISKS[@]}`
COUNTER=0
while [ $COUNTER -lt $RAID_DISKS_COUNT ]
do
RAID_DISK=${RAID_DISKS[$COUNTER]}
ICON=$ICON4
DRIVE=$RAID_DISK
get_drive_info
echo "<tr><td><a class=\"info\" href=\"javascript:void(0)\"><img class=\"images\" alt=\"\" src=\"/images/submenus/system/$DISKICON\"><span>$DRIVE - $DISKSIZE<br><br>$SMART_INFO</span></a>"$RAID_DISK - $FAULTYSPAREMSG"</td><td style=\"width: 260px;\">$MAKER $DRIVE_SN</td><td>
<a class=\"info\" href=\"javascript:void(0)\"><input name=\"_SERVERNAME_$HOSTNAME"_"SERVERTYPE_$SERVERTYPE"_"SERVERMASTER_$SERVERMASTER"_"ACTION_remove_DRIVE_$RAID_DISK"_"RAIDDEVICE_$RAID_DEVICE"_"\" type=\"image\" class=\"images\" src=\"$ICON\" value=\"\"><span>$REMOVEDISKMSG</span></a>
</td></tr>"
let COUNTER=$COUNTER+1
done
fi
echo "</tbody></table><br>"
fi

if [ $SERVERTYPE = network ] || [ $SERVERTYPE = federated ] && [ $SERVERNAME != `hostname-fqdn` ]
then
ssh -x -o PasswordAuthentication=no $SERVERNAME '

#Check that a software raid has been set up on this server

if [ ! -f /etc/mdadm/mdadm.conf ]
then
echo '$ERRORMSG14'
sleep 5
exit
fi

if [ `grep -c ^ARRAY /etc/mdadm/mdadm.conf` = 0 ]
then
echo '$ERRORMSG14'
sleep 5
exit
fi

ICON1=/images/submenus/system/hdd_add.png
ICON2=/images/submenus/system/hdd_add_spare.png
ICON3=/images/submenus/system/hdd_remove.png
ICON4=/images/submenus/system/hdd_fail.png
#Get raid info
RAID_UUID=`cat /etc/fstab | grep -A 1 "#Software raid" | sed -n 2,2p | cut -d\" -f2`
RAID_DEVICE=`blkid | grep $RAID_UUID | cut -d: -f1`

#Check that the raid is running
if [ `mdadm --detail --scan | grep -c ARRAY` = 0 ]
then
echo "<table class=\"standard\" style=\"text-align: left;\" border=\"0\" cellpadding=\"2\" cellspacing=\"2\"><tbody>
<tr><td style=\"width: 180px;\">'$RAIDUUIDMSG'</td><td>$RAID_UUID</td></tr>
<tr><td>'$RAIDSTATEMSG'</td><td>'$ERRORMSG12'</td></tr>
<tr><td>'$CUSTOMCOMMANDMSG'</td><td><form action=\"/cgi-bin/admin/software_raid_control2.cgi\" method=\"post\">
<input tabindex= \"1\" value=\"mdadm --assemble --scan\" name=\"_SERVERNAME_$HOSTNAME"_"SERVERTYPE_'$SERVERTYPE'"_"SERVERMASTER_'$SERVERMASTER'"_"ACTION_custom_RAIDDEVICE_null_DRIVE_\" size=\"30\" type=\"text\"></form></td>
<td><a class=\"info\" href=\"javascript:void(0)\"><img class=\"images\" alt=\"\" src=\"/images/help/info.png\"><span>'$CUSTOMCOMMANDHELPMSG'</span></a></td></tr>
</tbody></table><br><br>
<input value=\"'$SUBMITMSG'\" type=\"submit\"> <input value=\"'$RESETMSG'\" type=\"reset\">
"
exit
fi
#Get list of all drives
ALL_DRIVES=( `parted -l -s | grep Disk | sed "s/Error: //g" | sed "s/Disk //g" | grep /dev/sd | cut -d: -f1 | tr -cd "A-Za-z0-9/\n "` )
ALL_DRIVES_COUNT=${#ALL_DRIVES[@]}

function get_drive_info {
#Get drive information
DISKSIZE=`df -h $DRIVE | sed "s/ * / /g" | cut -d" " -f4 | sed -n 2,2p`
DRIVE_STATUS=ok
SMART_INFO=`smartctl -H $DRIVE | sed 1,4d`
smartctl -H $DRIVE 1>/dev/null 2>/dev/null
SMARTSTATUS=`echo $?`

HDDATA=`hdparm -i $DRIVE | grep SerialNo= | sed "s/,/\n/g"`
MAKER=`echo -e "$HDDATA" | grep Model= | cut -d= -f2`
DRIVE_SN=`echo -e "$HDDATA" | grep SerialNo= | cut -d= -f2`

DISKICON=hdd.png
if [ $SMARTSTATUS = 24 ]
then
#Drive failing
DRIVE_STATUS=fail
DISKICON=hdd_fail.png
fi
}

#Get list of all unmounted drives and display properties
COUNTER=0
SHOW_MENU=yes
SHOW_SUBMIT=no
echo "<input type=\"hidden\" name=\"_SERVERNAME_\" value=\"'$SERVERNAME'\">"
echo "<input type=\"hidden\" name=\"_SERVERTYPE_\" value=\"'$SERVERTYPE'\">"
echo "<input type=\"hidden\" name=\"_SERVERMASTER_\" value=\"'$SERVERMASTER'\">"
while [ $COUNTER -lt $ALL_DRIVES_COUNT ]
do
DRIVE=${ALL_DRIVES[$COUNTER]}
DRIVE_SHORT=`echo $DRIVE | sed "s/\/dev\///g"` 
if [ `mount | grep -c $DRIVE` = 0 ] && [ `cat /proc/mdstat | grep -c $DRIVE_SHORT` = 0 ]
then
get_drive_info

if [ $SHOW_MENU = yes ]
then
echo "<b>'$SPAREDISKSMSG'</b><br><br><table class=\"standard\" style=\"text-align: left;\" border=\"0\" cellpadding=\"2\" cellspacing=\"2\">
<tbody>"
SHOW_MENU=no
SHOW_SUBMIT=yes
fi

#Show drive information
if [ $DRIVE_STATUS = ok ]
then
echo "<tr><td style=\"width: 180px;\"><a class=\"info\" href=\"javascript:void(0)\"><img class=\"images\" alt=\"\" src=\"/images/submenus/system/$DISKICON\"><span>$DRIVE - $DISKSIZE<br><br>$SMART_INFO</span></a>$DRIVE</td><td style=\"width: 260px;\">$MAKER $DRIVE_SN</td>
<td><a class=\"info\" href=\"javascript:void(0)\"><input name=\"_SERVERNAME_$HOSTNAME"_"SERVERTYPE_'$SERVERTYPE'"_"SERVERMASTER_'$SERVERMASTER'"_"ACTION_add_DRIVE_$DRIVE"_"RAIDDEVICE_$RAID_DEVICE"_"\" type=\"image\" class=\"images\" src=\"$ICON1\" value=\"\"><span>'$ADD_DISKMSG'</span></a></td>
</tr>"
else
echo "<tr><td style=\"width: 180px;\"><a class=\"info\" href=\"javascript:void(0)\"><img class=\"images\" alt=\"\" src=\"/images/submenus/system/$DISKICON\"><span>$DRIVE - $DISKSIZE<br><br>$SMART_INFO</span></a>$DRIVE</td><td style=\"width: 260px;\">$MAKER $DRIVE_SN</td></tr>"
fi
fi
let COUNTER=$COUNTER+1
done

if [ $SHOW_SUBMIT = yes ]
then
echo "</tbody></table><br><br>"
fi

#Show raid information
if [ `grep -c "#Software raid" /etc/fstab` != 0 ]
then
DEVICE_UUID=`mdadm --detail $RAID_DEVICE 2>/dev/null | grep UUID | sed "s/ * / /g" | cut -d" " -f4`
DEVICE_UUID2=`echo $DEVICE_UUID | sed "s/://g"`
RAID_TYPE=`mdadm --query $RAID_DEVICE 2>/dev/null | cut -d" " -f3` 
#RAID_SIZE=`parted -l | grep $RAID_DEVICE | cut -d: -f2 | sed "s/ //g"`
RAID_SIZE=`df -h $RAID_DEVICE`
RAID_SIZE=`echo -e "$RAID_SIZE" | sed "s/ * / /g" | sed -n 2,2p | cut -d" " -f2`
RAID_STATE=`mdadm --detail $RAID_DEVICE | grep "State :" | sed "s/ * / /g" | cut -d: -f2 | sed "s/^ //g"`
REBUILDSTATUS=`mdadm --detail $RAID_DEVICE | grep "Rebuild Status :" | cut -d: -f2 | sed "s/^ //g"`

echo "<b>"'$RAIDINFOMSG'"</b><br><br>"
echo "<table class=\"standard\" style=\"text-align: left;\" border=\"0\" cellpadding=\"2\" cellspacing=\"2\"><tbody>
<tr><td style=\"width: 180px;\">'$RAIDNAMEMSG'</td><td>$RAID_DEVICE</td></tr>
<tr><td>'$RAIDUUIDMSG'</td><td>$RAID_UUID</td></tr>
<tr><td>'$RAIDTYPEMSG'</td><td>$RAID_TYPE</td></tr>
<tr><td>'$RAIDSIZEMSG'</td><td>$RAID_SIZE</td></tr>
<tr><td>'$RAIDSTATEMSG'</td><td>$RAID_STATE</td></tr>
"
[ ! -z "$REBUILDSTATUS" ] && echo "<tr><td style=\"width: 180px;\">Rebuild Status</td><td>$REBUILDSTATUS</td></tr>"

#Get a list of active drives in the array
RAID_DISKS=( `mdadm --detail $RAID_DEVICE 2>/dev/null | grep "active sync" | sed "s/ * / /g" | cut -d" " -f8` )
RAID_DISKS_COUNT=`echo ${#RAID_DISKS[@]}`
COUNTER=0
while [ $COUNTER -lt $RAID_DISKS_COUNT ]
do
RAID_DISK=${RAID_DISKS[$COUNTER]}
ICON=$ICON3
DRIVE=$RAID_DISK
get_drive_info
echo "<tr><td><a class=\"info\" href=\"javascript:void(0)\"><img class=\"images\" alt=\"\" src=\"/images/submenus/system/$DISKICON\"><span>$DRIVE - $DISKSIZE<br><br>$SMART_INFO</span></a>"$RAID_DISK - '$ACTIVEMSG'"</td><td style=\"width: 260px;\">$MAKER $DRIVE_SN</td><td>
<a class=\"info\" href=\"javascript:void(0)\"><input name=\"_SERVERNAME_$HOSTNAME"_"SERVERTYPE_'$SERVERTYPE'"_"SERVERMASTER_'$SERVERMASTER'"_"ACTION_remove_DRIVE_$RAID_DISK"_"RAIDDEVICE_$RAID_DEVICE"_"\" type=\"image\" class=\"images\" src=\"$ICON\" value=\"\"><span>'$REMOVEDISKMSG'</span></a>
</td></tr>"
let COUNTER=$COUNTER+1
done

#Get a list of spare rebuiling drives in the array
RAID_DISKS=( `mdadm --detail $RAID_DEVICE 2>/dev/null | grep "spare rebuilding " | sed "s/ * / /g" | cut -d" " -f8` )
RAID_DISKS_COUNT=`echo ${#RAID_DISKS[@]}`
COUNTER=0
while [ $COUNTER -lt $RAID_DISKS_COUNT ]
do
RAID_DISK=${RAID_DISKS[$COUNTER]}
ICON=$ICON3
DRIVE=$RAID_DISK
get_drive_info
echo "<tr><td><a class=\"info\" href=\"javascript:void(0)\"><img class=\"images\" alt=\"\" src=\"/images/submenus/system/$DISKICON\"><span>$DRIVE - $DISKSIZE<br><br>$SMART_INFO</span></a>"$RAID_DISK - '$SPAREREBUILDINGMSG'"</td><td style=\"width: 260px;\">$MAKER $DRIVE_SN</td><td>
<a class=\"info\" href=\"javascript:void(0)\"><input name=\"_SERVERNAME_$HOSTNAME"_"SERVERTYPE_'$SERVERTYPE'"_"SERVERMASTER_'$SERVERMASTER'"_"ACTION_remove_DRIVE_$RAID_DISK"_"RAIDDEVICE_$RAID_DEVICE"_"\" type=\"image\" class=\"images\" src=\"$ICON\" value=\"\"><span>'$REMOVEDISKMSG'</span></a>
</td></tr>"
let COUNTER=$COUNTER+1
done

#Get a list of spare drives in the array
RAID_DISKS=( `mdadm --detail $RAID_DEVICE 2>/dev/null | sed "s/ * / /g" | grep "\- spare" | cut -d" " -f7` )
RAID_DISKS_COUNT=`echo ${#RAID_DISKS[@]}`
COUNTER=0
while [ $COUNTER -lt $RAID_DISKS_COUNT ]
do
RAID_DISK=${RAID_DISKS[$COUNTER]}
ICON=$ICON3
DRIVE=$RAID_DISK
get_drive_info
echo "<tr><td><a class=\"info\" href=\"javascript:void(0)\"><img class=\"images\" alt=\"\" src=\"/images/submenus/system/$DISKICON\"><span>$DRIVE - $DISKSIZE<br><br>$SMART_INFO</span></a>"$RAID_DISK - '$SPAREMSG'"</td><td style=\"width: 260px;\">$MAKER $DRIVE_SN</td><td>
<a class=\"info\" href=\"javascript:void(0)\"><input name=\"_SERVERNAME_$HOSTNAME"_"SERVERTYPE_'$SERVERTYPE'"_"SERVERMASTER_'$SERVERMASTER'"_"ACTION_remove_DRIVE_$RAID_DISK"_"RAIDDEVICE_$RAID_DEVICE"_"\" type=\"image\" class=\"images\" src=\"$ICON\" value=\"\"><span>'$REMOVEDISKMSG'</span></a>
</td></tr>"
let COUNTER=$COUNTER+1
done

#Get a list of faulty spare drives in the array
RAID_DISKS=( `mdadm --detail $RAID_DEVICE 2>/dev/null | grep "faulty spare" | sed "s/ * / /g" | cut -d" " -f8` )
RAID_DISKS_COUNT=`echo ${#RAID_DISKS[@]}`
COUNTER=0
while [ $COUNTER -lt $RAID_DISKS_COUNT ]
do
RAID_DISK=${RAID_DISKS[$COUNTER]}
ICON=$ICON4
DRIVE=$RAID_DISK
get_drive_info
echo "<tr><td><a class=\"info\" href=\"javascript:void(0)\"><img class=\"images\" alt=\"\" src=\"/images/submenus/system/$DISKICON\"><span>$DRIVE - $DISKSIZE<br><br>$SMART_INFO</span></a>"$RAID_DISK - '$FAULTYSPAREMSG'"</td><td style=\"width: 260px;\">$MAKER $DRIVE_SN</td><td>
<a class=\"info\" href=\"javascript:void(0)\"><input name=\"_SERVERNAME_$HOSTNAME"_"SERVERTYPE_'$SERVERTYPE'"_"SERVERMASTER_'$SERVERMASTER'"_"ACTION_remove_DRIVE_$RAID_DISK"_"RAIDDEVICE_$RAID_DEVICE"_"\" type=\"image\" class=\"images\" src=\"$ICON\" value=\"\"><span>'$REMOVEDISKMSG'</span></a>
</td></tr>"
let COUNTER=$COUNTER+1
done
fi
echo "</tbody></table><br>"

'
fi



if [ $SERVERTYPE = federatedslave ]
then
ssh -o PasswordAuthentication=no -o ConnectTimeout=3 $SERVERMASTER '
ssh -o PasswordAuthentication=no -o ConnectTimeout=3 '$SERVERNAME' '\''

#Check that a software raid has been set up on this server

if [ ! -f /etc/mdadm/mdadm.conf ]
then
echo '$ERRORMSG14'
sleep 5
exit
fi

if [ `grep -c ^ARRAY /etc/mdadm/mdadm.conf` = 0 ]
then
echo '$ERRORMSG14'
sleep 5
exit
fi

ICON1=/images/submenus/system/hdd_add.png
ICON2=/images/submenus/system/hdd_add_spare.png
ICON3=/images/submenus/system/hdd_remove.png
ICON4=/images/submenus/system/hdd_fail.png
#Get raid info
RAID_UUID=`cat /etc/fstab | grep -A 1 "#Software raid" | sed -n 2,2p | cut -d\" -f2`
RAID_DEVICE=`blkid | grep $RAID_UUID | cut -d: -f1`

#Check that the raid is running
if [ `mdadm --detail --scan | grep -c ARRAY` = 0 ]
then
echo "<table class=\"standard\" style=\"text-align: left;\" border=\"0\" cellpadding=\"2\" cellspacing=\"2\"><tbody>
<tr><td style=\"width: 180px;\">'$RAIDUUIDMSG'</td><td>$RAID_UUID</td></tr>
<tr><td>'$RAIDSTATEMSG'</td><td>'$ERRORMSG12'</td></tr>
<tr><td>'$CUSTOMCOMMANDMSG'</td><td><form action=\"/cgi-bin/admin/software_raid_control2.cgi\" method=\"post\">
<input tabindex= \"1\" value=\"mdadm --assemble --scan\" name=\"_SERVERNAME_$HOSTNAME"_"SERVERTYPE_'$SERVERTYPE'"_"SERVERMASTER_'$SERVERMASTER'"_"ACTION_custom_RAIDDEVICE_null_DRIVE_\" size=\"30\" type=\"text\"></form></td>
<td><a class=\"info\" href=\"javascript:void(0)\"><img class=\"images\" alt=\"\" src=\"/images/help/info.png\"><span>'$CUSTOMCOMMANDHELPMSG'</span></a></td></tr>
</tbody></table><br><br>
<input value=\"'$SUBMITMSG'\" type=\"submit\"> <input value=\"'$RESETMSG'\" type=\"reset\">
"
exit
fi
#Get list of all drives
ALL_DRIVES=( `parted -l -s | grep Disk | sed "s/Error: //g" | sed "s/Disk //g" | grep /dev/sd | cut -d: -f1 | tr -cd "A-Za-z0-9/\n "` )
ALL_DRIVES_COUNT=${#ALL_DRIVES[@]}

function get_drive_info {
#Get drive information
DISKSIZE=`df -h $DRIVE | sed "s/ * / /g" | cut -d" " -f4 | sed -n 2,2p`
DRIVE_STATUS=ok
SMART_INFO=`smartctl -H $DRIVE | sed 1,4d`
smartctl -H $DRIVE 1>/dev/null 2>/dev/null
SMARTSTATUS=`echo $?`

HDDATA=`hdparm -i $DRIVE | grep SerialNo= | sed "s/,/\n/g"`
MAKER=`echo -e "$HDDATA" | grep Model= | cut -d= -f2`
DRIVE_SN=`echo -e "$HDDATA" | grep SerialNo= | cut -d= -f2`

DISKICON=hdd.png
if [ $SMARTSTATUS = 24 ]
then
#Drive failing
DRIVE_STATUS=fail
DISKICON=hdd_fail.png
fi
}

#Get list of all unmounted drives and display properties
COUNTER=0
SHOW_MENU=yes
SHOW_SUBMIT=no
echo "<input type=\"hidden\" name=\"_SERVERNAME_\" value=\"'$SERVERNAME'\">"
echo "<input type=\"hidden\" name=\"_SERVERTYPE_\" value=\"'$SERVERTYPE'\">"
echo "<input type=\"hidden\" name=\"_SERVERMASTER_\" value=\"'$SERVERMASTER'\">"
while [ $COUNTER -lt $ALL_DRIVES_COUNT ]
do
DRIVE=${ALL_DRIVES[$COUNTER]}
DRIVE_SHORT=`echo $DRIVE | sed "s/\/dev\///g"` 
if [ `mount | grep -c $DRIVE` = 0 ] && [ `cat /proc/mdstat | grep -c $DRIVE_SHORT` = 0 ]
then
get_drive_info

if [ $SHOW_MENU = yes ]
then
echo "<b>'$SPAREDISKSMSG'</b><br><br><table class=\"standard\" style=\"text-align: left;\" border=\"0\" cellpadding=\"2\" cellspacing=\"2\">
<tbody>"
SHOW_MENU=no
SHOW_SUBMIT=yes
fi

#Show drive information
if [ $DRIVE_STATUS = ok ]
then
echo "<tr><td style=\"width: 180px;\"><a class=\"info\" href=\"javascript:void(0)\"><img class=\"images\" alt=\"\" src=\"/images/submenus/system/$DISKICON\"><span>$DRIVE - $DISKSIZE<br><br>$SMART_INFO</span></a>$DRIVE</td><td style=\"width: 260px;\">$MAKER $DRIVE_SN</td>
<td><a class=\"info\" href=\"javascript:void(0)\"><input name=\"_SERVERNAME_$HOSTNAME"_"SERVERTYPE_'$SERVERTYPE'"_"SERVERMASTER_'$SERVERMASTER'"_"ACTION_add_DRIVE_$DRIVE"_"RAIDDEVICE_$RAID_DEVICE"_"\" type=\"image\" class=\"images\" src=\"$ICON1\" value=\"\"><span>'$ADD_DISKMSG'</span></a></td>
</tr>"
else
echo "<tr><td style=\"width: 180px;\"><a class=\"info\" href=\"javascript:void(0)\"><img class=\"images\" alt=\"\" src=\"/images/submenus/system/$DISKICON\"><span>$DRIVE - $DISKSIZE<br><br>$SMART_INFO</span></a>$DRIVE</td><td style=\"width: 260px;\">$MAKER $DRIVE_SN</td></tr>"
fi
fi
let COUNTER=$COUNTER+1
done

if [ $SHOW_SUBMIT = yes ]
then
echo "</tbody></table><br><br>"
fi

#Show raid information
if [ `grep -c "#Software raid" /etc/fstab` != 0 ]
then
DEVICE_UUID=`mdadm --detail $RAID_DEVICE 2>/dev/null | grep UUID | sed "s/ * / /g" | cut -d" " -f4`
DEVICE_UUID2=`echo $DEVICE_UUID | sed "s/://g"`
RAID_TYPE=`mdadm --query $RAID_DEVICE 2>/dev/null | cut -d" " -f3` 
#RAID_SIZE=`parted -l | grep $RAID_DEVICE | cut -d: -f2 | sed "s/ //g"`
RAID_SIZE=`df -h $RAID_DEVICE`
RAID_SIZE=`echo -e "$RAID_SIZE" | sed "s/ * / /g" | sed -n 2,2p | cut -d" " -f2`
RAID_STATE=`mdadm --detail $RAID_DEVICE | grep "State :" | sed "s/ * / /g" | cut -d: -f2 | sed "s/^ //g"`
echo "<b>"'$RAIDINFOMSG'"</b><br><br>"
echo "<table class=\"standard\" style=\"text-align: left;\" border=\"0\" cellpadding=\"2\" cellspacing=\"2\"><tbody>
<tr><td style=\"width: 180px;\">'$RAIDNAMEMSG'</td><td>$RAID_DEVICE</td></tr>
<tr><td>'$RAIDUUIDMSG'</td><td>$RAID_UUID</td></tr>
<tr><td>'$RAIDTYPEMSG'</td><td>$RAID_TYPE</td></tr>
<tr><td>'$RAIDSIZEMSG'</td><td>$RAID_SIZE</td></tr>
<tr><td>'$RAIDSTATEMSG'</td><td>$RAID_STATE</td></tr>
"

#Get a list of active drives in the array
RAID_DISKS=( `mdadm --detail $RAID_DEVICE 2>/dev/null | grep "active sync" | sed "s/ * / /g" | cut -d" " -f8` )
RAID_DISKS_COUNT=`echo ${#RAID_DISKS[@]}`
COUNTER=0
while [ $COUNTER -lt $RAID_DISKS_COUNT ]
do
RAID_DISK=${RAID_DISKS[$COUNTER]}
ICON=$ICON3
DRIVE=$RAID_DISK
get_drive_info
echo "<tr><td><a class=\"info\" href=\"javascript:void(0)\"><img class=\"images\" alt=\"\" src=\"/images/submenus/system/$DISKICON\"><span>$DRIVE - $DISKSIZE<br><br>$SMART_INFO</span></a>"$RAID_DISK - '$ACTIVEMSG'"</td><td style=\"width: 260px;\">$MAKER $DRIVE_SN</td><td>
<a class=\"info\" href=\"javascript:void(0)\"><input name=\"_SERVERNAME_$HOSTNAME"_"SERVERTYPE_'$SERVERTYPE'"_"SERVERMASTER_'$SERVERMASTER'"_"ACTION_remove_DRIVE_$RAID_DISK"_"RAIDDEVICE_$RAID_DEVICE"_"\" type=\"image\" class=\"images\" src=\"$ICON\" value=\"\"><span>'$REMOVEDISKMSG'</span></a>
</td></tr>"
let COUNTER=$COUNTER+1
done

#Get a list of spare rebuiling drives in the array
RAID_DISKS=( `mdadm --detail $RAID_DEVICE 2>/dev/null | grep "spare rebuilding " | sed "s/ * / /g" | cut -d" " -f8` )
RAID_DISKS_COUNT=`echo ${#RAID_DISKS[@]}`
COUNTER=0
while [ $COUNTER -lt $RAID_DISKS_COUNT ]
do
RAID_DISK=${RAID_DISKS[$COUNTER]}
ICON=$ICON3
DRIVE=$RAID_DISK
get_drive_info
echo "<tr><td><a class=\"info\" href=\"javascript:void(0)\"><img class=\"images\" alt=\"\" src=\"/images/submenus/system/$DISKICON\"><span>$DRIVE - $DISKSIZE<br><br>$SMART_INFO</span></a>"$RAID_DISK - '$SPAREREBUILDINGMSG'"</td><td style=\"width: 260px;\">$MAKER $DRIVE_SN</td><td>
<a class=\"info\" href=\"javascript:void(0)\"><input name=\"_SERVERNAME_$HOSTNAME"_"SERVERTYPE_'$SERVERTYPE'"_"SERVERMASTER_'$SERVERMASTER'"_"ACTION_remove_DRIVE_$RAID_DISK"_"RAIDDEVICE_$RAID_DEVICE"_"\" type=\"image\" class=\"images\" src=\"$ICON\" value=\"\"><span>'$REMOVEDISKMSG'</span></a>
</td></tr>"
let COUNTER=$COUNTER+1
done

#Get a list of spare drives in the array
RAID_DISKS=( `mdadm --detail $RAID_DEVICE 2>/dev/null | sed "s/ * / /g" | grep "\- spare" | cut -d" " -f7` )
RAID_DISKS_COUNT=`echo ${#RAID_DISKS[@]}`
COUNTER=0
while [ $COUNTER -lt $RAID_DISKS_COUNT ]
do
RAID_DISK=${RAID_DISKS[$COUNTER]}
ICON=$ICON3
DRIVE=$RAID_DISK
get_drive_info
echo "<tr><td><a class=\"info\" href=\"javascript:void(0)\"><img class=\"images\" alt=\"\" src=\"/images/submenus/system/$DISKICON\"><span>$DRIVE - $DISKSIZE<br><br>$SMART_INFO</span></a>"$RAID_DISK - '$SPAREMSG'"</td><td style=\"width: 260px;\">$MAKER $DRIVE_SN</td><td>
<a class=\"info\" href=\"javascript:void(0)\"><input name=\"_SERVERNAME_$HOSTNAME"_"SERVERTYPE_'$SERVERTYPE'"_"SERVERMASTER_'$SERVERMASTER'"_"ACTION_remove_DRIVE_$RAID_DISK"_"RAIDDEVICE_$RAID_DEVICE"_"\" type=\"image\" class=\"images\" src=\"$ICON\" value=\"\"><span>'$REMOVEDISKMSG'</span></a>
</td></tr>"
let COUNTER=$COUNTER+1
done

#Get a list of faulty spare drives in the array
RAID_DISKS=( `mdadm --detail $RAID_DEVICE 2>/dev/null | grep "faulty spare" | sed "s/ * / /g" | cut -d" " -f8` )
RAID_DISKS_COUNT=`echo ${#RAID_DISKS[@]}`
COUNTER=0
while [ $COUNTER -lt $RAID_DISKS_COUNT ]
do
RAID_DISK=${RAID_DISKS[$COUNTER]}
ICON=$ICON4
DRIVE=$RAID_DISK
get_drive_info
echo "<tr><td><a class=\"info\" href=\"javascript:void(0)\"><img class=\"images\" alt=\"\" src=\"/images/submenus/system/$DISKICON\"><span>$DRIVE - $DISKSIZE<br><br>$SMART_INFO</span></a>"$RAID_DISK - '$FAULTYSPAREMSG'"</td><td style=\"width: 260px;\">$MAKER $DRIVE_SN</td><td>
<a class=\"info\" href=\"javascript:void(0)\"><input name=\"_SERVERNAME_$HOSTNAME"_"SERVERTYPE_'$SERVERTYPE'"_"SERVERMASTER_'$SERVERMASTER'"_"ACTION_remove_DRIVE_$RAID_DISK"_"RAIDDEVICE_$RAID_DEVICE"_"\" type=\"image\" class=\"images\" src=\"$ICON\" value=\"\"><span>'$REMOVEDISKMSG'</span></a>
</td></tr>"
let COUNTER=$COUNTER+1
done
fi
echo "</tbody></table><br>"
'\''
'
fi

exit


