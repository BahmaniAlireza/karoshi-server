#!/bin/bash
#Copyright (C) 2010 Paul Sharrad

#This file is part of Karoshi Server.
#
#Karoshi Server is free software: you can redistribute it and/or modify
#it under the terms of the GNU Affero General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#Karoshi Server is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU Affero General Public License for more details.
#
#You should have received a copy of the GNU Affero General Public License
#along with Karoshi Server.  If not, see <http://www.gnu.org/licenses/>.

#
#The Karoshi Team can be contacted at: 
#mpsharrad@karoshi.org.uk
#jsharrad@karoshi.org.uk

#
#Website: http://www.karoshi.org.uk
LOG_DATE=`date +%F`
########################
#Check md5checksum
########################
if ! test -f /opt/karoshi/web_controls/checksums/admin_checksums/software_raid_control2_cgi
then
	echo `date`: software_raid_control2 - No admin MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
source /opt/karoshi/web_controls/checksums/admin_checksums/software_raid_control2_cgi
Checksum=`sha256sum /var/www/cgi-bin_karoshi/admin/software_raid_control2.cgi | cut -d' ' -f1`
[ -z "$Checksum" ] && Checksum=not_set
if [ $Checksum'check' != $software_raid_control2_cgi'check' ]
then
	echo `date`: software_raid_control2 - Incorrect admin MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi

########################
#Get variables
########################
numArgs=$#
if [ $numArgs != 0 ]
then
	echo `date`: software_raid_control2 - incorrect number of arguments >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi

read DATA
DATA=`echo $DATA | tr -cd 'A-Za-z0-9:_,/%+-.'`
if [ -z "$DATA" ]
then
	echo `date`: software_raid_control2 - no data >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
REMOTE_USER=`echo "$DATA" | cut -s -d: -f1`
REMOTE_ADDR=`echo "$DATA" | cut -s -d: -f2`
RemoteCheckSum=`echo "$DATA" | cut -s -d: -f3`
SERVERNAME=`echo "$DATA" | cut -s -d: -f4`
SERVERTYPE=`echo "$DATA" | cut -s -d: -f5`
SERVERMASTER=`echo "$DATA" | cut -s -d: -f6`
ACTION=`echo "$DATA" | cut -s -d: -f7`
RAIDDEVICE=`echo "$DATA" | cut -s -d: -f8 | sed 's/%2F/\//g'`
DRIVE=`echo "$DATA" | cut -s -d: -f9 | sed 's/%2F/\//g'`



########################
#Check data
########################
if [ $RemoteCheckSum'check' != $Checksum'check' ]
then
	echo `date`: software_raid_control2 - Not called by software_raid_control2.cgi >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ -z "$REMOTE_USER" ]
then
	echo `date`: software_raid_control2 - Blank remote user >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ -z "$REMOTE_ADDR" ]
then
	echo `date`: software_raid_control2 - Blank remote tcpip address >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ -z "$SERVERNAME" ]
then
	echo `date`: software_raid_create - Blank server >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi

if [ -z "$SERVERTYPE" ]
then
	echo `date`: software_raid_create - Blank servertype >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi

if [ "$SERVERTYPE" = federatedslave ]
then
	if [ -z "$SERVERMASTER" ]
	then
		echo `date`: software_raid_create - Blank servermaster >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
		exit 101
	fi
fi
if [ -z "$ACTION" ]
then
	echo `date`: software_raid_control2 - Blank action >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ -z "$RAIDDEVICE" ]
then
	echo `date`: software_raid_control2 - Blank raid device >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ -z "$DRIVE" ]
then
	echo `date`: software_raid_control2 - Blank drive >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi


if [ `grep -c ^$REMOTE_USER: /opt/karoshi/web_controls/web_access_admin` != 1 ]
then
	echo `date`: software_raid_control2 - access denied to $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi

echo `date`: software_raid_control2 - server $SERVERNAME action $ACTION raiddevice $RAIDDEVICE drive $DRIVE by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE

##########################
#Language
##########################

STYLESHEET=defaultstyle.css
[ -f /opt/karoshi/web_controls/user_prefs/$REMOTE_USER ] && source /opt/karoshi/web_controls/user_prefs/$REMOTE_USER
TEXTDOMAIN=karoshi-server



if [ $SERVERNAME = `hostname-fqdn` ]
then

if [ $ACTION = remove ]
then
#Check to see if the drive is faulty
STATUS=ok
if [ `mdadm --detail $RAIDDEVICE | grep faulty | grep -c $DRIVE` -gt 0 ]
then
STATUS=faulty
fi

DRIVE2=`echo $DRIVE | sed "s/1//g"`

#If status is faulty just remove the drive
if [ $STATUS = faulty ]
then
echo $DRIVE - $"Removing this disk from the raid.""<br><br>"
mdadm --manage $RAIDDEVICE --remove $DRIVE
parted -s $DRIVE2 mklabel gpt
parted -s $DRIVE2 mkpart primary 0 100%
sleep 4
fi

if [ $STATUS = ok ]
then
#Check that there are enough working disks before removing the drive
DEVICE_COUNT=`mdadm --detail $RAIDDEVICE 2>/dev/null | grep Working | cut -d: -f2 | sed "s/ //g"`
RAIDTYPE=`mdadm --detail $RAIDDEVICE 2>/dev/null | grep "Raid Level :" | cut -d: -f2 | sed "s/ //g"`
MINDRIVES=1

[ $RAIDTYPE = raid5 ] && MINDRIVES=2

if [ $DEVICE_COUNT -gt $MINDRIVES ]
then
echo $DRIVE - $"Removing this disk from the raid.""<br><br>"
mdadm $RAIDDEVICE --fail $DRIVE --remove $DRIVE
parted -s $DRIVE2 mklabel gpt
parted -s $DRIVE2 mkpart primary 0 100%
sleep 4
else
echo $DRIVE - $"This drive cannot be removed because there will not be enough drives left in the raid array."
sleep 4
fi
fi
fi

if [ $ACTION = add ]
then
echo $DRIVE - $"Adding this disk to the raid.""<br><br>"
parted -s $DRIVE mklabel gpt
parted -s $DRIVE mkpart primary 0 100%
parted -s $DRIVE set 1 raid on
mdadm --manage $RAIDDEVICE --add $DRIVE"1"
sleep 4
fi

if [ $ACTION = custom ]
then
COMMAND=`echo $DRIVE | sed "s/+/ /g" | sed "s/^mdadm / /g"`
echo $SERVERNAME mdadm $COMMAND"<br><br>"
echo "<pre style=\"font-size: 10pt; font-family:Arial, Times, Georgia, serif\">"
mdadm $COMMAND 2>&1
echo "</pre>"
sleep 10
fi 
fi

if [ $SERVERTYPE = network ] || [ $SERVERTYPE = federated ] && [ $SERVERNAME != `hostname-fqdn` ]
then
ssh -x -o PasswordAuthentication=no $SERVERNAME '
if [ '$ACTION' = remove ]
then
#Check to see if the drive is faulty
STATUS=ok
if [ `mdadm --detail '$RAIDDEVICE' | grep faulty | grep -c '$DRIVE'` -gt 0 ]
then
STATUS=faulty
fi

DRIVE2=`echo '$DRIVE' | sed "s/1//g"`

#If status is faulty just remove the drive
if [ $STATUS = faulty ]
then
echo '$DRIVE' - '$"Removing this disk from the raid."'"<br><br>"
mdadm --manage '$RAIDDEVICE' --remove '$DRIVE'
parted -s $DRIVE2 mklabel gpt
parted -s $DRIVE2 mkpart primary 0 100%
sleep 4
fi

if [ $STATUS = ok ]
then
#Check that there are enough working disks before removing the drive
DEVICE_COUNT=`mdadm --detail '$RAIDDEVICE' 2>/dev/null | grep Working | cut -d: -f2 | sed "s/ //g"`
RAIDTYPE=`mdadm --detail '$RAIDDEVICE' 2>/dev/null | grep "Raid Level :" | cut -d: -f2 | sed "s/ //g"`
MINDRIVES=1

[ $RAIDTYPE = raid5 ] && MINDRIVES=2

if [ $DEVICE_COUNT -gt $MINDRIVES ]
then
echo '$DRIVE' - '$"Removing this disk from the raid."'"<br><br>"
mdadm '$RAIDDEVICE' --fail '$DRIVE' --remove '$DRIVE'
parted -s $DRIVE2 mklabel gpt
parted -s $DRIVE2 mkpart primary 0 100%
sleep 4
else
echo '$DRIVE' - '$"This drive cannot be removed because there will not be enough drives left in the raid array."'
sleep 4
fi
fi
fi

if [ '$ACTION' = add ]
then
echo '$DRIVE' - '$"Adding this disk to the raid."'"<br><br>"
parted -s '$DRIVE' mklabel gpt
parted -s '$DRIVE' mkpart primary 0 100%
parted -s '$DRIVE' set 1 raid on
mdadm --manage '$RAIDDEVICE' --add '$DRIVE'1
sleep 4
fi

if [ '$ACTION' = custom ]
then
COMMAND=`echo '$DRIVE' | sed "s/+/ /g" | sed "s/^mdadm / /g"`
echo $SERVER mdadm $COMMAND"<br><br>"
echo "<pre style=\"font-size: 10pt; font-family:Arial, Times, Georgia, serif\">"
mdadm $COMMAND 2>&1
echo "</pre>"
sleep 10
fi 
'
fi

if [ $SERVERTYPE = federatedslave ]
then
ssh -o PasswordAuthentication=no -o ConnectTimeout=3 $SERVERMASTER '
echo `date`: software_raid_control2 \(federated mode\) - server '$SERVER' action '$ACTION' raiddevice '$RAIDDEVICE' drive '$DRIVE' by '$REMOTE_USER' from '$REMOTE_ADDR' >> /opt/karoshi/logs/karoshi_web_management/'$LOG_DATE'
ssh -o PasswordAuthentication=no -o ConnectTimeout=3 '$SERVERNAME' '\''
if [ '$ACTION' = remove ]
then
#Check to see if the drive is faulty
STATUS=ok
if [ `mdadm --detail '$RAIDDEVICE' | grep faulty | grep -c '$DRIVE'` -gt 0 ]
then
STATUS=faulty
fi

DRIVE2=`echo '$DRIVE' | sed "s/1//g"`

#If status is faulty just remove the drive
if [ $STATUS = faulty ]
then
echo '$DRIVE' - '$"Removing this disk from the raid."'"<br><br>"
mdadm --manage '$RAIDDEVICE' --remove '$DRIVE'
parted -s $DRIVE2 mklabel gpt
parted -s $DRIVE2 mkpart primary 0 100%
sleep 4
fi

if [ $STATUS = ok ]
then
#Check that there are enough working disks before removing the drive
DEVICE_COUNT=`mdadm --detail '$RAIDDEVICE' 2>/dev/null | grep Working | cut -d: -f2 | sed "s/ //g"`
RAIDTYPE=`mdadm --detail '$RAIDDEVICE' 2>/dev/null | grep "Raid Level :" | cut -d: -f2 | sed "s/ //g"`
MINDRIVES=1

[ $RAIDTYPE = raid5 ] && MINDRIVES=2

if [ $DEVICE_COUNT -gt $MINDRIVES ]
then
echo '$DRIVE' - '$"Removing this disk from the raid."'"<br><br>"
mdadm '$RAIDDEVICE' --fail '$DRIVE' --remove '$DRIVE'
parted -s $DRIVE2 mklabel gpt
parted -s $DRIVE2 mkpart primary 0 100%
sleep 4
else
echo '$DRIVE' - '$"This drive cannot be removed because there will not be enough drives left in the raid array."'
sleep 4
fi
fi
fi

if [ '$ACTION' = add ]
then
echo '$DRIVE' - '$"Adding this disk to the raid."'"<br><br>"
parted -s '$DRIVE' mklabel gpt
parted -s '$DRIVE' mkpart primary 0 100%
parted -s '$DRIVE' set 1 raid on
mdadm --manage '$RAIDDEVICE' --add '$DRIVE'1
sleep 4
fi

if [ '$ACTION' = custom ]
then
COMMAND=`echo '$DRIVE' | sed "s/+/ /g" | sed "s/^mdadm / /g"`
echo '$SERVERNAME' mdadm $COMMAND"<br><br>"
echo "<pre style=\"font-size: 10pt; font-family:Arial, Times, Georgia, serif\">"
mdadm $COMMAND 2>&1
echo "</pre>"
sleep 10
fi 
'\''
'
fi

