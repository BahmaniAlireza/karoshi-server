#!/bin/bash
#Copyright (C) 2010 Paul Sharrad

#This file is part of Karoshi Server.
#
#Karoshi Server is free software: you can redistribute it and/or modify
#it under the terms of the GNU Affero General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#Karoshi Server is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU Affero General Public License for more details.
#
#You should have received a copy of the GNU Affero General Public License
#along with Karoshi Server.  If not, see <http://www.gnu.org/licenses/>.

#
#The Karoshi Team can be contacted at: 
#mpsharrad@karoshi.org.uk
#jsharrad@karoshi.org.uk

#
#Website: http://www.karoshi.org.uk
LOG_DATE=`date +%F`
########################
#Check md5checksum
########################
if ! test -f /opt/karoshi/web_controls/checksums/admin_checksums/software_raid_create_cgi
then
	echo `date`: software_raid_create - No admin MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
source /opt/karoshi/web_controls/checksums/admin_checksums/software_raid_create_cgi
Checksum=`sha256sum /var/www/cgi-bin_karoshi/admin/software_raid_create.cgi | cut -d' ' -f1`
[ -z "$Checksum" ] && Checksum=not_set
if [ $Checksum'check' != $software_raid_create_cgi'check' ]
then
	echo `date`: software_raid_create - Incorrect admin MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi

########################
#Get variables
########################
numArgs=$#
if [ $numArgs != 0 ]
then
echo `date`: software_raid_create - incorrect number of arguments >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi

read DATA
DATA=`echo $DATA | tr -cd 'A-Za-z0-9\._:\-'`
if [ -z "$DATA" ]
then
	echo `date`: software_raid_create - no data >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
REMOTE_USER=`echo "$DATA" | cut -s -d: -f1`
REMOTE_ADDR=`echo "$DATA" | cut -s -d: -f2`
RemoteCheckSum=`echo "$DATA" | cut -s -d: -f3`
SERVERNAME=`echo "$DATA" | cut -s -d: -f4`
SERVERTYPE=`echo "$DATA" | cut -s -d: -f5`
SERVERMASTER=`echo "$DATA" | cut -s -d: -f6`
########################
#Check data
########################
if [ $RemoteCheckSum'check' != $Checksum'check' ]
then
	echo `date`: software_raid_create - Not called by software_raid_create.cgi >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ -z "$REMOTE_USER" ]
then
	echo `date`: software_raid_create - Blank remote user >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ -z "$REMOTE_ADDR" ]
then
	echo `date`: software_raid_create - Blank remote tcpip address >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ -z "$SERVERNAME" ]
then
	echo `date`: software_raid_create - Blank server >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi

if [ -z "$SERVERTYPE" ]
then
	echo `date`: software_raid_create - Blank servertype >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi

if [ $SERVERTYPE = federatedslave ]
then
	if [ -z "$SERVERMASTER" ]
	then
		echo `date`: software_raid_create - Blank servermaster >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
		exit 101
	fi
fi

if [ `grep -c ^$REMOTE_USER: /opt/karoshi/web_controls/web_access_admin` != 1 ]
then
	echo `date`: software_raid_create - access denied to $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi

##########################
#Language
##########################

STYLESHEET=defaultstyle.css
[ -f /opt/karoshi/web_controls/user_prefs/$REMOTE_USER ] && source /opt/karoshi/web_controls/user_prefs/$REMOTE_USER
TEXTDOMAIN=karoshi-server

source /opt/karoshi/serversetup/variables/distro

if [ $SERVERNAME = `hostname-fqdn` ]
then
	#Check to see that a raid has not already been created on this server
	if [ `grep -c "#Software raid" /etc/fstab` -gt 0 ]
	then
	echo $"A software raid has already been setup on this server."
	sleep 5
	exit
fi 

#Check to see if mdadm is installed
UPDATEREPOS=yes
RELOADPAGE=no
which mdadm 1>/dev/null
if [ $? != 0 ]
then
	RELOADPAGE=yes
	echo "<ul><li>"Updating repositories"</li></ul>"
	echo "<pre style=\"font-size: 10pt; font-family:Arial, Times, Georgia, serif\">"
	apt-get update
	echo "</pre>"
	UPDATEREPOS=no
	echo "<ul><li>"Installing mdadm"</li></ul>"
	echo "<pre style=\"font-size: 10pt; font-family:Arial, Times, Georgia, serif\">"
	apt-get install -y mdadm
	echo "</pre>"
fi

#Check to see if smartmontools are installed
which smartctl 1>/dev/null
if [ $? != 0 ]
then
	RELOADPAGE=yes
	if [ $UPDATEREPOS = yes ]
	then
		UPDATEREPOS=no
		echo "<ul><li>"Updating repositories"</li></ul>"
		echo "<pre style=\"font-size: 10pt; font-family:Arial, Times, Georgia, serif\">"
		apt-get update
		echo "</pre>"
	fi
	echo "<ul><li>"Installing smartmontools"</li></ul>"
	echo "<pre style=\"font-size: 10pt; font-family:Arial, Times, Georgia, serif\">"
	apt-get install -y smartmontools
	echo "</pre>"
fi

if [ $RELOADPAGE = yes ]
then
	echo "</form><form METHOD=POST ACTION=\"/cgi-bin/admin/software_raid_create.cgi\" target=\"_top\" name = \"frm\">
<input type=\"hidden\" name=\"_SERVERNAME_\" value=\"$SERVERNAME\">
<input type=\"hidden\" name=\"_SERVERTYPE_\" value=\"$SERVERTYPE\">
<input type=\"hidden\" name=\"_SERVERMASTER_\" value=\"$SERVERMASTER\">
</form>
<script>
document.frm.submit();
</script><form>
"
	exit
fi

#Check to see if any raid has been previously created from an earlier install
mdadm --assemble --scan 1>/dev/null 2>/dev/null
RAIDINFO=`mdadm --detail --scan`
SHOWRESTORE=no
if [ `echo $RAIDINFO'null' | sed "s/ //g"` != null ]
then
	RAIDNAME=`echo $RAIDINFO | cut -d" " -f2`
	RAIDUUID=`blkid $RAIDNAME | cut -d" " -f2`
	SHOWRESTORE=yes
	fi
#Stop any running raid
mdadm --stop --scan


#Get list of all drives
ALL_DRIVES=( /dev/sd? )
ALL_DRIVES_COUNT=${#ALL_DRIVES[@]}

#Get list of all unmounted drives and display properties
COUNTER=0
SHOW_MENU=yes
SHOW_SUBMIT=no
echo "<input type=\"hidden\" name=\"_SERVERNAME_\" value=\"$SERVERNAME\">"
echo "<input type=\"hidden\" name=\"_SERVERTYPE_\" value=\"$SERVERTYPE\">"
echo "<input type=\"hidden\" name=\"_SERVERMASTER_\" value=\"$SERVERMASTER\">"
while [ $COUNTER -lt $ALL_DRIVES_COUNT ]
do
DRIVE=${ALL_DRIVES[$COUNTER]}
DRIVE_SHORT=`echo $DRIVE | sed "s/\/dev\///g"` 
if [ `mount | grep -c $DRIVE` = 0 ] && [ `cat /proc/mdstat | grep -c $DRIVE_SHORT` = 0 ] && [ `zpool status | grep -c -w $DRIVE_SHORT` = 0 ]
then
#Get drive information
DISKSIZE=`df -h $DRIVE | sed 's/ * / /g' | cut -d" " -f4 | sed -n 2,2p`
DRIVE_STATUS=ok
SMART_INFO=`smartctl -Hc $DRIVE`

DISKICON=hdd.png
if [ `echo $?` = 24 ]
then
#Drive failing
DRIVE_STATUS=fail
DISKICON=hdd_fail.png
fi

if [ $SHOW_MENU = yes ]
then
echo '
<table class="standard" style="text-align: left;" >
<tbody>
<tr><td style="width: 180px;"><b>'$"Mount point"'</b></td><td><input tabindex= "1" value="/home" name="_MOUNTPOINT_" size="20" style="width: 200px;" type="text"></td><td>
<a class="info" target="_blank" href="http://www.linuxschools.com/karoshi/documentation/wiki/index.php/Software_Raid"><img class="images" alt="" src="/images/help/info.png"><span>'$"Enter in the mount point that you want the raid array to be mounted on."' '$"Allowed mount points are /home or subfolders of /media, /mnt, /var, and /home"'</span></a>
</td></tr>
<tr><td><b>'$"Raid Type"'</b></td><td>
<select name="_RAIDTYPE_" style="width: 200px;">
<option value="raid1">Raid 1</option>'

if [ $SHOWRESTORE = yes ]
then
echo "<option value=\"raid5\">Raid 5</option>
<option selected=\"selected\" value=\"restore\">Restore Existing Raid</option>
"
RAIDHELP=''$"You do not have to pick any drives if you choose the restore option."' '$"This is the only option that does not result in data loss."' '$"Choosing any other option will result in data loss on all of the drives chosen."''
else
echo "<option selected=\"selected\" value=\"raid5\">Raid 5</option>"
RAIDHELP=$"All chosen disks will be formatted and any existing data will be lost from the chosen disk drives."
fi

echo "</select>
</td>
<td><a class=\"info\" target=\"_blank\" href=\"http://www.linuxschools.com/karoshi/documentation/wiki/index.php/Software_Raid\"><img class=\"images\" alt=\"\" src=\"/images/help/info.png\"><span>$RAIDHELP</span></a></td>
</tr>
</tbody></table>"
echo '<br><br><table class="standard" style="text-align: left;" >
<tbody><tr><td style="width: 180px;"><b>'$"Disk"'</b></td><td style="width: 80px;"><b>'$"Size"'</b></td><td>
<a class="info" target="_blank" href="http://www.linuxschools.com/karoshi/documentation/wiki/index.php/Software_Raid"><img class="images" alt="" src="/images/help/info.png"><span>'$"Select the drives that you want to be added to the raid array."'<br><br>'$"Drives will only be shown if they are currently not mounted and are not already being used in a raid."'<br><br>'$"Spare drives can be added after the raid has been created."'</span></a>
</td></tr>'
SHOW_MENU=no
SHOW_SUBMIT=yes
fi

#Show drive information
if [ $DRIVE_STATUS = ok ]
then
echo "<tr><td><a class=\"info\" href=\"javascript:void(0)\"><img class=\"images\" alt=\"\" src=\"/images/submenus/system/$DISKICON\"><span>'$SMART_INFO'</span></a>$DRIVE</td><td>"$DISKSIZE"</td>
<td><input type=\"checkbox\" name=\"_DRIVE_\" value=\"$DRIVE\"></td></tr>"
fi
fi
let COUNTER=$COUNTER+1
done

if [ $SHOW_SUBMIT = yes ]
then
echo "</tbody></table><br><br>"
echo '<input value="'$"Submit"'" class="button" type="submit"> <input value="'$"Reset"'" class="button" type="reset">'
else
echo $"No spare drives are available to create a raid array.""<br><br>"
fi

fi

if [ $SERVERTYPE = network ] || [ $SERVERTYPE = federated ] && [ $SERVERNAME != `hostname-fqdn` ]
then
ssh -x -o PasswordAuthentication=no $SERVERNAME '

#Check to see that a raid has not already been created on this server
#Check to see that a raid has not already been created on this server
if [ `grep -c "#Software raid" /etc/fstab` -gt 0 ]
then
echo '$"A software raid has already been setup on this server."'
sleep 5
exit
fi 

#Check to see if mdadm is installed
UPDATEREPOS=yes
RELOADPAGE=no
which mdadm 1>/dev/null
if [ `echo $?` != 0 ]
then
RELOADPAGE=yes
echo "<ul><li>"Updating repositories"</li></ul>"
echo "<pre style=\"font-size: 10pt; font-family:Arial, Times, Georgia, serif\">"
apt-get update
echo "</pre>"
UPDATEREPOS=no
echo "<ul><li>"Installing mdadm"</li></ul>"
echo "<pre style=\"font-size: 10pt; font-family:Arial, Times, Georgia, serif\">"
apt-get install -y mdadm
echo "</pre>"
fi

#Check to see if smartmontools are installed
which smartctl 1>/dev/null
if [ `echo $?` != 0 ]
then
RELOADPAGE=yes
if [ $UPDATEREPOS = yes ]
then
UPDATEREPOS=no
echo "<ul><li>"Updating repositories"</li></ul>"
echo "<pre style=\"font-size: 10pt; font-family:Arial, Times, Georgia, serif\">"
apt-get update
echo "</pre>"
fi
echo "<ul><li>"Installing smartmontools"</li></ul>"
echo "<pre style=\"font-size: 10pt; font-family:Arial, Times, Georgia, serif\">"
apt-get install -y smartmontools
echo "</pre>"
fi

if [ $RELOADPAGE = yes ]
then
echo "</form><form METHOD=POST ACTION=\"/cgi-bin/admin/software_raid_create.cgi\" target=\"_top\" name = \"frm\">
<input type=\"hidden\" name=\"_SERVERNAME_\" value=\"'$SERVERNAME'\">
<input type=\"hidden\" name=\"_SERVERTYPE_\" value=\"'$SERVERTYPE'\">
<input type=\"hidden\" name=\"_SERVERMASTER_\" value=\"'$SERVERMASTER'\">
</form>
<script>
document.frm.submit();
</script><form>
"
exit
fi

#Check to see if any raid has been previously created from an earlier install
mdadm --assemble --scan 1>/dev/null 2>/dev/null
RAIDINFO=`mdadm --detail --scan`
SHOWRESTORE=no
if [ `echo $RAIDINFO"null" | sed "s/ //g"` != null ]
then
RAIDNAME=`echo $RAIDINFO | cut -d" " -f2`
RAIDUUID=`blkid $RAIDNAME | cut -d" " -f2`
SHOWRESTORE=yes
fi

#Stop any running raid
mdadm --stop --scan

#Get list of all drives
ALL_DRIVES=( /dev/sd? )
ALL_DRIVES_COUNT=${#ALL_DRIVES[@]}

#Get list of all unmounted drives and display properties
COUNTER=0
SHOW_MENU=yes
SHOW_SUBMIT=no
echo "<input type=\"hidden\" name=\"_SERVERNAME_\" value=\"'$SERVERNAME'\">"
echo "<input type=\"hidden\" name=\"_SERVERTYPE_\" value=\"'$SERVERTYPE'\">"
echo "<input type=\"hidden\" name=\"_SERVERMASTER_\" value=\"'$SERVERMASTER'\">"
while [ $COUNTER -lt $ALL_DRIVES_COUNT ]
do
DRIVE=${ALL_DRIVES[$COUNTER]}
DRIVE_SHORT=`echo $DRIVE | sed "s/\/dev\///g"` 
if [ `mount | grep -c $DRIVE` = 0 ] && [ `cat /proc/mdstat | grep -c $DRIVE_SHORT` = 0 ] && [ `zpool status | grep -c -w $DRIVE_SHORT` = 0 ]
then
#Get drive information
DISKSIZE=`df -h $DRIVE | sed "s/ * / /g" | cut -d" " -f4 | sed -n 2,2p`
DRIVE_STATUS=ok
SMART_INFO=`smartctl -Hc $DRIVE`

DISKICON=hdd.png
if [ `echo $?` = 24 ]
then
#Drive failing
DRIVE_STATUS=fail
DISKICON=hdd_fail.png
fi

if [ $SHOW_MENU = yes ]
then
echo "
<table class=\"standard\" style=\"text-align: left;\" border=\"0\" cellpadding=\"2\" cellspacing=\"2\">
<tbody>
<tr><td style=\"width: 180px;\"><b>"'$"Mount point"'"</b></td><td><input tabindex= \"1\" value=\"/home\" name=\"_MOUNTPOINT_\" size=\"20\" style=\"width: 200px;\" type=\"text\"></td><td>
<a class=\"info\" target=\"_blank\" href=\"http://www.linuxschools.com/karoshi/documentation/wiki/index.php/Software_Raid\"><img class=\"images\" alt=\"\" src=\"/images/help/info.png\"><span>'$"Enter in the mount point that you want the raid array to be mounted on. Allowed mount points are /home or subfolders of /media, /mnt, /var, and /home"'</span></a>
</td></tr>
<tr><td><b>"'$"Raid Type"'"</b></td><td>
<select name=\"_RAIDTYPE_\" style=\"width: 200px;\">
<option value=\"raid1\">Raid 1</option>"

if [ $SHOWRESTORE = yes ]
then
echo "<option value=\"raid5\">Raid 5</option>
<option selected=\"selected\" value=\"restore\">Restore Existing Raid</option>"
else
echo "<option selected=\"selected\" value=\"raid5\">Raid 5</option>"
fi

echo "</select>
</td>
<td><a class=\"info\" target=\"_blank\" href=\"http://www.linuxschools.com/karoshi/documentation/wiki/index.php/Software_Raid\"><img class=\"images\" alt=\"\" src=\"/images/help/info.png\"><span>"
if [ $SHOWRESTORE = yes ]
then
echo '$"You do not have to pick any drives if you choose the restore option."' '$"This is the only option that does not result in data loss."' '$" Choosing any other option will result in data loss on all of the drives chosen."'
else
echo '$"All chosen disks will be formatted and any existing data will be lost from the chosen disk drives."'
fi
echo "</span></a></td>
</tr>
</tbody></table>"
echo "<br><br><table class=\"standard\" style=\"text-align: left;\" border=\"0\" cellpadding=\"2\" cellspacing=\"2\">
<tbody><tr><td style=\"width: 180px;\"><b>'$"Disk"'</b></td><td style=\"width: 80px;\"><b>'$"Size"'</b></td><td>
<a class=\"info\" target=\"_blank\" href=\"http://www.linuxschools.com/karoshi/documentation/wiki/index.php/Software_Raid\"><img class=\"images\" alt=\"\" src=\"/images/help/info.png\"><span>'$"Select the drives that you want to be added to the raid array."'<br><br>'$"Drives will only be shown if they are currently not mounted and are not already being used in a raid."'<br><br>'$"Spare drives can be added after the raid has been created."'</span></a>
</td></tr>"
SHOW_MENU=no
SHOW_SUBMIT=yes
fi

#Show drive information
if [ $DRIVE_STATUS = ok ]
then
echo "<tr><td><a class=\"info\" href=\"javascript:void(0)\"><img class=\"images\" alt=\"\" src=\"/images/submenus/system/$DISKICON\"><span>'$SMART_INFO'</span></a>$DRIVE</td><td>"$DISKSIZE"</td>
<td><input type=\"checkbox\" name=\"_DRIVE_\" value=\"$DRIVE\"></td></tr>"
fi
fi
let COUNTER=$COUNTER+1
done

if [ $SHOW_SUBMIT = yes ]
then
echo "</tbody></table><br><br>"
echo "<input value=\"'$"Submit"'\" class=\"button\" type=\"submit\"> <input value=\"'$"Reset"'\" class=\"button\" type=\"reset\">"
else
echo '$"No spare drives are available to create a raid array."'"<br><br>"
fi
'
fi

if [ $SERVERTYPE = federatedslave ]
then
ssh -o PasswordAuthentication=no -o ConnectTimeout=3 $SERVERMASTER '
ssh -o PasswordAuthentication=no -o ConnectTimeout=3 '$SERVERNAME' '\''

#Check to see that a raid has not already been created on this server
if [ `grep -c "#Software raid" /etc/fstab` -gt 0 ]
then
echo '$"A software raid has already been setup on this server."'
sleep 5
exit
fi 

#Check to see if mdadm is installed
UPDATEREPOS=yes
RELOADPAGE=no
which mdadm 1>/dev/null
if [ `echo $?` != 0 ]
then
RELOADPAGE=yes
echo "<ul><li>"Updating repositories"</li></ul>"
echo "<pre style=\"font-size: 10pt; font-family:Arial, Times, Georgia, serif\">"
apt-get update
echo "</pre>"
UPDATEREPOS=no
echo "<ul><li>"Installing mdadm"</li></ul>"
echo "<pre style=\"font-size: 10pt; font-family:Arial, Times, Georgia, serif\">"
apt-get install -y mdadm
echo "</pre>"
fi

#Check to see if smartmontools are installed
which smartctl 1>/dev/null
if [ `echo $?` != 0 ]
then
RELOADPAGE=yes
if [ $UPDATEREPOS = yes ]
then
UPDATEREPOS=no
echo "<ul><li>"Updating repositories"</li></ul>"
echo "<pre style=\"font-size: 10pt; font-family:Arial, Times, Georgia, serif\">"
apt-get update
echo "</pre>"
fi
echo "<ul><li>"Installing smartmontools"</li></ul>"
echo "<pre style=\"font-size: 10pt; font-family:Arial, Times, Georgia, serif\">"
apt-get install -y smartmontools
echo "</pre>"
fi

if [ $RELOADPAGE = yes ]
then
echo "</form><form METHOD=POST ACTION=\"/cgi-bin/admin/software_raid_create.cgi\" target=\"_top\" name = \"frm\">
<input type=\"hidden\" name=\"_SERVERNAME_\" value=\"'$SERVERNAME'\">
<input type=\"hidden\" name=\"_SERVERTYPE_\" value=\"'$SERVERTYPE'\">
<input type=\"hidden\" name=\"_SERVERMASTER_\" value=\"'$SERVERMASTER'\">
</form>
<script>
document.frm.submit();
</script><form>
"
exit
fi

#Check to see if any raid has been previously created from an earlier install
mdadm --assemble --scan 1>/dev/null 2>/dev/null
RAIDINFO=`mdadm --detail --scan`
SHOWRESTORE=no
if [ `echo $RAIDINFO"null" | sed "s/ //g"` != null ]
then
RAIDNAME=`echo $RAIDINFO | cut -d" " -f2`
RAIDUUID=`blkid $RAIDNAME | cut -d" " -f2`
SHOWRESTORE=yes
fi

#Stop any running raid
mdadm --stop --scan

#Get list of all drives
ALL_DRIVES=( /dev/sd? )
ALL_DRIVES_COUNT=${#ALL_DRIVES[@]}

#Get list of all unmounted drives and display properties
COUNTER=0
SHOW_MENU=yes
SHOW_SUBMIT=no
echo "<input type=\"hidden\" name=\"_SERVERNAME_\" value=\"'$SERVERNAME'\">"
echo "<input type=\"hidden\" name=\"_SERVERTYPE_\" value=\"'$SERVERTYPE'\">"
echo "<input type=\"hidden\" name=\"_SERVERMASTER_\" value=\"'$SERVERMASTER'\">"
while [ $COUNTER -lt $ALL_DRIVES_COUNT ]
do
DRIVE=${ALL_DRIVES[$COUNTER]}
DRIVE_SHORT=`echo $DRIVE | sed "s/\/dev\///g"` 
if [ `mount | grep -c $DRIVE` = 0 ] && [ `cat /proc/mdstat | grep -c $DRIVE_SHORT` = 0 ] && [ `zpool status | grep -c -w $DRIVE_SHORT` = 0 ]
then
#Get drive information
DISKSIZE=`df -h $DRIVE | sed "s/ * / /g" | cut -d" " -f4 | sed -n 2,2p`
DRIVE_STATUS=ok
SMART_INFO=`smartctl -Hc $DRIVE`

DISKICON=hdd.png
if [ `echo $?` = 24 ]
then
#Drive failing
DRIVE_STATUS=fail
DISKICON=hdd_fail.png
fi

if [ $SHOW_MENU = yes ]
then
echo "
<table class=\"standard\" style=\"text-align: left;\" border=\"0\" cellpadding=\"2\" cellspacing=\"2\">
<tbody>
<tr><td style=\"width: 180px;\"><b>"'$"Mount point"'"</b></td><td><input tabindex= \"1\" value=\"/home\" name=\"_MOUNTPOINT_\" size=\"20\" style=\"width: 200px;\" type=\"text\"></td><td>
<a class=\"info\" target=\"_blank\" href=\"http://www.linuxschools.com/karoshi/documentation/wiki/index.php/Software_Raid\"><img class=\"images\" alt=\"\" src=\"/images/help/info.png\"><span>'$"Enter in the mount point that you want the raid array to be mounted on. Allowed mount points are /home or subfolders of /media, /mnt, /var, and /home"'</span></a>
</td></tr>
<tr><td><b>"'$"Raid Type"'"</b></td><td>
<select name=\"_RAIDTYPE_\" style=\"width: 200px;\">
<option value=\"raid1\">Raid 1</option>"

if [ $SHOWRESTORE = yes ]
then
echo "<option value=\"raid5\">Raid 5</option>
<option selected=\"selected\" value=\"restore\">Restore Existing Raid</option>"
else
echo "<option selected=\"selected\" value=\"raid5\">Raid 5</option>"
fi

echo "</select>
</td>
<td><a class=\"info\" target=\"_blank\" href=\"http://www.linuxschools.com/karoshi/documentation/wiki/index.php/Software_Raid\"><img class=\"images\" alt=\"\" src=\"/images/help/info.png\"><span>"
if [ $SHOWRESTORE = yes ]
then
echo '$"You do not have to pick any drives if you choose the restore option. This is the only option that does not result in data loss. Choosing any other option will result in data loss on all of the drives chosen."'
else
echo '$"All chosen disks will be formatted and any existing data will be lost from the chosen disk drives."'
fi
echo "</span></a></td>
</tr>
</tbody></table>"
echo "<br><br><table class=\"standard\" style=\"text-align: left;\" border=\"0\" cellpadding=\"2\" cellspacing=\"2\">
<tbody><tr><td style=\"width: 180px;\"><b>'$"Disk"'</b></td><td style=\"width: 80px;\"><b>'$"Size"'</b></td><td>
<a class=\"info\" target=\"_blank\" href=\"http://www.linuxschools.com/karoshi/documentation/wiki/index.php/Software_Raid\"><img class=\"images\" alt=\"\" src=\"/images/help/info.png\"><span>'$"Select the drives that you want to be added to the raid array."'<br><br>'$"Drives will only be shown if they are currently not mounted and are not already being used in a raid."'<br><br>'$"Spare drives can be added after the raid has been created."'</span></a>
</td></tr>"
SHOW_MENU=no
SHOW_SUBMIT=yes
fi

#Show drive information
if [ $DRIVE_STATUS = ok ]
then
echo "<tr><td><a class=\"info\" href=\"javascript:void(0)\"><img class=\"images\" alt=\"\" src=\"/images/submenus/system/$DISKICON\"><span>'$SMART_INFO'</span></a>$DRIVE</td><td>"$DISKSIZE"</td>
<td><input type=\"checkbox\" name=\"_DRIVE_\" value=\"$DRIVE\"></td></tr>"
fi
fi
let COUNTER=$COUNTER+1
done

if [ $SHOW_SUBMIT = yes ]
then
echo "</tbody></table><br><br>"
echo "<input value=\"'$"Submit"'\" class=\"button\" type=\"submit\"> <input class=\"button\" value=\"'$"Reset"'\" type=\"reset\">"
else
echo '$"No spare drives are available to create a raid array."'"<br><br>"
fi
'\''
'
fi

exit

