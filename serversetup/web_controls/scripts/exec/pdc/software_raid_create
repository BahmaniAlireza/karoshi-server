#!/bin/bash
#Copyright (C) 2010 Paul Sharrad

#This file is part of Karoshi Server.
#
#Karoshi Server is free software: you can redistribute it and/or modify
#it under the terms of the GNU Affero General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#Karoshi Server is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU Affero General Public License for more details.
#
#You should have received a copy of the GNU Affero General Public License
#along with Karoshi Server.  If not, see <http://www.gnu.org/licenses/>.

#
#The Karoshi Team can be contacted at: 
#mpsharrad@karoshi.org.uk
#jsharrad@karoshi.org.uk

#
#Website: http://www.karoshi.org.uk
LOG_DATE=`date +%F`
########################
#Check md5checksum
########################
if ! test -f /opt/karoshi/web_controls/checksums/admin_checksums/software_raid_create_cgi
then
echo `date`: software_raid_create - No admin MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
source /opt/karoshi/web_controls/checksums/admin_checksums/software_raid_create_cgi
MD5SUM=`md5sum /var/www/cgi-bin_karoshi/admin/software_raid_create.cgi | cut -d' ' -f1`
[ $MD5SUM'null' = null ] && MD5SUM=not_set
if [ $MD5SUM'check' != $software_raid_create_cgi'check' ]
then
echo `date`: software_raid_create - Incorrect admin MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi

########################
#Get variables
########################
numArgs=$#
if [ $numArgs != 0 ]
then
echo `date`: software_raid_create - incorrect number of arguments >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi

read DATA
DATA=`echo $DATA | tr -cd 'A-Za-z0-9\._:\-'`
if [ $DATA'null' = null ]
then
echo `date`: software_raid_create - no data >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
REMOTE_USER=`echo "$DATA" | cut -s -d: -f1`
REMOTE_ADDR=`echo "$DATA" | cut -s -d: -f2`
REMOTE_MD5=`echo "$DATA" | cut -s -d: -f3`
SERVERNAME=`echo "$DATA" | cut -s -d: -f4`
SERVERTYPE=`echo "$DATA" | cut -s -d: -f5`
SERVERMASTER=`echo "$DATA" | cut -s -d: -f6`
########################
#Check data
########################
if [ $REMOTE_MD5'check' != $MD5SUM'check' ]
then
echo `date`: software_raid_create - Not called by software_raid_create.cgi >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
if [ $REMOTE_USER'null' = null ]
then
echo `date`: software_raid_create - Blank remote user >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
if [ $REMOTE_ADDR'null' = null ]
then
echo `date`: software_raid_create - Blank remote tcpip address >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
if [ $SERVERNAME'null' = null ]
then
echo `date`: software_raid_create - Blank server >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi

if [ $SERVERTYPE'null' = null ]
then
echo `date`: software_raid_create - Blank servertype >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi

if [ $SERVERTYPE = federatedslave ]
then
if [ $SERVERMASTER'null' = null ]
then
echo `date`: software_raid_create - Blank servermaster >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
fi

if [ `grep -c ^$REMOTE_USER: /opt/karoshi/web_controls/web_access_admin` != 1 ]
then
echo `date`: software_raid_create - access denied to $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi

##########################
#Language
##########################
LANGCHOICE=englishuk
STYLESHEET=defaultstyle.css
[ -f /opt/karoshi/web_controls/user_prefs/$REMOTE_USER ] && source /opt/karoshi/web_controls/user_prefs/$REMOTE_USER
[ -f /opt/karoshi/web_controls/language/$LANGCHOICE/system/software_raid ] || LANGCHOICE=englishuk
source /opt/karoshi/web_controls/language/$LANGCHOICE/system/software_raid
[ -f /opt/karoshi/web_controls/language/$LANGCHOICE/all ] || LANGCHOICE=englishuk
source /opt/karoshi/web_controls/language/$LANGCHOICE/all
source /opt/karoshi/serversetup/variables/distro

if [ $SERVERNAME = `hostname-fqdn` ]
then
#Check to see that a raid has not already been created on this server
if [ `grep -c "#Software raid" /etc/fstab` -gt 0 ]
then
echo $ERRORMSG13
sleep 5
exit
fi 

#Check to see if mdadm is installed
UPDATEREPOS=yes
RELOADPAGE=no
which mdadm 1>/dev/null
if [ `echo $?` != 0 ]
then
RELOADPAGE=yes
echo "<li>"Updating repositories"</li>"
echo "<pre style=\"font-size: 10pt; font-family:Arial, Times, Georgia, serif\">"
apt-get update
echo "</pre>"
UPDATEREPOS=no
echo "<li>"Installing mdadm"</li>"
echo "<pre style=\"font-size: 10pt; font-family:Arial, Times, Georgia, serif\">"
apt-get install -y mdadm
echo "</pre>"
fi

#Check to see if smartmontools are installed
which smartctl 1>/dev/null
if [ `echo $?` != 0 ]
then
RELOADPAGE=yes
if [ $UPDATEREPOS = yes ]
then
UPDATEREPOS=no
echo "<li>"Updating repositories"</li>"
echo "<pre style=\"font-size: 10pt; font-family:Arial, Times, Georgia, serif\">"
apt-get update
echo "</pre>"
fi
echo "<li>"Installing smartmontools"</li>"
echo "<pre style=\"font-size: 10pt; font-family:Arial, Times, Georgia, serif\">"
apt-get install -y smartmontools
echo "</pre>"
fi

if [ $RELOADPAGE = yes ]
then
echo "</form><form METHOD=POST ACTION=\"/cgi-bin/admin/software_raid_create.cgi\" target=\"_top\" name = \"frm\">
<input type=\"hidden\" name=\"_SERVERNAME_\" value=\"$SERVERNAME\">
<input type=\"hidden\" name=\"_SERVERTYPE_\" value=\"$SERVERTYPE\">
<input type=\"hidden\" name=\"_SERVERMASTER_\" value=\"$SERVERMASTER\">
</form>
<script>
document.frm.submit();
</script><form>
"
exit
fi

#Check to see if any raid has been previously created from an earlier install
mdadm --assemble --scan 1>/dev/null 2>/dev/null
RAIDINFO=`mdadm --detail --scan`
SHOWRESTORE=no
if [ `echo $RAIDINFO'null' | sed "s/ //g"` != null ]
then
RAIDNAME=`echo $RAIDINFO | cut -d" " -f2`
RAIDUUID=`blkid $RAIDNAME | cut -d" " -f2`
SHOWRESTORE=yes
fi
#Stop any running raid
mdadm --stop --scan


#Get list of all drives
ALL_DRIVES=( `parted -l -s | grep Disk | sed "s/Error: //g" | sed "s/Disk //g" | grep /dev/sd | cut -d: -f1 | tr -cd "A-Za-z0-9/\n "` )
ALL_DRIVES_COUNT=${#ALL_DRIVES[@]}

#Get list of all unmounted drives and display properties
COUNTER=0
SHOW_MENU=yes
SHOW_SUBMIT=no
echo "<input type=\"hidden\" name=\"_SERVERNAME_\" value=\"$SERVERNAME\">"
echo "<input type=\"hidden\" name=\"_SERVERTYPE_\" value=\"$SERVERTYPE\">"
echo "<input type=\"hidden\" name=\"_SERVERMASTER_\" value=\"$SERVERMASTER\">"
while [ $COUNTER -lt $ALL_DRIVES_COUNT ]
do
DRIVE=${ALL_DRIVES[$COUNTER]}
DRIVE_SHORT=`echo $DRIVE | sed "s/\/dev\///g"` 
if [ `mount | grep -c $DRIVE` = 0 ] && [ `cat /proc/mdstat | grep -c $DRIVE_SHORT` = 0 ]
then
#Get drive information
DISKSIZE=`df -h $DRIVE | sed 's/ * / /g' | cut -d" " -f4 | sed -n 2,2p`
DRIVE_STATUS=ok
SMART_INFO=`smartctl -Hc $DRIVE`

DISKICON=hdd.png
if [ `echo $?` = 24 ]
then
#Drive failing
DRIVE_STATUS=fail
DISKICON=hdd_fail.png
fi

if [ $SHOW_MENU = yes ]
then
echo "
<table class=\"standard\" style=\"text-align: left;\" border=\"0\" cellpadding=\"2\" cellspacing=\"2\">
<tbody>
<tr><td style=\"width: 180px;\"><b>"$MOUNTMSG"</b></td><td><input tabindex= \"1\" value=\"/home\" name=\"_MOUNTPOINT_\" size=\"20\" style=\"width: 200px;\" type=\"text\"></td><td>
<a class=\"info\" target=\"_blank\" href=\"http://www.linuxschools.com/karoshi/documentation/wiki/index.php/Software_Raid\"><img class=\"images\" alt=\"\" src=\"/images/help/info.png\"><span>$HELPMSG1</span></a>
</td></tr>
<tr><td><b>"$RAIDTYPEMSG"</b></td><td>
<select name=\"_RAIDTYPE_\" style=\"width: 200px;\">
<option value=\"raid1\">Raid 1</option>"

if [ $SHOWRESTORE = yes ]
then
echo "<option value=\"raid5\">Raid 5</option>
<option selected=\"selected\" value=\"restore\">Restore Existing Raid</option>
"
RAIDHELP=$HELPMSG6
else
echo "<option selected=\"selected\" value=\"raid5\">Raid 5</option>"
RAIDHELP=$HELPMSG7
fi

echo "</select>
</td>
<td><a class=\"info\" target=\"_blank\" href=\"http://www.linuxschools.com/karoshi/documentation/wiki/index.php/Software_Raid\"><img class=\"images\" alt=\"\" src=\"/images/help/info.png\"><span>$RAIDHELP</span></a></td>
</tr>
</tbody></table>"
echo "<br><br><table class=\"standard\" style=\"text-align: left;\" border=\"0\" cellpadding=\"2\" cellspacing=\"2\">
<tbody><tr><td style=\"width: 180px;\"><b>$DISKMSG</b></td><td style=\"width: 80px;\"><b>$SIZEMSG</b></td><td>
<a class=\"info\" target=\"_blank\" href=\"http://www.linuxschools.com/karoshi/documentation/wiki/index.php/Software_Raid\"><img class=\"images\" alt=\"\" src=\"/images/help/info.png\"><span>$HELPMSG2<br><br>$HELPMSG3<br><br>$HELPMSG4</span></a>
</td></tr>"
SHOW_MENU=no
SHOW_SUBMIT=yes
fi

#Show drive information
if [ $DRIVE_STATUS = ok ]
then
echo "<tr><td><a class=\"info\" href=\"javascript:void(0)\"><img class=\"images\" alt=\"\" src=\"/images/submenus/system/$DISKICON\"><span>'$SMART_INFO'</span></a>$DRIVE</td><td>"$DISKSIZE"</td>
<td><input type=\"checkbox\" name=\"_DRIVE_\" value=\"$DRIVE\"></td></tr>"
fi
fi
let COUNTER=$COUNTER+1
done

if [ $SHOW_SUBMIT = yes ]
then
echo "</tbody></table><br><br>"
echo "<input value=\"$SUBMITMSG\" class=\"button\" type=\"submit\"> <input value=\"$RESETMSG\" class=\"button\" type=\"reset\">"
else
echo $ERRORMSG8"<br><br>"
fi

fi

if [ $SERVERTYPE = network ] || [ $SERVERTYPE = federated ] && [ $SERVERNAME != `hostname-fqdn` ]
then
ssh -x -o PasswordAuthentication=no $SERVERNAME '

#Check to see that a raid has not already been created on this server
#Check to see that a raid has not already been created on this server
if [ `grep -c "#Software raid" /etc/fstab` -gt 0 ]
then
echo '$ERRORMSG13'
sleep 5
exit
fi 

#Check to see if mdadm is installed
UPDATEREPOS=yes
RELOADPAGE=no
which mdadm 1>/dev/null
if [ `echo $?` != 0 ]
then
RELOADPAGE=yes
echo "<li>"Updating repositories"</li>"
echo "<pre style=\"font-size: 10pt; font-family:Arial, Times, Georgia, serif\">"
apt-get update
echo "</pre>"
UPDATEREPOS=no
echo "<li>"Installing mdadm"</li>"
echo "<pre style=\"font-size: 10pt; font-family:Arial, Times, Georgia, serif\">"
apt-get install -y mdadm
echo "</pre>"
fi

#Check to see if smartmontools are installed
which smartctl 1>/dev/null
if [ `echo $?` != 0 ]
then
RELOADPAGE=yes
if [ $UPDATEREPOS = yes ]
then
UPDATEREPOS=no
echo "<li>"Updating repositories"</li>"
echo "<pre style=\"font-size: 10pt; font-family:Arial, Times, Georgia, serif\">"
apt-get update
echo "</pre>"
fi
echo "<li>"Installing smartmontools"</li>"
echo "<pre style=\"font-size: 10pt; font-family:Arial, Times, Georgia, serif\">"
apt-get install -y smartmontools
echo "</pre>"
fi

if [ $RELOADPAGE = yes ]
then
echo "</form><form METHOD=POST ACTION=\"/cgi-bin/admin/software_raid_create.cgi\" target=\"_top\" name = \"frm\">
<input type=\"hidden\" name=\"_SERVERNAME_\" value=\"'$SERVERNAME'\">
<input type=\"hidden\" name=\"_SERVERTYPE_\" value=\"'$SERVERTYPE'\">
<input type=\"hidden\" name=\"_SERVERMASTER_\" value=\"'$SERVERMASTER'\">
</form>
<script>
document.frm.submit();
</script><form>
"
exit
fi

#Check to see if any raid has been previously created from an earlier install
mdadm --assemble --scan 1>/dev/null 2>/dev/null
RAIDINFO=`mdadm --detail --scan`
SHOWRESTORE=no
if [ `echo $RAIDINFO"null" | sed "s/ //g"` != null ]
then
RAIDNAME=`echo $RAIDINFO | cut -d" " -f2`
RAIDUUID=`blkid $RAIDNAME | cut -d" " -f2`
SHOWRESTORE=yes
fi

#Stop any running raid
mdadm --stop --scan

#Get list of all drives
ALL_DRIVES=( `parted -l -s | grep Disk | sed "s/Error: //g" | sed "s/Disk //g" | grep /dev/sd | cut -d: -f1 | tr -cd "A-Za-z0-9/\n "` )
ALL_DRIVES_COUNT=${#ALL_DRIVES[@]}

#Get list of all unmounted drives and display properties
COUNTER=0
SHOW_MENU=yes
SHOW_SUBMIT=no
echo "<input type=\"hidden\" name=\"_SERVERNAME_\" value=\"'$SERVERNAME'\">"
echo "<input type=\"hidden\" name=\"_SERVERTYPE_\" value=\"'$SERVERTYPE'\">"
echo "<input type=\"hidden\" name=\"_SERVERMASTER_\" value=\"'$SERVERMASTER'\">"
while [ $COUNTER -lt $ALL_DRIVES_COUNT ]
do
DRIVE=${ALL_DRIVES[$COUNTER]}
DRIVE_SHORT=`echo $DRIVE | sed "s/\/dev\///g"` 
if [ `mount | grep -c $DRIVE` = 0 ] && [ `cat /proc/mdstat | grep -c $DRIVE_SHORT` = 0 ]
then
#Get drive information
DISKSIZE=`df -h $DRIVE | sed "s/ * / /g" | cut -d" " -f4 | sed -n 2,2p`
DRIVE_STATUS=ok
SMART_INFO=`smartctl -Hc $DRIVE`

DISKICON=hdd.png
if [ `echo $?` = 24 ]
then
#Drive failing
DRIVE_STATUS=fail
DISKICON=hdd_fail.png
fi

if [ $SHOW_MENU = yes ]
then
echo "
<table class=\"standard\" style=\"text-align: left;\" border=\"0\" cellpadding=\"2\" cellspacing=\"2\">
<tbody>
<tr><td style=\"width: 180px;\"><b>"'$MOUNTMSG'"</b></td><td><input tabindex= \"1\" value=\"/home\" name=\"_MOUNTPOINT_\" size=\"20\" style=\"width: 200px;\" type=\"text\"></td><td>
<a class=\"info\" target=\"_blank\" href=\"http://www.linuxschools.com/karoshi/documentation/wiki/index.php/Software_Raid\"><img class=\"images\" alt=\"\" src=\"/images/help/info.png\"><span>'$HELPMSG1'</span></a>
</td></tr>
<tr><td><b>"'$RAIDTYPEMSG'"</b></td><td>
<select name=\"_RAIDTYPE_\" style=\"width: 200px;\">
<option value=\"raid1\">Raid 1</option>"

if [ $SHOWRESTORE = yes ]
then
echo "<option value=\"raid5\">Raid 5</option>
<option selected=\"selected\" value=\"restore\">Restore Existing Raid</option>"
else
echo "<option selected=\"selected\" value=\"raid5\">Raid 5</option>"
fi

echo "</select>
</td>
<td><a class=\"info\" target=\"_blank\" href=\"http://www.linuxschools.com/karoshi/documentation/wiki/index.php/Software_Raid\"><img class=\"images\" alt=\"\" src=\"/images/help/info.png\"><span>"
if [ $SHOWRESTORE = yes ]
then
echo '$HELPMSG6'
else
echo '$HELPMSG7'
fi
echo "</span></a></td>
</tr>
</tbody></table>"
echo "<br><br><table class=\"standard\" style=\"text-align: left;\" border=\"0\" cellpadding=\"2\" cellspacing=\"2\">
<tbody><tr><td style=\"width: 180px;\"><b>'$DISKMSG'</b></td><td style=\"width: 80px;\"><b>'$SIZEMSG'</b></td><td>
<a class=\"info\" target=\"_blank\" href=\"http://www.linuxschools.com/karoshi/documentation/wiki/index.php/Software_Raid\"><img class=\"images\" alt=\"\" src=\"/images/help/info.png\"><span>'$HELPMSG2'<br><br>'$HELPMSG3'<br><br>'$HELPMSG4'</span></a>
</td></tr>"
SHOW_MENU=no
SHOW_SUBMIT=yes
fi

#Show drive information
if [ $DRIVE_STATUS = ok ]
then
echo "<tr><td><a class=\"info\" href=\"javascript:void(0)\"><img class=\"images\" alt=\"\" src=\"/images/submenus/system/$DISKICON\"><span>'$SMART_INFO'</span></a>$DRIVE</td><td>"$DISKSIZE"</td>
<td><input type=\"checkbox\" name=\"_DRIVE_\" value=\"$DRIVE\"></td></tr>"
fi
fi
let COUNTER=$COUNTER+1
done

if [ $SHOW_SUBMIT = yes ]
then
echo "</tbody></table><br><br>"
echo "<input value=\"'$SUBMITMSG'\" class=\"button\" type=\"submit\"> <input value=\"'$RESETMSG'\" class=\"button\" type=\"reset\">"
else
echo '$ERRORMSG8'"<br><br>"
fi
'
fi

if [ $SERVERTYPE = federatedslave ]
then
ssh -o PasswordAuthentication=no -o ConnectTimeout=3 $SERVERMASTER '
ssh -o PasswordAuthentication=no -o ConnectTimeout=3 '$SERVERNAME' '\''

#Check to see that a raid has not already been created on this server
if [ `grep -c "#Software raid" /etc/fstab` -gt 0 ]
then
echo '$ERRORMSG13'
sleep 5
exit
fi 

#Check to see if mdadm is installed
UPDATEREPOS=yes
RELOADPAGE=no
which mdadm 1>/dev/null
if [ `echo $?` != 0 ]
then
RELOADPAGE=yes
echo "<li>"Updating repositories"</li>"
echo "<pre style=\"font-size: 10pt; font-family:Arial, Times, Georgia, serif\">"
apt-get update
echo "</pre>"
UPDATEREPOS=no
echo "<li>"Installing mdadm"</li>"
echo "<pre style=\"font-size: 10pt; font-family:Arial, Times, Georgia, serif\">"
apt-get install -y mdadm
echo "</pre>"
fi

#Check to see if smartmontools are installed
which smartctl 1>/dev/null
if [ `echo $?` != 0 ]
then
RELOADPAGE=yes
if [ $UPDATEREPOS = yes ]
then
UPDATEREPOS=no
echo "<li>"Updating repositories"</li>"
echo "<pre style=\"font-size: 10pt; font-family:Arial, Times, Georgia, serif\">"
apt-get update
echo "</pre>"
fi
echo "<li>"Installing smartmontools"</li>"
echo "<pre style=\"font-size: 10pt; font-family:Arial, Times, Georgia, serif\">"
apt-get install -y smartmontools
echo "</pre>"
fi

if [ $RELOADPAGE = yes ]
then
echo "</form><form METHOD=POST ACTION=\"/cgi-bin/admin/software_raid_create.cgi\" target=\"_top\" name = \"frm\">
<input type=\"hidden\" name=\"_SERVERNAME_\" value=\"'$SERVERNAME'\">
<input type=\"hidden\" name=\"_SERVERTYPE_\" value=\"'$SERVERTYPE'\">
<input type=\"hidden\" name=\"_SERVERMASTER_\" value=\"'$SERVERMASTER'\">
</form>
<script>
document.frm.submit();
</script><form>
"
exit
fi

#Check to see if any raid has been previously created from an earlier install
mdadm --assemble --scan 1>/dev/null 2>/dev/null
RAIDINFO=`mdadm --detail --scan`
SHOWRESTORE=no
if [ `echo $RAIDINFO"null" | sed "s/ //g"` != null ]
then
RAIDNAME=`echo $RAIDINFO | cut -d" " -f2`
RAIDUUID=`blkid $RAIDNAME | cut -d" " -f2`
SHOWRESTORE=yes
fi

#Stop any running raid
mdadm --stop --scan

#Get list of all drives
ALL_DRIVES=( `parted -l | sed "s/Error: //g" | sed "s/Disk //g" | grep /dev/sd | cut -d: -f1 | tr -cd "A-Za-z0-9/\n "` )
ALL_DRIVES_COUNT=${#ALL_DRIVES[@]}

#Get list of all unmounted drives and display properties
COUNTER=0
SHOW_MENU=yes
SHOW_SUBMIT=no
echo "<input type=\"hidden\" name=\"_SERVERNAME_\" value=\"'$SERVERNAME'\">"
echo "<input type=\"hidden\" name=\"_SERVERTYPE_\" value=\"'$SERVERTYPE'\">"
echo "<input type=\"hidden\" name=\"_SERVERMASTER_\" value=\"'$SERVERMASTER'\">"
while [ $COUNTER -lt $ALL_DRIVES_COUNT ]
do
DRIVE=${ALL_DRIVES[$COUNTER]}
DRIVE_SHORT=`echo $DRIVE | sed "s/\/dev\///g"` 
if [ `mount | grep -c $DRIVE` = 0 ] && [ `cat /proc/mdstat | grep -c $DRIVE_SHORT` = 0 ]
then
#Get drive information
DISKSIZE=`df -h $DRIVE | sed "s/ * / /g" | cut -d" " -f4 | sed -n 2,2p`
DRIVE_STATUS=ok
SMART_INFO=`smartctl -Hc $DRIVE`

DISKICON=hdd.png
if [ `echo $?` = 24 ]
then
#Drive failing
DRIVE_STATUS=fail
DISKICON=hdd_fail.png
fi

if [ $SHOW_MENU = yes ]
then
echo "
<table class=\"standard\" style=\"text-align: left;\" border=\"0\" cellpadding=\"2\" cellspacing=\"2\">
<tbody>
<tr><td style=\"width: 180px;\"><b>"'$MOUNTMSG'"</b></td><td><input tabindex= \"1\" value=\"/home\" name=\"_MOUNTPOINT_\" size=\"20\" style=\"width: 200px;\" type=\"text\"></td><td>
<a class=\"info\" target=\"_blank\" href=\"http://www.linuxschools.com/karoshi/documentation/wiki/index.php/Software_Raid\"><img class=\"images\" alt=\"\" src=\"/images/help/info.png\"><span>'$HELPMSG1'</span></a>
</td></tr>
<tr><td><b>"'$RAIDTYPEMSG'"</b></td><td>
<select name=\"_RAIDTYPE_\" style=\"width: 200px;\">
<option value=\"raid1\">Raid 1</option>"

if [ $SHOWRESTORE = yes ]
then
echo "<option value=\"raid5\">Raid 5</option>
<option selected=\"selected\" value=\"restore\">Restore Existing Raid</option>"
else
echo "<option selected=\"selected\" value=\"raid5\">Raid 5</option>"
fi

echo "</select>
</td>
<td><a class=\"info\" target=\"_blank\" href=\"http://www.linuxschools.com/karoshi/documentation/wiki/index.php/Software_Raid\"><img class=\"images\" alt=\"\" src=\"/images/help/info.png\"><span>"
if [ $SHOWRESTORE = yes ]
then
echo '$HELPMSG6'
else
echo '$HELPMSG7'
fi
echo "</span></a></td>
</tr>
</tbody></table>"
echo "<br><br><table class=\"standard\" style=\"text-align: left;\" border=\"0\" cellpadding=\"2\" cellspacing=\"2\">
<tbody><tr><td style=\"width: 180px;\"><b>'$DISKMSG'</b></td><td style=\"width: 80px;\"><b>'$SIZEMSG'</b></td><td>
<a class=\"info\" target=\"_blank\" href=\"http://www.linuxschools.com/karoshi/documentation/wiki/index.php/Software_Raid\"><img class=\"images\" alt=\"\" src=\"/images/help/info.png\"><span>'$HELPMSG2'<br><br>'$HELPMSG3'<br><br>'$HELPMSG4'</span></a>
</td></tr>"
SHOW_MENU=no
SHOW_SUBMIT=yes
fi

#Show drive information
if [ $DRIVE_STATUS = ok ]
then
echo "<tr><td><a class=\"info\" href=\"javascript:void(0)\"><img class=\"images\" alt=\"\" src=\"/images/submenus/system/$DISKICON\"><span>'$SMART_INFO'</span></a>$DRIVE</td><td>"$DISKSIZE"</td>
<td><input type=\"checkbox\" name=\"_DRIVE_\" value=\"$DRIVE\"></td></tr>"
fi
fi
let COUNTER=$COUNTER+1
done

if [ $SHOW_SUBMIT = yes ]
then
echo "</tbody></table><br><br>"
echo "<input value=\"'$SUBMITMSG'\" class=\"button\" type=\"submit\"> <input class=\"button\" value=\"'$RESETMSG'\" type=\"reset\">"
else
echo '$ERRORMSG8'"<br><br>"
fi
'\''
'
fi

exit

