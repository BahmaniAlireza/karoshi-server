#!/bin/bash
#Copyright (C) 2010 Paul Sharrad

#This file is part of Karoshi Server.
#
#Karoshi Server is free software: you can redistribute it and/or modify
#it under the terms of the GNU Affero General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#Karoshi Server is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU Affero General Public License for more details.
#
#You should have received a copy of the GNU Affero General Public License
#along with Karoshi Server.  If not, see <http://www.gnu.org/licenses/>.

#
#The Karoshi Team can be contacted at: 
#mpsharrad@karoshi.org.uk
#jharris@karoshi.org.uk
#aball@karoshi.org.uk
#
#Website: http://www.karoshi.org.uk
LOG_DATE=`date +%F`
########################
#Check md5checksum
########################
if ! test -f /opt/karoshi/web_controls/checksums/admin_checksums/ssl_certs_commercial_install2_cgi
then
echo `date`: ssl_certs_commercial_install - No MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
source /opt/karoshi/web_controls/checksums/admin_checksums/ssl_certs_commercial_install2_cgi
MD5SUM=`md5sum /var/www/cgi-bin_karoshi/admin/ssl_certs_commercial_install2.cgi | cut -d' ' -f1`
[ $MD5SUM'null' = null ] && MD5SUM=not_set
if [ $MD5SUM'check' != $ssl_certs_commercial_install2_cgi'check' ]
then
echo `date`: ssl_certs_commercial_install - Incorrect MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi

########################
#Get variables
########################
numArgs=$#
if [ $numArgs != 0 ]
then
echo `date`: ssl_certs_commercial_install - incorrect number of arguments >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
read DATA
DATA=`echo $DATA | tr -cd 'A-Za-z0-9\._:%\-\n-+' | sed 's/ /-/g'`

#echo -e "the data is $DATA""<br>"

if [ $DATA'null' = null ]
then
echo `date`: ssl_certs_commercial_install - no data >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
REMOTE_USER=`echo "$DATA" | cut -s -d: -f1`
REMOTE_ADDR=`echo "$DATA" | cut -s -d: -f2`
REMOTE_MD5=`echo "$DATA" | cut -s -d: -f3`
SERVER=`echo "$DATA" | cut -s -d: -f4`
CERTTYPE=`echo "$DATA" | cut -s -d: -f5`
CACERT=`echo "$DATA" | cut -s -d: -f6 | sed 's/%0D%0A/\n/g' | sed 's/%2F/\//g' | sed 's/+/ /g' | sed 's/%2B/+/g' | sed 's/%3D/=/g'`
SSLCERT=`echo "$DATA" | cut -s -d: -f7 | sed 's/%0D%0A/\n/g' | sed 's/%2F/\//g' | sed 's/+/ /g' | sed 's/%2B/+/g' | sed 's/%3D/=/g'`

########################
#Check data
########################
if [ $REMOTE_MD5'check' != $MD5SUM'check' ]
then
echo `date`: ssl_certs_commercial_install - Not called by ssl_certs_commercial_install.cgi >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
if [ $REMOTE_USER'null' = null ]
then
echo `date`: ssl_certs_commercial_install - Blank remote user >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
if [ $REMOTE_ADDR'null' = null ]
then
echo `date`: ssl_certs_commercial_install - Blank remote tcpip address >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
if [ "$SERVER"'null' = null ]
then
echo `date`: ssl_certs_commercial_install - Blank server by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
if [ "$CERTTYPE"'null' = null ]
then
echo `date`: ssl_certs_commercial_install - Blank cert type by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
if [ "$CACERT"'null' = null ]
then
echo `date`: ssl_certs_commercial_install - Blank cacert by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
if [ "$SSLCERT"'null' = null ]
then
echo `date`: ssl_certs_commercial_install - Blank sslcert by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi


if [ `grep -c ^$REMOTE_USER: /opt/karoshi/web_controls/web_access_admin` != 1 ]
then
echo `date`: ssl_certs_commercial_install - access denied to $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi

echo `date`: ssl_certs_commercial_install "for" $SERVER by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE

#Set permissions

chmod 0750 /opt/karoshi/server_network/ssl
chown root.apache_karoshi /opt/karoshi/server_network/ssl

if [ ! -d /opt/karoshi/server_network/ssl/commercial_ssl_store ]
then
mkdir -p /opt/karoshi/server_network/ssl/commercial_ssl_store
chmod 0700 /opt/karoshi/server_network/ssl/commercial_ssl_store
chown root.apache_karoshi /opt/karoshi/server_network/ssl/commercial_ssl_store
fi

if [ ! -d /opt/karoshi/server_network/ssl/commercial_ssl_store/$SERVER ]
then
mkdir -p /opt/karoshi/server_network/ssl/commercial_ssl_store/$SERVER
chmod 0700 /opt/karoshi/server_network/ssl/commercial_ssl_store/$SERVER
chown root.apache_karoshi /opt/karoshi/server_network/ssl/commercial_ssl_store/$SERVER
fi

if [ $CERTTYPE = intcert ]
then
INT_CERT=intermediate.crt
else
INT_CERT=server-ca.crt
fi

#Delete existing certificates
[ -f /opt/karoshi/server_network/ssl/commercial_ssl_store/$SERVER/$INT_CERT ] && rm -f /opt/karoshi/server_network/ssl/commercial_ssl_store/$SERVER/$INT_CERT
[ -f /opt/karoshi/server_network/ssl/commercial_ssl_store/$SERVER/public.crt ] && rm -f /opt/karoshi/server_network/ssl/commercial_ssl_store/$SERVER/public.crt

#Write intermediate crt or bundle.crt
touch /opt/karoshi/server_network/ssl/commercial_ssl_store/$SERVER/$INT_CERT
chmod 0600 /opt/karoshi/server_network/ssl/commercial_ssl_store/$SERVER/$INT_CERT
echo -e "$CACERT" > /opt/karoshi/server_network/ssl/commercial_ssl_store/$SERVER/$INT_CERT

#Write SSl Certificate
touch /opt/karoshi/server_network/ssl/commercial_ssl_store/$SERVER/public.crt
chmod 0600 /opt/karoshi/server_network/ssl/commercial_ssl_store/$SERVER/public.crt
echo -e "$SSLCERT" > /opt/karoshi/server_network/ssl/commercial_ssl_store/$SERVER/public.crt

source /opt/karoshi/serversetup/variables/distro
source /opt/karoshi/serversetup/distro/$DISTROCHOICE/all/software

#Check to see which web server should be running
STARTCOMMAND=apache_start
STOPCOMMAND=apache_stop
SERVERTYPE=apache
if [ -f /opt/karoshi/server_network/reverseproxyserver ]
then
if [ `sed -n 1,1p /opt/karoshi/server_network/reverseproxyserver` = $SERVER ]
then
STARTCOMMAND=nginx_start
STOPCOMMAND=nginx_stop
SERVERTYPE=nginx
fi
fi

#Copy certificates to the server and restart apache

source /opt/karoshi/serversetup/variables/distro
source /opt/karoshi/serversetup/distro/$DISTROCHOICE/all/software

if [ $SERVER = `hostname-fqdn` ]
then
#SSLCertificateKeyFile /usr/local/ssl/private/private.key
cp -f /opt/karoshi/server_network/ssl/commercial_ssl_store/$SERVER/server_no_passphrase.key /etc/ssl/apache/server.key
chmod 0600 /etc/ssl/apache/server.key

#Intermediate crt
cp -f /opt/karoshi/server_network/ssl/commercial_ssl_store/$SERVER/$INT_CERT /etc/ssl/apache/
chmod 0600 /etc/ssl/apache/intermediate.crt
#Copy SSLCertificateFile to server.crt
cp -f /opt/karoshi/server_network/ssl/commercial_ssl_store/$SERVER/public.crt /etc/ssl/apache/server.crt
chmod 0600 /etc/ssl/apache/server.crt
#Set intermediate.crt in apache configuration file

if [ $SERVERTYPE = apache ] && [ $CERTTYPE = intcert ]
then
cp -f /opt/karoshi/serversetup/distro/$DISTROCHOICE/all/configfiles/apache/default-ssl-commercial /etc/apache2/sites-enabled/default-ssl
fi

if [ $SERVERTYPE = apache ] && [ $CERTTYPE = bundle ]
then
cp -f /opt/karoshi/serversetup/distro/$DISTROCHOICE/all/configfiles/apache/default-ssl-commercial-bundle /etc/apache2/sites-enabled/default-ssl
fi

if [ $SERVERTYPE = nginx ] && [ $CERTTYPE = intcert ]
then
cat /etc/ssl/apache/intermediate.crt >> /etc/ssl/apache/server.crt
fi

if [ $SERVERTYPE = nginx ] && [ $CERTTYPE = bundle ]
then
cat /etc/ssl/apache/server-ca.crt >> /etc/ssl/apache/server.crt
fi

#Restart web server
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/$STOPCOMMAND
sleep 1
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/$STARTCOMMAND
else
scp /opt/karoshi/server_network/ssl/commercial_ssl_store/$SERVER/server_no_passphrase.key root@$SERVER:"/etc/ssl/apache/server.key"
scp /opt/karoshi/server_network/ssl/commercial_ssl_store/$SERVER/$INT_CERT root@$SERVER:"/etc/ssl/apache/"
scp /opt/karoshi/server_network/ssl/commercial_ssl_store/$SERVER/public.crt root@$SERVER:"/etc/ssl/apache/server.crt"
ssh -x -o PasswordAuthentication=no $SERVER '
source /opt/karoshi/serversetup/variables/distro
chmod 0600 /etc/ssl/apache/server.key
chmod 0600 /etc/ssl/apache/intermediate.crt
chmod 0600 /etc/ssl/apache/server.crt

#Set intermediate.crt in apache configuration file
if [ '$SERVERTYPE' = apache ] && [ '$CERTTYPE' = intcert ]
then
cp -f /opt/karoshi/serversetup/distro/$DISTROCHOICE/all/configfiles/apache/default-ssl-commercial /etc/apache2/sites-enabled/default-ssl
fi

if [ '$SERVERTYPE' = apache ] && [ '$CERTTYPE' = bundle ]
then
cp -f /opt/karoshi/serversetup/distro/$DISTROCHOICE/all/configfiles/apache/default-ssl-commercial-bundle /etc/apache2/sites-enabled/default-ssl
fi

if [ '$SERVERTYPE' = nginx ] && [ '$CERTTYPE' = intcert ]
then
cat /etc/ssl/apache/intermediate.crt >> /etc/ssl/apache/server.crt
fi

if [ '$SERVERTYPE' = nginx ] && [ '$CERTTYPE' = bundle ]
then
cat /etc/ssl/apache/server-ca.crt >> /etc/ssl/apache/server.crt
fi

#Restart webserver
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/'$STOPCOMMAND'
sleep 1
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/'$STARTCOMMAND'
'
fi

exit

