#!/bin/bash
#Copyright (C) 2007 Paul Sharrad

#This file is part of Karoshi Server.
#
#Karoshi Server is free software: you can redistribute it and/or modify
#it under the terms of the GNU Affero General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#Karoshi Server is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU Affero General Public License for more details.
#
#You should have received a copy of the GNU Affero General Public License
#along with Karoshi Server.  If not, see <http://www.gnu.org/licenses/>.

#
#The Karoshi Team can be contacted at: 
#mpsharrad@karoshi.org.uk
#jsharrad@karoshi.org.uk

#
#Website: http://www.karoshi.org.uk
LOG_DATE=$(date +%F)
[ -z "$LOG_DATE" ] && exit

########################
#Check md5checksum
########################
if ! test -f /opt/karoshi/web_controls/checksums/admin_checksums/update_karoshi_cgi
then
	echo "$(date): update_karoshi - No Checksum" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi
source /opt/karoshi/web_controls/checksums/admin_checksums/update_karoshi_cgi
Checksum=$(sha256sum /var/www/cgi-bin_karoshi/admin/update_karoshi.cgi | cut -d' ' -f1)
[ -z "$Checksum" ] && Checksum=not_set1
if [ "$Checksum"'check' != "$update_karoshi_cgi"'check' ]
then
	echo "$(date): update_karoshi - Incorrect Checksum" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi
########################
#Get variables
########################
numArgs=$#
if [ "$numArgs" != 1 ]
then
	echo "$(date): update_karoshi - incorrect number of arguments" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi
REMOTE_USER=$(echo "$*" | tr -cd 'A-Za-z0-9\._:\-' | cut -s -d: -f1)
REMOTE_ADDR=$(echo "$*" | tr -cd 'A-Za-z0-9\._:\-' | cut -s -d: -f2)
RemoteCheckSum=$(echo "$*" | tr -cd 'A-Za-z0-9\._:\-' | cut -s -d: -f3)
PATCHNAME=$(echo "$*" | tr -cd 'A-Za-z0-9\._:\-' | cut -s -d: -f4)
MOBILE=$(echo "$*" | tr -cd 'A-Za-z0-9\._:\-' | cut -s -d: -f5)
########################
#Check data
########################
if [ "$RemoteCheckSum"'check' != "$Checksum"'check' ]
then
	echo "$(date): update_karoshi - Not called by update_karoshi.cgi" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi
if [ -z "$REMOTE_USER" ]
then
	echo "$(date): update_karoshi - Blank remote user" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi
if [ -z "$REMOTE_ADDR" ]
then
	echo "$(date): update_karoshi - Blank remote tcpip address" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi

if [[ $(grep -c ^"$REMOTE_USER": /opt/karoshi/web_controls/web_access_admin) != 1 ]]
then
	echo "$(date): update_karoshi - access denied to $REMOTE_USER from $REMOTE_ADDR" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi

if [ -z "$PATCHNAME" ]
then
	echo "$(date): update_karoshi - Blank patchname by $REMOTE_USER from $REMOTE_ADDR" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi

#Check that there is an updatelist
if [ ! -f /opt/karoshi/updates/updatelist ]
then
	echo "$(date): update_karoshi - /opt/karoshi/updates/updatelist does not exist for $REMOTE_USER from $REMOTE_ADDR" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi

#Check that there is an update source
if [ ! -f /opt/karoshi/serversetup/variables/updatesource ]
then
	echo "$(date): update_karoshi - No update source has been set for $REMOTE_USER from $REMOTE_ADDR" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
	exit 101
fi

source /opt/karoshi/serversetup/variables/version
source /opt/karoshi/serversetup/variables/updatesource

############################
#Language
############################

export TEXTDOMAIN=karoshi-server


##########################
#Apply Patch
##########################
function apply_patch {
echo "$(date): update_karoshi - Applying $PATCHNAME by $REMOTE_USER from $REMOTE_ADDR" >> "/opt/karoshi/logs/karoshi_web_management/$LOG_DATE"
echo '<b>'$"Applying update"' - '"$PATCHNAME"'</b><br>'
echo '<pre style="font-size: 10pt; font-family:Arial, Times, Georgia, serif">'
chmod 0700 /opt/karoshi/updates/"$PATCHNAME".sh
/opt/karoshi/updates/"$PATCHNAME".sh
echo '</pre>'
######################
#Add this patchname to the completed jobs list
######################
[ ! -d /opt/karoshi/logs/karoshi_updates ] && mkdir -p /opt/karoshi/logs/karoshi_updates
echo '<tr><td>'"$PATCHNAME"'</td><td>'"$KAROSHISERVER"'</td><td>'"$(date)"'</td></tr>' >> /opt/karoshi/logs/karoshi_updates/"$PATCHNAME"
#Delete warning message
/opt/karoshi/serversetup/web_controls/scripts/web_management_warn delete karoshi_updates
}

###########################
#Download patch
###########################
function download_patch {
if [ ! -d /opt/karoshi/updates/ ]
then
	mkdir -p /opt/karoshi/updates/
	chmod 0700 /opt/karoshi/updates/
fi
#Delete patch if it already exists
[ -f /opt/karoshi/updates/"$PATCHNAME".sh ] && rm -f /opt/karoshi/updates/"$PATCHNAME".sh
[ -f /opt/karoshi/updates/"$PATCHNAME".txt ] && rm -f /opt/karoshi/updates/"$PATCHNAME".txt
cd /opt/karoshi/updates/
echo '<b>'$"Downloading update"'</b>'
echo '<pre style="font-size: 10pt; font-family:Arial, Times, Georgia, serif">'
wget --no-cache --progress=dot:mega --read-timeout=5 --connect-timeout=5 "$UPDATESOURCE/$VERSION/$PATCHNAME.sh" 2>&1
wget --no-cache --progress=dot:mega --read-timeout=5 --connect-timeout=5 "$UPDATESOURCE/$VERSION/$PATCHNAME.sh.sig" 2>&1
wget --no-cache --read-timeout=5 --connect-timeout=5 "$UPDATESOURCE/$VERSION/$PATCHNAME.txt" 2>&1
echo '</pre>'
cd /
}


###########################
#Check Data
###########################
function check_data {

if [ -z "$ListChecksum" ]
then
	echo $"The MD5 data is not set."'<br>'
	exit
else
	echo "MD5: $ListChecksum<br>"
fi
if [ -z "$SERVERARRAY" ]
then
	echo $"The server data is not set."'<br>'
	exit
else
	echo "Servers: ${SERVERARRAY[@]:0}<br>"
fi
if [ -z "$DESCRIPTION" ]
then
	echo $"The description data is not set."'<br>'
	exit
else
	echo "$DESCRIPTION<br><br>"
fi
#Download patch
download_patch

#Check that files have downloaded
if [ ! -f /opt/karoshi/updates/"$PATCHNAME.txt" ] || [ ! -f /opt/karoshi/updates/"$PATCHNAME.sh" ]
then
	echo $"The patch file did not have a .sh file extension."'<br>'
	return
fi

#Check md5 sum
PatchChecksumTxt=$(sed -n 1,1p /opt/karoshi/updates/"$PATCHNAME.txt" | tr -cd 'A-Za-z0-9\._:\-')

#All newer patches use sha256 instead of md5sum so we get the date from the patch name to see which type to use.
#Patch name convention is karoshi-web-controls-YYMMDD-hhmm.sh 
if [[ $(echo "$PATCHNAME" | cut -d"-" -f4) -gt 180320 ]]
then
	PatchChecksumFile=$(sha256sum /opt/karoshi/updates/"$PATCHNAME.sh" | cut -d' ' -f1)
else
	PatchChecksumFile=$(md5sum /opt/karoshi/updates/"$PATCHNAME.sh" | cut -d' ' -f1)
fi

[ -z "$PatchChecksumTxt" ] && PatchChecksumTxt=txtsumnotset
if [ "$PatchChecksumTxt" != "$ListChecksum" ] || [ "$PatchChecksumFile" != "$ListChecksum" ]
then
	echo $"Incorrect checksum for this patch."'<br>'
	exit
fi

#Check key sign
if [ ! -f /opt/karoshi/updates/"$PATCHNAME.sh.sig" ]
then
	echo $"There is no signature file for this patch."'<br>'
	exit
fi

gpg /opt/karoshi/updates/"$PATCHNAME.sh.sig"
GPGSTATUS="$?"
if [ "$GPGSTATUS" != 0 ]
then
	echo $"The patch file did not verify correctly."'<br>'
	exit
fi

apply_patch
}

############################
#Proccess patch
############################

ListChecksum=notset

echo "<b>"$"Processing update"" - $PATCHNAME</b><br><br>"

[ "$MOBILE" = no ] && echo '</div><div id="infobox">'
#Get information on patch
PATCHDATALINE=$(grep -n ^"$PATCHNAME" /opt/karoshi/updates/updatelist | cut -d: -f1)
if [ ! -z "$PATCHDATALINE" ]
then
	ListChecksum=$(sed -n "$PATCHDATALINE,$PATCHDATALINE"'p' /opt/karoshi/updates/updatelist | cut -f2)
	SERVERARRAY=( $(sed -n "$PATCHDATALINE,$PATCHDATALINE"'p' /opt/karoshi/updates/updatelist | cut -f3 | sed 's/,/ /g') )
	DESCRIPTION=$(sed -n "$PATCHDATALINE,$PATCHDATALINE"'p' /opt/karoshi/updates/updatelist | cut -f4)
	check_data
else
	echo $"The update type must not be blank."
fi

#Update html list
/opt/karoshi/web_controls/exec/update_karoshi_create_list
exit

