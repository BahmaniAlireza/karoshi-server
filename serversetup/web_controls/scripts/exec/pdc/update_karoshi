#!/bin/bash
#Copyright (C) 2007 Paul Sharrad

#This file is part of Karoshi Server.
#
#Karoshi Server is free software: you can redistribute it and/or modify
#it under the terms of the GNU Affero General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#Karoshi Server is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU Affero General Public License for more details.
#
#You should have received a copy of the GNU Affero General Public License
#along with Karoshi Server.  If not, see <http://www.gnu.org/licenses/>.

#
#The Karoshi Team can be contacted at: 
#mpsharrad@karoshi.org.uk
#jharris@karoshi.org.uk
#aball@karoshi.org.uk
#
#Website: http://www.karoshi.org.uk
LOG_DATE=`date +%F`
[ $LOG_DATE'null' = null ] && exit

########################
#Check md5checksum
########################
if ! test -f /opt/karoshi/web_controls/checksums/admin_checksums/update_karoshi_cgi
then
echo `date`: update_karoshi - No MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
source /opt/karoshi/web_controls/checksums/admin_checksums/update_karoshi_cgi
MD5SUM=`md5sum /var/www/cgi-bin_karoshi/admin/update_karoshi.cgi | cut -d' ' -f1`
[ $MD5SUM'null' = null ] && MD5SUM=not_set1
if [ $MD5SUM'check' != $update_karoshi_cgi'check' ]
then
echo `date`: update_karoshi - Incorrect MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
########################
#Get variables
########################
numArgs=$#
if [ $numArgs != 1 ]
then
echo `date`: update_karoshi - incorrect number of arguments >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
REMOTE_USER=`echo $* | cut -s -d: -f1`
REMOTE_ADDR=`echo $* | cut -s -d: -f2`
REMOTE_MD5=`echo $* | cut -s -d: -f3`
PATCHNAME=`echo $* | cut -s -d: -f4`
MOBILE=`echo $* | cut -s -d: -f5`
########################
#Check data
########################
if [ $REMOTE_MD5'check' != $MD5SUM'check' ]
then
echo `date`: update_karoshi - Not called by update_karoshi.cgi >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
if [ $REMOTE_USER'null' = null ]
then
echo `date`: update_karoshi - Blank remote user >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
if [ $REMOTE_ADDR'null' = null ]
then
echo `date`: update_karoshi - Blank remote tcpip address >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi

if [ `grep -c ^$REMOTE_USER: /opt/karoshi/web_controls/web_access_admin` != 1 ]
then
echo `date`: update_karoshi - access denied to $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi

if [ $PATCHNAME'null' = null ]
then
echo `date`: update_karoshi - Blank patchname by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi

#Check that there is an updatelist
if [ ! -f /opt/karoshi/updates/updatelist ]
then
echo `date`: update_karoshi - /opt/karoshi/updates/updatelist does not exist "for" $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi

#Check that there is an update source
if [ ! -f /opt/karoshi/serversetup/variables/updatesource ]
then
echo `date`: update_karoshi - No update source has been set "for" $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi

source /opt/karoshi/serversetup/variables/version
source /opt/karoshi/serversetup/variables/updatesource

############################
#Language
############################
LANGCHOICE=englishuk
STYLESHEET=defaultstyle.css
[ -f /opt/karoshi/web_controls/user_prefs/$REMOTE_USER ] && source /opt/karoshi/web_controls/user_prefs/$REMOTE_USER
[ -f /opt/karoshi/web_controls/language/$LANGCHOICE/system/update_karoshi ] || LANGCHOICE=englishuk
source /opt/karoshi/web_controls/language/$LANGCHOICE/system/update_karoshi
[ -f /opt/karoshi/web_controls/language/$LANGCHOICE/all ] || LANGCHOICE=englishuk
source /opt/karoshi/web_controls/language/$LANGCHOICE/all

##########################
#Apply Patch
##########################
function apply_patch {
echo `date`: update_karoshi - Applying $PATCHNAME by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
echo '<b>'$APPLYINGMSG - $PATCHNAME'</b><br>'
echo '<pre style="font-size: 10pt; font-family:Arial, Times, Georgia, serif">'
chmod 0700 /opt/karoshi/updates/$PATCHNAME.sh
/opt/karoshi/updates/$PATCHNAME.sh
echo '</pre>'
######################
#Add this patchname to the completed jobs list
######################
[ ! -d /opt/karoshi/logs/karoshi_updates ] && mkdir -p /opt/karoshi/logs/karoshi_updates
echo '<tr><td>'$PATCHNAME'<\td><td>'$KAROSHISERVER'<\td><td>'`date`'</td></tr>' >> /opt/karoshi/logs/karoshi_updates/$PATCHNAME
#Delete warning message
/opt/karoshi/serversetup/web_controls/scripts/web_management_warn delete karoshi_updates
}

###########################
#Download patch
###########################
function download_patch {
if [ ! -d /opt/karoshi/updates/ ]
then
mkdir -p /opt/karoshi/updates/
chmod 0700 /opt/karoshi/updates/
fi
#Delete patch if it already exists
[ -f /opt/karoshi/updates/$PATCHNAME.sh ] && rm -f /opt/karoshi/updates/$PATCHNAME.sh
[ -f /opt/karoshi/updates/$PATCHNAME.txt ] && rm -f /opt/karoshi/updates/$PATCHNAME.txt
cd /opt/karoshi/updates/
echo '<b>'$DOWNLOADMSG2'</b>'
echo '<pre style="font-size: 10pt; font-family:Arial, Times, Georgia, serif">'
wget --no-cache --progress=dot:mega --read-timeout=5 --connect-timeout=5 $UPDATESOURCE/$VERSION/$PATCHNAME.sh 2>&1
wget --no-cache --progress=dot:mega --read-timeout=5 --connect-timeout=5 $UPDATESOURCE/$VERSION/$PATCHNAME.sh.sig 2>&1
wget --no-cache --read-timeout=5 --connect-timeout=5 $UPDATESOURCE/$VERSION/$PATCHNAME.txt 2>&1
echo '</pre>'
cd /
}


###########################
#Check Data
###########################
function check_data {

if [ `echo $MD5SUM'null' | sed 's/ //g'` = null ]
then
echo $BLANKMD5'<br>'
break
else
echo MD5: $MD5SUM'<br>'
fi
if [ `echo $SERVERARRAY'null' | sed 's/ //g'` = null ]
then
echo $BLANKSERVER'<br>'
break
else
echo Servers: ${SERVERARRAY[@]:0}'<br>'
fi
if [ `echo $DESCRIPTION'null' | sed 's/ //g'` = null ]
then
echo $BLANKDESC'<br>'
break
else
echo $DESCRIPTION'<br><br>'
fi
#Download patch
download_patch

#Check that files have downloaded
if [ ! -f /opt/karoshi/updates/$PATCHNAME.txt ] || [ ! -f /opt/karoshi/updates/$PATCHNAME.sh ]
then
echo $ERRORMSG7'<br>'
break
fi

#Check md5 sum
MD5SUMTXT=`sed -n 1,1p /opt/karoshi/updates/$PATCHNAME.txt | tr -cd 'A-Za-z0-9\._:\-'`
MD5SUMFILE=`md5sum /opt/karoshi/updates/$PATCHNAME.sh | cut -d' ' -f1`
[ $MD5SUMTXT'null' = null ] && MD5SUMTXT=txtsumnotset
if [ $MD5SUMTXT != $MD5SUM ] || [ $MD5SUMFILE != $MD5SUM ]
then
echo $MD5ERROR'<br>'
break
fi

#Check key sign
if [ ! -f /opt/karoshi/updates/"$PATCHNAME.sh.sig" ]
then
echo $ERRORMSG10'<br>'
break
fi

gpg /opt/karoshi/updates/"$PATCHNAME.sh.sig"
GPGSTATUS=`echo $?`
if [ $GPGSTATUS != 0 ]
then
echo $ERRORMSG9'<br>'
break
fi

apply_patch
}

############################
#Proccess patch
############################

MD5SUM=notset


echo \<b\>$PROCESINGMSG - $PATCHNAME\</b\>\<br\>\<br\>

[ $MOBILE = no ] && echo '</div><div id="infobox">'
#Get information on patch
PATCHDATALINE=`grep -n ^$PATCHNAME /opt/karoshi/updates/updatelist | cut -d: -f1`
if [ $PATCHDATALINE'null' != null ]
then
MD5SUM=`sed -n $PATCHDATALINE,$PATCHDATALINE'p' /opt/karoshi/updates/updatelist | cut -f2`
SERVERARRAY=( `sed -n $PATCHDATALINE,$PATCHDATALINE'p' /opt/karoshi/updates/updatelist | cut -f3 | sed 's/,/ /g'` )
DESCRIPTION=`sed -n $PATCHDATALINE,$PATCHDATALINE'p' /opt/karoshi/updates/updatelist | cut -f4`
check_data
else
echo $ERRORMSG6
fi

#Update html list
/opt/karoshi/web_controls/exec/update_karoshi_create_list
exit
