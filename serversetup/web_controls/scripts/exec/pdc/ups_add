#!/bin/bash
#Copyright (C) 2010 Paul Sharrad

#This file is part of Karoshi Server.
#
#Karoshi Server is free software: you can redistribute it and/or modify
#it under the terms of the GNU Affero General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#Karoshi Server is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU Affero General Public License for more details.
#
#You should have received a copy of the GNU Affero General Public License
#along with Karoshi Server.  If not, see <http://www.gnu.org/licenses/>.

#
#The Karoshi Team can be contacted at: 
#mpsharrad@karoshi.org.uk
#jsharrad@karoshi.org.uk

#
#Website: http://www.karoshi.org.uk
LOG_DATE=`date +%F`
########################
#Check md5checksum
########################
if ! test -f /opt/karoshi/web_controls/checksums/admin_checksums/ups_add_cgi
then
	echo `date`: ups_add - No admin Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
source /opt/karoshi/web_controls/checksums/admin_checksums/ups_add_cgi
Checksum=`sha256sum /var/www/cgi-bin_karoshi/admin/ups_add.cgi | cut -d' ' -f1`
[ -z "$Checksum" ] && Checksum=not_set
if [ $Checksum'check' != $ups_add_cgi'check' ]
then
	echo `date`: ups_add - Incorrect admin Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi

########################
#Get variables
########################
numArgs=$#
if [ $numArgs != 0 ]
then
	echo `date`: ups_add - incorrect number of arguments >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi

read DATA
DATA=`echo $DATA | tr -cd 'A-Za-z0-9\._:%\-+'`
if [ -z "$DATA" ]
then
	echo `date`: ups_add - no data >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
REMOTE_USER=`echo "$DATA" | cut -s -d: -f1`
REMOTE_ADDR=`echo "$DATA" | cut -s -d: -f2`
RemoteCheckSum=`echo "$DATA" | cut -s -d: -f3`
UPSDATA=`echo "$DATA" | cut -s -d: -f4 | sed 's/%2C/,/g'`
UPSMODEL=`echo $UPSDATA | cut -d, -f1 | sed 's/%2F/-/g'`
UPSDRIVER=`echo $UPSDATA | cut -d, -f2`
UPSPORT=`echo "$DATA" | cut -s -d: -f5`
SERVER=`echo "$DATA" | cut -s -d: -f6`

SERVERTPCIP=`net lookup $SERVER`

########################
#Check data
########################
if [ $RemoteCheckSum'check' != $Checksum'check' ] && [ $RemoteCheckSum'check' != $Checksum2'check' ]
then
	echo `date`: ups_add - Not called by ups_add.cgi >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ -z "$REMOTE_USER" ]
then
	echo `date`: ups_add - Blank remote user >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ -z "$REMOTE_ADDR" ]
then
	echo `date`: ups_add - Blank remote tcpip address >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ -z "$UPSMODEL" ]
then
	echo `date`: ups_add - Blank model by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ -z "$UPSDRIVER" ]
then
	echo `date`: ups_add - Blank driver by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ -z "$UPSPORT" ]
then
	echo `date`: ups_add - Blank port by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ -z "$SERVER" ]
then
	echo `date`: ups_add - Blank server by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi

if [ `grep -c ^$REMOTE_USER: /opt/karoshi/web_controls/web_access_admin` != 1 ]
then
	echo `date`: ups_add - access denied to $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi

UPSDRIVER=`echo $UPSDRIVER | sed 's/+/ /g'`
UPSMODEL=`echo $UPSMODEL | sed 's/+/-/g'`

#echo upsdriver is $UPSDRIVER"<br>"
#echo upsmodel is $UPSMODEL"<br>"
#echo upsport is $UPSPORT"<br>"
#echo server is $SERVER"<br>"

echo `date`: ups_add - adding $UPSMODEL port $UPSPORT on $SERVER by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE

source /opt/karoshi/serversetup/variables/distro
source /opt/karoshi/serversetup/distro/$DISTROCHOICE/all/software

if [ ! -d /opt/karoshi/server_network/ups/master/$SERVER/drivers ]
then
	mkdir -p /opt/karoshi/server_network/ups/master/$SERVER/drivers
	chmod 0550 /opt/karoshi/server_network/ups/master/$SERVER
	chown root.apache_karoshi /opt/karoshi/server_network/ups/master/$SERVER
	chmod 0550 /opt/karoshi/server_network/ups/master/$SERVER/drivers
	chown root.apache_karoshi /opt/karoshi/server_network/ups/master/$SERVER/drivers
fi

########################
#Check to see if upsmodel already exists
########################
COUNTER=1
while [ $COUNTER -lt 100 ]
do
	if [ -f /opt/karoshi/server_network/ups/master/$SERVER/drivers/"$UPSMODEL" ]
	then
		UPSMODEL=`echo "$UPSMODEL"-$COUNTER`
		let COUNTER=$COUNTER+1
	else
		COUNTER=100
	fi
done
########################
#Create config file
########################
echo "[""$UPSMODEL""]" > /opt/karoshi/server_network/ups/master/$SERVER/drivers/"$UPSMODEL"
echo '   'driver = "$UPSDRIVER" >> /opt/karoshi/server_network/ups/master/$SERVER/drivers/"$UPSMODEL"
echo '   'port = "$UPSPORT" >> /opt/karoshi/server_network/ups/master/$SERVER/drivers/"$UPSMODEL"
echo >> /opt/karoshi/server_network/ups/master/$SERVER/drivers/"$UPSMODEL"
########################
#Build config file
########################
cat /opt/karoshi/server_network/ups/master/$SERVER/drivers/* > /opt/karoshi/server_network/ups/master/$SERVER/ups.conf
if [ $SERVER = `hostname-fqdn` ]
then
	cp -f /opt/karoshi/server_network/ups/master/$SERVER/ups.conf /etc/nut/
else
	scp /opt/karoshi/server_network/ups/master/$SERVER/ups.conf root@$SERVER:"/etc/nut/"
fi
########################
#Enable udev to use a serial port
########################
UPSPORT2=`echo $UPSPORT | sed 's/\/dev\///g'`
if [ $UPSPORT != auto ]
then
	if [ $SERVER = `hostname-fqdn` ]
	then
		echo "#"/etc/udev/rules.d/99_nut-serialups.rules > /etc/udev/rules.d/99_nut-serialups.rules
		echo 'KERNEL=="'$UPSPORT2'", GROUP="nut"' >> /etc/udev/rules.d/99_nut-serialups.rules
		udevadm control --reload_rules
		udevadm control trigger
	else
		ssh -x -o PasswordAuthentication=no $SERVER '
		echo "#"/etc/udev/rules.d/99_nut-serialups.rules > /etc/udev/rules.d/99_nut-serialups.rules
		echo KERNEL==\"'$UPSPORT2'\", GROUP=\"nut\" >> /etc/udev/rules.d/99_nut-serialups.rules
		udevadm control --reload_rules
		udevadm control trigger
	'
	fi
fi
########################
#Make sure server can see the ups returns 1 on fault so add error check
########################
echo '<pre style="font-size: 10pt; font-family:Arial, Times, Georgia, serif">'
if [ $SERVER = `hostname-fqdn` ]
then
	#Make sure run directory exists
	if [ ! -d /var/run/nut ]
	then
		mkdir /var/run/nut
		chown root.nut /var/run/nut
		chmod 0770 /var/run/nut
	fi
	upsdrvctl start
	UPSSTATUS=$?
	[ $UPSSTATUS != 0 ] && exit 105
	sleep 1
	upsdrvctl stop
else
	ssh -x -o PasswordAuthentication=no $SERVER '
	#Make sure run directory exists
	if [ ! -d /var/run/nut ]
	then
		mkdir /var/run/nut
		chown root.nut /var/run/nut
		chmod 0770 /var/run/nut
	fi
	upsdrvctl start
	UPSSTATUS=$?
	[ $UPSSTATUS != 0 ] && exit 105
	sleep 1
	upsdrvctl stop
	'
	UPSSTATUS=$?
	[ $UPSSTATUS != 0 ] && exit 105
fi
echo "</pre>"


########################
#Create /etc/nut/upsd.conf
########################
if [ $SERVER = `hostname-fqdn` ]
then
	echo LISTEN 127.0.0.1 3493 > /etc/nut/upsd.conf
	echo LISTEN $SERVERTPCIP 3493 >> /etc/nut/upsd.conf
	chmod 0640 /etc/nut/upsd.conf
	chown root.nut /etc/nut/upsd.conf
else
	ssh -x -o PasswordAuthentication=no $SERVER '
	echo LISTEN 127.0.0.1 3493 > /etc/nut/upsd.conf
	echo LISTEN '$SERVERTPCIP' 3493 >> /etc/nut/upsd.conf
	chmod 0640 /etc/nut/upsd.conf
	chown root.nut /etc/nut/upsd.conf
	'
fi


########################
#Create upsd.users
########################

RANDOMPASSWORD=`openssl rand -hex 16`

if [ ! -d /opt/karoshi/server_network/ups/master/$SERVER/users ]
then
	mkdir -p /opt/karoshi/server_network/ups/master/$SERVER/users
	chmod 0700 /opt/karoshi/server_network/ups/master/$SERVER/users
	echo "[local_mon]" > /opt/karoshi/server_network/ups/master/$SERVER/users/local_mon
	echo '   'password = $RANDOMPASSWORD >> /opt/karoshi/server_network/ups/master/$SERVER/users/local_mon
	#echo '   'allowfrom = localhost >> /opt/karoshi/server_network/ups/master/$SERVER/users/local_mon
	echo '   'upsmon master >> /opt/karoshi/server_network/ups/master/$SERVER/users/local_mon
	echo >> /opt/karoshi/server_network/ups/master/$SERVER/users/local_mon
fi

touch /opt/karoshi/server_network/ups/master/$SERVER/upsd.users
chmod 0600 /opt/karoshi/server_network/ups/master/$SERVER/upsd.users
cat /opt/karoshi/server_network/ups/master/$SERVER/users/* > /opt/karoshi/server_network/ups/master/$SERVER/upsd.users

if [ $SERVER = `hostname-fqdn` ]
then
	touch /etc/nut/upsd.users
	chmod 0600 /etc/nut/upsd.users
	cp -f /opt/karoshi/server_network/ups/master/$SERVER/upsd.users /etc/nut/
else
	ssh -x -o PasswordAuthentication=no $SERVER '
	touch /etc/nut/upsd.users
	chmod 0600 /etc/nut/upsd.users
	'
	scp /opt/karoshi/server_network/ups/master/$SERVER/upsd.users root@$SERVER:"/etc/nut/"
fi

########################
# /etc/nut/upsmon.conf
########################

if [ $SERVER = `hostname-fqdn` ]
then
	echo "MONITOR "$UPSMODEL"@$SERVERTPCIP 1 local_mon $RANDOMPASSWORD master" > /etc/nut/upsmon.conf
	echo "POWERDOWNFLAG /etc/killpower" >> /etc/nut/upsmon.conf
	echo SHUTDOWNCMD \"/sbin/shutdown -h now\" >> /etc/nut/upsmon.conf
else
	ssh -x -o PasswordAuthentication=no $SERVER '
	echo "MONITOR "'$UPSMODEL'"@'$SERVERTPCIP' 1 local_mon '$RANDOMPASSWORD' master" > /etc/nut/upsmon.conf
	echo "POWERDOWNFLAG /etc/killpower" >> /etc/nut/upsmon.conf
	echo SHUTDOWNCMD \"/sbin/shutdown -h now\" >> /etc/nut/upsmon.conf
	'
fi

########################
# /etc/default/nut/
########################
if [ $SERVER = `hostname-fqdn` ]
then
	echo MODE=netserver > /etc/nut/nut.conf
	echo START_UPSD=yes >> /etc/nut/nut.conf
	echo START_UPSMON=yes >> /etc/nut/nut.conf
else
	ssh -x -o PasswordAuthentication=no $SERVER '
	echo MODE=netserver > /etc/nut/nut.conf
	echo START_UPSD=yes >> /etc/nut/nut.conf
	echo START_UPSMON=yes >> /etc/nut/nut.conf
	'
fi

########################
# start nut
########################
if [ $SERVER = `hostname-fqdn` ]
then
	source /opt/karoshi/serversetup/variables/distroz
	/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/nut_stop 1>/dev/null
	sleep 1
	/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/nut_start 1>/dev/null
	/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/startonboot/nut 1>/dev/null
else
ssh -x -o PasswordAuthentication=no $SERVER '
	source /opt/karoshi/serversetup/variables/distro
	/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/nut_stop 1>/dev/null
	sleep 1
	/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/nut_start 1>/dev/null
	#source /opt/karoshi/serversetup/variables/distro
	/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/startonboot/nut 1>/dev/null
	' 2>> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
fi

########################
# Schedule a cron job for web management monitoring
########################
[ ! -d /opt/karoshi/server_network/cronjobs/`hostname-fqdn`/jobs ] && mkdir -p /opt/karoshi/server_network/cronjobs/`hostname-fqdn`/jobs
echo '0' '5' '*' '*' '*' /opt/karoshi/serversetup/pdc/\"useful scripts\"/ups_check > /opt/karoshi/server_network/cronjobs/`hostname-fqdn`/jobs/ups_check.cron
/opt/karoshi/serversetup/all/"useful scripts"/refreshcronjobs
echo '<br>'
exit

