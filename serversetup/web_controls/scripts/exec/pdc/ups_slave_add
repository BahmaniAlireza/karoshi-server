#!/bin/bash
#Copyright (C) 2010 Paul Sharrad

#This file is part of Karoshi Server.
#
#Karoshi Server is free software: you can redistribute it and/or modify
#it under the terms of the GNU Affero General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#Karoshi Server is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU Affero General Public License for more details.
#
#You should have received a copy of the GNU Affero General Public License
#along with Karoshi Server.  If not, see <http://www.gnu.org/licenses/>.

#
#The Karoshi Team can be contacted at: 
#mpsharrad@karoshi.org.uk
#jsharrad@karoshi.org.uk

#
#Website: http://www.karoshi.org.uk
LOG_DATE=`date +%F`
########################
#Check md5checksum
########################
if ! test -f /opt/karoshi/web_controls/checksums/admin_checksums/ups_slave_add_cgi
then
	echo `date`: ups_slave_add - No admin MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
source /opt/karoshi/web_controls/checksums/admin_checksums/ups_slave_add_cgi
Checksum=`sha256sum /var/www/cgi-bin_karoshi/admin/ups_slave_add.cgi | cut -d' ' -f1`
[ -z "$Checksum" ] && Checksum=not_set
if [ $Checksum'check' != $ups_slave_add_cgi'check' ]
then
	echo `date`: ups_slave_add - Incorrect admin MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi

########################
#Get variables
########################
numArgs=$#
if [ $numArgs != 0 ]
then
	echo `date`: ups_slave_add - incorrect number of arguments >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi

read DATA
DATA=`echo "$DATA" | tr -cd 'A-Za-z0-9\._:%\-+'`
if [ -z "$DATA" ]
then
	echo `date`: ups_slave_add - no data >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi

echo `date`: ups_slave_add - raw data is "$DATA" >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE

#Check that the net command is available
which net 1>/dev/null
if [ $? != 0 ]
then
	echo `date`: "ups_slave_add - the net command is not installed." >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
else
	echo `date`: "ups_slave_add - net command is `which net`"  >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
fi

REMOTE_USER=`echo "$DATA" | cut -s -d: -f1`
REMOTE_ADDR=`echo "$DATA" | cut -s -d: -f2`
RemoteCheckSum=`echo "$DATA" | cut -s -d: -f3`
UPSSERVER=`echo "$DATA" | cut -s -d: -f4 | sed 's/%2C/,/g'`
UPSMODEL=`echo "$UPSSERVER" | cut -d, -f2`
UPSSERVER=`echo "$UPSSERVER" | cut -d, -f1`
SERVER=`echo "$DATA" | cut -s -d: -f5`
UPSSERVERTCPIP=`net lookup "$UPSSERVER" 2>> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE`
SERVERTPCIP=`net lookup "$SERVER" 2>> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE`

########################
#Check data
########################
if [ "$RemoteCheckSum"'check' != "$Checksum"'check' ]
then
	echo `date`: ups_slave_add - Not called by ups_slave_add.cgi >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ -z "$REMOTE_USER" ]
then
	echo `date`: ups_slave_add - Blank remote user >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ -z "$REMOTE_ADDR" ]
then
	echo `date`: ups_slave_add - Blank remote tcpip address >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi

if [ -z "$UPSSERVERTCPIP" ]
then
	echo ups_slave_add - data from net lookup "$UPSSERVER" is - `net lookup "$UPSSERVER"` >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	echo `date`: ups_slave_add - Blank ups server tcpip address by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ -z "$SERVERTPCIP" ]
then
	echo ups_slave_add - data from net lookup "$SERVER" is - `net lookup "$SERVER"` >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	echo `date`: ups_slave_add - Blank server tcpip address by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ -z "$UPSSERVER" ]
then
	echo `date`: ups_slave_add - Blank ups server by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ -z "$SERVER" ]
then
	echo `date`: ups_slave_add - Blank server by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi

if [ `grep -c ^"$REMOTE_USER": /opt/karoshi/web_controls/web_access_admin` != 1 ]
then
	echo `date`: ups_slave_add - access denied to $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi

echo `date`: ups_slave_add - adding $UPSMODEL on $UPSSERVER to $SERVER by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE

[ -f /opt/karoshi/web_controls/user_prefs/$REMOTE_USER ] && source /opt/karoshi/web_controls/user_prefs/$REMOTE_USER
TEXTDOMAIN=karoshi-server

########################
#Modify master configuration upsd.users
########################

RANDOMPASSWORD=`openssl rand -hex 16`

if [ ! -d /opt/karoshi/server_network/ups/slave/$UPSSERVER/users ]
then
	mkdir -p /opt/karoshi/server_network/ups/slave/$UPSSERVER/users
	chmod 0700 /opt/karoshi/server_network/ups/slave/$UPSSERVER/users
fi

echo "[$SERVER]" > /opt/karoshi/server_network/ups/slave/$UPSSERVER/users/$SERVER
echo '   'password = $RANDOMPASSWORD >> /opt/karoshi/server_network/ups/slave/$UPSSERVER/users/$SERVER
#echo '   'allowfrom = localhost >> /opt/karoshi/server_network/ups/master/$SERVER/users/$SERVER
echo '   'upsmon slave >> /opt/karoshi/server_network/ups/slave/$UPSSERVER/users/$SERVER
echo >> /opt/karoshi/server_network/ups/slave/$UPSSERVER/users/$SERVER

touch /opt/karoshi/server_network/ups/master/$UPSSERVER/upsd.users
chmod 0600 /opt/karoshi/server_network/ups/master/$UPSSERVER/upsd.users
[ -d /opt/karoshi/server_network/ups/master/$UPSSERVER/users ] && cat /opt/karoshi/server_network/ups/master/$UPSSERVER/users/* > /opt/karoshi/server_network/ups/master/$UPSSERVER/upsd.users
[ -d /opt/karoshi/server_network/ups/slave/$UPSSERVER/users ] && cat /opt/karoshi/server_network/ups/slave/$UPSSERVER/users/* >> /opt/karoshi/server_network/ups/master/$UPSSERVER/upsd.users

if [ $UPSSERVER = `hostname-fqdn` ]
then
	touch /etc/nut/upsd.users
	chmod 0600 /etc/nut/upsd.users
	cp -f /opt/karoshi/server_network/ups/master/$UPSSERVER/upsd.users /etc/nut/
else
	ssh -x -o PasswordAuthentication=no $UPSSERVER '
	touch /etc/nut/upsd.users
	chmod 0600 /etc/nut/upsd.users
	'
	scp /opt/karoshi/server_network/ups/master/$UPSSERVER/upsd.users root@$UPSSERVER:"/etc/nut/"
fi

########################
#Modify shorewall to allow 3493 tcp
########################

if [ $UPSSERVER = `hostname-fqdn` ]
then
MODCHECK=`grep -c UPS_rule_$SERVER /etc/shorewall/rules`
RESTART_SHOREWALL=no
	if [ $MODCHECK = 0 ]
	then
		RESTART_SHOREWALL=yes
		echo ''$"The following ports need to be opened on shorewall" - tcp 3493"<br><br>"

		LINENUM=`grep -n "LAST LINE -- ADD YOUR ENTRIES BEFORE THIS ONE -- DO NOT REMOVE" /etc/shorewall/rules | cut -d: -f1`
		sed -i $LINENUM"c"\ACCEPT"	"net:$SERVERTPCIP"	"fw"	"tcp"	"3493"	"-"#"UPS_rule_$SERVER /etc/shorewall/rules
		echo "#"LAST LINE -- ADD YOUR ENTRIES BEFORE THIS ONE -- DO NOT REMOVE >> /etc/shorewall/rules
	fi
	#Restart shorewall
	if [ $RESTART_SHOREWALL = yes ]
	then
		echo '<br>'$"Restarting Shorewall"''
		source /opt/karoshi/serversetup/variables/distro
		/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/shorewall_stop
		echo "<br><br>"
		/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/shorewall_start
		echo "<br><br>"
	fi
	else
	ssh -x -o PasswordAuthentication=no $UPSSERVER '
	MODCHECK=`grep -c UPS_rule_'$SERVER' /etc/shorewall/rules`
	RESTART_SHOREWALL=no
	if [ $MODCHECK = 0 ]
	then
		RESTART_SHOREWALL=yes
		echo '''$"The following ports need to be opened on shorewall"' - tcp 3493"<br><br>"

		LINENUM=`grep -n "LAST LINE -- ADD YOUR ENTRIES BEFORE THIS ONE -- DO NOT REMOVE" /etc/shorewall/rules | cut -d: -f1`
		sed -i $LINENUM"c"\ACCEPT"	"net:'$SERVERTPCIP'"	"fw"	"tcp"	"3493"	"-"#"UPS_rule_'$SERVER' /etc/shorewall/rules
		echo "#"LAST LINE -- ADD YOUR ENTRIES BEFORE THIS ONE -- DO NOT REMOVE >> /etc/shorewall/rules
	fi
	######################
	#Restart shorewall
	######################
	if [ $RESTART_SHOREWALL = yes ]
	then
		echo "<br>"'$"Restarting Shorewall"'
		source /opt/karoshi/serversetup/variables/distro
		/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/shorewall_stop
		echo "<br><br>"
		/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/shorewall_start
		echo "<br><br>"
	fi
	'
fi

########################
# Restart nut on UPS server
########################
if [ $UPSSERVER = `hostname-fqdn` ]
then
	source /opt/karoshi/serversetup/variables/distro
	/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/nut_stop 1>/dev/null
	sleep 1
	/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/nut_start 1>/dev/null
	/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/startonboot/nut
else
ssh -x -o PasswordAuthentication=no $UPSSERVER '
	source /opt/karoshi/serversetup/variables/distro
	/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/nut_stop 1>/dev/null
	sleep 1
	/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/nut_start 1>/dev/null
	/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/startonboot/nut
'
fi

########################
# /etc/nut/nut.conf on UPS slave
########################
if [ $SERVER = `hostname-fqdn` ]
then
	echo MODE=netclient > /etc/nut/nut.conf
	echo >> /etc/nut/nut.conf
else
	ssh -x -o PasswordAuthentication=no $SERVER '
	echo MODE=netclient > /etc/nut/nut.conf
	echo >> /etc/nut/nut.conf
	'
fi
########################
# Create upsmon.conf on UPS slave
########################
if [ $SERVER = `hostname-fqdn` ]
then
	touch /etc/nut/upsmon.conf
	chmod 0640 /etc/nut/upsmon.conf
	chown root.nut /etc/nut/upsmon.conf
	echo MONITOR $UPSMODEL@$UPSSERVERTCPIP 1 $SERVER $RANDOMPASSWORD slave > /etc/nut/upsmon.conf
	echo SHUTDOWNCMD "/sbin/shutdown -h +0" >> /etc/nut/upsmon.conf
else
	ssh -x -o PasswordAuthentication=no $SERVER '
	touch /etc/nut/upsmon.conf
	chmod 0640 /etc/nut/upsmon.conf
	chown root.nut /etc/nut/upsmon.conf
	echo MONITOR '$UPSMODEL'@'$UPSSERVERTCPIP' 1 '$SERVER' '$RANDOMPASSWORD' slave > /etc/nut/upsmon.conf
	echo SHUTDOWNCMD "/sbin/shutdown -h +0" >> /etc/nut/upsmon.conf
	'
fi

########################
# start nut on UPS slave
########################
if [ $SERVER = `hostname-fqdn` ]
then
	source /opt/karoshi/serversetup/variables/distro
	/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/nut_stop 1>/dev/null
	sleep 1
	/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/nut_start 1>/dev/null
	/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/startonboot/nut
	#chkconfig -f nut on 1>/dev/null 2>/dev/null
else
	ssh -x -o PasswordAuthentication=no $SERVER '
	source /opt/karoshi/serversetup/variables/distro
	/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/nut_stop 1>/dev/null
	sleep 1
	/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/nut_start 1>/dev/null
	/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/startonboot/nut
	#chkconfig -f nut on 1>/dev/null 2>/dev/null
	'
fi

exit

