#!/bin/bash
#Copyright (C) 2011 Paul Sharrad

#This file is part of Karoshi Server.
#
#Karoshi Server is free software: you can redistribute it and/or modify
#it under the terms of the GNU Affero General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#Karoshi Server is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU Affero General Public License for more details.
#
#You should have received a copy of the GNU Affero General Public License
#along with Karoshi Server.  If not, see <http://www.gnu.org/licenses/>.

#
#The Karoshi Team can be contacted at: 
#mpsharrad@karoshi.org.uk
#jsharrad@karoshi.org.uk

#
#Website: http://www.karoshi.org.uk
LOG_DATE=`date +%F`
[ -z "$LOG_DATE" ] && exit

########################
#Check md5checksum
########################
if ! test -f /opt/karoshi/web_controls/checksums/admin_checksums/uptime_cgi
then
	echo `date`: uptime - No MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
source /opt/karoshi/web_controls/checksums/admin_checksums/uptime_cgi
MD5SUM=`md5sum /var/www/cgi-bin_karoshi/admin/uptime.cgi | cut -d' ' -f1`
[ -z "$MD5SUM" ] && MD5SUM=not_set
if [ $MD5SUM'check' != $uptime_cgi'check' ]
then
	echo `date`: uptime - Incorrect MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
########################
#Get variables
########################
numArgs=$#
if [ $numArgs != 0 ]
then
	echo `date`: uptime - incorrect number of arguments >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
read DATA
DATA=`echo $DATA | tr -cd 'A-Za-z0-9\._:%\n--+'`
if [ -z "$DATA" ]
then
	echo `date`: uptime - no data >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
REMOTE_USER=`echo "$DATA" | cut -d: -f1`
REMOTE_ADDR=`echo "$DATA" | cut -d: -f2`
REMOTE_MD5=`echo "$DATA" | cut -d: -f3`
SERVERNAME=`echo "$DATA" | cut -s -d: -f4`
SERVERTYPE=`echo "$DATA" | cut -s -d: -f5`
SERVERMASTER=`echo "$DATA" | cut -s -d: -f6`
MOBILE=`echo "$DATA" | cut -s -d: -f7`

########################
#Check data
########################
if [ $REMOTE_MD5'check' != $MD5SUM'check' ]
then
	echo `date`: uptime - Not called by uptime.cgi >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ -z "$REMOTE_USER" ]
then
	echo `date`: uptime - Blank remote user >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ -z "$REMOTE_ADDR" ]
then
	echo `date`: uptime - Blank remote tcpip address >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ -z "$SERVERNAME" ]
then
	echo `date`: uptime - Blank server by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ -z "$SERVERTYPE" ]
then
	echo `date`: uptime - Blank servertype by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ $SERVERTYPE = federatedslave ]
then
	if [ -z "$SERVERMASTER" ]
	then
		echo `date`: uptime - Blank servermaster by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
		exit 101
	fi
fi
if [ `grep -c ^$REMOTE_USER: /opt/karoshi/web_controls/web_access_admin` != 1 ]
then
	echo `date`: uptime - access denied to $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi

echo `date`: uptime - "for" $SERVERNAME by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE

if [ $MOBILE = no ]
then
	SERVERICON="/images/submenus/system/uptime_reset.png"
	ICON1=/images/submenus/system/computer.png
	TABLECLASS=standard
	WIDTH1=220
	WIDTH2=80
	WIDTH3=158
	WIDTH4=150
	WIDTH5=100
else
	SERVERICON="/images/submenus/system/uptime_resetm.png"
	ICON1=/images/submenus/system/computerm.png
	TABLECLASS=mobilestandard
	WIDTH1=95
	WIDTH2=95
	WIDTH3=140
	WIDTH4=100
	WIDTH5=100
fi
############################
#Language
############################

[ -f /opt/karoshi/web_controls/user_prefs/$REMOTE_USER/language_choice ] && source /opt/karoshi/web_controls/user_prefs/$REMOTE_USER/language_choice
TEXTDOMAIN=karoshi-server


function table_top {
if [ $SERVERTYPE = network ]
then
	LABEL=$"My Servers"
	if [ -f /opt/karoshi/server_network/info ]
	then
		source /opt/karoshi/server_network/info
		LOCATION_NAME="- $LOCATION_NAME"
	fi
fi

if [ $SERVERTYPE = federated ]
then
	LABEL=$"Federated Servers"
	if [ -f /opt/karoshi/server_network/federated_ldap_servers/$DISPLAY_NAME/info ]
	then
		source /opt/karoshi/server_network/federated_ldap_servers/$DISPLAY_NAME/info
		LOCATION_NAME="- $LOCATION_NAME"
	fi
fi

if [ $MOBILE = yes ]
then
	echo '<table id="myTable" class="tablesorter" style="text-align: left;" ><thead>
<tr><th style="width: '$WIDTH1'px;"><b>'$"Server"'</b></th><th style="width: '$WIDTH2'px;"><b>'$"Uptime"'</b></th><th style="width: '$WIDTH5'px;"><b>'$"Reset"'</b></th></tr></thead><tbody>'
else
	echo '<table id="myTable" class="tablesorter" style="text-align: left;" ><thead>
<tr><th style="width: '$WIDTH1'px;"><b>'$"Server"'</b></th><th style="width: '$WIDTH2'px;"><b>'$"Uptime"'</b></th><th style="width: '$WIDTH3'px;"><b>'$"Est. Downtime  Year"'</b></th><th style="width: '$WIDTH4'px;"><b>'$"Start Date"'</b></th><th style="width: '$WIDTH5'px;"><b>'$"Reset"'</b></th></thead><tbody>'
fi
}

function downtime {
SUFFIX=seconds
DPY=`echo "scale=5; 31536000 - ( $UPPRCENT / 100 * 31536000 );" | bc`

CHECK=`echo $DPY | cut -d'.' -f1` 

#Convert to minutes
if [ $CHECK -gt 60 ]
then
	DPY=`echo "scale=5; $DPY / 60;" | bc`
	SUFFIX=minutes
fi


#Convert to hours
if [ $CHECK -gt 3600 ]
then
	DPY=`echo "scale=5; $DPY / 60;" | bc`
	SUFFIX=hours
fi

#Convert to days
if [ $CHECK -gt 86400 ]
then
	DPY=`echo "scale=5; $DPY / 24;" | bc`
	SUFFIX=days
fi

#Round to 2 dp
DPY=`echo "scale=2; $DPY / 2 * 2 ;" | bc`
}


function table_bottom {
echo '</tbody></table><br>'
}

function show_data {

UPPRCENT=`echo $UPTIMEDATA | cut -d, -f1`
START_TIME=`echo $UPTIMEDATA | cut -d, -f2`
SYMBOL=%
UPPRCENT2=`echo $UPPRCENT | cut -d. -f1`
if [ $UPPRCENT2 -gt 100 ]
then
	UPPRCENT=-
	DPY=-
	SUFFIX=-
	SYMBOL=-
else
	downtime
fi

if [ $MOBILE = yes ]
then
	echo '<tr><td>'$DISPLAY_NAME'</td><td>'$UPPRCENT''$SYMBOL'</td>'
else
	echo '<tr><td>'$DISPLAY_NAME'</td><td>'$UPPRCENT''$SYMBOL'</td><td>'$DPY' '$SUFFIX'</td><td>'$START_TIME'</td>'
fi

echo '<td> 
<form action="/cgi-bin/admin/uptime_reset.cgi" name="selectservers" method="post">
<input name="_SERVERTYPE_'$SERVERTYPE'_SERVERNAME_'$SERVERNAME'_SERVERMASTER_'$FEDERATED_SERVER'_" type="submit" class="button" value="'$"Reset"'">
</form>
</td>
</tr>'
}

function offline {
echo '<tr><td> '$DISPLAY_NAME'</td><td>'$"Offline"'</td><td>'$"Offline"'</td><td>'$"Offline"'</td><td></td></tr>'
}

#Show uptime this server
if [ $SERVERNAME = `hostname-fqdn` ]
then
	UPTIMEDATA=`karoshi-uptime.sh -p uptime ; echo , ; karoshi-uptime.sh -n start-time`

	if [ $MOBILE = yes ]
	then
		DISPLAY_NAME=`echo $SERVERNAME | cut -d. -f1`
	else
		DISPLAY_NAME=$SERVERNAME
	fi
	table_top
	show_data
	table_bottom
fi

#Slave servers and federated servers
if [ $SERVERTYPE = network ] || [ $SERVERTYPE = federated ] && [ $SERVERNAME != allservers ] && [ $SERVERNAME != `hostname-fqdn` ]
then
	UPTIMEDATA=`ssh -x -o PasswordAuthentication=no -o ConnectTimeout=3 $SERVERNAME '
	karoshi-uptime.sh -p uptime ; echo , ; karoshi-uptime.sh -n start-time
	'`
	STATUS=`echo $?`

	if [ $MOBILE = yes ]
	then
		DISPLAY_NAME=`echo $SERVERNAME | cut -d. -f1`
	else
		DISPLAY_NAME=$SERVERNAME
	fi

	table_top
	if [ $STATUS = 0 ]
	then
		show_data
	else
		offline
	fi
	table_bottom
fi

#Federated slave servers
if [ $SERVERTYPE = federatedslave ] && [ $SERVERNAME != allservers ]
then
	UPTIMEDATA=`ssh -x -o PasswordAuthentication=no -o ConnectTimeout=3  $SERVERMASTER '
	ssh -x -o PasswordAuthentication=no -o ConnectTimeout=3 '$SERVERNAME' '\''
	karoshi-uptime.sh -p uptime ; echo , ; karoshi-uptime.sh -n start-time
	'\''
	'`
	STATUS=`echo $?`

	if [ $MOBILE = yes ]
	then
		DISPLAY_NAME=`echo $SERVERNAME | cut -d. -f1`
	else
		DISPLAY_NAME=$SERVERNAME
	fi

	SERVERTYPE=federated
	table_top
	if [ $STATUS = 0 ]
	then
		show_data
	else
		offline
	fi
	table_bottom
fi

#All servers
if [ $SERVERNAME = allservers ]
then
	table_top
	for SERVERNAMES in /opt/karoshi/server_network/servers/*
	do
	SERVERNAME=`basename $SERVERNAMES`

	if [ $MOBILE = yes ]
	then
		DISPLAY_NAME=`echo $SERVERNAME | cut -d. -f1`
	else
		DISPLAY_NAME=$SERVERNAME
	fi

	if [ $SERVERNAME = `hostname-fqdn` ]
	then
		UPTIMEDATA=`karoshi-uptime.sh -p uptime`,`karoshi-uptime.sh -n start-time`
		SERVERTYPE=network
		show_data
	else
		UPTIMEDATA=`ssh -x -o PasswordAuthentication=no -o ConnectTimeout=3 $SERVERNAME '
	karoshi-uptime.sh -p uptime ; echo , ; karoshi-uptime.sh -n start-time
	'`
		STATUS=$?
		if [ $STATUS = 0 ]
		then
			show_data
		else
			offline
		fi
	fi
	done
	table_bottom

	if [ -d /opt/karoshi/server_network/federated_ldap_servers/ ]
	then
		if [ `ls -1 /opt/karoshi/server_network/federated_ldap_servers/ | wc -l` -gt 0 ]
		then
		for SERVERNAMES in /opt/karoshi/server_network/federated_ldap_servers/*
		do
			SERVERNAME=`basename $SERVERNAMES`
			if [ $MOBILE = yes ]
			then
				DISPLAY_NAME=`echo $SERVERNAME | cut -d. -f1`
			else
				DISPLAY_NAME=$SERVERNAME
			fi

			UPTIMEDATA=`ssh -x -o PasswordAuthentication=no -o ConnectTimeout=3 $SERVERNAME '
			karoshi-uptime.sh -p uptime ; echo , ; karoshi-uptime.sh -n start-time
			'`
			STATUS=`echo $?`

			SERVERTYPE=federated
			table_top
			if [ $STATUS = 0 ]
			then
			show_data
			for FEDERATED_SLAVE_SERVERS in /opt/karoshi/server_network/federated_ldap_servers/$SERVERNAME/servers/*
			do
				FEDERATED_SLAVE_SERVER=`basename $FEDERATED_SLAVE_SERVERS`
				if [ $FEDERATED_SLAVE_SERVER != $SERVERNAME ]
				then
					UPTIMEDATA=`ssh -x -o PasswordAuthentication=no -o ConnectTimeout=3  $SERVERNAME '
					ssh -x -o PasswordAuthentication=no -o ConnectTimeout=3 '$FEDERATED_SLAVE_SERVER' '\''
					karoshi-uptime.sh -p uptime ; echo , ; karoshi-uptime.sh -n start-time
					'\''
					'`
					DISPLAY_NAME=$FEDERATED_SLAVE_SERVER
					SERVERTYPE=federated
					show_data
				fi
			done
			else
				offline
			fi
			table_bottom
		done
		fi
	fi
fi

exit

