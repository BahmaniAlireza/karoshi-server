#!/bin/bash
#Copyright (C) 2013 Paul Sharrad

#This file is part of Karoshi Server.
#
#Karoshi Server is free software: you can redistribute it and/or modify
#it under the terms of the GNU Affero General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#Karoshi Server is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU Affero General Public License for more details.
#
#You should have received a copy of the GNU Affero General Public License
#along with Karoshi Server.  If not, see <http://www.gnu.org/licenses/>.

#
#The Karoshi Team can be contacted at: 
#mpsharrad@karoshi.org.uk
#jsharrad@karoshi.org.uk

#
#Website: http://www.karoshi.org.uk
LOG_DATE=`date +%F`
########################
#Check md5checksum
########################
if ! test -f /opt/karoshi/web_controls/checksums/admin_checksums/user_web_folders_cgi
then
	echo `date`: user_web_folders - No admin MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
source /opt/karoshi/web_controls/checksums/admin_checksums/user_web_folders_cgi
MD5SUM=`md5sum /var/www/cgi-bin_karoshi/admin/user_web_folders.cgi | cut -d' ' -f1`
[ -z "$MD5SUM" ] && MD5SUM=not_set
if [ $MD5SUM'check' != $user_web_folders_cgi'check' ]
then
	echo `date`: user_web_folders - Incorrect admin MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi

########################
#Get variables
########################
numArgs=$#
if [ $numArgs != 0 ]
then
	echo `date`: user_web_folders - incorrect number of arguments >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi

read DATA
DATA=`echo $DATA | tr -cd 'A-Za-z0-9\._:\-'`
if [ -z "$DATA" ]
then
	echo `date`: user_web_folders - no data >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
REMOTE_USER=`echo "$DATA" | cut -s -d: -f1`
REMOTE_ADDR=`echo "$DATA" | cut -s -d: -f2`
REMOTE_MD5=`echo "$DATA" | cut -s -d: -f3`
GROUP=`echo "$DATA" | cut -s -d: -f4`
ACTION=`echo "$DATA" | cut -s -d: -f5`
USERNAME=`echo "$DATA" | cut -s -d: -f6`
SERVICECHECK=`echo "$DATA" | cut -s -d: -f7`
MOBILE=`echo "$DATA" | cut -s -d: -f8`
########################
#Check data
########################
if [ $REMOTE_MD5'check' != $MD5SUM'check' ] && [ $REMOTE_MD5'check' != $MD5SUM2'check' ] && [ $REMOTE_MD5'check' != $MD5SUM3'check' ]
then
	echo `date`: user_web_folders - Not called by user_web_folders.cgi or bulk_user_creation_create.cgi >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ -z "$REMOTE_USER" ]
then
	echo `date`: user_web_folders - Blank remote user >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ -z "$REMOTE_ADDR" ]
then
	echo `date`: user_web_folders - Blank remote tcpip address >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ -z "$GROUP" ]
then
	echo `date`: user_web_folders - Blank group by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ -z "$ACTION" ]
then
	echo `date`: user_web_folders - Blank action by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ -z "$USERNAME" ]
then
	echo `date`: user_web_folders - Blank username by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ -z "$SERVICECHECK" ]
then
	echo `date`: user_web_folders - Blank servicecheck by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi

echo `date`: user_web_folders -  Username: $USERNAME, Group: $GROUP, Action: $ACTION from $REMOTE_ADDR by $REMOTE_USER >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE


##########################
#Language
##########################

STYLESHEET=defaultstyle.css
[ -f /opt/karoshi/web_controls/user_prefs/$REMOTE_USER ] && source /opt/karoshi/web_controls/user_prefs/$REMOTE_USER
TEXTDOMAIN=karoshi-server


########################
#Get server and home path for new user
########################

source /opt/karoshi/server_network/group_information/$GROUP

if [ "$SERVER" = `hostname-fqdn` ]
then

	function enablewebhosting {
	chmod 0755 $HOMEPATH
	[ ! -d $HOMEPATH/$USERNAME/public_html ] && mkdir $HOMEPATH/$USERNAME/public_html
	chmod 0700 $HOMEPATH/$USERNAME/public_html
	chown $USERNAME $HOMEPATH/$USERNAME/public_html
	setfacl -m user:www-data:--x $HOMEPATH/$USERNAME
	setfacl -Rm user:www-data:r-x,d:user:www-data:r-x $HOMEPATH/$USERNAME/public_html
	}

	function disablewebhosting {
	setfacl -x user:www-data $HOMEPATH/$USERNAME
	setfacl -Rx user:www-data,d:user:www-data $HOMEPATH/$USERNAME/public_html
	}

	if [ $USERNAME != all ] && [ $ACTION = enable ]
	#Enable/disable hosting for a user
	then
		enablewebhosting
	fi

	if [ $USERNAME != all ] && [ $ACTION = disable ]
	then
		disablewebhosting
	fi

	if [ $USERNAME = all ] && [ $ACTION = enable ]
	then
		for USERFOLDER in $HOMEPATH/*
		do
			USERNAME=`basename $USERFOLDER`
			enablewebhosting
		done
	fi

	if [ $USERNAME = all ] && [ $ACTION = disable ]
	then
		for USERFOLDER in $HOMEPATH/*
		do
			USERNAME=`basename $USERFOLDER`
			disablewebhosting
		done
	fi

else
	ssh -o PasswordAuthentication=no -o ConnectTimeout=3 $SERVER '
	function enablewebhosting {

	chmod 0755 '$HOMEPATH'
	[ ! -d '$HOMEPATH'/$USERNAME/public_html ] && mkdir '$HOMEPATH'/$USERNAME/public_html
	chmod 0700 '$HOMEPATH'/$USERNAME/public_html
	chown $USERNAME '$HOMEPATH'/$USERNAME/public_html
	setfacl -m user:www-data:--x '$HOMEPATH'/$USERNAME
	setfacl -Rm user:www-data:r-x,d:user:www-data:r-x '$HOMEPATH'/$USERNAME/public_html
	}

	function disablewebhosting {
	setfacl -x user:www-data '$HOMEPATH'/$USERNAME
	setfacl -Rx user:www-data,d:user:www-data '$HOMEPATH'/$USERNAME/public_html
	}

	if [ '$USERNAME' != all ] && [ '$ACTION' = enable ]
	#Enable/disable hosting for a user
	then
		USERNAME='$USERNAME'
		enablewebhosting
	fi

	if [ '$USERNAME' != all ] && [ '$ACTION' = disable ]
	then
		USERNAME='$USERNAME'
		disablewebhosting
	fi

	if [ '$USERNAME' = all ] && [ '$ACTION' = enable ]
	then
		for USERFOLDER in '$HOMEPATH'/*
		do
			USERNAME=`basename $USERFOLDER`
			enablewebhosting
		done
	fi

	if [ '$USERNAME' = all ] && [ '$ACTION' = disable ]
	then
		for USERFOLDER in '$HOMEPATH'/*
		do
			USERNAME=`basename $USERFOLDER`
			disablewebhosting
		done
	fi
	'
fi

if [ $ACTION = enablehosting ]
then
	#Add server to user web folder list
	touch /var/lib/samba/netlogon/domain_information/user_web_servers
	if [ `grep -c $SERVER /var/lib/samba/netlogon/domain_information/user_web_servers` = 0 ]
	then
		echo $SERVER >> /var/lib/samba/netlogon/domain_information/user_web_servers
	fi

	#Enable user web folders
	if [ $SERVER = `hostname-fqdn` ]
	then
		#Make sure suphp is installed
		if [ ! -f /etc/apache2/mods-available/suphp.load ]
		then
			echo '<li>'$"Updating the repository"'</li><br><br>'
			sleep 1
			apt-get update
			echo '<br><br><li>'$"Installing suphp and suexec"'</li><br><br>'
			apt-get install -y libapache2-mod-suphp apache2-suexec
		fi

		#Copy in config files
		cp -f /opt/karoshi/serversetup/modules/user_web_folders/karoshi-userdir.conf /etc/apache2/mods-available/
		cp -f /opt/karoshi/serversetup/modules/user_web_folders/karoshi-userdir.load /etc/apache2/mods-available/
		cp -f /opt/karoshi/serversetup/modules/user_web_folders/suphp.conf /etc/suphp/

		a2enmod karoshi-userdir 1> /dev/null
		a2enmod suphp 1> /dev/null
		a2enmod suexec 1> /dev/null
		source /opt/karoshi/serversetup/variables/distro
		/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/startonboot/apache
		/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/apache_stop 1> /dev/null
		sleep 1
		/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/apache_start 1> /dev/null

		#Open shorewall ports
		MODCHECK=`grep -c -w 80 /etc/shorewall/rules`
		MODCHECK2=`grep -c -w 443 /etc/shorewall/rules`

		if [ `grep -c 80,443 /etc/shorewall/rules` = 0 ]
		then
			LINENUM=`grep -n 'LAST LINE -- ADD YOUR ENTRIES BEFORE THIS ONE -- DO NOT REMOVE' /etc/shorewall/rules | cut -d: -f1`
			sed -i $LINENUM'c'\ACCEPT'	'net'	'fw'	'tcp'	'80,443'	'-'#'apacherule /etc/shorewall/rules
			echo '#'LAST LINE -- ADD YOUR ENTRIES BEFORE THIS ONE -- DO NOT REMOVE >> /etc/shorewall/rules
			/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/shorewall_stop 1>/dev/null
			/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/shorewall_start 1>/dev/null
		fi
	else
		#Copy in config files
		scp -r -o PasswordAuthentication=no /opt/karoshi/serversetup/modules/user_web_folders $SERVER:/opt/karoshi/serversetup/modules/

		ssh -o PasswordAuthentication=no -o ConnectTimeout=3 $SERVER '
		#Make sure suphp is installed
		if [ ! -f /etc/apache2/mods-available/suphp.load ]
		then
			echo "<li>"'$"Updating the repository"'"</li><br><br>"
			sleep 1
			apt-get update
			echo "<br><br><li>"'$"Installing suphp and suexec"'"</li><br><br>"
			apt-get -y install libapache2-mod-suphp apache2-suexec
		fi

		#Copy in config files
		cp -f /opt/karoshi/serversetup/modules/user_web_folders/karoshi-userdir.conf /etc/apache2/mods-available/
		cp -f /opt/karoshi/serversetup/modules/user_web_folders/karoshi-userdir.load /etc/apache2/mods-available/
		cp -f /opt/karoshi/serversetup/modules/user_web_folders/suphp.conf /etc/suphp/

		a2enmod suphp 1> /dev/null
		a2enmod karoshi-userdir 1> /dev/null
		a2enmod suexec 1> /dev/null
		source /opt/karoshi/serversetup/variables/distro
		/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/startonboot/apache
		/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/apache_stop 1> /dev/null
		sleep 1
		/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/apache_start 1> /dev/null

		if [ `grep -c 80,443 /etc/shorewall/rules` = 0 ]
		then
			LINENUM=`grep -n "LAST LINE -- ADD YOUR ENTRIES BEFORE THIS ONE -- DO NOT REMOVE" /etc/shorewall/rules | cut -d: -f1`
			sed -i $LINENUM"c"\ACCEPT"	"net"	"fw"	"tcp"	"80,443"	"-"#"apacherule /etc/shorewall/rules
			echo "#"LAST LINE -- ADD YOUR ENTRIES BEFORE THIS ONE -- DO NOT REMOVE >> /etc/shorewall/rules
			/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/shorewall_stop 1>/dev/null
			/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/shorewall_start 1>/dev/null
		fi

		'
	fi
	echo $"User web folders""<br>" > /opt/karoshi/server_network/servers/$SERVER/user_web_folders
	#reload form
	echo "</form><form METHOD=POST ACTION=\"/cgi-bin/admin/user_web_folders.cgi\" target=\"_top\" name = \"frm\">
	<input type=\"hidden\" name=\"_GROUP_\" value=\"$GROUP\">
	</form>
	<script>
	document.frm.submit();
	</script>"
	exit
fi

if [ $ACTION = disablehosting ]
then

	#Remove server from user web folder list
	touch /var/lib/samba/netlogon/domain_information/user_web_servers
	if [ `grep -c $SERVER /var/lib/samba/netlogon/domain_information/user_web_servers` != 0 ]
	then
		sed -i 's/'$SERVER'//g' /var/lib/samba/netlogon/domain_information/user_web_servers
		sed -i '/^[[:space:]]*$/d' /var/lib/samba/netlogon/domain_information/user_web_servers
	fi

	#Disable user web folders
	if [ $SERVER = `hostname-fqdn` ]
	then
		a2dismod karoshi-userdir 1> /dev/null
		a2dismod suphp 1> /dev/null
		a2dismod suexec 1> /dev/null
		source /opt/karoshi/serversetup/variables/distro
		/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/startonboot/apache
		/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/apache_stop 1> /dev/null
		sleep 1
		/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/apache_start 1> /dev/null
	else
		ssh -o PasswordAuthentication=no -o ConnectTimeout=3 $SERVER '
		a2dismod karoshi-userdir 1> /dev/null
		a2dismod suphp 1> /dev/null
		a2dismod suexec 1> /dev/null
		source /opt/karoshi/serversetup/variables/distro
		/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/startonboot/apache
		/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/apache_stop 1> /dev/null
		sleep 1
		/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/apache_start 1> /dev/null
		'
	fi
	rm -f /opt/karoshi/server_network/servers/$SERVER/user_web_folders
fi

#########################
#Show user web folder status for a group
#########################
if [ "$MOBILE" = no ]
then
	ICON1=/images/submenus/user/web_folder_enabled.png
	ICON2=/images/submenus/user/web_folder_disabled.png
	WIDTH1=180
	WIDTH2=200
	TABLECLASS=standard
else
	ICON1=/images/submenus/user/web_folder_enabledm.png
	ICON2=/images/submenus/user/web_folder_disabledm.png
	WIDTH1=120
	WIDTH2=80
	TABLECLASS=mobilestandard
fi

if [ "$MOBILE" = yes ]
then
	SERVER2=`echo $SERVER | cut -d. -f1`
else
	SERVER2=$SERVER
fi

echo '<table class="'$TABLECLASS'" style="text-align: left;" ><tbody>
<tr><td style="width: '$WIDTH1'px;"><b>'$"Server"'</b></td><td style="width: '$WIDTH2'px;">'$SERVER2'</td><td>
'

if [ ! -f /opt/karoshi/server_network/servers/$SERVER/user_web_folders ]
then
	echo '<input name="_GROUP_'$GROUP'_ACTION_enablehosting_USERNAME_none_" type="submit" class="button" value="'$"Start user hosting"'">'
else
	echo '<input name="_GROUP_'$GROUP'_ACTION_disablehosting_USERNAME_none_" type="submit" class="button" value="'$"Stop user hosting"'">'
fi

#Show global options
echo '</td></tr><tr><td><b>'$"Primary Group"'</b></td><td>'$GROUP'</td><td>
<input name="_GROUP_'$GROUP'_ACTION_enable_USERNAME_all_" type="submit" class="button" value="'$"Enable all users"'">
</td></tr>
<tr><td></td><td></td><td>
<input name="_GROUP_'$GROUP'_ACTION_disable_USERNAME_all_" type="submit" class="button" value="'$"Disable all users"'">
</td></tr></tbody></table>
<br>'

[ "$MOBILE" = no ] && echo '</div><div id="infobox">'

echo '<table class="'$TABLECLASS'" style="text-align: left;" ><tbody>
<tr><td style="width: '$WIDTH1'px;"><b>'$"Username"'</b></td><td><b>'$"Status"'</b></td></tr>'

if [ "$SERVER" = `hostname-fqdn` ]
then
	if [ -d "$HOMEPATH" ]
	then
		if [ `ls -1 "$HOMEPATH" | wc -l` -gt 0 ]
		then

folders=( $(find "$HOMEPATH" -mindepth 1 -maxdepth 1 -type d) )

sudo -u www-data /bin/bash << ENDOFTEST
for folder in ${folders[@]}; do
FOLDERACTION=enable
STATUSICON=$ICON2
MESSAGE=''$"Enable user web folder"''
if [[ -r \$folder/public_html ]]; then
STATUSICON=$ICON1
FOLDERACTION=disable
MESSAGE=''$"Disable user web folder"''
fi
USERNAME=\${folder##*/}
echo "<tr><td>\$USERNAME</td><td><a class=\"info\" href=\"javascript:void(0)\"><input name=\"_USERNAME_\$USERNAME"_"GROUP_$GROUP"_"ACTION_\$FOLDERACTION"_"\" type=\"image\" class=\"images\" src=\"\$STATUSICON\" value=\"\"><span>\$MESSAGE<br><br>\$USERNAME</span></a></td></tr>"
done
ENDOFTEST

		fi
	fi
else
	ssh -o PasswordAuthentication=no -o ConnectTimeout=3 "$SERVER" '
	if [ -d '$HOMEPATH' ]
	then
		if [ `ls -1 '$HOMEPATH' | wc -l` -gt 0 ]
		then
folders=( $(find "'$HOMEPATH'" -mindepth 1 -maxdepth 1 -type d) )

sudo -u www-data /bin/bash << ENDOFTEST
for folder in ${folders[@]}; do
FOLDERACTION=enable
STATUSICON='$ICON2'
MESSAGE="'$"Enable user web folder"'"
if [[ -r \$folder/public_html ]]; then
STATUSICON='$ICON1'
FOLDERACTION=disable
MESSAGE="'$"Disable user web folder"'"
fi
USERNAME=\${folder##*/}
echo "<tr><td>\$USERNAME</td><td><a class=\"info\" href=\"javascript:void(0)\"><input name=\"_USERNAME_\$USERNAME"_"GROUP_'$GROUP'"_"ACTION_\$FOLDERACTION"_"\" type=\"image\" class=\"images\" src=\"\$STATUSICON\" value=\"\"><span>\$MESSAGE<br><br>\$USERNAME</span></a></td></tr>"
done
ENDOFTEST

		fi
	fi
	'
fi
echo '</tbody></table>'
exit

