#!/bin/bash
#Copyright (C) 2010 Paul Sharrad

#This file is part of Karoshi Server.
#
#Karoshi Server is free software: you can redistribute it and/or modify
#it under the terms of the GNU Affero General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#Karoshi Server is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU Affero General Public License for more details.
#
#You should have received a copy of the GNU Affero General Public License
#along with Karoshi Server.  If not, see <http://www.gnu.org/licenses/>.

#
#The Karoshi Team can be contacted at: 
#mpsharrad@karoshi.org.uk
#jsharrad@karoshi.org.uk

#
#Website: http://www.karoshi.org.uk
LOG_DATE=`date +%F`
########################
#Check md5checksum
########################
if ! test -f /opt/karoshi/web_controls/checksums/admin_checksums/zfs_raid_control_cgi
then
	echo `date`: zfs_raid_control - No admin MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
source /opt/karoshi/web_controls/checksums/admin_checksums/zfs_raid_control_cgi
MD5SUM=`md5sum /var/www/cgi-bin_karoshi/admin/zfs_raid_control.cgi | cut -d' ' -f1`
[ -z "$MD5SUM" ] && MD5SUM=not_set
if [ $MD5SUM'check' != $zfs_raid_control_cgi'check' ]
then
	echo `date`: zfs_raid_control - Incorrect admin MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi

########################
#Get variables
########################
numArgs=$#
if [ $numArgs != 0 ]
then
	echo `date`: zfs_raid_control - incorrect number of arguments >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi

read DATA
DATA=`echo $DATA | tr -cd 'A-Za-z0-9\._:\-'`
if [ -z "$DATA" ]
then
	echo `date`: zfs_raid_control - no data >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
REMOTE_USER=`echo "$DATA" | cut -s -d: -f1`
REMOTE_ADDR=`echo "$DATA" | cut -s -d: -f2`
REMOTE_MD5=`echo "$DATA" | cut -s -d: -f3`
SERVERNAME=`echo "$DATA" | cut -s -d: -f4`
SERVERTYPE=`echo "$DATA" | cut -s -d: -f5`
SERVERMASTER=`echo "$DATA" | cut -s -d: -f6`
MOBILE=`echo "$DATA" | cut -s -d: -f7`
########################
#Check data
########################
if [ $REMOTE_MD5'check' != $MD5SUM'check' ]
then
	echo `date`: zfs_raid_control - Not called by zfs_raid_control.cgi >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ -z "$REMOTE_USER" ]
then
	echo `date`: zfs_raid_control - Blank remote user >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ -z "$REMOTE_ADDR" ]
then
	echo `date`: zfs_raid_control - Blank remote tcpip address >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi
if [ -z "$SERVERNAME" ]
then
	echo `date`: software_raid_create - Blank server >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi

if [ -z "$SERVERTYPE" ]
then
	echo `date`: software_raid_create - Blank servertype >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi

if [ $SERVERTYPE = federatedslave ]
then
	if [ -z "$SERVERMASTER" ]
	then
		echo `date`: software_raid_create - Blank servermaster >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
		exit 101
	fi
fi

if [ `grep -c ^$REMOTE_USER: /opt/karoshi/web_controls/web_access_admin` != 1 ]
then
	echo `date`: zfs_raid_control - access denied to $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
	exit 101
fi

[ -z "$MOBILE" ] && MOBILE=no

if [ $MOBILE = no ]
then
	WIDTH1=250
else
	WIDTH1=150
fi

##########################
#Language
##########################

STYLESHEET=defaultstyle.css
[ -f /opt/karoshi/web_controls/user_prefs/$REMOTE_USER ] && source /opt/karoshi/web_controls/user_prefs/$REMOTE_USER
TEXTDOMAIN=karoshi-server


ICON1=/images/submenus/system/hdd_add.png
ICON2=/images/submenus/system/hdd_add_spare.png
ICON3=/images/submenus/system/hdd_remove.png
ICON4=/images/submenus/system/hdd_fail.png


if [ $SERVERNAME = `hostname-fqdn` ]
then

#Check that a zfs raid has been set up on this server

if [ `zpool status | grep -c pool:` = 0 ]
then
	echo $"A ZFS raid has not been set up on this server."
	sleep 3
	echo "</form><form METHOD=POST ACTION=\"/cgi-bin/admin/zfs_raid_create.cgi\" target=\"_top\" name = \"frm\">
<input type=\"hidden\" name=\"_SERVERNAME_\" value=\"$SERVERNAME\">
<input type=\"hidden\" name=\"_SERVERTYPE_\" value=\"$SERVERTYPE\">
<input type=\"hidden\" name=\"_SERVERMASTER_\" value=\"$SERVERMASTER\">
</form><script>document.frm.submit();</script>"
	exit
fi

#Get list of all drives
ALL_DRIVES=( /dev/sd? )
ALL_DRIVES_COUNT=${#ALL_DRIVES[@]}


#Get drive information
function get_drive_info {
SMARTINFO=`smartctl -i $DRIVE | tr -cd "A-Za-z0-9:=,/\n "`
CAPACITYBYTES=`echo -e "$SMARTINFO" | grep ^User | sed "s/ * / /g" | cut -d" " -f3 | tr -cd "0-9"`
#Convert capacity to gigabytes
if [ ! -z "$CAPACITYBYTES" ]
then
	CAPACITY=`echo "scale=0; $CAPACITYBYTES/1024/1024/1024" | bc`
	DRIVESCALE=GB
	if [ $CAPACITY -gt 1000 ]
	then
		#Covert capacity to terabytes
		CAPACITY=`echo "scale=2; $CAPACITY/1024" | bc`
		DRIVESCALE=TB
	fi
	else
	CAPACITY=0
fi

DISKSIZE=`echo $CAPACITY$DRIVESCALE`
DRIVE_STATUS=ok
smartctl -H $DRIVE 1>/dev/null 2>/dev/null
SMARTSTATUS=`echo $?`
if [ -e $DRIVE ]
then
	HDDATA=`hdparm -i $DRIVE | grep SerialNo= | sed "s/,/\n/g"`
fi
MAKER=`echo -e "$HDDATA" | grep Model= | cut -d= -f2`
DRIVE_SN=`echo -e "$HDDATA" | grep SerialNo= | cut -d= -f2`

DISKICON=hdd.png
if [ $SMARTSTATUS = 24 ]
then
	#Drive failing
	DRIVE_STATUS=fail
	DISKICON=hdd_fail.png
fi
}

##########################
#Show a list of spare drives
##########################
#Get list of all unmounted drives and display properties
function show_spare_drives {
COUNTER=0
SHOW_MENU=yes
SHOW_SUBMIT=no
echo "<input type=\"hidden\" name=\"_SERVERNAME_\" value=\"$SERVERNAME\">"
echo "<input type=\"hidden\" name=\"_SERVERTYPE_\" value=\"$SERVERTYPE\">"
echo "<input type=\"hidden\" name=\"_SERVERMASTER_\" value=\"$SERVERMASTER\">"

echo '<table class="standard" style="text-align: left;" border="0" cellpadding="2" cellspacing="2"><tbody>'

while [ $COUNTER -lt $ALL_DRIVES_COUNT ]
do
	DRIVE=${ALL_DRIVES[$COUNTER]}
	DRIVE_SHORT=`echo $DRIVE | sed "s/\/dev\///g"`
	#Try and get by-id identifier
	DRIVEBYID=`ls -l /dev/disk/by-id | sed "s/ * / /g" | grep -w $DRIVE_SHORT | cut -d" " -f9`

	if [ -z "$DRIVEBYID" ]
	then
		DRIVEBYID="$DRIVE_SHORT"
	fi

	#Get all uuid identifiers for the drive.
	UUIDS=`ls -l /dev/disk/by-uuid | sed "s/ * / /g" | grep "$DRIVE_SHORT" | cut -d" " -f9`
	UUIDCHECK=no
	for UUID in `echo "$UUIDS"`
	do
		if [ `mount | grep -c $UUID` != 0 ]
		then
			UUIDCHECK=yes
		fi
	done

	if [ $UUIDCHECK = no ] && [ `mount | grep -c $DRIVE` = 0 ] && [ `zpool status | grep -c -w $DRIVE_SHORT` = 0 ] && [ `zpool status | grep -c -w $DRIVEBYID` = 0 ] && [ `cat /proc/mdstat | grep -c $DRIVE_SHORT` = 0 ] || [ `zpool status | grep -w $DRIVE_SHORT | grep -c UNAVAIL` -gt 0 ]
	then
		get_drive_info


		#Show drive information
		if [ $DRIVE_STATUS = ok ]
		then
			echo '<tr><td style="width: '$WIDTH1'px;"><a class="info" href="javascript:void(0)"><img class="images" alt="" src="/images/submenus/system/'$DISKICON'"><span>'$DRIVE' - '$DISKSIZE'</span></a> '$"Available Drive"'</td><td style="width: 260px;">'$MAKER $DRIVE_SN'</td><td>'
		#Create list of drives in array to replace
			echo '<select name="select"><option value="_POOL_'$POOLNAME'_ACTION_addspare_DRIVE_'$DRIVE'_DRIVE2_notset_">'$"Add spare"'</option>'

			for RAIDDISK in $ZPOOLDRIVES
			do
				#RAIDDISK=`echo /dev/$RAIDDISK`
				echo '<option value="_POOL_'$POOLNAME'_ACTION_replace_DRIVE_'$DRIVE'_DRIVE2_'$RAIDDISK'_">'$"Replace"' - '$RAIDDISK'</option>'
			done

		echo '</select></td><td><a class="info" href="javascript:void(0)"><input name="submit" type="image" class="images" src="'$ICON1'" value=""><span>'$"Add this disk to a raid."'</span></a></td></tr>'
		else
		echo "<tr><td style=\"width: '$WIDTH1'px;\"><a class=\"info\" href=\"javascript:void(0)\"><img class=\"images\" alt=\"\" src=\"/images/submenus/system/$DISKICON\"><span>$DRIVE - $DISKSIZE</span></a>$DRIVE</td><td style=\"width: 260px;\">$MAKER $DRIVE_SN</td></tr>"
		fi
	fi
	let COUNTER=$COUNTER+1
done
echo "</tbody></table><br><br>"
}

##########################
#Get a list of all available pools
##########################
for POOLNAME in `zpool status | grep pool: | cut -d: -f2 | sed "s/ //g"`
do

	#Get a list of active drives in the array
	ZPOOLDRIVES=`zpool status $POOLNAME | grep "ONLINE\|SPARE\|OFFLINE\|AVAIL" | sed "s/\\t//g" | sed "s/^ * //g" | cut -d" " -f1 | grep -v "mirror\|replacing\|state:\|$POOLNAME\|raidz"`

	#Show raid information
	if [ -f /etc/rc2.d/S90zfs-mount-$POOLNAME ]
	then
		MOUNTPOINT=`grep "mount " /etc/rc2.d/S90zfs-mount-$POOLNAME | cut -d" " -f3`
	else
		MOUNTPOINT=`zfs get mountpoint $POOLNAME | sed -n 2,2p | sed "s/ * / /g" | cut -d" " -f3`
	fi
	ZPOOLINFO=`zpool list $POOLNAME | sed -n 2,2p | sed "s/ * / /g"`
	ZPOOLSTATUS=`zpool status $POOLNAME`
	RAID_SIZE=`df -h | grep $MOUNTPOINT | sed "s/ * / /g" | cut -d" " -f2` 
	RAID_STATE=`echo -e $ZPOOLINFO | cut -d" " -f7`
	SCANINFORMATION=`echo -e "$ZPOOLSTATUS" | grep scan: | cut -d: -f2`
	RAID_TYPE=`zpool status $POOLNAME | grep raidz | tr -cd "A-Za-z0-9- " | sed "s/^ * //g" | cut -d" " -f1`
	if [ -z $RAID_TYPE ]
	then
		RAID_TYPE=mirror
	fi
	echo '<b>'$"Raid Information"'</b><br><br>
	<table class="standard" style="text-align: left;" border="0" cellpadding="2" cellspacing="2"><tbody>
	<tr><td style="min-width: '$WIDTH1'px;">'$"Raid Name"'</td><td>'$POOLNAME'</td></tr>
	<tr><td>'$"Raid Type"'</td><td>'$RAID_TYPE'</td></tr>
	<tr><td>'$"Raid Size"'</td><td>'$RAID_SIZE'</td></tr>
	<tr><td>'$"Raid State"'</td><td>'$RAID_STATE'</td></tr>
	<tr><td>'$"Mount Point"'</td><td>'$MOUNTPOINT'</td></tr>
	<tr><td valign="top">'$"Scan Information"'</td><td>'$SCANINFORMATION'</td></tr>'


	for ZPOOLDRIVE in $ZPOOLDRIVES
		do
		DRIVE=/dev/$ZPOOLDRIVE
		#Get disk status
		DISKSTATUS=$"Active"
		SHOWREMOVE=no
		[ `echo -e "$ZPOOLSTATUS" | grep -w $ZPOOLDRIVE | grep -c -w OFFLINE` -gt 0 ] && DISKSTATUS=$"Offline"

		if [ `echo -e "$ZPOOLSTATUS" | grep -w $ZPOOLDRIVE | grep -c -w AVAIL` -gt 0 ]
		then
			DISKSTATUS=$"Spare"
			SHOWREMOVE=yes
		fi

		if [ `echo -e "$ZPOOLSTATUS" | grep -w $ZPOOLDRIVE | grep -c -w UNAVAIL` -gt 0 ]
		then	
			DISKSTATUS=$"Unavailable"
			DISKSIZE=$"Unknown"
			MAKER=$"Drive Offline"
			DRIVE_SN=""
		else		
			get_drive_info
		fi
		echo "<tr><td><a class=\"info\" href=\"javascript:void(0)\"><img class=\"images\" alt=\"\" src=\"/images/submenus/system/$DISKICON\"><span>$DRIVE - $DISKSIZE</span></a> "$ZPOOLDRIVE - $DISKSTATUS"</td><td>$MAKER $DRIVE_SN</td>"
	[ $SHOWREMOVE = yes ] && echo "<td>
	<a class=\"info\" href=\"javascript:void(0)\"><input name=\"_SERVERTYPE_$SERVERTYPE"_"SERVERNAME_$SERVERNAME"_"ACTION_removespare_POOL_$POOLNAME"_"DRIVE_$DRIVE"_"DRIVE2_notset"_"\" type=\"image\" class=\"images\" src="$ICON3" value=\"\"><span>"$"Remove spare""</span></a>
	</td>"

	echo "</tr>"
		done
	echo '</tbody></table><br>'
	#Show any spare drives
	show_spare_drives
	echo "</form><form METHOD=POST ACTION=\"/cgi-bin/admin/zfs_raid_control2.cgi\" target=\"_top\" name = \"frm\">"
done
fi

if [ $SERVERTYPE = network ] || [ $SERVERTYPE = federated ] && [ $SERVERNAME != `hostname-fqdn` ]
then
ssh -x -o PasswordAuthentication=no $SERVERNAME '
#Check that a zfs raid has been set up on this server

if [ `zpool status | grep -c pool:` = 0 ]
then
	echo '$"A ZFS raid has not been set up on this server."'
	sleep 3
	echo "</form><form METHOD=POST ACTION=\"/cgi-bin/admin/zfs_raid_create.cgi\" target=\"_top\" name = \"frm\">
<input type=\"hidden\" name=\"_SERVERNAME_\" value=\"'$SERVERNAME'\">
<input type=\"hidden\" name=\"_SERVERTYPE_\" value=\"'$SERVERTYPE'\">
<input type=\"hidden\" name=\"_SERVERMASTER_\" value=\"'$SERVERMASTER'\">
<input type=\"hidden\" name=\"_CREATETYPE_\" value=\"reuse\">
</form><script>document.frm.submit();</script>"
	exit
fi

#Get list of all drives
ALL_DRIVES=( /dev/sd? )
ALL_DRIVES_COUNT=${#ALL_DRIVES[@]}


#Get drive information
function get_drive_info {
SMARTINFO=`smartctl -i $DRIVE | tr -cd "A-Za-z0-9:=,/\n "`
CAPACITYBYTES=`echo -e "$SMARTINFO" | grep ^User | sed "s/ * / /g" | cut -d" " -f3 | tr -cd "0-9"`
if [ ! -z "$CAPACITYBYTES" ]
then
	#Convert capacity to gigabytes
	CAPACITY=`echo "scale=0; $CAPACITYBYTES/1024/1024/1024" | bc`
	DRIVESCALE=GB
	if [ $CAPACITY -gt 1000 ]
	then
		#Covert capacity to terabytes
		CAPACITY=`echo "scale=2; $CAPACITY/1024" | bc`
		DRIVESCALE=TB
	fi
else
	CAPACITY=0
fi

DISKSIZE=`echo $CAPACITY$DRIVESCALE`
DRIVE_STATUS=ok
smartctl -H $DRIVE 1>/dev/null 2>/dev/null
SMARTSTATUS=`echo $?`
if [ -e $DRIVE ]
then
	HDDATA=`hdparm -i $DRIVE | grep SerialNo= | sed "s/,/\n/g"`
fi
MAKER=`echo -e "$HDDATA" | grep Model= | cut -d= -f2`
DRIVE_SN=`echo -e "$HDDATA" | grep SerialNo= | cut -d= -f2`

DISKICON=hdd.png
if [ $SMARTSTATUS = 24 ]
then
	#Drive failing
	DRIVE_STATUS=fail
	DISKICON=hdd_fail.png
fi
}

##########################
#Show a list of spare drives
##########################
#Get list of all unmounted drives and display properties
function show_spare_drives {
COUNTER=0
SHOW_MENU=yes
SHOW_SUBMIT=no
echo "<input type=\"hidden\" name=\"_SERVERNAME_\" value=\"'$SERVERNAME'\">"
echo "<input type=\"hidden\" name=\"_SERVERTYPE_\" value=\"'$SERVERTYPE'\">"
echo "<input type=\"hidden\" name=\"_SERVERMASTER_\" value=\"'$SERVERMASTER'\">"

echo "<table class=\"standard\" style=\"text-align: left;\" border=\"0\" cellpadding=\"2\" cellspacing=\"2\"><tbody>"

while [ $COUNTER -lt $ALL_DRIVES_COUNT ]
do
	DRIVE=${ALL_DRIVES[$COUNTER]}
	DRIVE_SHORT=`echo $DRIVE | sed "s/\/dev\///g"` 
	#Try and get by-id identifier
	DRIVEBYID=`ls -l /dev/disk/by-id | sed "s/ * / /g" | grep -w "$DRIVE_SHORT" | cut -d" " -f9`
	if [ -z "$DRIVEBYID" ]
	then
		DRIVEBYID="$DRIVE_SHORT"
	fi

	#Get all uuid identifiers for the drive.
	UUIDS=`ls -l /dev/disk/by-uuid | sed "s/ * / /g" | grep "$DRIVE_SHORT" | cut -d" " -f9`
	UUIDCHECK=no
	for UUID in `echo "$UUIDS"`
	do
		if [ `mount | grep -c $UUID` != 0 ]
		then
			UUIDCHECK=yes
		fi
	done

	if [ $UUIDCHECK = no ] && [ `mount | grep -c $DRIVE` = 0 ] && [ `zpool status | grep -c -w $DRIVE_SHORT` = 0 ] && [ `zpool status | grep -c -w "$DRIVEBYID"` = 0 ] && [ `cat /proc/mdstat | grep -c $DRIVE_SHORT` = 0 ] || [ `zpool status | grep -w $DRIVE_SHORT | grep -c UNAVAIL` -gt 0 ]
	then
	get_drive_info


		#Show drive information
		if [ $DRIVE_STATUS = ok ]
		then
			echo "<tr><td style=\"width: '$WIDTH1'px;\"><a class=\"info\" href=\"javascript:void(0)\"><img class=\"images\" alt=\"\" src=\"/images/submenus/system/$DISKICON\"><span>$DRIVE - $DISKSIZE</span></a> '$"Available Drive"'</td><td style=\"width: 260px;\">$MAKER $DRIVE_SN</td><td>"
			#Create list of drives in array to replace
			echo "<select name=\"select\"><option value=\"_POOL_$POOLNAME"_"ACTION_addspare_DRIVE_$DRIVE"_"DRIVE2_notset_\">'$"Add spare"'</option>"

			for RAIDDISK in $ZPOOLDRIVES
			do
				#RAIDDISK=`echo /dev/$RAIDDISK`
				echo "<option value="_POOL_$POOLNAME\_ACTION_replace_DRIVE_$DRIVE\_DRIVE2_$RAIDDISK\_">'$"Replace"' - $RAIDDISK</option>"
			done

			echo "</select></td><td><a class=\"info\" href=\"javascript:void(0)\"><input name=\"submit\" type=\"image\" class=\"images\" src=\"'$ICON1'\" value=\"\"><span>'$"Add this disk to a raid."'</span></a></td></tr>"
		else
			echo "<tr><td style=\"width: '$WIDTH1'px;\"><a class=\"info\" href=\"javascript:void(0)\"><img class=\"images\" alt=\"\" src=\"/images/submenus/system/$DISKICON\"><span>$DRIVE - $DISKSIZE</span></a>$DRIVE</td><td style=\"width: 260px;\">$MAKER $DRIVE_SN</td></tr>"
		fi
	fi
	let COUNTER=$COUNTER+1
	done
echo "</tbody></table><br><br>"
}

##########################
#Get a list of all available pools
##########################
for POOLNAME in `zpool status | grep pool: | cut -d: -f2 | sed "s/ //g"`
do

#Get a list of active drives in the array
ZPOOLDRIVES=`zpool status $POOLNAME | grep "ONLINE\|SPARE\|OFFLINE\|AVAIL" | sed "s/\\t//g" | sed "s/^ * //g" | cut -d" " -f1 | grep -v "mirror\|replacing\|state:\|$POOLNAME\|raidz"`

#Show raid information

if [ -f /etc/rc2.d/S90zfs-mount-$POOLNAME ]
then
	MOUNTPOINT=`grep "mount " /etc/rc2.d/S90zfs-mount-$POOLNAME | cut -d" " -f3`
else
	MOUNTPOINT=`zfs get mountpoint $POOLNAME | sed -n 2,2p | sed "s/ * / /g" | cut -d" " -f3`
fi

ZPOOLINFO=`zpool list $POOLNAME | sed -n 2,2p | sed "s/ * / /g"`
ZPOOLSTATUS=`zpool status $POOLNAME`
RAID_SIZE=`df -h | grep $MOUNTPOINT | sed "s/ * / /g" | cut -d" " -f2` 
RAID_STATE=`echo -e $ZPOOLINFO | cut -d" " -f7`
SCANINFORMATION=`echo -e "$ZPOOLSTATUS" | grep scan: | cut -d: -f2`
RAID_TYPE=`zpool status $POOLNAME | grep raidz | tr -cd "A-Za-z0-9- " | sed "s/^ * //g" | cut -d" " -f1`
if [ -z $RAID_TYPE ]
then
	RAID_TYPE=mirror
fi
echo "<b>'$"Raid Information"'</b><br><br>
<table class=\"standard\" style=\"text-align: left;\" border=\"0\" cellpadding=\"2\" cellspacing=\"2\"><tbody>
<tr><td style=\"min-width: '$WIDTH1'px;\">'$"Raid Name"'</td><td>$POOLNAME</td></tr>
<tr><td>'$"Raid Type"'</td><td>$RAID_TYPE</td></tr>
<tr><td>'$"Raid Size"'</td><td>$RAID_SIZE</td></tr>
<tr><td>'$"Raid State"'</td><td>$RAID_STATE</td></tr>
<tr><td>'$"Mount Point"'</td><td>$MOUNTPOINT</td></tr>
<tr><td valign="top">'$"Scan Information"'</td><td>$SCANINFORMATION</td></tr>"


for ZPOOLDRIVE in $ZPOOLDRIVES
	do
	DRIVE=/dev/$ZPOOLDRIVE
	SHOWREMOVE=no
	#Get disk status
	DISKSTATUS=$"Active"
	[ `echo -e "$ZPOOLSTATUS" | grep -w $DRIVE | grep -c -w OFFLINE` -gt 0 ] && DISKSTATUS=$"Offline"

	if [ `echo -e "$ZPOOLSTATUS" | grep -w $ZPOOLDRIVE | grep -c -w AVAIL` -gt 0 ]
	then
		DISKSTATUS=$"Spare"
		SHOWREMOVE=yes
	fi

	if [ `echo -e "$ZPOOLSTATUS" | grep -w $ZPOOLDRIVE | grep -c -w UNAVAIL` -gt 0 ]
	then	
		DISKSTATUS=$"Unavailable"
		DISKSIZE=$"Unknown"
		MAKER=$"Drive Offline"
		DRIVE_SN=""
	else		
		get_drive_info
	fi
	echo "<tr><td><a class=\"info\" href=\"javascript:void(0)\"><img class=\"images\" alt=\"\" src=\"/images/submenus/system/$DISKICON\"><span>$DRIVE - $DISKSIZE</span></a> "$ZPOOLDRIVE - $DISKSTATUS"</td><td>$MAKER $DRIVE_SN</td>"

[ $SHOWREMOVE = yes ] && echo "<td>
<a class=\"info\" href=\"javascript:void(0)\"><input name=\"_SERVERTYPE_'$SERVERTYPE'_SERVERNAME_'$SERVERNAME'_ACTION_removespare_POOL_$POOLNAME"_"DRIVE_$DRIVE"_"DRIVE2_notset"_"\" type=\"image\" class=\"images\" src="'$ICON3'" value=\"\"><span>Remove spare</span></a>
</td>"
echo "</tr>"
	done

echo "</tbody></table><br>"
#Show any spare drives
show_spare_drives
echo "</form><form METHOD=POST ACTION=\"/cgi-bin/admin/zfs_raid_control2.cgi\" target=\"_top\" name = \"frm\">"
done
'
fi

if [ $SERVERTYPE = federatedslave ]
then
ssh -o PasswordAuthentication=no -o ConnectTimeout=3 $SERVERMASTER '
ssh -o PasswordAuthentication=no -o ConnectTimeout=3 '$SERVERNAME' '\''

echo boo2
'\''
'
fi

exit


