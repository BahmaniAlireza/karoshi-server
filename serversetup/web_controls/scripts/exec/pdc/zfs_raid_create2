#!/bin/bash
#Copyright (C) 2010 Paul Sharrad

#This file is part of Karoshi Server.
#
#Karoshi Server is free software: you can redistribute it and/or modify
#it under the terms of the GNU Affero General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#Karoshi Server is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU Affero General Public License for more details.
#
#You should have received a copy of the GNU Affero General Public License
#along with Karoshi Server.  If not, see <http://www.gnu.org/licenses/>.

#
#The Karoshi Team can be contacted at: 
#mpsharrad@karoshi.org.uk
#jharris@karoshi.org.uk
#aball@karoshi.org.uk
#
#Website: http://www.karoshi.org.uk
LOG_DATE=`date +%F`
########################
#Check md5checksum
########################
if ! test -f /opt/karoshi/web_controls/checksums/admin_checksums/zfs_raid_create2_cgi
then
echo `date`: zfs_raid_create2 - No admin MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
source /opt/karoshi/web_controls/checksums/admin_checksums/zfs_raid_create2_cgi
MD5SUM=`md5sum /var/www/cgi-bin_karoshi/admin/zfs_raid_create2.cgi | cut -d' ' -f1`
[ $MD5SUM'null' = null ] && MD5SUM=not_set
if [ $MD5SUM'check' != $zfs_raid_create2_cgi'check' ]
then
echo `date`: zfs_raid_create2 - Incorrect admin MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi

########################
#Get variables
########################
numArgs=$#
if [ $numArgs != 0 ]
then
echo `date`: zfs_raid_create2 - incorrect number of arguments >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi

read DATA
DATA=`echo $DATA | tr -cd 'A-Za-z0-9:._,/'`
if [ $DATA'null' = null ]
then
echo `date`: zfs_raid_create2 - no data >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
REMOTE_USER=`echo "$DATA" | cut -s -d: -f1`
REMOTE_ADDR=`echo "$DATA" | cut -s -d: -f2`
REMOTE_MD5=`echo "$DATA" | cut -s -d: -f3`
SERVERNAME=`echo "$DATA" | cut -s -d: -f4`
SERVERTYPE=`echo "$DATA" | cut -s -d: -f5`
SERVERMASTER=`echo "$DATA" | cut -s -d: -f6`
ACTION=`echo "$DATA" | cut -s -d: -f7`
PARITY=`echo "$DATA" | cut -s -d: -f8`
DRIVELIST=`echo "$DATA" | cut -s -d: -f9`
SPAREDRIVELIST=`echo "$DATA" | cut -s -d: -f10`
MOUNTPOINT=`echo "$DATA" | cut -s -d: -f11`
CREATETYPE=`echo "$DATA" | cut -s -d: -f12`

########################
#Check data
########################
if [ $REMOTE_MD5'check' != $MD5SUM'check' ]
then
echo `date`: zfs_raid_create2 - Not called by zfs_raid_create2.cgi >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
if [ $REMOTE_USER'null' = null ]
then
echo `date`: zfs_raid_create2 - Blank remote user >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
if [ $REMOTE_ADDR'null' = null ]
then
echo `date`: zfs_raid_create2 - Blank remote tcpip address >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
if [ $SERVERNAME'null' = null ]
then
echo `date`: zfs_raid_create2 - Blank server >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
if [ $SERVERTYPE'null' = null ]
then
echo `date`: zfs_raid_create2 - Blank servertype >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
if [ $SERVERTYPE = federatedslave ]
then
if [ $SERVERMASTER'null' = null ]
then
echo `date`: zfs_raid_create2 - Blank servermaster >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
fi

if [ $CREATETYPE'null' = null ]
then
echo `date`: zfs_raid_create2 - Blank createtype >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi

if [ $CREATETYPE != restore ] && [ $CREATETYPE != create ] && [ $CREATETYPE != reuse ]
then
echo `date`: zfs_raid_create2 - incorrect createtype >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi

if [ $CREATETYPE = create ]
then

if [ $PARITY'null' = null ]
then
echo `date`: zfs_raid_create2 - Blank parity >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi

if [ $DRIVELIST'null' = null ]
then
echo `date`: zfs_raid_create2 - Blank drives >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi

if [ $MOUNTPOINT'null' = null ]
then
echo `date`: zfs_raid_create2 - Blank mountpoint >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
fi

if [ `grep -c ^$REMOTE_USER: /opt/karoshi/web_controls/web_access_admin` != 1 ]
then
echo `date`: zfs_raid_create2 - access denied to $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi


[ $CREATETYPE = create ] && echo `date`: zfs_raid_create2 - servername $SERVERNAME servertype $SERVERTYPE parity $PARITY drivelist $DRIVELIST $SPAREDRIVELIST mountpoint $MOUNTPOINT by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE

[ $CREATETYPE = restore ] && echo `date`: zfs_raid_create2 - restoring zfs raid by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE

[ $CREATETYPE = reuse ] && echo `date`: zfs_raid_create2 - reusing drives "for" a new zfs raid by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE


##########################
#Language
##########################
LANGCHOICE=englishuk
STYLESHEET=defaultstyle.css
[ -f /opt/karoshi/web_controls/user_prefs/$REMOTE_USER ] && source /opt/karoshi/web_controls/user_prefs/$REMOTE_USER
[ -f /opt/karoshi/web_controls/language/$LANGCHOICE/system/software_raid ] || LANGCHOICE=englishuk
source /opt/karoshi/web_controls/language/$LANGCHOICE/system/software_raid
[ -f /opt/karoshi/web_controls/language/$LANGCHOICE/all ] || LANGCHOICE=englishuk
source /opt/karoshi/web_controls/language/$LANGCHOICE/all

if [ $SERVERNAME = `hostname-fqdn` ]
then

if [ $CREATETYPE = create ]
then
DRIVELIST=`echo $DRIVELIST | sed "s/,/ /g"`
#Create the zfs raid
echo "<pre style=\"font-size: 10pt; font-family:Arial, Times, Georgia, serif\">"
echo "<li>Creating ZFS raid z$PARITY</li>"

if [ ! -z $SPAREDRIVELIST ]
then
SPAREDRIVELIST=`echo $SPAREDRIVELIST | sed "s/,/ /g"`
zpool create -o ashift=12 -f $HOSTNAME-data raidz$PARITY $DRIVELIST spare $SPAREDRIVELIST
else
zpool create -o ashift=12 -f $HOSTNAME-data raidz$PARITY $DRIVELIST
fi

#Check zfs raid has been created
zpool status $HOSTNAME-data
if [ `echo $?` != 0 ]
then
echo $ERRORMSG18"<br>"
sleep 3
exit 101
fi

#Get size of zfs raid
ZFSSIZEDATA=`zfs list $HOSTNAME-data | sed -n 2,2p | sed "s/ * / /g" | cut -d" " -f3`
#Get rid of decimal places
ZFSSIZE=`echo $ZFSSIZEDATA | cut -d"." -f1`
STORAGEUNIT=`echo $ZFSSIZEDATA | tr -cd "A-Z"`
#Convert to gigabytes if reported in terabytes
if [ $STORAGEUNIT = T ]
then
STORAGEUNIT=G
let ZFSSIZE=$ZFSSIZE*1024
fi
#Create partition on zfs raid
zfs create -V $ZFSSIZE$STORAGEUNIT $HOSTNAME-data/storage
STATUS=$?
#Check zfs partition has been created
while [ $STATUS != 0 ]
do
let ZFSSIZE=$ZFSSIZE-1
zfs create -V $ZFSSIZE$STORAGEUNIT $HOSTNAME-data/storage
STATUS=$?
done
echo "<li>$CREATEARTITIONMSG - $ZFSSIZE$STORAGEUNIT</li>"

#Format the partition as ext4
echo "<li>$FORMATMSG</li>"
mkfs.ext4 /dev/$HOSTNAME-data/storage
#Mount partition on a temporary mount point
[ ! -d $MOUNTPOINT.$$ ] && mkdir -p $MOUNTPOINT.$$
mount /dev/$HOSTNAME-data/storage $MOUNTPOINT.$$

#Copy data to new array
if [ -d $MOUNTMOUNT ]
then
echo "<br><li>"$COPYDATAMSG"</b></li>"
sleep 2
rsync --timeout=30 --verbose --dirs --recursive --links --compress --delete --backup --times --perms --executability --owner --group -o $MOUNTPOINT/ $MOUNTPOINT.$$/
fi

#Remove any existing partitions from fstab
if [ `grep -c -w $MOUNTPOINT /etc/fstab` -gt 0 ]
then
#Umount the partition
echo "<li>"$MOUNTPOINT- $UMOUNTPARTITIONMSG"</li>"
umount $MOUNTPOINT

#Backup /etc/fstab
echo "<li>"Backing up fstab"</li>"
cp /etc/fstab /etc/fstab-backup.$$

#Remove entry from fstab
LINENO=`grep -n $MOUNTPOINT /etc/fstab`
sed -i $LINENO"d" /etc/fstab
fi

#Unmount zfs partition and mount as /home
umount $MOUNTPOINT.$$
mount /dev/$HOSTNAME-data/storage $MOUNTPOINT

#Remove temporary mount point
[ -d $MOUNTPOINT.$$ ] && rm -f -R $MOUNTPOINT.$$
echo "</pre>"

#Mount partition on boot
echo mount /dev/$HOSTNAME-data/storage $MOUNTPOINT > /etc/rc2.d/S99zfs-mount
chmod 0700 /etc/rc2.d/S99zfs-mount
fi

#Restore existing zfs raid
if [ $CREATETYPE = restore ]
then
zpool import -D -f $HOSTNAME-data
mount /dev/$HOSTNAME-data/storage $MOUNTPOINT
#Mount partition on boot
echo mount /dev/$HOSTNAME-data/storage $MOUNTPOINT > /etc/rc2.d/S99zfs-mount
chmod 0700 /etc/rc2.d/S99zfs-mount
fi

#Reuse existing zfs raid
if [ $CREATETYPE = reuse ]
then
echo "</form><form METHOD=POST ACTION=\"/cgi-bin/admin/zfs_raid_create.cgi\" target=\"_top\" name = \"frm\">
<input type=\"hidden\" name=\"_SERVERNAME_\" value=\"$SERVERNAME\">
<input type=\"hidden\" name=\"_SERVERTYPE_\" value=\"$SERVERTYPE\">
<input type=\"hidden\" name=\"_SERVERMASTER_\" value=\"$SERVERMASTER\">
<input type=\"hidden\" name=\"_CREATETYPE_\" value=\"reuse\">
</form>
<script>
document.frm.submit();
</script><form>
"
fi

#Add cron job for zpool scrub
[ -d /opt/karoshi/cronjobs/jobs ] || mkdir -p /opt/karoshi/cronjobs/jobs
echo 0 0 '*' '*' 0,2,4 zpool scrub $HOSTNAME-data > /opt/karoshi/cronjobs/jobs/zpool_scrub.cron
/opt/karoshi/serversetup/all/"useful scripts"/refreshcronjobs
echo "<br>"

fi

if [ $SERVERTYPE = network ] || [ $SERVERTYPE = federated ] && [ $SERVERNAME != `hostname-fqdn` ]
then
ssh -x -o PasswordAuthentication=no $SERVERNAME '

if [ '$CREATETYPE' = create ]
then
DRIVELIST=`echo '$DRIVELIST' | sed "s/,/ /g"`
#Create the zfs raid
echo "<pre style=\"font-size: 10pt; font-family:Arial, Times, Georgia, serif\">"
echo "<li>Creating ZFS raid z'$PARITY'</li>"

if [ ! -z '$SPAREDRIVELIST' ]
then
SPAREDRIVELIST=`echo '$SPAREDRIVELIST' | sed "s/,/ /g"`
zpool create -o ashift=12 -f $HOSTNAME-data raidz'$PARITY' $DRIVELIST spare $SPAREDRIVELIST
else
zpool create -o ashift=12 -f $HOSTNAME-data raidz'$PARITY' $DRIVELIST
fi

#Check zfs raid has been created
zpool status $HOSTNAME-data
if [ `echo $?` != 0 ]
then
echo '$ERRORMSG18'"<br>"
sleep 3
exit 101
fi

#Get size of zfs raid
ZFSSIZEDATA=`zfs list $HOSTNAME-data | sed -n 2,2p | sed "s/ * / /g" | cut -d" " -f3`
#Get rid of decimal places
ZFSSIZE=`echo $ZFSSIZEDATA | cut -d"." -f1`
STORAGEUNIT=`echo $ZFSSIZEDATA | tr -cd "A-Z"`
#Convert to gigabytes if reported in terabytes
if [ $STORAGEUNIT = T ]
then
STORAGEUNIT=G
let ZFSSIZE=$ZFSSIZE*1024
fi
#Create partition on zfs raid
zfs create -V $ZFSSIZE$STORAGEUNIT $HOSTNAME-data/storage
STATUS=$?
#Check zfs partition has been created
while [ $STATUS != 0 ]
do
let ZFSSIZE=$ZFSSIZE-1
zfs create -V $ZFSSIZE$STORAGEUNIT $HOSTNAME-data/storage
STATUS=$?
done
echo "<li>'$CREATEARTITIONMSG' - $ZFSSIZE$STORAGEUNIT</li>"

#Format the partition as ext4
echo "<li>'$FORMATMSG'</li>"
mkfs.ext4 /dev/$HOSTNAME-data/storage
#Mount partition on a temporary mount point
[ ! -d '$MOUNTPOINT'.'$$' ] && mkdir -p '$MOUNTPOINT'.'$$'
mount /dev/$HOSTNAME-data/storage '$MOUNTPOINT'.'$$'

#Copy data to new array
if [ -d $MOUNTMOUNT ]
then
echo "<br><li>"'$COPYDATAMSG'"</b></li>"
sleep 2
rsync --timeout=30 --verbose --dirs --recursive --links --compress --delete --backup --times --perms --executability --owner --group -o '$MOUNTPOINT'/ '$MOUNTPOINT'.'$$'/
fi

#Remove any existing partitions from fstab
if [ `grep -c -w '$MOUNTPOINT' /etc/fstab` -gt 0 ]
then
#Umount the partition
echo "<li>"'$MOUNTPOINT'- '$UMOUNTPARTITIONMSG'"</li>"
umount '$MOUNTPOINT'

#Backup /etc/fstab
echo "<li>"Backing up fstab"</li>"
cp /etc/fstab /etc/fstab-backup.$$

#Remove entry from fstab
LINENO=`grep -n '$MOUNTPOINT' /etc/fstab`
sed -i $LINENO"d" /etc/fstab
fi

#Unmount zfs partition and mount on correct mount point
umount '$MOUNTPOINT'.'$$'
mount /dev/$HOSTNAME-data/storage '$MOUNTPOINT'

#Remove temporary mount point
[ -d '$MOUNTPOINT'.'$$' ] && rm -f -R '$MOUNTPOINT'.'$$'
echo "</pre>"

#Mount partition on boot
echo mount /dev/$HOSTNAME-data/storage '$MOUNTPOINT' > /etc/rc2.d/S99zfs-mount
chmod 0700 /etc/rc2.d/S99zfs-mount
fi

#Restore existing zfs raid
if [ '$CREATETYPE' = restore ]
then
zpool import -D -f $HOSTNAME-data
mount /dev/$HOSTNAME-data/storage '$MOUNTPOINT'
#Mount partition on boot
echo mount /dev/$HOSTNAME-data/storage '$MOUNTPOINT' > /etc/rc2.d/S99zfs-mount
chmod 0700 /etc/rc2.d/S99zfs-mount
fi

#Reuse existing zfs raid
if [ '$CREATETYPE' = reuse ]
then
echo "</form><form METHOD=POST ACTION=\"/cgi-bin/admin/zfs_raid_create.cgi\" target=\"_top\" name = \"frm\">
<input type=\"hidden\" name=\"_SERVERNAME_\" value=\"'$SERVERNAME'\">
<input type=\"hidden\" name=\"_SERVERTYPE_\" value=\"'$SERVERTYPE'\">
<input type=\"hidden\" name=\"_SERVERMASTER_\" value=\"'$SERVERMASTER'\">
<input type=\"hidden\" name=\"_CREATETYPE_\" value=\"reuse\">
</form>
<script>
document.frm.submit();
</script><form>
"
fi

#Add cron job for zpool scrub
[ -d /opt/karoshi/cronjobs/jobs ] || mkdir -p /opt/karoshi/cronjobs/jobs
echo 0 0 "*" "*" 0,2,4 zpool scrub $HOSTNAME-data > /opt/karoshi/cronjobs/jobs/zpool_scrub.cron
/opt/karoshi/serversetup/all/"useful scripts"/refreshcronjobs
echo "<br>"
'
fi

if [ $SERVERTYPE = federatedslave ]
then
ssh -o PasswordAuthentication=no -o ConnectTimeout=3 $SERVERMASTER '
echo `date`: zfs_raid_create2 \(federated mode\) - servername '$SERVERNAME' servertype '$SERVERTYPE' raidtype '$RAIDTYPE' drivelist '$DRIVELIST' mountpoint '$MOUNTPOINT' by '$REMOTE_USER' from '$REMOTE_ADDR' >> /opt/karoshi/logs/karoshi_web_management/'$LOG_DATE'
ssh -o PasswordAuthentication=no -o ConnectTimeout=3 '$SERVERNAME' '\''

echo in ssh2
'\''
'
fi

exit

