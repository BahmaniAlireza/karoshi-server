#!/bin/bash
#Copyright (C) 2009 Paul Sharrad
#This program is free software; you can redistribute it and/or
#modify it under the terms of the GNU General Public License
#as published by the Free Software Foundation; either version 2
#of the License, or (at your option) any later version.
#
#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.
#
#You should have received a copy of the GNU General Public License
#along with this program; if not, write to the Free Software
#Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#
#The Karoshi Team can be contacted at: 
#mpsharrad@karoshi.org.uk
#jharris@karoshi.org.uk
#aball@karoshi.org.uk
#
#Website: http://www.karoshi.org.uk
LOG_DATE=`date +%F`
########################
#Check md5checksum
########################
if ! test -f /opt/karoshi/web_controls/checksums/admin_checksums/file_manager_cgi
then
echo `date`: file_manager - No admin MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
source /opt/karoshi/web_controls/checksums/admin_checksums/file_manager_cgi
MD5SUM=`md5sum /var/www/cgi-bin_karoshi/admin/file_manager.cgi | cut -d' ' -f1`
[ $MD5SUM'null' = null ] && MD5SUM=not_set
if [ $MD5SUM'check' != $file_manager_cgi'check' ]
then
echo `date`: file_manager - Incorrect admin MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi

########################
#Get variables
########################
numArgs=$#
if [ $numArgs != 0 ]
then
echo `date`: file_manager - incorrect number of arguments >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi

read DATA
DATA=`echo $DATA | tr -cd 'A-Za-z0-9\._:\-+/%'`
if [ $DATA'null' = null ]
then
echo `date`: file_manager - no data >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi

REMOTE_USER=`echo "$DATA" | cut -s -d: -f1`
REMOTE_ADDR=`echo "$DATA" | cut -s -d: -f2`
REMOTE_MD5=`echo "$DATA" | cut -s -d: -f3`
SERVER=`echo "$DATA" | cut -s -d: -f4`
LOCATION=`echo "$DATA" | cut -s -d: -f5`
FILENAME=`echo "$DATA" | cut -s -d: -f6`
ACTION=`echo "$DATA" | cut -s -d: -f7`
PERMISSIONS=`echo "$DATA" | cut -s -d: -f8`
ITEMMOVE=`echo "$DATA" | cut -s -d: -f11`
########################
#Check data
########################
if [ $REMOTE_MD5'check' != $MD5SUM'check' ] && [ $REMOTE_MD5'check' != $MD5SUM2'check' ]
then
echo `date`: file_manager - Not called by file_manager.cgi >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
if [ $REMOTE_USER'null' = null ]
then
echo `date`: file_manager - Blank remote user >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
if [ $REMOTE_ADDR'null' = null ]
then
echo `date`: file_manager - Blank remote tcpip address >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi

if [ $LOCATION'null' = null ]
then
LOCATION=""
fi

if [ $SERVER'null' = null ]
then
SERVER=$HOSTNAME
fi

if [ $ACTION'null' = null ]
then
ACTION=ENTER
fi

if [ $ACTION != ENTER ] && [ $ACTION != DELETE ] && [ $ACTION != REALLYDELETE ] && [ $ACTION != SETPERMS ] && [ $ACTION != REALLYSETPERMS ] && [ $ACTION != MOVE ] && [ $ACTION != REALLYMOVE ] && [ $ACTION != REALLYCOPY ] && [ $ACTION != CANCELCOPY ] && [ $ACTION != RENAME ] && [ $ACTION != REALLYRENAME ] && [ $ACTION != EDIT ] && [ $ACTION != REALLYEDIT ] && [ $ACTION != CREATEDIR ] && [ $ACTION != REALLYCREATEDIR ]
then
echo `date`: file_manager - incorrect action by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi

if [ `grep -c $REMOTE_USER: /opt/karoshi/web_controls/web_access_admin` != 1 ]
then
echo `date`: file_manager - access denied to $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi

[ -f /opt/karoshi/web_controls/user_prefs/$REMOTE_USER ] && source /opt/karoshi/web_controls/user_prefs/$REMOTE_USER

#Show server choice
if [ $LOCATION'null' = null ] && [ $ACTION = ENTER ]
then
echo '<input type="image" title="'$HOSTNAME'" src="/images/submenus/file/xen.gif" name="_SERVER_" value="xen">'
if [ -f /opt/karoshi/serversetup/variables/ssh/oracssh ]
then
echo '<input type="image" title="orac" src="/images/submenus/file/orac.gif" name="_SERVER_" value="orac">'
fi
if [ -f /opt/karoshi/serversetup/variables/ssh/joshuassh ]
then
echo '<input type="image" title="joshua" src="/images/submenus/file/joshua.gif" name="_SERVER_" value="joshua">'
fi
if [ -f /opt/karoshi/serversetup/variables/ssh/halssh ]
then
echo '<input type="image" title="hal" src="/images/submenus/file/hal.gif" name="_SERVER_" value="hal">'
fi
if [ -f /opt/karoshi/serversetup/variables/ssh/skynetssh ]
then
echo '<input type="image" title="skynet" src="/images/submenus/file/skynet.gif" name="_SERVER_" value="skynet">'
fi
if [ -f /opt/karoshi/serversetup/variables/ssh/salssh ]
then
echo '<input type="image" title="sal" src="/images/submenus/file/sal.gif" name="_SERVER_" value="sal">'
fi
if [ -f /opt/karoshi/serversetup/variables/ssh/novacssh ]
then
echo '<input type="image" title="novac" src="/images/submenus/file/novac.gif" name="_SERVER_" value="novac">'
fi
if [ -f /opt/karoshi/serversetup/variables/ssh/tranquillityssh ]
then
echo '<input type="image" title="tranquillity" src="/images/submenus/file/tranquillity.gif" name="_SERVER_" value="tranquillity">'
fi
if [ -f /opt/karoshi/serversetup/variables/ssh/colossusssh ]
then
echo '<input type="image" title="colossus" src="/images/submenus/file/colossus.gif" name="_SERVER_" value="colossus">'
fi
if [ -f /opt/karoshi/serversetup/variables/ssh/cassandrassh ]
then
echo '<input type="image" title="cassandra" src="/images/submenus/file/cassandra.gif" name="_SERVER_" value="cassandra">'
fi
if [ -f /opt/karoshi/serversetup/variables/ssh/vincentssh ]
then
echo '<input type="image" title="vincent" src="/images/submenus/file/vincent.gif" name="_SERVER_" value="vincent">'
fi
echo '<br>'
fi

#This list is used to declare areas that cannot me deleted or moved
LOCATION_LIST="/ /bin /boot /dev /etc /home /home/applications /home/itadminshare /home/staffshare /home/subjects /home/officeshare /home/users /home/users/guests /home/users/exams /home/users/profileuser /home/users/nonteachingstaff /home/users/studentstaff /home/users/staff /home/users/students /home/users/itadminstaff /home/users/officestaff /home/users/techstaff /initrd /lib /root /opt /opt/karoshi /opt/karoshi/serversetup /opt/karoshi/web_management /opt/karoshi/karoshi_user /usr /usr/bin /proc /sbin /sys /var /var/www /var/www/html /var/www/html_karoshi /var/www/cgi-bin /var/www/cgi-bin_karoshi"
#icons
ICON2=/images/submenus/file/set_perms.png
ICON3=/images/submenus/file/rename.png
ICON4=/images/submenus/file/copy.png
ICON5=/images/submenus/file/delete.png
ICON6=/images/submenus/file/up.png
ICON7=/images/submenus/file/home.png
ICON8=/images/submenus/file/stop.png
ICON9=/images/submenus/file/move.png
ICON10=/images/submenus/file/edit.png
ICON11=/images/submenus/file/newfolder.png

function show_directory {

if [ "$LOCATION""null" != null ]
then
convert_special_chars
LOCATION=`echo "$LOCATION" | sed 's/+/ /g'`
LOCATIONFOLDER=`basename "$LOCATION"`
LASTLOCATION=`echo "$LOCATION" | sed "s/\/$LOCATIONFOLDER//g"`
fi
if [ "$ITEMMOVE"'null' != null ]
then
convert_special_chars2
echo '<input name="ITEMCOPY     " value="'$ITEMMOVE'" type="hidden">'
echo '<input name="     ENDENTRY" value="" type="hidden">'
ITEMMOVE=`echo $ITEMMOVE | sed 's/UNDERSCORE/_/g'`
echo ''$ITEMMOVE' - '$MOVEMSG2' <input type="image" src="'$ICON9'" name="_ACTION_" value="'$SERVER'_REALLYMOVE_'$LOCATION'">'
echo ''$COPYMSG2' <input type="image" src="'$ICON4'" name="_ACTION_" value="'$SERVER'_REALLYCOPY_'$LOCATION'">'
echo ''$CANCELMSG' <input type="image" src="'$ICON8'" name="_ACTION_" value="'$SERVER'_CANCELCOPY_'$LOCATION'"><br><br>'
fi

echo ''$LOCATION'<br><table class="standard" style="text-align: left;" border="0" cellpadding="2" cellspacing="2"><tbody>
<tr><td style="vertical-align: top;"><input type="image" src="'$ICON7'" name="_ACTION_" value="'$SERVER'_ENTER_"></td><td style="vertical-align: top;"><input type="image" src="'$ICON6'" name="_ACTION_" value="'$SERVER'_ENTER_'$LASTLOCATION'"></td><td><input type="image" src="'$ICON11'" name="_ACTION_" value="'$SERVER'_CREATEDIR_'$LOCATION'"></td></tr>
'

if [ $SERVER = xen ]
then
if [ `ls -1 -a "$LOCATION"/ | wc -l` -gt 2 ]
then
GLOBIGNORE=yes
for FILE in "$LOCATION"/*
do
FILENAME=`basename "$FILE"`
FILEINFO=`ls -l -h -d "$FILE"`
PERMS=`echo $FILEINFO | cut -d" " -f1`
OWNER=`echo $FILEINFO | cut -d" " -f3-4`
SIZE=`echo $FILEINFO | cut -d" " -f5`
LASTMOD=`echo $FILEINFO | cut -d" " -f6-8`

ICON1=/images/submenus/file/file.png
FILEACTION=DOWNLOAD
if [ -d "$FILE" ]
then
ICON1=/images/submenus/file/folder.png
FILEACTION=ENTER
fi
echo '<tr>'
if [ `echo $LOCATION_LIST | grep -c -w "$FILE"` = 0 ]
then
echo '<td><input type="image" src="'$ICON2'" name="_ACTION_" value="'xen_SETPERMS_$FILE'"></td>
<td><input type="image" src="'$ICON3'" name="_ACTION_" value="'xen_RENAME_$FILE'"></td>
<td><input type="image" src="'$ICON4'" name="_ACTION_" value="'xen_MOVE_$FILE'"></td>
<td><input type="image" src="'$ICON5'" name="_ACTION_" value="'xen_DELETE_$FILE'"></td>'
else
echo "<td></td><td></td><td></td><td></td>"
fi
echo '<td><a class="info" href="javascript:void(0)"><img class="images" alt="" src="/images/submenus/file/details.png" /><span>'$OWNERMSG' : '$OWNER'<br>'$PERMISSIONSMSG' : '$PERMS'<br>'$LASTMODMSG' : '$LASTMOD'<br>'$SIZEMSG' : '$SIZE'</span></a></td><td>'

if [ $FILEACTION = ENTER ]
then
echo '<input type="image" src="'$ICON1'" name="_ACTION_" value="xen_'$FILEACTION'_'$FILE'">'
else
FILETYPEDATA=`file "$FILE"`
if [ `echo "$FILETYPEDATA" | grep -c ASCII` -gt 0 ] || [ `echo "$FILETYPEDATA" | grep -c Bourne-Again` -gt 0 ]
then
echo '<input type="image" src="'$ICON10'" name="_ACTION_" value="'xen_EDIT_$FILE'">'
else
echo '<img src="'$ICON1'" />'
fi
fi
echo '</td><td>'$FILENAME'</td></tr>'
done
fi
else
ssh -x -o PasswordAuthentication=no $SERVER '
if [ `ls -1 -a "'$LOCATION'"/ | wc -l` -gt 2 ]
then
GLOBIGNORE=yes
for FILE in "'$LOCATION'"/*
do
FILENAME=`basename "$FILE"`
FILEINFO=`ls -l -h -d "$FILE"`
PERMS=`echo $FILEINFO | cut -d" " -f1`
OWNER=`echo $FILEINFO | cut -d" " -f3-4`
SIZE=`echo $FILEINFO | cut -d" " -f5`
LASTMOD=`echo $FILEINFO | cut -d" " -f6-8`

ICON1=/images/submenus/file/file.png
FILEACTION=DOWNLOAD
if [ -d "$FILE" ]
then
ICON1=/images/submenus/file/folder.png
FILEACTION=ENTER
fi
echo "<tr>"
if [ `echo '$LOCATION_LIST' | grep -c -w "$FILE"` = 0 ]
then
echo "<td><input type=\"image\" src=\"'$ICON2'\" name=\"_ACTION_\" value=\"'$SERVER'_SETPERMS_$FILE\"></td>
<td><input type=\"image\" src=\"'$ICON3'\" name=\"_ACTION_\" value=\"'$SERVER'_RENAME_$FILE\"></td>
<td><input type=\"image\" src=\"'$ICON4'\" name=\"_ACTION_\" value=\"'$SERVER'_MOVE_$FILE\"></td>
<td><input type=\"image\" src=\"'$ICON5'\" name=\"_ACTION_\" value=\"'$SERVER'_DELETE_$FILE\"></td>"
else
echo "<td></td><td></td><td></td><td></td>"
fi
echo "<td><a class="info" href="javascript:void\(0\)"><img class="images" alt=\"\" src="/images/submenus/file/details.png" /><span>'$OWNERMSG' : $OWNER<br>'$PERMISSIONSMSG' : $PERMS<br>'$LASTMODMSG' : $LASTMOD<br>'$SIZEMSG' : $SIZE</span></a></td><td>"
if [ $FILEACTION = ENTER ]
then
echo "<input type=\"image\" src=\"$ICON1\" name=\"_ACTION_\" value=\"'$SERVER'_"$FILEACTION"_$FILE\">"
else
FILETYPEDATA=`file "$FILE"`
if [ `echo "$FILETYPEDATA" | grep -c ASCII` -gt 0 ] || [ `echo "$FILETYPEDATA" | grep -c Bourne-Again` -gt 0 ]
then
echo "<input type=\"image\" src=\"'$ICON10'\" name=\"_ACTION_\" value=\"'$SERVER'_EDIT_$FILE\">"
else
echo "<img src=\"$ICON1\" />"
fi
fi
echo "</td><td>$FILENAME</td></tr>"
done
fi
'
fi
echo '</tbody></table>'

}

function convert_special_chars {
LOCATION=`echo "$LOCATION" |  sed 's/+/ /g' | sed 's/%21/!/g' | sed 's/%25/%/g' | sed 's/%5E/^/g' | sed 's/%28/(/g' | sed 's/%29/)/g' | sed 's/%7E/~/g' | sed 's/%23/#/g' | sed 's/%40/@/g' | sed 's/%7B/{/g'  | sed 's/%7D/}/g' | sed 's/%3E/>/g' | sed 's/%3C/</g' | sed 's/%C2%AC/¬/g' | sed 's/%7C/|/g' | sed 's/%2C/,/g' | sed 's/%3B/;/g' | sed 's/%3A/:/g' | sed 's/%3D/=/g' | sed 's/%2B/+/g' | sed 's/%3F/?/g'`
}

function convert_special_chars2 {
ITEMMOVE=`echo "$ITEMMOVE" |  sed 's/%2F/\//g' | sed 's/+/ /g' | sed 's/%21/!/g' | sed 's/%25/%/g' | sed 's/%5E/^/g' | sed 's/%28/(/g' | sed 's/%29/)/g' | sed 's/%7E/~/g' | sed 's/%23/#/g' | sed 's/%40/@/g' | sed 's/%7B/{/g'  | sed 's/%7D/}/g' | sed 's/%3E/>/g' | sed 's/%3C/</g' | sed 's/%C2%AC/¬/g' | sed 's/%7C/|/g' | sed 's/%2C/,/g' | sed 's/%3B/;/g' | sed 's/%3A/:/g' | sed 's/%3D/=/g' | sed 's/%2B/+/g' | sed 's/%3F/?/g'`
}

function convert_special_chars3 {
TEXTCONTENT=`echo "$TEXTCONTENT" |  sed 's/%2F/\//g' | sed 's/+/ /g' | sed 's/%21/!/g' | sed 's/%25/%/g' | sed 's/%5E/^/g' | sed 's/%28/(/g' | sed 's/%29/)/g' | sed 's/%7E/~/g' | sed 's/%23/#/g' | sed 's/%40/@/g' | sed 's/%7B/{/g'  | sed 's/%7D/}/g' | sed 's/%3E/>/g' | sed 's/%3C/</g' | sed 's/%C2%AC/¬/g' | sed 's/%7C/|/g' | sed 's/%2C/,/g' | sed 's/%3B/;/g' | sed 's/%3A/:/g' | sed 's/%3D/=/g' | sed 's/%2B/+/g' | sed 's/%3F/?/g' | sed 's/%5B/[/g' | sed 's/%5D/]/g' | sed 's/REPLACEUNDERSCORE/_/g' | sed 's/%99/*/g' | sed 's/%24/$/g' | sed 's/%26/\&/g'`
}


function really_delete_item {
if [ $LOCATION'null' = null ]
then
echo `date`: file_manager - blank location by for $SERVER by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit
fi
if [ `echo ${LOCATION_LIST[@]:0} | grep -c -w "$LOCATION"` -gt 0 ]
then
echo $ERRORMSG2'<br>'
echo '<A HREF="javascript:history.go(-2)"> <IMG SRC="/images/submenus/file/back.gif" BORDER="0"></A>'
else
#Delete the item
convert_special_chars
LOCATIONFOLDER=`basename "$LOCATION"`
LASTLOCATION=`echo "$LOCATION" | sed "s/\/$LOCATIONFOLDER//g"`
LOCATION="$LASTLOCATION"
show_directory
fi
}

function delete_item {
#Check to see that item is not on the protected list
if [ `echo ${LOCATION_LIST[@]:0} | grep -c -w "$LOCATION"` -gt 0 ]
then
echo $ERRORMSG2'<br>'
echo '<A HREF="javascript:history.go(-1)"> <IMG SRC="/images/submenus/file/back.gif" BORDER="0"></A><br>'
else
#Confirm delete of item.
convert_special_chars
echo '<b>'$DELETEMSG'</b>' $LOCATION'<br><br>'$CONFIRMDELETEMSG'<br><br>'
echo '<input type="image" src="/images/submenus/file/delete.gif" name="_ACTION_" value="'$SERVER'_REALLYDELETE_'$LOCATION'">'
echo '<A HREF="javascript:history.go(-1)"> <IMG SRC="/images/submenus/file/back.gif" BORDER="0"></A>'
fi
}

function really_set_perms {

if [ "$LOCATION"'null' = null ]
then
LOCATIONFOLDER=`basename "$LOCATION"`
LOCATION=`echo "$LOCATION" | sed "s/\/$LOCATIONFOLDER//g"`
show_directory
}

function set_perms {
convert_special_chars
echo $SETPERMSMSG - "$LOCATION""<br><br>"
#Get ownership details
echo $OWNERSHIPMSG"<br><br>"


if [ $SERVER = xen ]
then
OWNER=`ls -d -l "$LOCATION" | cut -d" " -f3`
GROUP=`ls -d -l "$LOCATION" | cut -d" " -f4`
#Show ownership
echo "<table class=\"standard\" style=\"text-align: left; \" border=\"0\" cellpadding=\"2\" cellspacing=\"2\">
<tbody>
<tr><td style=\"width: 120px;\">$USERMSG</td><td><input tabindex= \"1\" name=\" OWNER \" value=\"$OWNER\" size=\"20\" type=\"text\"></td></tr>
<tr><td>$GROUPMSG</td><td><input tabindex= \"2\" name=\" GROUP \" value=\"$GROUP\" size=\"20\" type=\"text\"></td><td></td></tr>
</tbody></table><input name=\" ownerend \" value=\"ownerend\" type=\"hidden\"<br>
"
echo $PERMISSIONSMSG"<br><br>"
#Get current permissions of the item
CURRENT_PERMS=`ls -d -l "$LOCATION" | cut -d" " -f1`

DIRECTORY=no
[ ${CURRENT_PERMS:0:1} = d ] && DIRECTORY=yes
[ ${CURRENT_PERMS:1:1} = r ] && USERREAD="checked=checked"
[ ${CURRENT_PERMS:2:1} = w ] && USERWRITE="checked=checked"
[ ${CURRENT_PERMS:3:1} = x ] && USEREXEC="checked=checked"
[ ${CURRENT_PERMS:3:1} = s ] && USEREXEC="checked=checked"
[ ${CURRENT_PERMS:3:1} = s ] && SETUID="checked=checked"

[ ${CURRENT_PERMS:4:1} = r ] && GROUPREAD="checked=checked"
[ ${CURRENT_PERMS:5:1} = w ] && GROUPWRITE="checked=checked"
[ ${CURRENT_PERMS:6:1} = x ] && GROUPEXEC="checked=checked"
[ ${CURRENT_PERMS:6:1} = s ] && GROUPEXEC="checked=checked"
[ ${CURRENT_PERMS:6:1} = s ] && SETGID="checked=checked"

[ ${CURRENT_PERMS:7:1} = r ] && OTHERREAD="checked=checked"
[ ${CURRENT_PERMS:8:1} = w ] && OTHERWRITE="checked=checked"
[ ${CURRENT_PERMS:9:1} = x ] && OTHEREXEC="checked=checked"
[ ${CURRENT_PERMS:9:1} = t ] && OTHEREXEC="checked=checked"
[ ${CURRENT_PERMS:9:1} = t ] && STICKY="checked=checked"
EXECENTERMSG=$ENTERMSG
[ $DIRECTORY = no ] && EXECENTERMSG=$EXECMSG

echo "<table class=\"standard\" style=\"text-align: left; width: 400px;\" border=\"0\" cellpadding=\"2\" cellspacing=\"2\"><tbody>
<tr><td style=\"width: 120px;\"></td><td>$READMSG</td><td>$WRITEMSG</td><td>$EXECENTERMSG</td><td>$SPECIALMSG</td></tr>
<tr><td>$USERMSG</td><td><input name=\"USERREAD\" $USERREAD value=\"1\" type=\"checkbox\"></td><td><input name=\"USERWRITE\" $USERWRITE value=\"1\" type=\"checkbox\"></td><td><input name=\"USEREXEC\" $USEREXEC value=\"1\" type=\"checkbox\"></td><td><input name=\"SETUID\" $SETUID value=\"1\" type=\"checkbox\"></td><td>$SETUIDMSG</td></tr>
<tr><td>$GROUPMSG</td><td><input name=\"GROUPREAD\" $GROUPREAD value=\"1\" type=\"checkbox\"></td><td><input name=\"GROUPWRITE\" $GROUPWRITE value=\"1\" type=\"checkbox\"></td><td><input name=\"GROUPEXEC\" $GROUPEXEC value=\"1\" type=\"checkbox\"></td><td><input name=\"SETGID\" $SETGID value=\"1\" type=\"checkbox\"></td><td>$SETGIDMSG</td></tr>
<tr><td>$OTHERMSG</td><td><input name=\"OTHERREAD\" $OTHERREAD value=\"1\" type=\"checkbox\"></td><td><input name=\"OTHERWRITE\" $OTHERWRITE value=\"1\" type=\"checkbox\"></td><td><input name=\"OTHEREXEC\" $OTHEREXEC value=\"1\" type=\"checkbox\"></td><td><input name=\"STICKY\" $STICKY value=\"1\" type=\"checkbox\"></td><td>$STICKYMSG</td></tr></tbody></table><br><br>"

#Show recursive options if the item is a directory
if [ $DIRECTORY = yes ]
then
echo "<table class=\"standard\" style=\"text-align: left; width: 400px;\" border=\"0\" cellpadding=\"2\" cellspacing=\"2\"><tbody>"
echo "<tr><td style=\"width: 120px;\">$RECURSEMSG</td><td><input name=\"RECURSIVE\" value=\"1\" type=\"checkbox\"></td></tr>"
echo "<tr><td>$EXECMSG2</td><td><input name=\"EXECRECURSE\" value=\"1\" type=\"checkbox\"></td></tr></tbody></table>"
fi
else
ssh -x -o PasswordAuthentication=no $SERVER '
OWNER=`ls -d -l "'$LOCATION'" | cut -d" " -f3`
GROUP=`ls -d -l "'$LOCATION'" | cut -d" " -f4`
#Show ownership
echo "<table class=\"standard\" style=\"text-align: left; \" border=\"0\" cellpadding=\"2\" cellspacing=\"2\">
<tbody>
<tr><td style=\"width: 120px;\">'$USERMSG'</td><td><input tabindex= \"1\" name=\" OWNER \" value=\"$OWNER\" size=\"20\" type=\"text\"></td></tr>
<tr><td>'$GROUPMSG'</td><td><input tabindex= \"2\" name=\" GROUP \" value=\"$GROUP\" size=\"20\" type=\"text\"></td><td></td></tr>
</tbody></table><input name=\" ownerend \" value=\"ownerend\" type=\"hidden\"<br>
"
echo '$PERMISSIONSMSG'"<br><br>"
#Get current permissions of the item
CURRENT_PERMS=`ls -d -l "'$LOCATION'" | cut -d" " -f1`

DIRECTORY=no
[ ${CURRENT_PERMS:0:1} = d ] && DIRECTORY=yes
[ ${CURRENT_PERMS:1:1} = r ] && USERREAD="checked=checked"
[ ${CURRENT_PERMS:2:1} = w ] && USERWRITE="checked=checked"
[ ${CURRENT_PERMS:3:1} = x ] && USEREXEC="checked=checked"
[ ${CURRENT_PERMS:3:1} = s ] && USEREXEC="checked=checked"
[ ${CURRENT_PERMS:3:1} = s ] && SETUID="checked=checked"

[ ${CURRENT_PERMS:4:1} = r ] && GROUPREAD="checked=checked"
[ ${CURRENT_PERMS:5:1} = w ] && GROUPWRITE="checked=checked"
[ ${CURRENT_PERMS:6:1} = x ] && GROUPEXEC="checked=checked"
[ ${CURRENT_PERMS:6:1} = s ] && GROUPEXEC="checked=checked"
[ ${CURRENT_PERMS:6:1} = s ] && SETGID="checked=checked"

[ ${CURRENT_PERMS:7:1} = r ] && OTHERREAD="checked=checked"
[ ${CURRENT_PERMS:8:1} = w ] && OTHERWRITE="checked=checked"
[ ${CURRENT_PERMS:9:1} = x ] && OTHEREXEC="checked=checked"
[ ${CURRENT_PERMS:9:1} = t ] && OTHEREXEC="checked=checked"
[ ${CURRENT_PERMS:9:1} = t ] && STICKY="checked=checked"
EXECENTERMSG='$ENTERMSG'
[ $DIRECTORY = no ] && EXECENTERMSG='$EXECMSG'

echo "<table class=\"standard\" style=\"text-align: left; width: 400px;\" border=\"0\" cellpadding=\"2\" cellspacing=\"2\"><tbody>
<tr><td style=\"width: 120px;\"></td><td>'$READMSG'</td><td>'$WRITEMSG'</td><td>$EXECENTERMSG</td><td>'$SPECIALMSG'</td></tr>
<tr><td>'$USERMSG'</td><td><input name=\"USERREAD\" $USERREAD value=\"1\" type=\"checkbox\"></td><td><input name=\"USERWRITE\" $USERWRITE value=\"1\" type=\"checkbox\"></td><td><input name=\"USEREXEC\" $USEREXEC value=\"1\" type=\"checkbox\"></td><td><input name=\"SETUID\" $SETUID value=\"1\" type=\"checkbox\"></td><td>$SETUIDMSG</td></tr>
<tr><td>'$GROUPMSG'</td><td><input name=\"GROUPREAD\" $GROUPREAD value=\"1\" type=\"checkbox\"></td><td><input name=\"GROUPWRITE\" $GROUPWRITE value=\"1\" type=\"checkbox\"></td><td><input name=\"GROUPEXEC\" $GROUPEXEC value=\"1\" type=\"checkbox\"></td><td><input name=\"SETGID\" $SETGID value=\"1\" type=\"checkbox\"></td><td>$SETGIDMSG</td></tr>
<tr><td>'$OTHERMSG'</td><td><input name=\"OTHERREAD\" $OTHERREAD value=\"1\" type=\"checkbox\"></td><td><input name=\"OTHERWRITE\" $OTHERWRITE value=\"1\" type=\"checkbox\"></td><td><input name=\"OTHEREXEC\" $OTHEREXEC value=\"1\" type=\"checkbox\"></td><td><input name=\"STICKY\" $STICKY value=\"1\" type=\"checkbox\"></td><td>$STICKYMSG</td></tr></tbody></table><br><br>"

#Show recursive options if the item is a directory
if [ $DIRECTORY = yes ]
then
echo "<table class=\"standard\" style=\"text-align: left; width: 400px;\" border=\"0\" cellpadding=\"2\" cellspacing=\"2\"><tbody>"
echo "<tr><td style=\"width: 120px;\">'$RECURSEMSG'</td><td><input name=\"RECURSIVE\" value=\"1\" type=\"checkbox\"></td></tr>"
echo "<tr><td>'$EXECMSG2'</td><td><input name=\"EXECRECURSE\" value=\"1\" type=\"checkbox\"></td></tr></tbody></table>"
fi
'
fi

echo '</div><div id="submitbox"><input type="image" src="/images/submenus/file/go.gif" name="_ACTION_" value="'$SERVER'_REALLYSETPERMS_'$LOCATION'">'
echo '<A HREF="javascript:history.go(-1)"> <IMG SRC="/images/submenus/file/back.gif" BORDER="0"></A>'
}


function really_move_item {
ITEMMOVE=""
#Display location
show_directory
}

function really_copy_item {
ITEMMOVE=""
#Display location
show_directory
}

function move_item {
convert_special_chars
ITEMTOCOPY=$LOCATION
ITEMTOCOPY2=$ITEMTOCOPY
FILENAME=`basename "$LOCATION"`
LOCATION=`echo "$LOCATION" | sed "s/\/$FILENAME//g"`
ITEMTOCOPY=`echo $ITEMTOCOPY | sed 's/_/UNDERSCORE/g'`
echo '<input name="ITEMCOPY     " value="'$ITEMTOCOPY'" type="hidden">'
echo '<input name="     ENDENTRY" value="" type="hidden">'
echo "$ITEMTOCOPY2" - $MOVEMSG2 '<input type="image" src="'$ICON9'" name="_ACTION_" value="'$SERVER'_REALLYMOVE_'$LOCATION'">'
echo $COPYMSG2 '<input type="image" src="'$ICON4'" name="_ACTION_" value="'$SERVER'_REALLYCOPY_'$LOCATION'">'
echo $CANCELMSG '<input type="image" src="'$ICON8'" name="_ACTION_" value="'$SERVER'_CANCELCOPY_'$LOCATION'"><br>'
ITEMMOVE=""
#Browse to directory to move to
show_directory
}

function cancel_copy_item {
ITEMMOVE=""
show_directory
}

function really_rename_item {

LOCATION=`echo "$LOCATION" | sed 's/NEWNAME/:/g'`

NEWNAME=`echo "$LOCATION" | cut -d: -f2`
LOCATION=`echo "$LOCATION" | cut -d: -f1`

#Rename the item
convert_special_chars
CURRENTNAME=`basename "$LOCATION"`
CURRENTLOCATION=`echo "$LOCATION" | sed "s/\/$CURRENTNAME//g"`

#Go to current directory
LOCATION="$CURRENTLOCATION"
show_directory
}

function rename_item {
#Check to see that item is not on the protected list
if [ `echo ${LOCATION_LIST[@]:0} | grep -c -w "$LOCATION"` -gt 0 ]
then
echo $ERRORMSG2'<br>'
echo '<A HREF="javascript:history.go(-1)"> <IMG SRC="/images/submenus/file/back.gif" BORDER="0"></A><br>'
else
#Confirm rename of item.
convert_special_chars
RENAMEFILE=`basename "$LOCATION"`
echo '<b>'$RENAMEMSG'</b>' $LOCATION'<br><br>'
echo '<input type="image" src="/images/submenus/file/go.gif" name="_ACTION_" value="'$SERVER'_REALLYRENAME_'$LOCATION'">'
echo '<A HREF="javascript:history.go(-1)"> <IMG SRC="/images/submenus/file/back.gif" BORDER="0"></A><br><br>'
echo '<table class="standard" style="text-align: left;" border="0" cellpadding="2" cellspacing="2"><tbody>
<tr><td style="width: 180px;">'$CURRENTNAMEMSG'</td><td>'$RENAMEFILE'<td></tr>
<tr><td>'$NEWNAMEMSG'</td><td><input name="NEWNAME" type="text" size="20" value="'$RENAMEFILE'"></td></tr></tbody></table>'
fi
}

function really_edit_item {
LOCATION=`echo "$LOCATION" | sed 's/_/REPLACEUNDERSCORE/g'`
LOCATION=`echo "$LOCATION" | sed 's/TEXTDATA/_/g'`
TEXTCONTENT=`echo "$LOCATION" | cut -d'_' -f2-`
LOCATION=`echo "$LOCATION" | cut -d'_' -f1 | sed 's/REPLACEUNDERSCORE/_/g'`
convert_special_chars
#echo location is "$LOCATION"'<br>'
convert_special_chars3
#echo text content is "$TEXTCONTENT"'<br>'
LOCATIONITEM=`basename "$LOCATION"`
LOCATION=`echo "$LOCATION" | sed "s/\/$LOCATIONITEM//g"`
#Go to current directory
show_directory
}

function edit_item {
convert_special_chars
echo '<b>'$EDITMSG'</b>' $LOCATION'<br><br>'
echo '<input type="image" src="/images/submenus/file/go.gif" name="_ACTION_" value="'$SERVER'_REALLYEDIT_'$LOCATION'">'
echo '<A HREF="javascript:history.go(-1)"> <IMG SRC="/images/submenus/file/back.gif" BORDER="0"></A>'
echo '<textarea cols="97" rows="40" name="TEXTDATA">'
#Get data from text file
if [ $SERVER = xen ]
then
cat "$LOCATION"
else
ssh -x -o PasswordAuthentication=no $SERVER '
cat "'$LOCATION'"
'
fi
echo '</textarea>'
}

function really_create_dir {
LOCATION=`echo "$LOCATION" | sed 's/NEWFOLDER/:/g'`
NEWFOLDER=`echo "$LOCATION" | cut -d: -f2`
LOCATION=`echo "$LOCATION" | cut -d: -f1`
show_directory
}

function create_dir {
[ $LOCATION'null' = null ] && LOCATION=/
convert_special_chars
echo '<b>'$CREATEFOLDERMSG'</b><br><br>'
echo '<input type="image" src="/images/submenus/file/go.gif" name="_ACTION_" value="'$SERVER'_REALLYCREATEDIR_'$LOCATION'">'
echo '<A HREF="javascript:history.go(-1)"> <IMG SRC="/images/submenus/file/back.gif" BORDER="0"></A><br><br>'
echo '<table class="standard" style="text-align: left;" border="0" cellpadding="2" cellspacing="2"><tbody>
<tr><td style="width: 180px;">'$CURRENTLOCATIONMSG'</td><td>'$LOCATION'<td></tr>
<tr><td>'$NEWFOLDERMSG'</td><td><input name="NEWFOLDER" type="text" size="20"></td></tr></tbody></table>'
}

[ $ACTION = ENTER ] && show_directory
[ $ACTION = DELETE ] && delete_item
[ $ACTION = REALLYDELETE ] && really_delete_item
[ $ACTION = SETPERMS ] && set_perms
[ $ACTION = REALLYSETPERMS ] && really_set_perms
[ $ACTION = MOVE ] && move_item
[ $ACTION = REALLYMOVE ] && really_move_item
[ $ACTION = REALLYCOPY ] && really_copy_item
[ $ACTION = CANCELCOPY ] && cancel_copy_item
[ $ACTION = RENAME ] && rename_item
[ $ACTION = REALLYRENAME ] && really_rename_item
[ $ACTION = EDIT ] && edit_item
[ $ACTION = REALLYEDIT ] && really_edit_item
[ $ACTION = CREATEDIR ] && create_dir
[ $ACTION = REALLYCREATEDIR ] && really_create_dir
exit
